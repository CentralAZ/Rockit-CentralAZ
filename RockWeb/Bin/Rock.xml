<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Rock</name>
    </assembly>
    <members>
        <member name="T:Rock.Address.SmartyStreets">
            <summary>
            The standardization/geocoding service from <a href="http://dev.virtualearth.net">Bing</a>
            </summary>
        </member>
        <member name="T:Rock.Address.VerificationComponent">
            <summary>
            The base class for all address verification components
            </summary>
        </member>
        <member name="T:Rock.Extension.Component">
            <summary>
            Abstract class that custom component classes should derive from.  
            <example>
            The derived class should define the following type attributes
            </example>
            <code>
                [Description("<i>description of component</i>")]
                [Export( typeof( Component ) )]
                [ExportMetadata( "ComponentName", "<i>Name of Component</i>" )]
            </code>
            <example>
            The derived class can also optionally define one or more property type attributes
            </example>
            <code>
                [Rock.Attribute.Property( 1, "License Key", "The Required License Key" )]
            </code>
            <example>
            To get the value of a property, the derived class can use the AttributeValues property
            </example>
            <code>
                string licenseKey = AttributeValues["LicenseKey"].Value;
            </code>
            </summary>
        </member>
        <member name="T:Rock.Attribute.IHasAttributes">
            <summary>
            Represents any class that supports having attributes
            </summary>
        </member>
        <member name="M:Rock.Attribute.IHasAttributes.GetAttributeValue(System.String)">
            <summary>
            Gets the first value of an attribute key.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Attribute.IHasAttributes.GetAttributeValues(System.String)">
            <summary>
            Gets the first value of an attribute key - splitting that delimited value into a list of strings.
            </summary>
            <param name="key">The key.</param>
            <returns>A list of string values or an empty list if none exist.</returns>
        </member>
        <member name="M:Rock.Attribute.IHasAttributes.SetAttributeValue(System.String,System.String)">
            <summary>
            Sets the first value of an attribute key in memory.  Note, this will not persist value to database
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="P:Rock.Attribute.IHasAttributes.Id">
            <summary>
            Gets the id.
            </summary>
        </member>
        <member name="P:Rock.Attribute.IHasAttributes.Attributes">
            <summary>
            List of attributes associated with the object.  This property will not include the attribute values.
            The <see cref="P:Rock.Attribute.IHasAttributes.AttributeValues"/> property should be used to get attribute values.  Dictionary key
            is the attribute key, and value is the cached attribute
            </summary>
            <value>
            The attributes.
            </value>
        </member>
        <member name="P:Rock.Attribute.IHasAttributes.AttributeValues">
            <summary>
            Dictionary of all attributes and their value.  Key is the attribute key, and value is the values
            associated with the attribute and object instance
            </summary>
            <value>
            The attribute values.
            </value>
        </member>
        <member name="P:Rock.Attribute.IHasAttributes.AttributeValueDefaults">
            <summary>
            Gets the attribute value defaults.  This property can be used by a subclass to override the parent class's default
            value for an attribute
            </summary>
            <value>
            The attribute value defaults.
            </value>
        </member>
        <member name="T:Rock.Security.ISecured">
            <summary>
            Represents a securable object.  Note each ISecured object must also expose a static Read(int id) method if the object
            types will be used in a grid with a SecureField column
            </summary>
        </member>
        <member name="M:Rock.Security.ISecured.IsAuthorized(System.String,Rock.Model.Person)">
            <summary>
            Return <c>true</c> if the user is authorized to perform the selected action on this object.
            </summary>
            <param name="action">The action.</param>
            <param name="person">The person.</param>
            <returns>
              <c>true</c> if the specified action is authorized; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Rock.Security.ISecured.IsAllowedByDefault(System.String)">
            <summary>
            If a user or role is not specifically allowed or denied to perform the selected action,
            return <c>true</c> if they should be allowed anyway or <c>false</c> if not.
            </summary>
            <param name="action">The action.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Security.ISecured.IsPrivate(System.String,Rock.Model.Person)">
            <summary>
            Determines whether the specified action is private (Only the current user has access).
            </summary>
            <param name="action">The action.</param>
            <param name="person">The person.</param>
            <returns>
              <c>true</c> if the specified action is private; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Rock.Security.ISecured.MakePrivate(System.String,Rock.Model.Person)">
            <summary>
            Makes the action on the current entity private (Only the current user will have access).
            </summary>
            <param name="action">The action.</param>
            <param name="person">The person.</param>
        </member>
        <member name="M:Rock.Security.ISecured.MakeUnPrivate(System.String,Rock.Model.Person)">
            <summary>
            If action on the current entity is private, removes security that made it private.
            </summary>
            <param name="action">The action.</param>
            <param name="person">The person.</param>
        </member>
        <member name="P:Rock.Security.ISecured.TypeId">
            <summary>
            Gets the Entity Type ID for this entity.
            </summary>
            <value>
            The type id.
            </value>
        </member>
        <member name="P:Rock.Security.ISecured.TypeName">
            <summary>
            The auth entity. Classes that implement the <see cref="T:Rock.Security.ISecured"/> interface should return
            a value that is unique across all <see cref="T:Rock.Security.ISecured"/> classes.  Typically this is the 
            qualified name of the class. 
            </summary>
        </member>
        <member name="P:Rock.Security.ISecured.Id">
            <summary>
            The Id
            </summary>
        </member>
        <member name="P:Rock.Security.ISecured.ParentAuthority">
            <summary>
            A parent authority.  If a user is not specifically allowed or denied access to 
            this object, Rock will check access to the parent authority specified by this property.
            </summary>
        </member>
        <member name="P:Rock.Security.ISecured.SupportedActions">
            <summary>
            A dictionary of actions that this class supports and the description of each.
            </summary>
        </member>
        <member name="M:Rock.Extension.Component.GetAttributeValue(System.String)">
            <summary>
            Gets the first value of an attribute key.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Extension.Component.GetAttributeValues(System.String)">
            <summary>
            Gets the first value of an attribute key - splitting that delimited value into a list of strings.
            </summary>
            <param name="key">The key.</param>
            <returns>A list of values or an empty list if none exists.</returns>
        </member>
        <member name="M:Rock.Extension.Component.SetAttributeValue(System.String,System.String)">
            <summary>
            Sets the first value of an attribute key in memory.  Note, this will not persist value to database
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Rock.Extension.Component.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Extension.Component"/> class.
            </summary>
        </member>
        <member name="M:Rock.Extension.Component.IsAuthorized(System.String,Rock.Model.Person)">
            <summary>
            Return <c>true</c> if the user is authorized to perform the selected action on this object.
            </summary>
            <param name="action">The action.</param>
            <param name="person">The person.</param>
            <returns>
              <c>true</c> if the specified action is authorized; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Rock.Extension.Component.IsAllowedByDefault(System.String)">
            <summary>
            If a user or role is not specifically allowed or denied to perform the selected action,
            return <c>true</c> if they should be allowed anyway or <c>false</c> if not.
            </summary>
            <param name="action">The action.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Extension.Component.IsPrivate(System.String,Rock.Model.Person)">
            <summary>
            Determines whether the specified action is private (Only the current user has access).
            </summary>
            <param name="action">The action.</param>
            <param name="person">The person.</param>
            <returns>
              <c>true</c> if the specified action is private; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Rock.Extension.Component.MakePrivate(System.String,Rock.Model.Person)">
            <summary>
            Makes the action on the current entity private (Only the current user will have access).
            </summary>
            <param name="action">The action.</param>
            <param name="person">The person.</param>
        </member>
        <member name="M:Rock.Extension.Component.MakeUnPrivate(System.String,Rock.Model.Person)">
            <summary>
            If action on the current entity is private, removes security that made it private.
            </summary>
            <param name="action">The action.</param>
            <param name="person">The person.</param>
        </member>
        <member name="P:Rock.Extension.Component.Id">
            <summary>
            Gets the id.
            </summary>
        </member>
        <member name="P:Rock.Extension.Component.Attributes">
            <summary>
            List of attributes associated with the object.  This property will not include the attribute values.
            The <see cref="P:Rock.Extension.Component.AttributeValues"/> property should be used to get attribute values.  Dictionary key
            is the attribute key, and value is the cached attribute
            </summary>
            <value>
            The attributes.
            </value>
        </member>
        <member name="P:Rock.Extension.Component.AttributeValues">
            <summary>
            Dictionary of all attributes and their value.  Key is the attribute key, and value is the values
            associated with the attribute and object instance
            </summary>
            <value>
            The attribute values.
            </value>
        </member>
        <member name="P:Rock.Extension.Component.AttributeValueDefaults">
            <summary>
            Gets the attribute value defaults.
            </summary>
            <value>
            The attribute defaults.
            </value>
        </member>
        <member name="P:Rock.Extension.Component.Order">
            <summary>
            Gets the order.
            </summary>
            <value>
            The order.
            </value>
        </member>
        <member name="P:Rock.Extension.Component.IsActive">
            <summary>
            Gets a value indicating whether this instance is active.
            </summary>
            <value>
              <c>true</c> if this instance is active; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Extension.Component.EntityType">
            <summary>
            Gets the type of the entity.
            </summary>
            <value>
            The type of the entity.
            </value>
        </member>
        <member name="P:Rock.Extension.Component.TypeId">
            <summary>
            Gets the Entity Type ID for this entity.
            </summary>
            <value>
            The type id.
            </value>
        </member>
        <member name="P:Rock.Extension.Component.TypeGuid">
            <summary>
            Gets the Entity type GUID for this entity
            </summary>
            <value>
            The type GUID.
            </value>
        </member>
        <member name="P:Rock.Extension.Component.TypeName">
            <summary>
            The auth entity. Classes that implement the <see cref="T:Rock.Security.ISecured"/> interface should return
            a value that is unique across all <see cref="T:Rock.Security.ISecured"/> classes.  Typically this is the
            qualified name of the class.
            </summary>
        </member>
        <member name="P:Rock.Extension.Component.ParentAuthority">
            <summary>
            A parent authority.  If a user is not specifically allowed or denied access to
            this object, Rock will check access to the parent authority specified by this property.
            </summary>
        </member>
        <member name="P:Rock.Extension.Component.SupportedActions">
            <summary>
            A dictionary of actions that this class supports and the description of each.
            </summary>
        </member>
        <member name="M:Rock.Address.VerificationComponent.VerifyLocation(Rock.Model.Location,System.Boolean,System.String@)">
            <summary>
            Abstract method for verifying a location.  Derived classes should implement
            this method to perform an verification action on an address (i.e. standardize, geocode, etc.).
            </summary>
            <param name="location">The location.</param>
            <param name="reVerify">Should location be reverified even if it has already been succesfully verified</param>
            <param name="result">The result code unique to the service.</param>
            <returns>
            True/False value of whether the verification was successfull or not
            </returns>
        </member>
        <member name="M:Rock.Address.SmartyStreets.VerifyLocation(Rock.Model.Location,System.Boolean,System.String@)">
            <summary>
            Standardizes and Geocodes an address using Bing service
            </summary>
            <param name="location">The location.</param>
            <param name="reVerify">Should location be reverified even if it has already been succesfully verified</param>
            <param name="result">The result code unique to the service.</param>
            <returns>
            True/False value of whether the verification was successfull or not
            </returns>
        </member>
        <member name="T:Rock.Address.VerificationContainer">
            <summary>
            Singleton class that uses MEF to load and cache all of the VerificationComponent classes
            </summary>
        </member>
        <member name="T:Rock.Extension.Container`2">
            <summary>
            Singleton generic class that uses MEF to load and cache all of the component classes
            </summary>
        </member>
        <member name="T:Rock.Extension.IContainer">
            <summary>
            Interface for MEF Container
            </summary>
        </member>
        <member name="M:Rock.Extension.IContainer.Refresh">
            <summary>
            Refreshes the components.
            </summary>
        </member>
        <member name="P:Rock.Extension.IContainer.Dictionary">
            <summary>
            Gets the component name and attributes.
            </summary>
        </member>
        <member name="M:Rock.Extension.Container`2.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Rock.Extension.Container`2.Refresh">
            <summary>
            Forces a reloading of all the GeocodeService classes
            </summary>
        </member>
        <member name="M:Rock.Extension.Container`2.Dispose">
            <summary>
            Dispose object
            </summary>
        </member>
        <member name="M:Rock.Extension.Container`2.Dispose(System.Boolean)">
            <summary>
            Dispose
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="P:Rock.Extension.Container`2.Components">
            <summary>
            Gets the componentss.
            </summary>
        </member>
        <member name="P:Rock.Extension.Container`2.Dictionary">
            <summary>
            Gets the component names and their attributes
            </summary>
        </member>
        <member name="P:Rock.Extension.Container`2.MEFComponents">
            <summary>
            Gets or sets the components.
            </summary>
            <value>
            The components.
            </value>
        </member>
        <member name="M:Rock.Address.VerificationContainer.GetComponent(System.Type)">
            <summary>
            Gets the component.
            </summary>
            <param name="verificationComponentType">Type of the verification component.</param>
            <returns></returns>
        </member>
        <member name="P:Rock.Address.VerificationContainer.Instance">
            <summary>
            Gets the instance.
            </summary>
        </member>
        <member name="T:Rock.Address.Bing">
            <summary>
            The standardization/geocoding service from <a href="http://dev.virtualearth.net">Bing</a>
            </summary>
        </member>
        <member name="M:Rock.Address.Bing.VerifyLocation(Rock.Model.Location,System.Boolean,System.String@)">
            <summary>
            Standardizes and Geocodes an address using Bing service
            </summary>
            <param name="location">The location.</param>
            <param name="reVerify">Should location be reverified even if it has already been succesfully verified</param>
            <param name="result">The result code unique to the service.</param>
            <returns>
            True/False value of whether the verification was successfull or not
            </returns>
        </member>
        <member name="P:Rock.Address.Point.Coordinates">
            <summary>
            Latitude,Longitude
            </summary>
        </member>
        <member name="T:Rock.Attribute.AccountsFieldAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="T:Rock.Attribute.FieldAttribute">
            <summary>
            A class Attribute that can be used by any object that inherits from <see cref="T:Rock.Attribute.IHasAttributes"/> to specify what attributes it needs.  The 
            Framework provides methods in the <see cref="T:Rock.Attribute.Helper"/> class to create, read, and update the attributes
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:Rock.Attribute.FieldAttribute.#ctor(System.String,System.String,System.Boolean,System.String,System.String,System.Int32,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Attribute.FieldAttribute"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="description">The description.</param>
            <param name="required">if set to <c>true</c> [required].</param>
            <param name="defaultValue">The default value.</param>
            <param name="category">The category.</param>
            <param name="order">The order.</param>
            <param name="key">The key.</param>
            <param name="fieldTypeAssembly">The field type assembly.</param>
            <param name="fieldTypeClass">The field type class.</param>
        </member>
        <member name="P:Rock.Attribute.FieldAttribute.Name">
            <summary>
            Gets or sets the user-friendly name of the attribute
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:Rock.Attribute.FieldAttribute.Description">
            <summary>
            Gets or sets the description of the attribute
            </summary>
            <value>
            The description.
            </value>
        </member>
        <member name="P:Rock.Attribute.FieldAttribute.IsRequired">
            <summary>
            Gets or sets a value indicating whether this instance is required.
            </summary>
            <value>
            <c>true</c> if this instance is required; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Attribute.FieldAttribute.DefaultValue">
            <summary>
            Gets or sets the default value of the attribute.  This is the value that will be used if a specific value has not yet been created
            </summary>
            <value>
            The default value.
            </value>
        </member>
        <member name="P:Rock.Attribute.FieldAttribute.Category">
            <summary>
            Gets or sets the category.
            </summary>
            <value>
            The category.
            </value>
        </member>
        <member name="P:Rock.Attribute.FieldAttribute.Order">
            <summary>
            Gets or sets the order of the attribute.
            </summary>
            <value>
            The order.
            </value>
        </member>
        <member name="P:Rock.Attribute.FieldAttribute.Key">
            <summary>
            Gets or sets the key.
            </summary>
            <value>
            The key.
            </value>
        </member>
        <member name="P:Rock.Attribute.FieldAttribute.FieldTypeAssembly">
            <summary>
            Gets or sets the assembly name of the <see cref="T:Rock.Field.IFieldType"/> to be used for the attribute
            </summary>
            <value>
            The field type assembly.
            </value>
        </member>
        <member name="P:Rock.Attribute.FieldAttribute.FieldTypeClass">
            <summary>
            Gets or sets the class name of the <see cref="T:Rock.Field.IFieldType"/> to be used for the attribute.
            </summary>
            <value>
            The field type class.
            </value>
        </member>
        <member name="P:Rock.Attribute.FieldAttribute.FieldConfigurationValues">
            <summary>
            Gets or sets the field configuration values.
            </summary>
            <value>
            The field configuration values.
            </value>
        </member>
        <member name="M:Rock.Attribute.AccountsFieldAttribute.#ctor(System.String,System.String,System.Boolean,System.String,System.String,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Attribute.AccountsFieldAttribute"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="description">The description.</param>
            <param name="required">if set to <c>true</c> [required].</param>
            <param name="defaultValue">The default value.</param>
            <param name="category">The category.</param>
            <param name="order">The order.</param>
            <param name="key">The key.</param>
        </member>
        <member name="T:Rock.Attribute.BooleanFieldAttribute">
            <summary>
            Field Attribute for selecting either true or false.
            </summary>
        </member>
        <member name="M:Rock.Attribute.BooleanFieldAttribute.#ctor(System.String,System.String,System.Boolean,System.String,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Attribute.BooleanFieldAttribute"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="description">The description.</param>
            <param name="defaultValue">if set to <c>true</c> [default value].</param>
            <param name="category">The category.</param>
            <param name="order">The order.</param>
            <param name="key">The key. (null means derive from name)</param>
        </member>
        <member name="M:Rock.Attribute.BooleanFieldAttribute.#ctor(System.String,System.String,System.String,System.String,System.Boolean,System.String,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Attribute.BooleanFieldAttribute"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="trueText">The true text.</param>
            <param name="falseText">The false text.</param>
            <param name="description">The description.</param>
            <param name="defaultValue">if set to <c>true</c> [default value].</param>
            <param name="category">The category.</param>
            <param name="order">The order.</param>
            <param name="key">The key.</param>
        </member>
        <member name="T:Rock.Attribute.DaysOfWeekFieldAttribute">
            <summary>
            Field Attribute to select Days of the week
            </summary>
        </member>
        <member name="M:Rock.Attribute.DaysOfWeekFieldAttribute.#ctor(System.String,System.String,System.Boolean,System.String,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Attribute.DaysOfWeekFieldAttribute"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="description">The description.</param>
            <param name="required">if set to <c>true</c> [required].</param>
            <param name="category">The category.</param>
            <param name="order">The order.</param>
            <param name="key">The key.</param>
        </member>
        <member name="T:Rock.Attribute.DayOfWeekFieldAttribute">
            <summary>
            Field Attribute to select a Day of the Week
            </summary>
        </member>
        <member name="M:Rock.Attribute.DayOfWeekFieldAttribute.#ctor(System.String,System.String,System.Boolean,System.DayOfWeek,System.String,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Attribute.DayOfWeekFieldAttribute"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="description">The description.</param>
            <param name="required">if set to <c>true</c> [required].</param>
            <param name="defaultValue">The default value.</param>
            <param name="category">The category.</param>
            <param name="order">The order.</param>
            <param name="key">The key.</param>
        </member>
        <member name="T:Rock.Attribute.CommunicationTemplateFieldAttribute">
            <summary>
            Field Attribute to select 0 or more communication templates
            </summary>
        </member>
        <member name="M:Rock.Attribute.CommunicationTemplateFieldAttribute.#ctor(System.String,System.String,System.Boolean,System.String,System.String,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Attribute.CommunicationTemplateFieldAttribute"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="description">The description.</param>
            <param name="required">if set to <c>true</c> [required].</param>
            <param name="defaultTemplateGuid">The default template unique identifier.</param>
            <param name="category">The category.</param>
            <param name="order">The order.</param>
            <param name="key">The key.</param>
        </member>
        <member name="T:Rock.Attribute.RemoteAuthsFieldAttribute">
            <summary>
            Field Attribute to select multiple MEF components
            </summary>
        </member>
        <member name="M:Rock.Attribute.RemoteAuthsFieldAttribute.#ctor(System.String,System.String,System.Boolean,System.String,System.String,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Attribute.ComponentFieldAttribute"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="description">The description.</param>
            <param name="required">if set to <c>true</c> [required].</param>
            <param name="defaultValue">The default value.</param>
            <param name="category">The category.</param>
            <param name="order">The order.</param>
            <param name="key">The key.</param>
        </member>
        <member name="T:Rock.Attribute.SiteFieldAttribute">
            <summary>
            Field Attribute to select a site.
            </summary>
        </member>
        <member name="M:Rock.Attribute.SiteFieldAttribute.#ctor(System.String,System.String,System.Boolean,System.String,System.String,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Attribute.SiteFieldAttribute"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="description">The description.</param>
            <param name="required">if set to <c>true</c> [required].</param>
            <param name="defaultSiteId">The default site id.</param>
            <param name="category">The category.</param>
            <param name="order">The order.</param>
            <param name="key">The key.</param>
        </member>
        <member name="T:Rock.Attribute.PersonBadgesFieldAttribute">
            <summary>
            Field Attribute to select 0 or more Person Badges
            </summary>
        </member>
        <member name="M:Rock.Attribute.PersonBadgesFieldAttribute.#ctor(System.String,System.String,System.Boolean,System.String,System.String,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Attribute.PersonBadgesFieldAttribute"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="description">The description.</param>
            <param name="required">if set to <c>true</c> [required].</param>
            <param name="defaultPersonBadgeGuids">The default person badge guids.</param>
            <param name="category">The category.</param>
            <param name="order">The order.</param>
            <param name="key">The key.</param>
        </member>
        <member name="T:Rock.Attribute.CampusFieldAttribute">
            <summary>
            Field Attribute to select 0 or 1 Campus
            </summary>
        </member>
        <member name="M:Rock.Attribute.CampusFieldAttribute.#ctor(System.String,System.String,System.Boolean,System.String,System.String,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Attribute.CampusFieldAttribute"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="description">The description.</param>
            <param name="required">if set to <c>true</c> [required].</param>
            <param name="defaultCampusId">The default campus id.</param>
            <param name="category">The category.</param>
            <param name="order">The order.</param>
            <param name="key">The key.</param>
        </member>
        <member name="T:Rock.Attribute.BinaryFileTypeFieldAttribute">
            <summary>
            Field Attribute to select a binary file type
            </summary>
        </member>
        <member name="M:Rock.Attribute.BinaryFileTypeFieldAttribute.#ctor(System.String,System.String,System.Boolean,System.String,System.String,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Attribute.BinaryFileTypeFieldAttribute"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="description">The description.</param>
            <param name="required">if set to <c>true</c> [required].</param>
            <param name="defaultBinaryFileTypeGuid">The default binary file type guid.</param>
            <param name="category">The category.</param>
            <param name="order">The order.</param>
            <param name="key">The key.</param>
        </member>
        <member name="T:Rock.Attribute.ComponentFieldAttribute">
            <summary>
            Field Attribute to select a MEF component
            </summary>
        </member>
        <member name="M:Rock.Attribute.ComponentFieldAttribute.#ctor(System.String,System.String,System.String,System.Boolean,System.String,System.String,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Attribute.ComponentFieldAttribute"/> class.
            </summary>
            <param name="mefContainerAssemblyName">Name of the mef container assembly.</param>
            <param name="name">The name.</param>
            <param name="description">The description.</param>
            <param name="required">if set to <c>true</c> [required].</param>
            <param name="defaultValue">The default value.</param>
            <param name="category">The category.</param>
            <param name="order">The order.</param>
            <param name="key">The key.</param>
        </member>
        <member name="T:Rock.Attribute.ComponentsFieldAttribute">
            <summary>
            Field Attribute to select multiple MEF components
            </summary>
        </member>
        <member name="M:Rock.Attribute.ComponentsFieldAttribute.#ctor(System.String,System.String,System.String,System.Boolean,System.String,System.String,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Attribute.ComponentFieldAttribute"/> class.
            </summary>
            <param name="mefContainerAssemblyName">Name of the mef container assembly.</param>
            <param name="name">The name.</param>
            <param name="description">The description.</param>
            <param name="required">if set to <c>true</c> [required].</param>
            <param name="defaultValue">The default value.</param>
            <param name="category">The category.</param>
            <param name="order">The order.</param>
            <param name="key">The key.</param>
        </member>
        <member name="T:Rock.Attribute.CategoryFieldAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Attribute.CategoryFieldAttribute.#ctor(System.String,System.String,System.Boolean,System.String,System.String,System.String,System.Boolean,System.String,System.String,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Attribute.CategoryFieldAttribute"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="description">The description.</param>
            <param name="allowMultiple">if set to <c>true</c> [allow multiple].</param>
            <param name="entityTypeName">Name of the entity type.</param>
            <param name="entityTypeQualifierColumn">The entity type qualifier column.</param>
            <param name="entityTypeQualifierValue">The entity type qualifier value.</param>
            <param name="required">if set to <c>true</c> [required].</param>
            <param name="defaultValue">The default value.</param>
            <param name="category">The category.</param>
            <param name="order">The order.</param>
            <param name="key">The key.</param>
        </member>
        <member name="T:Rock.Attribute.AttributeCategoryFieldAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Attribute.AttributeCategoryFieldAttribute.#ctor(System.String,System.String,System.Boolean,System.String,System.Boolean,System.String,System.String,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Attribute.CategoryFieldAttribute"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="description">The description.</param>
            <param name="allowMultiple">if set to <c>true</c> [allow multiple].</param>
            <param name="entityTypeName">Name of the entity type.</param>
            <param name="required">if set to <c>true</c> [required].</param>
            <param name="defaultValue">The default value.</param>
            <param name="category">The category.</param>
            <param name="order">The order.</param>
            <param name="key">The key.</param>
        </member>
        <member name="T:Rock.Attribute.CodeEditorFieldAttribute">
            <summary>
            Field Attribute for adding a code editor.
            </summary>
        </member>
        <member name="M:Rock.Attribute.CodeEditorFieldAttribute.#ctor(System.String,System.String,Rock.Web.UI.Controls.CodeEditorMode,Rock.Web.UI.Controls.CodeEditorTheme,System.Int32,System.Boolean,System.String,System.String,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Attribute.DateRangeFieldAttribute"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="description">The description.</param>
            <param name="mode">The mode.</param>
            <param name="theme">The theme.</param>
            <param name="height">The height.</param>
            <param name="required">if set to <c>true</c> [required].</param>
            <param name="defaultValue">The default value.</param>
            <param name="category">The category.</param>
            <param name="order">The order.</param>
            <param name="key">The key.</param>
        </member>
        <member name="T:Rock.Attribute.DefinedTypeFieldAttribute">
            <summary>
            Field Attribute to select a DefinedType.
            </summary>
        </member>
        <member name="M:Rock.Attribute.DefinedTypeFieldAttribute.#ctor(System.String,System.String,System.Boolean,System.String,System.String,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Attribute.DefinedValueFieldAttribute"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="description">The description.</param>
            <param name="required">if set to <c>true</c> [required].</param>
            <param name="defaultValue">The default value.</param>
            <param name="category">The category.</param>
            <param name="order">The order.</param>
            <param name="key">The key.</param>
        </member>
        <member name="T:Rock.Attribute.GroupLocationTypeFieldAttribute">
            <summary>
            Field Attribute to select a GroupLocationType DefinedValues for the given GroupType id.
            </summary>
        </member>
        <member name="M:Rock.Attribute.GroupLocationTypeFieldAttribute.#ctor(System.String,System.String,System.String,System.Boolean,System.String,System.String,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Attribute.DefinedValueFieldAttribute"/> class.
            </summary>
            <param name="groupTypeGuid">The group type GUID.</param>
            <param name="name">The name.</param>
            <param name="description">The description.</param>
            <param name="required">if set to <c>true</c> [required].</param>
            <param name="defaultValue">The default value.</param>
            <param name="category">The category.</param>
            <param name="order">The order.</param>
            <param name="key">The key.</param>
        </member>
        <member name="T:Rock.Attribute.InheritedAttribute">
            <summary>
            Helper class for inherited attributes
            </summary>
        </member>
        <member name="M:Rock.Attribute.InheritedAttribute.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Attribute.InheritedAttribute"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="description">The description.</param>
            <param name="url">The URL.</param>
            <param name="groupType">Type of the group.</param>
        </member>
        <member name="P:Rock.Attribute.InheritedAttribute.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:Rock.Attribute.InheritedAttribute.Key">
            <summary>
            Gets or sets the key.
            </summary>
            <value>
            The key.
            </value>
        </member>
        <member name="P:Rock.Attribute.InheritedAttribute.Description">
            <summary>
            Gets or sets the description.
            </summary>
            <value>
            The description.
            </value>
        </member>
        <member name="P:Rock.Attribute.InheritedAttribute.Url">
            <summary>
            Gets or sets the URL.
            </summary>
            <value>
            The URL.
            </value>
        </member>
        <member name="P:Rock.Attribute.InheritedAttribute.GroupType">
            <summary>
            Gets or sets the type of the group.
            </summary>
            <value>
            The type of the group.
            </value>
        </member>
        <member name="T:Rock.Attribute.TimeFieldAttribute">
            <summary>
            Field attribute for selecting a Time.
            </summary>
        </member>
        <member name="M:Rock.Attribute.TimeFieldAttribute.#ctor(System.String,System.String,System.Boolean,System.String,System.String,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Attribute.TimeFieldAttribute"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="description">The description.</param>
            <param name="required">if set to <c>true</c> [required].</param>
            <param name="defaultValue">The default value.</param>
            <param name="category">The category.</param>
            <param name="order">The order.</param>
            <param name="key">The key.</param>
        </member>
        <member name="T:Rock.Attribute.IntegerRangeFieldAttribute">
            <summary>
            Field Attribute for setting a numeric range that allows Integers.  For example, Min and Max, or Between.
            </summary>
        </member>
        <member name="M:Rock.Attribute.IntegerRangeFieldAttribute.#ctor(System.String,System.String,System.Boolean,System.String,System.String,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Attribute.IntegerRangeFieldAttribute"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="description">The description.</param>
            <param name="required">if set to <c>true</c> [required].</param>
            <param name="defaultValue">The default value.</param>
            <param name="category">The category.</param>
            <param name="order">The order.</param>
            <param name="key">The key.</param>
        </member>
        <member name="T:Rock.Attribute.DateRangeFieldAttribute">
            <summary>
            Field Attribute for setting a Date range.  For example, StartDate and EndDate
            </summary>
        </member>
        <member name="M:Rock.Attribute.DateRangeFieldAttribute.#ctor(System.String,System.String,System.Boolean,System.String,System.String,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Attribute.DateRangeFieldAttribute"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="description">The description.</param>
            <param name="required">if set to <c>true</c> [required].</param>
            <param name="defaultValue">The default value.</param>
            <param name="category">The category.</param>
            <param name="order">The order.</param>
            <param name="key">The key.</param>
        </member>
        <member name="T:Rock.Attribute.DecimalRangeFieldAttribute">
            <summary>
            Field Attribute for setting a numeric range that allows Decimals.  For example, Min and Max, or Between.
            </summary>
        </member>
        <member name="M:Rock.Attribute.DecimalRangeFieldAttribute.#ctor(System.String,System.String,System.Boolean,System.String,System.String,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Attribute.DecimalRangeFieldAttribute"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="description">The description.</param>
            <param name="required">if set to <c>true</c> [required].</param>
            <param name="defaultValue">The default value.</param>
            <param name="category">The category.</param>
            <param name="order">The order.</param>
            <param name="key">The key.</param>
        </member>
        <member name="T:Rock.Attribute.LocationFieldAttribute">
            <summary>
            Field Attribute to set a location 
            </summary>
        </member>
        <member name="M:Rock.Attribute.LocationFieldAttribute.#ctor(System.String,System.String,System.Boolean,System.String,System.String,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Attribute.TextFieldAttribute"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="description">The description.</param>
            <param name="required">if set to <c>true</c> [required].</param>
            <param name="defaultValue">The default value.</param>
            <param name="category">The category.</param>
            <param name="order">The order.</param>
            <param name="key">The key.</param>
        </member>
        <member name="T:Rock.Attribute.GroupRoleFieldAttribute">
            <summary>
            Field Attribute to select 0 or 1 GroupType
            </summary>
        </member>
        <member name="M:Rock.Attribute.GroupRoleFieldAttribute.#ctor(System.String,System.String,System.String,System.Boolean,System.String,System.String,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Attribute.DefinedValueFieldAttribute"/> class.
            </summary>
            <param name="groupTypeGuid">The group type GUID.</param>
            <param name="name">The name.</param>
            <param name="description">The description.</param>
            <param name="required">if set to <c>true</c> [required].</param>
            <param name="defaultValue">The default value.</param>
            <param name="category">The category.</param>
            <param name="order">The order.</param>
            <param name="key">The key.</param>
        </member>
        <member name="T:Rock.Attribute.MemoFieldAttribute">
            <summary>
            A class Attribute that can be used by any oject that inherits from <see cref="T:Rock.Attribute.IHasAttributes"/> to specify what attributes it needs.  The 
            Framework provides methods in the <see cref="T:Rock.Attribute.Helper"/> class to create, read, and update the attributes
            </summary>
            <remarks>
            If using a custom <see cref="T:Rock.Field.IFieldType"/> make sure that the fieldtype has been added to Rock.
            </remarks>
        </member>
        <member name="M:Rock.Attribute.MemoFieldAttribute.#ctor(System.String,System.String,System.Boolean,System.String,System.String,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Attribute.TextFieldAttribute"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="description">The description.</param>
            <param name="required">if set to <c>true</c> [required].</param>
            <param name="defaultValue">The default value.</param>
            <param name="category">The category.</param>
            <param name="order">The order.</param>
            <param name="key">The key.</param>
        </member>
        <member name="T:Rock.Attribute.DecimalFieldAttribute">
            <summary>
            Field Attribute for setting a non-integer number with decimals.
            </summary>
        </member>
        <member name="M:Rock.Attribute.DecimalFieldAttribute.#ctor(System.String,System.String,System.Boolean,System.Double,System.String,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Attribute.DecimalFieldAttribute"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="description">The description.</param>
            <param name="required">if set to <c>true</c> [required].</param>
            <param name="defaultValue">The default value.</param>
            <param name="category">The category.</param>
            <param name="order">The order.</param>
            <param name="key">The key.</param>
        </member>
        <member name="T:Rock.Attribute.DateFieldAttribute">
            <summary>
            Field attribute for selecting a DateTime.
            </summary>
        </member>
        <member name="M:Rock.Attribute.DateFieldAttribute.#ctor(System.String,System.String,System.Boolean,System.String,System.String,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Attribute.DateFieldAttribute"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="description">The description.</param>
            <param name="required">if set to <c>true</c> [required].</param>
            <param name="defaultValue">The default value.</param>
            <param name="category">The category.</param>
            <param name="order">The order.</param>
            <param name="key">The key.</param>
        </member>
        <member name="T:Rock.Attribute.AccountFieldAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Attribute.AccountFieldAttribute.#ctor(System.String,System.String,System.Boolean,System.String,System.String,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Attribute.AccountFieldAttribute"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="description">The description.</param>
            <param name="required">if set to <c>true</c> [required].</param>
            <param name="defaultValue">The default value.</param>
            <param name="category">The category.</param>
            <param name="order">The order.</param>
            <param name="key">The key.</param>
        </member>
        <member name="T:Rock.Attribute.WorkflowTypeFieldAttribute">
            <summary>
            Field Attribute to select a workflow type
            </summary>
        </member>
        <member name="M:Rock.Attribute.WorkflowTypeFieldAttribute.#ctor(System.String,System.String,System.Boolean,System.String,System.String,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Attribute.CampusFieldAttribute"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="description">The description.</param>
            <param name="required">if set to <c>true</c> [required].</param>
            <param name="defaultWorkflowTypeGuid">The default binary file type guid.</param>
            <param name="category">The category.</param>
            <param name="order">The order.</param>
            <param name="key">The key.</param>
        </member>
        <member name="T:Rock.Attribute.GroupTypeFieldAttribute">
            <summary>
            Field Attribute to select 0 or 1 GroupType
            GroupType value stored as Guid
            </summary>
        </member>
        <member name="M:Rock.Attribute.GroupTypeFieldAttribute.#ctor(System.String,System.String,System.Boolean,System.String,System.String,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Attribute.GroupTypeFieldAttribute"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="description">The description.</param>
            <param name="required">if set to <c>true</c> [required].</param>
            <param name="defaultGroupTypeGuid">The default group type GUID.</param>
            <param name="category">The category.</param>
            <param name="order">The order.</param>
            <param name="key">The key.</param>
        </member>
        <member name="T:Rock.Attribute.EmailTemplateFieldAttribute">
            <summary>
            Field Attribute to select 0 or more GroupTypes
            </summary>
        </member>
        <member name="M:Rock.Attribute.EmailTemplateFieldAttribute.#ctor(System.String,System.String,System.Boolean,System.String,System.String,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Attribute.EmailTemplateFieldAttribute"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="description">The description.</param>
            <param name="required">if set to <c>true</c> [required].</param>
            <param name="defaultTemplateGuid">The default template unique identifier.</param>
            <param name="category">The category.</param>
            <param name="order">The order.</param>
            <param name="key">The key.</param>
        </member>
        <member name="T:Rock.Attribute.CustomCheckboxListFieldAttribute">
            <summary>
            Field Attribute for selecting an item from a checkbox list.
            </summary>
        </member>
        <member name="M:Rock.Attribute.CustomCheckboxListFieldAttribute.#ctor(System.String,System.String,System.String,System.Boolean,System.String,System.String,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Attribute.CustomCheckboxListFieldAttribute"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="description">The description.</param>
            <param name="listSource">The source of the values to display in a list.  Format is either 'value1,value2,value3,...', 'value1:text1,value2:text2,value3:text3,...', or a SQL Select statement that returns result set with a 'Value' and 'Text' column.</param>
            <param name="required">if set to <c>true</c> [required].</param>
            <param name="defaultValue">The default value.  If multiple values are supported (i.e. checkbox) each value should be delimited by a comma</param>
            <param name="category">The category.</param>
            <param name="order">The order.</param>
            <param name="key">The key.</param>
        </member>
        <member name="T:Rock.Attribute.CustomRadioListFieldAttribute">
            <summary>
            Field Attribute for selecting radio button options.
            </summary>
        </member>
        <member name="M:Rock.Attribute.CustomRadioListFieldAttribute.#ctor(System.String,System.String,System.String,System.Boolean,System.String,System.String,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Attribute.CustomRadioListFieldAttribute"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="description">The description.</param>
            <param name="listSource">The source of the values to display in a list.  Format is either 'value1,value2,value3,...', 'value1:text1,value2:text2,value3:text3,...', or a SQL Select statement that returns result set with a 'Value' and 'Text' column.</param>
            <param name="required">if set to <c>true</c> [required].</param>
            <param name="defaultValue">The default value.  If multiple values are supported (i.e. checkbox) each value should be delimited by a comma</param>
            <param name="category">The category.</param>
            <param name="order">The order.</param>
            <param name="key">The key.</param>
        </member>
        <member name="T:Rock.Attribute.CustomDropdownListFieldAttribute">
            <summary>
            Field Attribute for selecting an item from a drop down list.
            </summary>
        </member>
        <member name="M:Rock.Attribute.CustomDropdownListFieldAttribute.#ctor(System.String,System.String,System.String,System.Boolean,System.String,System.String,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Attribute.CustomDropdownListFieldAttribute"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="description">The description.</param>
            <param name="listSource">The source of the values to display in a list.  Format is either 'value1,value2,value3,...', 'value1:text1,value2:text2,value3:text3,...', or a SQL Select statement that returns result set with a 'Value' and 'Text' column.</param>
            <param name="required">if set to <c>true</c> [required].</param>
            <param name="defaultValue">The default value.  If multiple values are supported (i.e. checkbox) each value should be delimited by a comma</param>
            <param name="category">The category.</param>
            <param name="order">The order.</param>
            <param name="key">The key.</param>
        </member>
        <member name="T:Rock.Attribute.DefinedValueFieldAttribute">
            <summary>
            Field Attribute to select 0 or more DefinedValues for the given DefinedType id.
            </summary>
        </member>
        <member name="M:Rock.Attribute.DefinedValueFieldAttribute.#ctor(System.String,System.String,System.String,System.Boolean,System.Boolean,System.String,System.String,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Attribute.DefinedValueFieldAttribute"/> class.
            </summary>
            <param name="definedTypeGuid">The defined type GUID.</param>
            <param name="name">The name.</param>
            <param name="description">The description.</param>
            <param name="required">if set to <c>true</c> [required].</param>
            <param name="allowMultiple">if set to <c>true</c> [allow multiple].</param>
            <param name="defaultValue">The default value.</param>
            <param name="category">The category.</param>
            <param name="order">The order.</param>
            <param name="key">The key.</param>
        </member>
        <member name="T:Rock.Attribute.CampusesFieldAttribute">
            <summary>
            Field Attribute to select 0 or more Campuses
            </summary>
        </member>
        <member name="M:Rock.Attribute.CampusesFieldAttribute.#ctor(System.String,System.String,System.Boolean,System.String,System.String,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Attribute.CampusesFieldAttribute"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="description">The description.</param>
            <param name="required">if set to <c>true</c> [required].</param>
            <param name="defaultCampusIds">The default campus ids.</param>
            <param name="category">The category.</param>
            <param name="order">The order.</param>
            <param name="key">The key.</param>
        </member>
        <member name="T:Rock.Attribute.EntityTypeFieldAttribute">
            <summary>
            Field Attribute used to specify an EntityType
            Value returns EntityType.Name
            </summary>
        </member>
        <member name="M:Rock.Attribute.EntityTypeFieldAttribute.#ctor(System.String,System.String,System.Boolean,System.String,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Attribute.EntityTypeFieldAttribute"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="description">The description.</param>
            <param name="required">if set to <c>true</c> [required].</param>
            <param name="category">The category.</param>
            <param name="order">The order.</param>
            <param name="key">The key.</param>
        </member>
        <member name="M:Rock.Attribute.EntityTypeFieldAttribute.#ctor(System.String,System.Boolean,System.String,System.Boolean,System.String,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Attribute.EntityTypeFieldAttribute"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="includeGlobalAttributeOption">if set to <c>true</c> [include global attribute option].</param>
            <param name="description">The description.</param>
            <param name="required">if set to <c>true</c> [required].</param>
            <param name="category">The category.</param>
            <param name="order">The order.</param>
            <param name="key">The key.</param>
        </member>
        <member name="T:Rock.Attribute.GroupFieldAttribute">
            <summary>
            Field Attribute to select a single (or null) Group
            </summary>
        </member>
        <member name="M:Rock.Attribute.GroupFieldAttribute.#ctor(System.String,System.String,System.Boolean,System.Int32,System.String,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Attribute.GroupFieldAttribute"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="description">The description.</param>
            <param name="required">if set to <c>true</c> [required].</param>
            <param name="defaultGroupId">The default group id.</param>
            <param name="category">The category.</param>
            <param name="order">The order.</param>
            <param name="key">The key.</param>
        </member>
        <member name="T:Rock.Attribute.GroupTypesFieldAttribute">
            <summary>
            Field Attribute to select 0 or more GroupTypes
            Stored as a list of Guids
            </summary>
        </member>
        <member name="M:Rock.Attribute.GroupTypesFieldAttribute.#ctor(System.String,System.String,System.Boolean,System.String,System.String,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Attribute.GroupTypesFieldAttribute"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="description">The description.</param>
            <param name="required">if set to <c>true</c> [required].</param>
            <param name="defaultGroupTypeGuids">The default group type guids.</param>
            <param name="category">The category.</param>
            <param name="order">The order.</param>
            <param name="key">The key.</param>
        </member>
        <member name="T:Rock.Attribute.IntegerFieldAttribute">
            <summary>
            Field Attribute to set an integer.
            </summary>
        </member>
        <member name="M:Rock.Attribute.IntegerFieldAttribute.#ctor(System.String,System.String,System.Boolean,System.Int32,System.String,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Attribute.IntegerFieldAttribute"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="description">The description.</param>
            <param name="required">if set to <c>true</c> [required].</param>
            <param name="defaultValue">The default value.</param>
            <param name="category">The category.</param>
            <param name="order">The order.</param>
            <param name="key">The key.</param>
        </member>
        <member name="T:Rock.Attribute.LinkedPageAttribute">
            <summary>
            Field Attribute for selecting a "linked" page.
            </summary>
        </member>
        <member name="M:Rock.Attribute.LinkedPageAttribute.#ctor(System.String,System.String,System.Boolean,System.String,System.String,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Attribute.LinkedPageAttribute"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="description">The description.</param>
            <param name="required">if set to <c>true</c> [required].</param>
            <param name="defaultValue">The default value.</param>
            <param name="category">The category.</param>
            <param name="order">The order.</param>
            <param name="key">The key.</param>
        </member>
        <member name="T:Rock.Communication.Transport.MandrillSmtp">
            <summary>
            Sends a communication through SMTP protocol
            </summary>
        </member>
        <member name="T:Rock.Communication.TransportComponent">
            <summary>
            Base class for components that perform actions for a workflow
            </summary>
        </member>
        <member name="M:Rock.Communication.TransportComponent.Send(Rock.Model.Communication)">
            <summary>
            Sends the specified communication.
            </summary>
            <param name="communication">The communication.</param>
        </member>
        <member name="M:Rock.Communication.TransportComponent.Send(Rock.Model.SystemEmail,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.Dictionary{System.String,System.Object}},System.String,System.String)">
            <summary>
            Sends the specified template.
            </summary>
            <param name="template">The template.</param>
            <param name="recipients">The recipients.</param>
            <param name="appRoot">The application root.</param>
            <param name="themeRoot">The theme root.</param>
        </member>
        <member name="P:Rock.Communication.TransportComponent.CanTrackOpens">
            <summary>
            Gets a value indicating whether transport has ability to track recipients opening the communication.
            </summary>
            <value>
              <c>true</c> if transport can track opens; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Rock.Communication.Transport.MandrillSmtp.Send(Rock.Model.Communication)">
            <summary>
            Sends the specified communication.
            </summary>
            <param name="communication">The communication.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Rock.Communication.Transport.MandrillSmtp.Send(Rock.Model.SystemEmail,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.Dictionary{System.String,System.Object}},System.String,System.String)">
            <summary>
            Sends the specified template.
            </summary>
            <param name="template">The template.</param>
            <param name="recipients">The recipients.</param>
            <param name="appRoot"></param>
            <param name="themeRoot"></param>
        </member>
        <member name="P:Rock.Communication.Transport.MandrillSmtp.CanTrackOpens">
            <summary>
            Gets a value indicating whether transport has ability to track recipients opening the communication.
            </summary>
            <value>
            <c>true</c> if transport can track opens; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Rock.Communication.Transport.Twilio">
            <summary>
            Communication transport for sending SMS messages using Twilio
            </summary>
        </member>
        <member name="M:Rock.Communication.Transport.Twilio.Send(Rock.Model.Communication)">
            <summary>
            Sends the specified communication.
            </summary>
            <param name="communication">The communication.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Rock.Communication.Transport.Twilio.Send(Rock.Model.SystemEmail,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.Dictionary{System.String,System.Object}},System.String,System.String)">
            <summary>
            Sends the specified template.
            </summary>
            <param name="template">The template.</param>
            <param name="recipients">The recipients.</param>
            <param name="appRoot"></param>
            <param name="themeRoot"></param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Rock.Constants.SystemSettingKeys">
            <summary>
            This class holds Rock's well known System Setting keys.
            </summary>
        </member>
        <member name="F:Rock.Constants.SystemSettingKeys.ROCK_INSTANCE_ID">
            <summary>
            This system setting's guid represents a unique identifier for each installation of Rock.
            The value it stores is the current version of Rock for that installation.
            </summary>
        </member>
        <member name="F:Rock.Constants.SystemSettingKeys.ORG_LOC_GUID">
            <summary>
            This system setting is the guid for the organization's location record.
            </summary>
        </member>
        <member name="F:Rock.Constants.SystemSettingKeys.ORG_LOC_STATE">
            <summary>
            This system setting is the state for the organization's location record.
            </summary>
        </member>
        <member name="F:Rock.Constants.SystemSettingKeys.SAMPLEDATA_DATE">
            <summary>
            Holds the System Setting key for the sample data load date/time.
            </summary>
        </member>
        <member name="T:Rock.Field.IFieldType">
            <summary>
            Interface that a custom field type must implement
            </summary>
        </member>
        <member name="M:Rock.Field.IFieldType.FormatValue(System.Web.UI.Control,System.String,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.Boolean)">
            <summary>
            Formats the value based on the type and qualifiers
            </summary>
            <param name="parentControl">The parent control.</param>
            <param name="value">The value.</param>
            <param name="configurationValues">The configuration values.</param>
            <param name="condensed">if set to <c>true</c> [condensed].</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.IFieldType.IsValid(System.String,System.Boolean,System.String@)">
            <summary>
            Tests the value to ensure that it is a valid value.  If not, message will indicate why
            </summary>
            <param name="value">The value.</param>
            <param name="required">if set to <c>true</c> [required].</param>
            <param name="message">The message.</param>
            <returns>
              <c>true</c> if the specified value is valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Rock.Field.IFieldType.ConfigurationKeys">
            <summary>
            Gets a list of the configuration keys.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.IFieldType.ConfigurationControls">
            <summary>
            Creates the HTML controls required to configure this type of field
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.IFieldType.ConfigurationValues(System.Collections.Generic.List{System.Web.UI.Control})">
            <summary>
            Gets the configuration values
            </summary>
            <param name="controls">The controls.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.IFieldType.SetConfigurationValues(System.Collections.Generic.List{System.Web.UI.Control},System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue})">
            <summary>
            Sets the configuration values.
            </summary>
            <param name="controls">The controls.</param>
            <param name="configurationValues">The configuration values.</param>
        </member>
        <member name="M:Rock.Field.IFieldType.EditControl(System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.String)">
            <summary>
            Creates an HTML control.
            </summary>
            <param name="configurationValues">The configuration values.</param>
            <param name="id">The id.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.IFieldType.GetEditValue(System.Web.UI.Control,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue})">
            <summary>
            Reads the value of the control.
            </summary>
            <param name="control">The control.</param>
            <param name="configurationValues">The configuration values.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.IFieldType.SetEditValue(System.Web.UI.Control,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.String)">
            <summary>
            Sets the value.
            </summary>
            <param name="control">The control.</param>
            <param name="configurationValues">The configuration values.</param>
            <param name="value">The value.</param>
        </member>
        <member name="P:Rock.Field.IFieldType.AlignValue">
            <summary>
            Gets the align value that should be used when displaying value
            </summary>
        </member>
        <member name="E:Rock.Field.IFieldType.QualifierUpdated">
            <summary>
            Occurs when a qualifier is updated.
            </summary>
        </member>
        <member name="M:Rock.Field.IEntityFieldType.GetEditValueAsEntityId(System.Web.UI.Control,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue})">
            <summary>
            Gets the edit value as the IEntity.Id
            </summary>
            <param name="control">The control.</param>
            <param name="configurationValues">The configuration values.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.IEntityFieldType.SetEditValueFromEntityId(System.Web.UI.Control,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.Nullable{System.Int32})">
            <summary>
            Sets the edit value from IEntity.Id value
            </summary>
            <param name="control">The control.</param>
            <param name="configurationValues">The configuration values.</param>
            <param name="id">The identifier.</param>
        </member>
        <member name="T:Rock.Model.PluginMigrationService">
            <summary>
            PluginMigration Service class
            </summary>
        </member>
        <member name="T:Rock.Data.Service`1">
            <summary>
            Generic POCO service class
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Rock.Data.IService">
            <summary>
            Interface for all <see cref="T:Rock.Data.Service`1"/> classes
            </summary>
        </member>
        <member name="M:Rock.Data.IService.GetIds(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression)">
            <summary>
            Gets the ids.
            </summary>
            <param name="parameterExpression">The parameter expression.</param>
            <param name="whereExpression">The where expression.</param>
            <returns></returns>
        </member>
        <member name="P:Rock.Data.IService.ParameterExpression">
            <summary>
            Gets the parameter expression.
            </summary>
            <value>
            The parameter expression.
            </value>
        </member>
        <member name="P:Rock.Data.IService.Context">
            <summary>
            Gets the context.
            </summary>
            <value>
            The context.
            </value>
        </member>
        <member name="M:Rock.Data.Service`1.#ctor(Rock.Data.DbContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Data.Service`1"/> class.
            </summary>
            <param name="dbContext">The db context.</param>
        </member>
        <member name="M:Rock.Data.Service`1.Queryable">
            <summary>
            Gets an <see cref="T:System.Linq.IQueryable`1"/> list of all models
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rock.Data.Service`1.Queryable(System.String)">
            <summary>
            Gets an <see cref="T:System.Linq.IQueryable`1"/> list of all models
            with eager loading of properties specified in includes
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rock.Data.Service`1.Get(System.Int32)">
            <summary>
            Gets the model with the id value
            </summary>
            <param name="id">id</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Data.Service`1.Get(System.Guid)">
            <summary>
            Gets the model with the Guid value
            </summary>
            <param name="guid">The GUID.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Data.Service`1.Get(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression)">
            <summary>
            Gets a list of items that match the specified expression.
            </summary>
            <param name="parameterExpression">The parameter expression.</param>
            <param name="whereExpression">The where expression.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Data.Service`1.Get(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,Rock.Web.UI.Controls.SortProperty)">
            <summary>
            Gets a list of items that match the specified expression.
            </summary>
            <param name="parameterExpression">The parameter expression.</param>
            <param name="whereExpression">The where expression.</param>
            <param name="sortProperty">The sort property.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Data.Service`1.Get(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,Rock.Web.UI.Controls.SortProperty,System.Nullable{System.Int32})">
            <summary>
            Gets the specified parameter expression.
            </summary>
            <param name="parameterExpression">The parameter expression.</param>
            <param name="whereExpression">The where expression.</param>
            <param name="sortProperty">The sort property.</param>
            <param name="fetchTop">The fetch top.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Data.Service`1.GetIds(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression)">
            <summary>
            Gets the ids.
            </summary>
            <param name="parameterExpression">The parameter expression.</param>
            <param name="whereExpression">The where expression.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Data.Service`1.TryGet(System.Int32,`0@)">
            <summary>
            Trys to get the model with the id value
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rock.Data.Service`1.GetByIds(System.Collections.Generic.List{System.Int32})">
            <summary>
            Gets entities from a list of ids.
            </summary>
            <param name="ids">The ids.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Data.Service`1.GetByGuids(System.Collections.Generic.List{System.Guid})">
            <summary>
            Gets entities from a list of guids
            </summary>
            <param name="guids">The guids.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Data.Service`1.GetByEncryptedKey(System.String)">
            <summary>
            Gets the model by the public encrypted key.
            </summary>
            <param name="encryptedKey">The encrypted key.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Data.Service`1.GetByUrlEncodedKey(System.String)">
            <summary>
            Gets the model by URL encoded key.
            </summary>
            <param name="encodedKey">The encoded key.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Data.Service`1.GetByPublicKey(System.String)">
            <summary>
            Gets the model by the public un-encrypted key.
            </summary>
            <param name="publicKey">The public key.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Data.Service`1.Add(`0)">
            <summary>
            Adds the specified item.
            </summary>
            <param name="item">The item.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Data.Service`1.Reorder(System.Collections.Generic.List{`0},System.Int32,System.Int32)">
            <summary>
            Reorders the specified items.
            </summary>
            <param name="items">The items.</param>
            <param name="oldIndex">The old index.</param>
            <param name="newIndex">The new index.</param>
            <returns>List of Ids who's order changed</returns>
        </member>
        <member name="M:Rock.Data.Service`1.Delete(`0)">
            <summary>
            Deletes the specified item.  Will try to determine current person 
            alias from HttpContext.
            </summary>
            <param name="item">The item.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Data.Service`1.ExecuteQuery(System.String,System.Object[])">
            <summary>
            Creates a raw sql query that will return entities
            </summary>
            <param name="query">The query.</param>
            <param name="parameters">The parameters.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Rock.Data.Service`1.Any(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression)">
            <summary>
            Anies the specified parameter expression.
            </summary>
            <param name="parameterExpression">The parameter expression.</param>
            <param name="whereExpression">The where expression.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Data.Service`1.Transform(System.Linq.IQueryable{`0},Rock.Reporting.DataTransformComponent{`0},Rock.Web.UI.Controls.SortProperty)">
            <summary>
            Transforms the specified source.
            </summary>
            <param name="source">The source.</param>
            <param name="transformation">The transformation.</param>
            <param name="sortProperty">The sort property.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Data.Service`1.SetValues(`0,`0)">
            <summary>
            Copies the Values from a Source Entity into a Target Entity
            </summary>
            <param name="sourceItem">The source item.</param>
            <param name="targetItem">The target item.</param>
        </member>
        <member name="P:Rock.Data.Service`1.Context">
            <summary>
            Gets or sets the context.
            </summary>
            <value>
            The context.
            </value>
        </member>
        <member name="P:Rock.Data.Service`1.ErrorMessages">
            <summary>
            Gets or sets the save messages.
            </summary>
            <value>
            The save messages.
            </value>
        </member>
        <member name="P:Rock.Data.Service`1.ParameterExpression">
            <summary>
            Gets a LINQ expression parameter.
            </summary>
            <value>
            The parameter expression.
            </value>
        </member>
        <member name="M:Rock.Model.PluginMigrationService.#ctor(Rock.Data.RockContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.PluginMigrationService"/> class
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Rock.Model.PluginMigrationService.CanDelete(Rock.Model.PluginMigration,System.String@)">
            <summary>
            Determines whether this instance can delete the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="errorMessage">The error message.</param>
            <returns>
              <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Rock.Model.PluginMigrationExtensionMethods">
            <summary>
            Generated Extension Methods
            </summary>
        </member>
        <member name="M:Rock.Model.PluginMigrationExtensionMethods.Clone(Rock.Model.PluginMigration,System.Boolean)">
            <summary>
            Clones this PluginMigration object to a new PluginMigration object
            </summary>
            <param name="source">The source.</param>
            <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.PluginMigrationExtensionMethods.CopyPropertiesFrom(Rock.Model.PluginMigration,Rock.Model.PluginMigration)">
            <summary>
            Copies the properties from another PluginMigration object to this PluginMigration object
            </summary>
            <param name="target">The target.</param>
            <param name="source">The source.</param>
        </member>
        <member name="T:Rock.Model.PluginMigration">
            <summary>
            The plugin migrations that have bee run
            </summary>
        </member>
        <member name="T:Rock.Data.Model`1">
            <summary>
            Represents an entity that can be secured and have attributes. 
            </summary>
        </member>
        <member name="T:Rock.Data.Entity`1">
            <summary>
            Represents an entity object and is the base class for all model objects to inherit from
            </summary>
            <typeparam name="T">The Type entity that is being referenced <example>Entity&lt;Person&gt;</example></typeparam>
        </member>
        <member name="T:Rock.Data.IEntity">
            <summary>
            Interface for all code-first entitites
            </summary>
        </member>
        <member name="M:Rock.Data.IEntity.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Rock.Data.IEntity.Id">
            <summary>
            Gets or sets the id.
            </summary>
            <value>
            The id.
            </value>
        </member>
        <member name="P:Rock.Data.IEntity.Guid">
            <summary>
            Gets or sets the GUID.
            </summary>
            <value>
            The GUID.
            </value>
        </member>
        <member name="P:Rock.Data.IEntity.TypeId">
            <summary>
            Gets the Entity Type ID for this entity.
            </summary>
            <value>
            The type id.
            </value>
        </member>
        <member name="P:Rock.Data.IEntity.TypeName">
            <summary>
            Gets the unique type name of the entity.  Typically this is the qualified name of the class
            </summary>
            <value>
            The name of the entity type.
            </value>
        </member>
        <member name="P:Rock.Data.IEntity.EncryptedKey">
            <summary>
            Gets the encrypted key.
            </summary>
            <value>
            The encrypted key.
            </value>
        </member>
        <member name="P:Rock.Data.IEntity.ContextKey">
            <summary>
            Gets the context key.
            </summary>
            <value>
            The context key.
            </value>
        </member>
        <member name="P:Rock.Data.IEntity.ValidationResults">
            <summary>
            Gets the validation results.
            </summary>
            <value>
            The validation results.
            </value>
        </member>
        <member name="P:Rock.Data.IEntity.IsValid">
            <summary>
            Gets a value indicating whether this instance is valid.
            </summary>
            <value>
              <c>true</c> if this instance is valid; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Rock.Data.Entity`1.Clone">
            <summary>
            Creates a deep copy of this entity object, including all child objects.
            </summary>
            <returns>
            A complete copy of the entity object
            </returns>
        </member>
        <member name="M:Rock.Data.Entity`1.ToDictionary">
            <summary>
            Creates a dictionary containing the majority of the entity object's properties. The only properties that are excluded
            are the Id, Guid and Order.  
            </summary>
            <returns>A <see cref="T:System.Collections.Generic.Dictionary`2"/> that represents the current entity object. Each <see cref="T:System.Collections.Generic.KeyValuePair`2"/> includes the property
            name as the key and the property value as the value.</returns>
        </member>
        <member name="M:Rock.Data.Entity`1.FromDictionary(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Populates the current entity object with the contents of the current entity object.
            </summary>
            <param name="properties">A <see cref="T:System.Collections.Generic.Dictionary`2"/> that contains <see cref="T:System.Collections.Generic.KeyValuePair`2">KeyValuePairs</see>
            of representing properties.</param>
        </member>
        <member name="M:Rock.Data.Entity`1.ToLiquid">
            <summary>
            Creates a DotLiquid compatible dictionary that represents the current entity object. 
            </summary>
            <returns>DotLiquid compatible dictionary.</returns>
        </member>
        <member name="M:Rock.Data.Entity`1.ToLiquid(System.Boolean)">
            <summary>
            Creates a DotLiquid compatible dictionary that represents the current entity object.
            </summary>
            <param name="debug">if set to <c>true</c> the entire object tree will be parsed immediately.</param>
            <returns>
            DotLiquid compatible dictionary.
            </returns>
        </member>
        <member name="M:Rock.Data.Entity`1.FromJson(System.String)">
            <summary>
            Returns an instance of the  entity based on a JSON represented of the entity object.
            </summary>
            <param name="json">A <see cref="T:System.String"/> containing a JSON formatted representation of the object.</param>
            <returns>An instance of the entity object based on the provided JSON string.</returns>
        </member>
        <member name="P:Rock.Data.Entity`1.Id">
            <summary>
            Gets or sets the value of the identifier.  This value is the primary field/key for the entity object.  This value is system and database
            dependent, and is not guaranteed to be unique. This id should only be used to identify an object internally to a single implementation
            of Rock since this value has a very high probability of not being consistent in an external implementation of Rock.
            </summary>
            <value>
            Primary and system dependent <see cref="T:System.Int32"/> based identity/key of an entity object in Rock.
            </value>
        </member>
        <member name="P:Rock.Data.Entity`1.Guid">
            <summary>
            Gets or sets a <see cref="T:System.Guid"/> value that is a guaranteed unique identifier for the entity object.  This value 
            is an alternate key for the object, and should be used when interacting with external systems and when comparing and synchronizing
            objects across across data stores or external /implementations of Rock
            </summary>
            <remarks>
            A good place for a Guid to be used is when comparing or syncing data across two implementations of Rock. For example, if you 
            were creating a <see cref="T:Rock.Web.UI.RockBlock"/> with a data migration that adds/remove a new defined value object to the database. You would want to 
            search based on the Guid because it would be guaranteed to be unique across all implementations of Rock. 
            </remarks>
            <value>
            A <see cref="T:System.Guid"/> value that will uniquely identify the entity/object across all implementations of Rock.
            </value>
        </member>
        <member name="P:Rock.Data.Entity`1.ForeignId">
            <summary>
            Gets or sets an optional foreign identifier.  This can be used for importing or syncing data to a foreign system
            </summary>
            <value>
            The foreign identifier.
            </value>
        </member>
        <member name="P:Rock.Data.Entity`1.TypeId">
            <summary>
            Gets the <see cref="T:Rock.Model.EntityType"/> Id for the Entity object type in Rock. If an <see cref="T:Rock.Model.EntityType"/> is not found
            for the object type it will be created
            </summary>
            <value>
            An <see cref="T:System.Int32"/> that represents the identifier for the current Entity object type. 
            </value>
        </member>
        <member name="P:Rock.Data.Entity`1.TypeName">
            <summary>
            Gets the unique type name of the entity.  Typically this is the qualified name of the class
            </summary>
            <value>
            The name of the entity type.
            </value>
        </member>
        <member name="P:Rock.Data.Entity`1.ContextKey">
            <summary>
            Gets an URLEncoded encrypted string/key that represents the entity object
            </summary>
            <value>
            An encrypted <see cref="T:System.String"/> that represents the entity object.
            </value>
        </member>
        <member name="P:Rock.Data.Entity`1.ValidationResults">
            <summary>
            Gets the validation results for the entity
            </summary>
        </member>
        <member name="P:Rock.Data.Entity`1.IsValid">
            <summary>
            Gets a value indicating whether this instance is valid.
            </summary>
            <value>
              A <see cref="T:System.Boolean"/> that is <c>true</c> if this instance is valid; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Data.Entity`1.EncryptedKey">
            <summary>
            Gets a publicly viewable unique key for the entity.
            NOTE: Will result in an empty string in a non-web app.
            </summary>
            <value>
            A <see cref="T:System.String"/> that represents a viewable version of the entity's unique key.
            </value>
        </member>
        <member name="P:Rock.Data.Entity`1.UrlEncodedKey">
            <summary>
            Gets a URL friendly version of the EncryptedKey for the entity.
            </summary>
            <value>
            A <see cref="T:System.String"/> that represents a URL friendly version of the entity's unique key.
            </value>
        </member>
        <member name="P:Rock.Data.Entity`1.FriendlyTypeName">
            <summary>
            Gets the entity object type's friendly name
            </summary>
            <value>
            A <see cref="T:System.String"/> that represents the entity object type's friendly name.
            </value>
        </member>
        <member name="T:Rock.Data.IModel">
            <summary>
            Interface for all models
            </summary>
        </member>
        <member name="M:Rock.Data.IModel.PreSaveChanges(Rock.Data.DbContext,System.Data.Entity.EntityState)">
            <summary>
            Method that will be called on an entity immediately before the item is saved
            </summary>
        </member>
        <member name="P:Rock.Data.IModel.CreatedDateTime">
            <summary>
            Gets or sets the created date time.
            </summary>
            <value>
            The created date time.
            </value>
        </member>
        <member name="P:Rock.Data.IModel.ModifiedDateTime">
            <summary>
            Gets or sets the modified date time.
            </summary>
            <value>
            The modified date time.
            </value>
        </member>
        <member name="P:Rock.Data.IModel.CreatedByPersonAliasId">
            <summary>
            Gets or sets the created by person alias identifier.
            </summary>
            <value>
            The created by person alias identifier.
            </value>
        </member>
        <member name="P:Rock.Data.IModel.ModifiedByPersonAliasId">
            <summary>
            Gets or sets the modified by person alias identifier.
            </summary>
            <value>
            The modified by person alias identifier.
            </value>
        </member>
        <member name="P:Rock.Data.IModel.CreatedByPersonAlias">
            <summary>
            Gets or sets the created by person alias.
            </summary>
            <value>
            The created by person alias.
            </value>
        </member>
        <member name="P:Rock.Data.IModel.ModifiedByPersonAlias">
            <summary>
            Gets or sets the modified by person alias.
            </summary>
            <value>
            The modified by person alias.
            </value>
        </member>
        <member name="M:Rock.Data.Model`1.PreSaveChanges(Rock.Data.DbContext,System.Data.Entity.EntityState)">
            <summary>
            Method that will be called on an entity immediately before the item is saved by context
            </summary>
            <param name="dbContext"></param>
            <param name="state"></param>
        </member>
        <member name="M:Rock.Data.Model`1.IsAuthorized(System.String,Rock.Model.Person)">
            <summary>
            Return <c>true</c> if the user is authorized to perform the selected action on this object.
            </summary>
            <param name="action">The action.</param>
            <param name="person">The person.</param>
            <returns>
              <c>true</c> if the specified action is authorized; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Rock.Data.Model`1.IsAllowedByDefault(System.String)">
            <summary>
            If a user or role is not specifically allowed or denied to perform the selected action,
            return <c>true</c> if they should be allowed anyway or <c>false</c> if not.
            </summary>
            <param name="action">The action.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Data.Model`1.IsPrivate(System.String,Rock.Model.Person)">
            <summary>
            Determines whether the specified action is private (Only the current user has access).
            </summary>
            <param name="action">The action.</param>
            <param name="person">The person.</param>
            <returns>
              <c>true</c> if the specified action is private; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Rock.Data.Model`1.MakePrivate(System.String,Rock.Model.Person)">
            <summary>
            Makes the action on the current entity private (Only the current user will have access).
            </summary>
            <param name="action">The action.</param>
            <param name="person">The person.</param>
        </member>
        <member name="M:Rock.Data.Model`1.MakeUnPrivate(System.String,Rock.Model.Person)">
            <summary>
            If the action on the current entity is private, removes the auth rules that made it private.
            </summary>
            <param name="action">The action.</param>
            <param name="person">The person.</param>
        </member>
        <member name="M:Rock.Data.Model`1.AllowPerson(System.String,Rock.Model.Person)">
            <summary>
            Adds an 'Allow' rule for the current person as the first rule for the selected action
            </summary>
            <param name="action">The action.</param>
            <param name="person">The person.</param>
        </member>
        <member name="M:Rock.Data.Model`1.ToLiquid">
            <summary>
            Creates a DotLiquid compatible dictionary that represents the current entity object. 
            </summary>
            <returns>DotLiquid compatible dictionary.</returns>
        </member>
        <member name="M:Rock.Data.Model`1.ToLiquid(System.Boolean)">
            <summary>
            Creates a DotLiquid compatible dictionary that represents the current entity object.
            </summary>
            <param name="debug">if set to <c>true</c> the entire object tree will be parsed immediately.</param>
            <returns>
            DotLiquid compatible dictionary.
            </returns>
        </member>
        <member name="M:Rock.Data.Model`1.GetAttributeValue(System.String)">
            <summary>
            Gets the first value of an attribute key.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Data.Model`1.GetAttributeValues(System.String)">
            <summary>
            Gets the first value of an attribute key - splitting that delimited value into a list of strings.
            </summary>
            <param name="key">The key.</param>
            <returns>A list of strings or an empty list if none exists.</returns>
        </member>
        <member name="M:Rock.Data.Model`1.SetAttributeValue(System.String,System.String)">
            <summary>
            Sets the first value of an attribute key in memory.  Note, this will not persist value to database
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="P:Rock.Data.Model`1.CreatedDateTime">
            <summary>
            Gets or sets the created date time.
            </summary>
            <value>
            The created date time.
            </value>
        </member>
        <member name="P:Rock.Data.Model`1.ModifiedDateTime">
            <summary>
            Gets or sets the modified date time.
            </summary>
            <value>
            The modified date time.
            </value>
        </member>
        <member name="P:Rock.Data.Model`1.CreatedByPersonAliasId">
            <summary>
            Gets or sets the created by person alias identifier.
            </summary>
            <value>
            The created by person alias identifier.
            </value>
        </member>
        <member name="P:Rock.Data.Model`1.ModifiedByPersonAliasId">
            <summary>
            Gets or sets the modified by person alias identifier.
            </summary>
            <value>
            The modified by person alias identifier.
            </value>
        </member>
        <member name="P:Rock.Data.Model`1.CreatedByPersonAlias">
            <summary>
            Gets or sets the created by person alias.
            </summary>
            <value>
            The created by person alias.
            </value>
        </member>
        <member name="P:Rock.Data.Model`1.ModifiedByPersonAlias">
            <summary>
            Gets or sets the modified by person alias.
            </summary>
            <value>
            The modified by person alias.
            </value>
        </member>
        <member name="P:Rock.Data.Model`1.CreatedByPersonId">
            <summary>
            Gets the created by person identifier.
            </summary>
            <value>
            The created by person identifier.
            </value>
        </member>
        <member name="P:Rock.Data.Model`1.ModifiedByPersonId">
            <summary>
            Gets the modified by person identifier.
            </summary>
            <value>
            The modified by person identifier.
            </value>
        </member>
        <member name="P:Rock.Data.Model`1.ParentAuthority">
            <summary>
            A parent authority.  If a user is not specifically allowed or denied access to
            this object, Rock will check the default authorization on the current type, and 
            then the authorization on the Rock.Security.GlobalDefault entity
            </summary>
        </member>
        <member name="P:Rock.Data.Model`1.SupportedActions">
            <summary>
            A dictionary of actions that this class supports and the description of each.
            </summary>
        </member>
        <member name="P:Rock.Data.Model`1.Attributes">
            <summary>
            List of attributes associated with the object.  This property will not include the attribute values.
            The <see cref="P:Rock.Data.Model`1.AttributeValues"/> property should be used to get attribute values.  Dictionary key
            is the attribute key, and value is the cached attribute
            </summary>
            <value>
            The attributes.
            </value>
        </member>
        <member name="P:Rock.Data.Model`1.AttributeValues">
            <summary>
            Dictionary of all attributes and their value.  Key is the attribute key, and value is the values
            associated with the attribute and object instance
            </summary>
            <value>
            The attribute values.
            </value>
        </member>
        <member name="P:Rock.Data.Model`1.AttributeValueDefaults">
            <summary>
            Gets the attribute value defaults.
            </summary>
            <value>
            The attribute defaults.
            </value>
        </member>
        <member name="M:Rock.Model.PluginMigration.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this PluginMigration.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this PluginMigration.
            </returns>
        </member>
        <member name="P:Rock.Model.PluginMigration.PluginAssemblyName">
            <summary>
            Gets or sets the name of the plugin assembly.
            </summary>
            <value>
            The name of the plugin assembly.
            </value>
        </member>
        <member name="P:Rock.Model.PluginMigration.MigrationNumber">
            <summary>
            Gets or sets the migration number.
            </summary>
            <value>
            The migration number.
            </value>
        </member>
        <member name="P:Rock.Model.PluginMigration.MigrationName">
            <summary>
            Gets or sets the migration number.
            </summary>
            <value>
            The migration number.
            </value>
        </member>
        <member name="T:Rock.Model.PluginMigrationConfiguration">
            <summary>
            PluginMigration Configuration class.
            </summary>
        </member>
        <member name="M:Rock.Model.PluginMigrationConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.PluginMigrationConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Rock.Plugin.Migration">
            <summary>
            Class for defining a plugin migration
            </summary>
        </member>
        <member name="M:Rock.Plugin.Migration.Up">
            <summary>
            The commands to run to migrate plugin to the specific version
            </summary>
        </member>
        <member name="M:Rock.Plugin.Migration.Down">
            <summary>
            The commands to undo a migration from a specific version
            </summary>
        </member>
        <member name="M:Rock.Plugin.Migration.Sql(System.String)">
            <summary>
            Executes a sql statement
            </summary>
            <param name="sql">The SQL.</param>
        </member>
        <member name="M:Rock.Plugin.Migration.UpdateEntityType(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Updates the EntityType by name (if it exists); otherwise it inserts a new record.
            </summary>
            <param name="name">The name.</param>
            <param name="guid">The GUID.</param>
            <param name="isEntity">if set to <c>true</c> [is entity].</param>
            <param name="isSecured">if set to <c>true</c> [is secured].</param>
        </member>
        <member name="M:Rock.Plugin.Migration.UpdateEntityType(System.String,System.String,System.String,System.Boolean,System.Boolean,System.String)">
            <summary>
            Updates the EntityType by name (if it exists); otherwise it inserts a new record.
            </summary>
            <param name="name">The name.</param>
            <param name="friendlyName">Name of the friendly.</param>
            <param name="assemblyName">Name of the assembly.</param>
            <param name="isEntity">if set to <c>true</c> [is entity].</param>
            <param name="isSecured">if set to <c>true</c> [is secured].</param>
            <param name="guid">The GUID.</param>
        </member>
        <member name="M:Rock.Plugin.Migration.DeleteEntityType(System.String)">
            <summary>
            Deletes the EntityType.
            </summary>
            <param name="guid">The GUID.</param>
        </member>
        <member name="M:Rock.Plugin.Migration.UpdateFieldType(System.String,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Updates the FieldType by assembly and className (if it exists); otherwise it inserts a new record.
            </summary>
            <param name="name">The name.</param>
            <param name="description">The description.</param>
            <param name="assembly">The assembly.</param>
            <param name="className">Name of the class.</param>
            <param name="guid">The GUID.</param>
            <param name="IsSystem">if set to <c>true</c> [is system].</param>
        </member>
        <member name="M:Rock.Plugin.Migration.DeleteFieldType(System.String)">
            <summary>
            Deletes the FieldType.
            </summary>
            <param name="guid">The GUID.</param>
        </member>
        <member name="M:Rock.Plugin.Migration.UpdateBlockType(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Updates the BlockType by path (if it exists);
            otherwise it inserts a new record. In either case it will be marked IsSystem.
            </summary>
            <param name="name">The name.</param>
            <param name="description">The description.</param>
            <param name="path">The path.</param>
            <param name="category">The category.</param>
            <param name="guid">The GUID.</param>
        </member>
        <member name="M:Rock.Plugin.Migration.AddBlockType(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Adds a new BlockType.
            </summary>
            <param name="name"></param>
            <param name="description"></param>
            <param name="path"></param>
            <param name="category"></param>
            <param name="guid"></param>
        </member>
        <member name="M:Rock.Plugin.Migration.DeleteBlockType(System.String)">
            <summary>
            Deletes the BlockType.
            </summary>
            <param name="guid">The GUID.</param>
        </member>
        <member name="M:Rock.Plugin.Migration.AddLayout(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Adds a new Layout to the given site.
            </summary>
            <param name="siteGuid">The site GUID.</param>
            <param name="fileName">Name of the file.</param>
            <param name="name">The name.</param>
            <param name="description">The description.</param>
            <param name="guid">The GUID.</param>
        </member>
        <member name="M:Rock.Plugin.Migration.DeleteLayout(System.String)">
            <summary>
            Deletes the Layout.
            </summary>
            <param name="guid">The GUID.</param>
        </member>
        <member name="M:Rock.Plugin.Migration.AddPage(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Adds a new Page to the given parent page.
            The new page will be ordered as last child of the parent page.
            </summary>
            <param name="parentPageGuid">The parent page GUID.</param>
            <param name="layoutGuid">The layout GUID.</param>
            <param name="name">The name.</param>
            <param name="description">The description.</param>
            <param name="guid">The GUID.</param>
            <param name="iconCssClass">The icon CSS class.</param>
        </member>
        <member name="M:Rock.Plugin.Migration.MovePage(System.String,System.String)">
            <summary>
            Moves the Page to the new given parent page.
            </summary>
            <param name="pageGuid">The page GUID.</param>
            <param name="parentPageGuid">The parent page GUID.</param>
        </member>
        <member name="M:Rock.Plugin.Migration.DeletePage(System.String)">
            <summary>
            Deletes the Page and any PageViews that use the page.
            </summary>
            <param name="guid">The GUID.</param>
        </member>
        <member name="M:Rock.Plugin.Migration.AddPageRoute(System.String,System.String)">
            <summary>
            Adds a new PageRoute to the given page but only if the given route name does not exist.
            </summary>
            <param name="pageGuid">The page GUID.</param>
            <param name="route">The route.</param>
        </member>
        <member name="M:Rock.Plugin.Migration.AddPageContext(System.String,System.String,System.String)">
            <summary>
            Adds a new PageContext to the given page.
            </summary>
            <param name="pageGuid">The page GUID.</param>
            <param name="entity">The entity.</param>
            <param name="idParameter">The id parameter.</param>
        </member>
        <member name="M:Rock.Plugin.Migration.AddBlock(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.String)">
            <summary>
            Adds a new Block of the given block type to the given page (optional) and layout (optional),
            setting its values with the given parameter values. If only the layout is given,
            edit/configuration authorization will also be inserted into the Auth table
            for the admin role (GroupId 2).
            </summary>
            <param name="pageGuid">The page GUID.</param>
            <param name="layoutGuid">The layout GUID.</param>
            <param name="blockTypeGuid">The block type GUID.</param>
            <param name="name">The name.</param>
            <param name="zone">The zone.</param>
            <param name="preHtml">The pre HTML.</param>
            <param name="postHtml">The post HTML.</param>
        </member>
        <member name="M:Rock.Plugin.Migration.DeleteBlock(System.String)">
            <summary>
            Deletes the block and any authorization records that belonged to it.
            </summary>
            <param name="guid">The GUID.</param>
        </member>
        <member name="M:Rock.Plugin.Migration.UpdateBlockTypeAttribute(System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.String,System.String)">
            <summary>
            Updates the BlockType Attribute for the given blocktype and key (if it exists);
            otherwise it inserts a new record.
            </summary>
            <param name="blockTypeGuid"></param>
            <param name="fieldTypeGuid"></param>
            <param name="name"></param>
            <param name="key"></param>
            <param name="category"></param>
            <param name="description"></param>
            <param name="order"></param>
            <param name="defaultValue"></param>
            <param name="guid"></param>
        </member>
        <member name="M:Rock.Plugin.Migration.AddBlockTypeAttribute(System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.String,System.String)">
            <summary>
            Adds a new BlockType Attribute for the given blocktype and key.
            </summary>
            <param name="blockTypeGuid">The block GUID.</param>
            <param name="fieldTypeGuid">The field type GUID.</param>
            <param name="name">The name.</param>
            <param name="key">The key.</param>
            <param name="category">The category.</param>
            <param name="description">The description.</param>
            <param name="order">The order.</param>
            <param name="defaultValue">The default value.</param>
            <param name="guid">The GUID.</param>
        </member>
        <member name="M:Rock.Plugin.Migration.DeleteBlockAttribute(System.String)">
            <summary>
            Deletes the block Attribute.
            </summary>
            <param name="guid">The GUID.</param>
        </member>
        <member name="M:Rock.Plugin.Migration.AddEntityAttribute(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.String,System.String)">
            <summary>
            Adds a new EntityType Attribute for the given EntityType, FieldType, and name (key).
            </summary>
            <param name="entityTypeName">Name of the entity type.</param>
            <param name="fieldTypeGuid">The field type GUID.</param>
            <param name="entityTypeQualifierColumn">The entity type qualifier column.</param>
            <param name="entityTypeQualifierValue">The entity type qualifier value.</param>
            <param name="name">The name.</param>
            <param name="category">The category.</param>
            <param name="description">The description.</param>
            <param name="order">The order.</param>
            <param name="defaultValue">The default value.</param>
            <param name="guid">The GUID.</param>
        </member>
        <member name="M:Rock.Plugin.Migration.AddGlobalAttribute(System.String,System.String,System.String,System.String,System.String,System.Int32,System.String,System.String)">
            <summary>
            Adds a global Attribute for the given FieldType, entityTypeQualifierColumn, entityTypeQualifierValue and name (key).
            Note: This method delets the Attribute first if it had already existed.
            </summary>
            <param name="fieldTypeGuid">The field type GUID.</param>
            <param name="entityTypeQualifierColumn">The entity type qualifier column.</param>
            <param name="entityTypeQualifierValue">The entity type qualifier value.</param>
            <param name="name">The name.</param>
            <param name="description">The description.</param>
            <param name="order">The order.</param>
            <param name="defaultValue">The default value.</param>
            <param name="guid">The GUID.</param>
        </member>
        <member name="M:Rock.Plugin.Migration.EnsureEntityTypeExists(System.String)">
            <summary>
            Ensures the entity type exists by adding it by name if it did not already exist.
            </summary>
            <param name="entityTypeName">Name of the entity type.</param>
        </member>
        <member name="M:Rock.Plugin.Migration.AddAttributeValue(System.String,System.Int32,System.String,System.String)">
            <summary>
            Adds a new attribute value for the given attributeGuid if it does not already exist.
            </summary>
            <param name="attributeGuid">The attribute GUID.</param>
            <param name="entityId">The entity id.</param>
            <param name="value">The value.</param>
            <param name="guid">The GUID.</param>
        </member>
        <member name="M:Rock.Plugin.Migration.DeleteAttribute(System.String)">
            <summary>
            Deletes the attribute.
            </summary>
            <param name="guid">The GUID.</param>
        </member>
        <member name="M:Rock.Plugin.Migration.AddBlockAttributeValue(System.String,System.String,System.String)">
            <summary>
            Adds a new block attribute value for the given block guid and attribute guid,
            deleting any previously existing attribute value first.
            </summary>
            <param name="blockGuid">The block GUID.</param>
            <param name="attributeGuid">The attribute GUID.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Rock.Plugin.Migration.DeleteBlockAttributeValue(System.String,System.String)">
            <summary>
            Deletes the block attribute value.
            </summary>
            <param name="blockGuid">The block GUID.</param>
            <param name="attributeGuid">The attribute GUID.</param>
        </member>
        <member name="M:Rock.Plugin.Migration.AddDefinedType(System.String,System.String,System.String,System.String)">
            <summary>
            Adds a new DefinedType.
            </summary>
            <param name="category">The category.</param>
            <param name="name">The name.</param>
            <param name="description">The description.</param>
            <param name="guid">The GUID.</param>
        </member>
        <member name="M:Rock.Plugin.Migration.DeleteDefinedType(System.String)">
            <summary>
            Deletes the DefinedType.
            </summary>
            <param name="guid">The GUID.</param>
        </member>
        <member name="M:Rock.Plugin.Migration.AddDefinedValue(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Adds a new DefinedValue for the given DefinedType.
            </summary>
            <param name="definedTypeGuid">The defined type GUID.</param>
            <param name="name">The name.</param>
            <param name="description">The description.</param>
            <param name="guid">The GUID.</param>
            <param name="isSystem">if set to <c>true</c> [is system].</param>
        </member>
        <member name="M:Rock.Plugin.Migration.UpdateDefinedValue(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Updates (or Adds) the defined value for the given DefinedType.
            </summary>
            <param name="definedTypeGuid">The defined type GUID.</param>
            <param name="name">The name.</param>
            <param name="description">The description.</param>
            <param name="guid">The GUID.</param>
            <param name="isSystem">if set to <c>true</c> [is system].</param>
        </member>
        <member name="M:Rock.Plugin.Migration.DeleteDefinedValue(System.String)">
            <summary>
            Deletes the DefinedValue.
            </summary>
            <param name="guid">The GUID.</param>
        </member>
        <member name="M:Rock.Plugin.Migration.AddSecurityRoleGroup(System.String,System.String,System.String)">
            <summary>
            Adds the security role group.
            </summary>
            <param name="name">The name.</param>
            <param name="description">The description.</param>
            <param name="guid">The GUID.</param>
        </member>
        <member name="M:Rock.Plugin.Migration.DeleteSecurityRoleGroup(System.String)">
            <summary>
            Deletes the security role group.
            </summary>
            <param name="guid">The GUID.</param>
        </member>
        <member name="M:Rock.Plugin.Migration.AddSecurityAuth(System.String,System.String,System.String,System.String)">
            <summary>
            Adds the security auth record for the given entity type and group.
            </summary>
            <param name="entityTypeName">Name of the entity type.</param>
            <param name="action">The action.</param>
            <param name="groupGuid">The group GUID.</param>
            <param name="authGuid">The auth GUID.</param>
        </member>
        <member name="M:Rock.Plugin.Migration.AddSecurityAuthForPage(System.String,System.Int32,System.String,System.Boolean,System.String,System.Int32,System.String)">
            <summary>
            Adds the page security authentication. Set GroupGuid to null when setting to a special role
            </summary>
            <param name="pageGuid">The page unique identifier.</param>
            <param name="action">The action.</param>
            <param name="groupGuid">The group unique identifier.</param>
            <param name="specialRole">The special role.</param>
            <param name="authGuid">The authentication unique identifier.</param>
        </member>
        <member name="M:Rock.Plugin.Migration.AddSecurityAuthForBlock(System.String,System.Int32,System.String,System.Boolean,System.String,System.Int32,System.String)">
            <summary>
            Adds the page security authentication. Set GroupGuid to null when setting to a special role
            </summary>
            <param name="pageGuid">The page unique identifier.</param>
            <param name="action">The action.</param>
            <param name="groupGuid">The group unique identifier.</param>
            <param name="specialRole">The special role.</param>
            <param name="authGuid">The authentication unique identifier.</param>
        </member>
        <member name="M:Rock.Plugin.Migration.AddSecurityAuthForBinaryFileType(System.String,System.Int32,System.String,System.Boolean,System.String,System.Int32,System.String)">
            <summary>
            Adds the binaryfiletype security authentication. Set GroupGuid to null when setting to a special role
            </summary>
            <param name="binaryFileTypeGuid">The binary file type unique identifier.</param>
            <param name="order">The order.</param>
            <param name="action">The action.</param>
            <param name="allow">if set to <c>true</c> [allow].</param>
            <param name="groupGuid">The group unique identifier.</param>
            <param name="specialRole">The special role.</param>
            <param name="authGuid">The authentication unique identifier.</param>
        </member>
        <member name="M:Rock.Plugin.Migration.DeleteSecurityAuth(System.String)">
            <summary>
            Deletes the security auth record.
            </summary>
            <param name="guid">The GUID.</param>
        </member>
        <member name="M:Rock.Plugin.Migration.AddGroupTypeGroupAttribute(System.String,System.String,System.String,System.String,System.Int32,System.String,System.String)">
            <summary>
            Adds a new GroupType "Group Attribute" for the given GroupType using the given values. 
            </summary>
            <param name="groupTypeGuid"></param>
            <param name="fieldTypeGuid"></param>
            <param name="name"></param>
            <param name="description"></param>
            <param name="order"></param>
            <param name="defaultValue">a string, empty string, or NULL</param>
            <param name="guid"></param>
        </member>
        <member name="T:Rock.Plugin.MigrationNumberAttribute">
            <summary>
            Attribute for defining the a plugin migrations' number.  Migrations are execued in sequential order based on migration number
            </summary>
        </member>
        <member name="M:Rock.Plugin.MigrationNumberAttribute.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Plugin.MigrationNumberAttribute"/> class.
            </summary>
            <param name="number">The number.</param>
            <param name="minimumRockVersion">The minimum rock version.</param>
        </member>
        <member name="P:Rock.Plugin.MigrationNumberAttribute.Number">
            <summary>
            Gets or sets the number.
            </summary>
            <value>
            The number.
            </value>
        </member>
        <member name="P:Rock.Plugin.MigrationNumberAttribute.MinimumRockVersion">
            <summary>
            Gets or sets the minimum rock version for this migration 
            </summary>
            <value>
            The minimum rock version.
            </value>
        </member>
        <member name="T:Rock.Reporting.Dashboard.ChartDateTimeJsonConverter">
            <summary>
            Converts DateTime values to 'new Date(..)' instead of a string representation
            Handy when creating JSON data for Google Chart DataTables
            </summary>
        </member>
        <member name="M:Rock.Reporting.Dashboard.ChartDateTimeJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object
            However, since it contains date constructors, it technically is a Javascript Literal object, and not JSON
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Rock.Reporting.Dashboard.ChartDateTimeJsonConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
              <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Rock.Reporting.Dashboard.ChartDateTimeJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>
            The object value.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="P:Rock.Reporting.Dashboard.ChartDateTimeJsonConverter.CanRead">
            <summary>
            Gets a value indicating whether this <see cref="T:Newtonsoft.Json.JsonConverter" /> can read JSON.
            </summary>
            <value>
            <c>true</c> if this <see cref="T:Newtonsoft.Json.JsonConverter" /> can read JSON; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Rock.Reporting.Dashboard.ChartOptions">
            <summary>
            Class that can be JSON'd and used for Google Charts (properties are case sensitive)
            </summary>
        </member>
        <member name="M:Rock.Reporting.Dashboard.ChartOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Reporting.Dashboard.ChartOptions"/> class.
            </summary>
        </member>
        <member name="P:Rock.Reporting.Dashboard.ChartOptions.title">
            <summary>
            Gets or sets the title.
            </summary>
            <value>
            The title.
            </value>
        </member>
        <member name="P:Rock.Reporting.Dashboard.ChartOptions.curveType">
            <summary>
            Gets or sets the type of the curve for Line Charts
            </summary>
            <value>
            The type of the curve.
            </value>
        </member>
        <member name="P:Rock.Reporting.Dashboard.ChartOptions.titleTextStyle">
            <summary>
            Gets or sets the title text style.
            </summary>
            <value>
            The title text style.
            </value>
        </member>
        <member name="P:Rock.Reporting.Dashboard.ChartOptions.backgroundColor">
            <summary>
            Gets or sets the color of the background.
            </summary>
            <value>
            The color of the background.
            </value>
        </member>
        <member name="P:Rock.Reporting.Dashboard.ChartOptions.colors">
            <summary>
            Gets or sets the colors.
            </summary>
            <value>
            The colors.
            </value>
        </member>
        <member name="P:Rock.Reporting.Dashboard.ChartOptions.vAxis">
            <summary>
            Gets or sets the v axis.
            </summary>
            <value>
            The v axis.
            </value>
        </member>
        <member name="P:Rock.Reporting.Dashboard.ChartOptions.hAxis">
            <summary>
            Gets or sets the h axis.
            </summary>
            <value>
            The h axis.
            </value>
        </member>
        <member name="P:Rock.Reporting.Dashboard.ChartOptions.legend">
            <summary>
            Gets or sets the legend.
            </summary>
            <value>
            The legend.
            </value>
        </member>
        <member name="P:Rock.Reporting.Dashboard.ChartOptions.width">
            <summary>
            Gets or sets the width.
            </summary>
            <value>
            The width.
            </value>
        </member>
        <member name="P:Rock.Reporting.Dashboard.ChartOptions.height">
            <summary>
            Gets or sets the height.
            </summary>
            <value>
            The height.
            </value>
        </member>
        <member name="T:Rock.Reporting.Dashboard.ChartTooltip">
            <summary>
            Class that can be JSON'd and used for Google Charts (properties are case sensitive)
            </summary>
        </member>
        <member name="T:Rock.Reporting.Dashboard.ColumnDefinition">
            <summary>
            Class that can be JSON'd and used for Google Charts (properties are case sensitive)
            </summary>
        </member>
        <member name="M:Rock.Reporting.Dashboard.ColumnDefinition.#ctor(System.String,Rock.Reporting.Dashboard.ColumnDataType)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Reporting.Dashboard.ColumnDefinition"/> class.
            </summary>
            <param name="Label">The label.</param>
            <param name="type">The type.</param>
        </member>
        <member name="P:Rock.Reporting.Dashboard.ColumnDefinition.id">
            <summary>
            Gets or sets the identifier.
            </summary>
            <value>
            The identifier.
            </value>
        </member>
        <member name="P:Rock.Reporting.Dashboard.ColumnDefinition.label">
            <summary>
            Gets or sets the label.
            </summary>
            <value>
            The label.
            </value>
        </member>
        <member name="P:Rock.Reporting.Dashboard.ColumnDefinition.type">
            <summary>
            Gets or sets the type.
            </summary>
            <value>
            The type.
            </value>
        </member>
        <member name="M:Rock.Reporting.Dashboard.ChartTooltip.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Reporting.Dashboard.ChartTooltip"/> class.
            </summary>
        </member>
        <member name="P:Rock.Reporting.Dashboard.ChartTooltip.role">
            <summary>
            Gets or sets the role.
            </summary>
            <value>
            The role.
            </value>
        </member>
        <member name="T:Rock.Reporting.Dashboard.ColumnDataType">
            <summary>
            
            </summary>
        </member>
        <member name="F:Rock.Reporting.Dashboard.ColumnDataType.date">
            <summary>
            The date
            </summary>
        </member>
        <member name="F:Rock.Reporting.Dashboard.ColumnDataType.number">
            <summary>
            The number
            </summary>
        </member>
        <member name="F:Rock.Reporting.Dashboard.ColumnDataType.string">
            <summary>
            The string
            </summary>
        </member>
        <member name="T:Rock.Reporting.Dashboard.LineChartCurveType">
            <summary>
            Controls the curve of the lines when the line width is not zero
            </summary>
        </member>
        <member name="T:Rock.Reporting.Dashboard.DashboardWidget">
            <summary>
            
            </summary>
        </member>
        <member name="T:Rock.Web.UI.RockBlock">
            <summary>
            RockBlock is the base abstract class that all Blocks should inherit from
            </summary>
        </member>
        <member name="M:Rock.Web.UI.RockBlock.ContextEntity``1">
            <summary>
            Returns the ContextEntity of the Type specified
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.UI.RockBlock.ContextEntity">
            <summary>
            Return the ContextEntity for blocks that are designed to have at most one ContextEntity
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.UI.RockBlock.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Web.UI.RockBlock"/> class.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.RockBlock.AddCacheItem(System.Object)">
            <summary>
            Adds an object to the default <see cref="T:System.Runtime.Caching.MemoryCache"/> .
            </summary>
            <param name="value">The <see cref="T:System.Object"/> to cache</param>
        </member>
        <member name="M:Rock.Web.UI.RockBlock.AddCacheItem(System.String,System.Object)">
            <summary>
            Adds a keyed/named object to the default <see cref="T:System.Runtime.Caching.MemoryCache"/> .
            </summary>
            <param name="key">A <see cref="T:System.String"/> representing the name of the key to differentiate items from same block instance</param>
            <param name="value">The <see cref="T:System.Object"/> to cache.</param>
        </member>
        <member name="M:Rock.Web.UI.RockBlock.AddCacheItem(System.String,System.Object,System.Int32)">
            <summary>
            Adds an object to the default <see cref="T:System.Runtime.Caching.MemoryCache"/>  for a specified amount of time.
            </summary>
            <param name="key">A <see cref="T:System.String"/> representing the name of the key to differentiate items from same block instance</param>
            <param name="value">The <see cref="T:System.Object"/> to cache.</param>
            <param name="seconds">A <see cref="T:System.Int32"/> representing the the amount of time in seconds that the object is cached. This is an absolute expiration</param>
        </member>
        <member name="M:Rock.Web.UI.RockBlock.AddCacheItem(System.String,System.Object,System.Runtime.Caching.CacheItemPolicy)">
            <summary>
            Adds an object with a <see cref="T:System.Runtime.Caching.CacheItemPolicy"/> to the default <see cref="T:System.Runtime.Caching.MemoryCache"/> 
            </summary>
            <param name="key">A <see cref="T:System.String"/> representing the name of the key to differentiate items from same block instance</param>
            <param name="value">The <see cref="T:System.Object"/> to cache.</param>
            <param name="cacheItemPolicy">Optional <see cref="T:System.Runtime.Caching.CacheItemPolicy"/>, defaults to null</param>
        </member>
        <member name="M:Rock.Web.UI.RockBlock.GetCacheItem(System.String)">
            <summary>
            Returns an object from the default <see cref="T:System.Runtime.Caching.MemoryCache"/> .
            </summary>
            <param name="key">A <see cref="T:System.String"/> representing the name of the object's key. Defaults to an empty string.</param>
            <returns>The cached <see cref="T:System.Object"/> if a key match is not found, a null object will be returned.</returns>
        </member>
        <member name="M:Rock.Web.UI.RockBlock.FlushCacheItem(System.String)">
            <summary>
            Flushes an object from the cache
            </summary>
            <param name="key">A <see cref="T:System.String"/> representing the the key name for the item that will be flushed. This value 
            defaults to an empty string.</param>
        </member>
        <member name="M:Rock.Web.UI.RockBlock.ItemCacheKey(System.String)">
            <summary>
            Returns the qualified key name for the cached item. The format is PageID:BlockID:Key.
            </summary>
            <param name="key">A <see cref="T:System.String"/> representing the base key name.</param>
            <returns>A <see cref="T:System.String"/> representing the fully qualified key name.</returns>
        </member>
        <member name="M:Rock.Web.UI.RockBlock.OnInit(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.Init" /> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs" /> object that contains the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.RockBlock.OnLoad(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.Load" /> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs" /> object that contains the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.RockBlock.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            When a control renders it's content to the page, this method will also check to see if 
            the block instance of this control has been configured for output caching, and if so, 
            the contents will also be rendered to a string variable that will gets cached in the 
            default MemoryCache for use next time by the Rock.Web.UI.RockPage.OnInit() method when rendering the 
            control content.
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Rock.Web.UI.RockBlock.SetBlock(Rock.Web.Cache.BlockCache)">
            <summary>
            Sets the block instance.
            </summary>
            <param name="blockCache">The block instance from <see cref="T:Rock.Web.Cache.BlockCache"/> .</param>
        </member>
        <member name="M:Rock.Web.UI.RockBlock.SaveAttributeValues">
            <summary>
            Saves the block attribute values.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.RockBlock.GetAttributeValue(System.String)">
            <summary>
            Returns the current value for the block attribute for the specified key. If the attribute value is not found, a null value will be returned.
            </summary>
            <param name="key">A <see cref="T:System.String"/> representing the key name for the block attribute to retrieve.</param>
            <returns>A <see cref="T:System.String"/> representing the stored attribute value. If the attribute is not found, this value will be null.</returns>
        </member>
        <member name="M:Rock.Web.UI.RockBlock.GetAttributeValues(System.String)">
            <summary>
            Returns a <see cref="T:System.Collections.Generic.List`1"/> of the current block attribute values for the specified key. If the key is not 
            found an empty list will be returned.
            </summary>
            <param name="key">A <see cref="T:System.String"/> representing the block attribute key</param>
            <returns>A <see cref="T:System.Collections.Generic.List`1"/> containing the current attribute values for the specified key. If the key is not
            found, an empty list will be returned.</returns>
        </member>
        <member name="M:Rock.Web.UI.RockBlock.SetAttributeValue(System.String,System.String)">
            <summary>
            Sets the value of an block attribute key in memory. Once values have been set, use the <see cref="M:Rock.Web.UI.RockBlock.SaveAttributeValues"/> method to save all values to database
            </summary>
            <param name="key">A <see cref="T:System.String"/> representing the block attribute's key name.</param>
            <param name="value">A <see cref="T:System.String"/> representing the value of the attribute.</param>
        </member>
        <member name="M:Rock.Web.UI.RockBlock.AddConfigurationUpdateTrigger(System.Web.UI.UpdatePanel)">
            <summary>
            Adds an update trigger for when the block properties are updated.
            </summary>
            <param name="updatePanel">The <see cref="T:System.Web.UI.UpdatePanel"/> that is being added.</param>
        </member>
        <member name="M:Rock.Web.UI.RockBlock.IsUserAuthorized(System.String)">
            <summary>
            Evaluates if the CurrentPerson is authorized to perform the requested action.
            </summary>
            <param name="action">A <see cref="T:System.String"/> representing the action that the <see cref="T:Rock.Model.UserLogin"/>/<see cref="P:Rock.Web.UI.RockBlock.CurrentPerson"/> 
            is requesting to perform.</param>
            <returns>A <see cref="T:System.Boolean"/> that is <c>true</c> if the CurrentPerson is authorized to perform the requested action; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Rock.Web.UI.RockBlock.PageParameter(System.String)">
            <summary>
            Returns the specified page parameter value.  The <see cref="T:Rock.Model.Page">page's</see> <see cref="T:Rock.Model.PageRoute"/>
            is checked first and then query string values.  If a match is not found an empty string is returned.
            </summary>
            <param name="name">A <see cref="T:System.String"/> representing the name of the specified page parameter.</param>
            <returns>A <see cref="T:System.String"/> representing the value of the page parameter. If a match is not found, an empty string is returned.</returns>
        </member>
        <member name="M:Rock.Web.UI.RockBlock.PageParameter(Rock.Web.PageReference,System.String)">
            <summary>
            Returns a specified page parameter from the specified <see cref="T:Rock.Web.PageReference"/>. If a match is not found,
            an empty string is returned.
            </summary>
            <param name="pageReference">The <see cref="T:Rock.Web.PageReference"/></param>
            <param name="name">A <see cref="T:System.String"/> representing the name of the page parameter.</param>
            <returns>A <see cref="T:System.String"/> representing the page parameter value. If match is not found, an empty string will be returned.</returns>
        </member>
        <member name="M:Rock.Web.UI.RockBlock.PageParameters">
            <summary>
            Returns a <see cref="T:System.Collections.Generic.Dictionary`2"/> representing all of the <see cref="T:Rock.Model.Page">page's</see> page parameters.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.Dictionary`2"/> containing all the <see cref="T:Rock.Model.Page">page's</see> page parameters. Each 
            <see cref="T:System.Collections.Generic.KeyValuePair`2"/> consists of the key being a <see cref="T:System.String"/> representing
            the name of the page parameter and the value being an <see cref="T:System.Object"/> that represents the parameter value.
            </returns>
        </member>
        <member name="M:Rock.Web.UI.RockBlock.LinkedPageUrl(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Builds and returns the URL for a linked <see cref="T:Rock.Model.Page"/> from a "linked page attribute" and any necessary query parameters.
            </summary>
            <param name="attributeKey">A <see cref="T:System.String"/> representing the name of the linked <see cref="T:Rock.Model.Page"/> attribute key.</param>
            <param name="queryParams">A <see cref="T:System.Collections.Generic.Dictionary`2"/> containing the query string parameters to be added to the URL.  
            In each <see cref="T:System.Collections.Generic.KeyValuePair`2"/> the key value is a <see cref="T:System.String"/> that represents the name of the query string 
            parameter, and the value is a <see cref="T:System.String"/> that represents the query string value..</param>
            <returns>A <see cref="T:System.String"/> representing the URL to the linked <see cref="T:Rock.Model.Page"/>. </returns>
        </member>
        <member name="M:Rock.Web.UI.RockBlock.NavigateToLinkedPage(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Navigate to a linked <see cref="T:Rock.Model.Page"/>.
            </summary>
            <param name="attributeKey">A <see cref="T:System.String"/> representing the name of the linked <see cref="T:Rock.Model.Page"/> attribute key.</param>
            <param name="queryParams">A <see cref="T:System.Collections.Generic.Dictionary`2"/> containing the query string parameters to include in the linked page URL.  
            Each <see cref="T:System.Collections.Generic.KeyValuePair`2"/> the key value is a <see cref="T:System.String"/> that represents the name of the query string
            parameter, and the value is a <see cref="T:System.String"/> that represents the query string value. This dictionary defaults to a null value.</param>
        </member>
        <member name="M:Rock.Web.UI.RockBlock.NavigateToLinkedPage(System.String,System.String,System.Int32,System.String,System.Nullable{System.Int32})">
            <summary>
            Navigates to a linked <see cref="T:Rock.Model.Page"/>
            </summary>
            <param name="attributeKey">A <see cref="T:System.String"/> representing the name of the linked <see cref="T:Rock.Model.Page"/> attribute key.</param>
            <param name="itemKey">A <see cref="T:System.String"/> representing the key name of the item that is being passed to the linked page in the query string. </param>
            <param name="itemKeyValue">A <see cref="T:System.Int32"/> representing the item value that is being passed to the link page in the query string.</param>
            <param name="itemParentKey">A <see cref="T:System.String"/> representing the key name of the parent item that is being passed to the linked page in the query string. 
            This value defaults to null.</param>
            <param name="itemParentValue">A <see cref="T:System.Int32"/> representing the parent item value that is being passed to the linked page in the query string. 
            This value defaults to null.</param>
        </member>
        <member name="M:Rock.Web.UI.RockBlock.NavigateToParentPage(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Navigates/redirects to the parent <see cref="T:Rock.Model.Page"/>.
            </summary>
            <param name="queryString">A <see cref="T:System.Collections.Generic.Dictionary`2"/> containing the query string parameters to include in the linked <see cref="T:Rock.Model.Page"/> URL.  
            Each <see cref="T:System.Collections.Generic.KeyValuePair`2"/> the key value is a <see cref="T:System.String"/> that represents the name of the query string
            parameter, and the value is a <see cref="T:System.String"/> that represents the query string value. This dictionary defaults to a null value.</param>
        </member>
        <member name="M:Rock.Web.UI.RockBlock.NavigateToPage(System.Guid,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Navigates to the <see cref="T:Rock.Model.Page"/> specified by the provided <see cref="T:System.Guid"/>.
            </summary>
            <param name="pageGuid">A <see cref="T:System.Guid"/> that represents the <see cref="T:Rock.Model.Page">Page's</see> unique identifier.</param>
            <param name="queryString">A <see cref="T:System.Collections.Generic.Dictionary`2"/> containing the query string parameters to include in the linked page URL.  
            Each <see cref="T:System.Collections.Generic.KeyValuePair`2"/> the key value is a <see cref="T:System.String"/> that represents the name of the query string
            parameter, and the value is a <see cref="T:System.String"/> that represents the query string value. This dictionary defaults to a null value.</param>
        </member>
        <member name="M:Rock.Web.UI.RockBlock.NavigateToPage(System.Guid,System.Guid,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Navigates to the <see cref="T:Rock.Model.Page"/> specified by the provided <see cref="T:System.Guid">page Guid</see> using the <see cref="T:Rock.Model.PageRoute"/> specified by the 
            provided <see cref="T:System.Guid">page route Guid</see>.
            </summary>
            <param name="pageGuid">A <see cref="T:System.Guid"/> that represents the <see cref="T:Rock.Model.Page">Page's</see> unique identifier.</param>
            <param name="pageRouteGuid">A <see cref="T:System.Guid"/> that represents the <see cref="T:Rock.Model.PageRoute">PageRoute's</see> unique identifier.</param>
            <param name="queryString">A <see cref="T:System.Collections.Generic.Dictionary`2"/> containing the query string parameters to include in the linked page URL.  
            Each <see cref="T:System.Collections.Generic.KeyValuePair`2"/> the key value is a <see cref="T:System.String"/> that represents the name of the query string
            parameter, and the value is a <see cref="T:System.String"/> that represents the query string value. This dictionary defaults to a null value.</param>
        </member>
        <member name="M:Rock.Web.UI.RockBlock.HideSecondaryBlocks(System.Boolean)">
            <summary>
            Sets the visibility of the secondary blocks on the page
            </summary>
            <param name="hidden">A <see cref="T:System.Boolean"/> value that indicates if the secondary blocks should be hidden. If <c>true</c> then the secondary blocks will be
            hidden; otherwise <c>false</c> and the secondary blocks will be visible.</param>
        </member>
        <member name="M:Rock.Web.UI.RockBlock.AddHistory(System.String,System.String,System.String)">
            <summary>
            Adds a history point to the <see cref="T:System.Web.UI.ScriptManager"/>.
            </summary>
            <param name="key">A <see cref="T:System.String"/> that represents the name of the key to use for the history point.</param>
            <param name="state">A <see cref="T:System.String"/> that represents any state information to store for the history point</param>
            <param name="title">A <see cref="T:System.String"/> that represents the page title to be used by the browser</param>
        </member>
        <member name="M:Rock.Web.UI.RockBlock.ResolveRockUrl(System.String)">
            <summary>
            Resolves a rock URL.  Similar to the <see cref="T:System.Web.UI.Control"/> ResolveUrl method except that you can prefix
            a Url with '~~' to indicate a virtual path to Rock's current theme root folder
            </summary>
            <param name="url">A <see cref="T:System.String"/> representing the Url to resolve.</param>
            <returns>
            A <see cref="T:System.String"/> that represents the resolved Url.
            </returns>
        </member>
        <member name="M:Rock.Web.UI.RockBlock.ResolveRockUrlIncludeRoot(System.String)">
            <summary>
            Resolves the rock URL and includes root.
            </summary>
            <param name="url">The URL.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.UI.RockBlock.SetValidationGroup(System.Web.UI.ControlCollection,System.String)">
            <summary>
            Sets the validation group.
            </summary>
            <param name="controls">A <see cref="T:System.Web.UI.ControlCollection"/> containing the controls to include in the validation group.</param>
            <param name="validationGroup">A <see cref="T:System.String"/> representing the name of the validation group.</param>
        </member>
        <member name="M:Rock.Web.UI.RockBlock.GetUserPreference(System.String)">
            <summary>
            Returns the user preference value for the current user for a given key
            </summary>
            <param name="key">A <see cref="T:System.String"/> representing the key to the user preference.</param>
            <returns>A <see cref="T:System.String"/> representing the user preference value. If a match for the key is not found, 
            an empty string will be returned.</returns>
        </member>
        <member name="M:Rock.Web.UI.RockBlock.GetUserPreferences(System.String)">
            <summary>
            Gets the preferences for the current user where the key begins with the specified value.
            </summary>
            <param name="keyPrefix">A <see cref="T:System.String"/> representing the key preference. Any user preference
            for the current user that begins with this value will be returned.</param>
            <returns>A <see cref="T:System.Collections.Generic.Dictionary`2"/> that contains all user preferences for the current 
            user that begins with the key prefix.  Each <see cref="T:System.Collections.Generic.KeyValuePair`2"/> includes 
            a key <see cref="T:System.String"/> that represents the user preference key and a value <see cref="T:System.String"/> that 
            represents the user preference value. If no preferences are found, an empty dictionary will be returned.</returns>
        </member>
        <member name="M:Rock.Web.UI.RockBlock.SetUserPreference(System.String,System.String)">
            <summary>
            Sets a user preference for the current user with the specified key and value.
            </summary>
            <param name="key">A <see cref="T:System.String"/> that represents the key value that identifies the 
            user preference.</param>
            <param name="value">A <see cref="T:System.String"/> that represents the value of the user preference.</param>
        </member>
        <member name="M:Rock.Web.UI.RockBlock.GetAdministrateControls(System.Boolean,System.Boolean)">
            <summary>
            Adds icons to the configuration area of a <see cref="T:Rock.Model.Block"/> instance.  Can be overridden to
            add additional icons
            </summary>
            <param name="canConfig">A <see cref="T:System.Boolean"/> flag that indicates if the user can configure the <see cref="T:Rock.Model.Block"/> instance.
            This value will be <c>true</c> if the user is allowed to configure the <see cref="T:Rock.Model.Block"/> instance; otherwise <c>false</c>.</param>
            <param name="canEdit">A <see cref="T:System.Boolean"/> flag that indicates if the user can edit the <see cref="T:Rock.Model.Block"/> instance. 
            This value will be <c>true</c> if the user is allowed to edit the <see cref="T:Rock.Model.Block"/> instance; otherwise <c>false</c>.</param>
            <returns>A <see cref="T:System.Collections.Generic.List`1"/> containing all the icon <see cref="T:System.Web.UI.Control">controls</see> 
            that will be available to the user in the configuration area of the block instance.</returns>
        </member>
        <member name="M:Rock.Web.UI.RockBlock.GetBreadCrumbs(Rock.Web.PageReference)">
            <summary>
            Returns breadcrumbs specific to the block that should be added to navigation
            based on the current page reference.  This function is called during the page's
            oninit to load any initial breadcrumbs.
            </summary>
            <param name="pageReference">The <see cref="T:Rock.Web.PageReference"/>.</param>
            <returns>A <see cref="T:System.Collections.Generic.List`1"/> of block related <see cref="T:Rock.Web.UI.BreadCrumb">BreadCrumbs</see>.</returns>
        </member>
        <member name="M:Rock.Web.UI.RockBlock.LogException(System.Exception)">
            <summary>
            Logs an <see cref="T:System.Exception"/> that has occurred.
            </summary>
            <param name="ex">The <see cref="T:System.Exception"/> to log.</param>
        </member>
        <member name="M:Rock.Web.UI.RockBlock.CreateAttributes">
            <summary>
            Creates and or updates any <see cref="T:Rock.Model.Block"/> <see cref="T:Rock.Model.Attribute">Attributes</see>.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.RockBlock.GetSecurityActionAttributes">
            <summary>
            Reads the <see cref="T:Rock.Security.SecurityActionAttribute">security action attributes</see> for this <see cref="T:Rock.Model.Block"/>
            </summary>
            <returns>A dictionary containing the actions for the <see cref="T:Rock.Model.Block">Block's</see>
            <see cref="T:Rock.Security.SecurityActionAttribute">SecurityActionAttributes</see>.</returns>
        </member>
        <member name="M:Rock.Web.UI.RockBlock.SetValidationGroup(System.String,System.String)">
            <summary>
            Sets the validation group. If the validationGroup is a prefix to the existingValidationGroup, the existingValidationGroup is returned, 
            if the existingValidationGroup name is an empty string, the validationGroup is returned; if the names are different a new validation group is 
            created that combines the two.
            </summary>
            <param name="existingValidationGroup">A <see cref="T:System.String"/> representing the name of the existing validation group.</param>
            <param name="validationGroup">A <see cref="T:System.String"/> representing the validation group.</param>
            <returns>A <see cref="T:System.String"/> representing the name of the validationGroup.</returns>
        </member>
        <member name="M:Rock.Web.UI.RockBlock.Page_BlockUpdated(System.Object,Rock.Web.UI.BlockUpdatedEventArgs)">
            <summary>
            Handles the BlockUpdated event of the Page control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:Rock.Web.UI.BlockUpdatedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:Rock.Web.UI.RockBlock.RockPage">
            <summary>
            Gets the <see cref="T:Rock.Web.UI.RockPage">page</see> that contains the block (instance).
            </summary>
            <value>
            The <see cref="T:Rock.Web.UI.RockPage"/> that contains this block (instance).
            </value>
        </member>
        <member name="P:Rock.Web.UI.RockBlock.BlockId">
            <summary>
            Gets the BlockId of this <see cref="T:Rock.Model.Block"/>.
            </summary>
            <value>
            A <see cref="T:System.Int32"/> representing the BlockId of this <see cref="T:Rock.Model.Block"/>.
            </value>
        </member>
        <member name="P:Rock.Web.UI.RockBlock.CurrentPageReference">
            <summary>
            Gets the current page reference.
            </summary>
        </member>
        <member name="P:Rock.Web.UI.RockBlock.CurrentPersonAlias">
            <summary>
            Gets the current person alias.
            </summary>
        </member>
        <member name="P:Rock.Web.UI.RockBlock.CurrentPersonId">
            <summary>
            The personID of the currently logged in user.  If user is not logged in, returns null
            </summary>
        </member>
        <member name="P:Rock.Web.UI.RockBlock.CurrentUser">
            <summary>
            Returns the currently logged in user.  If user is not logged in, returns null
            </summary>
        </member>
        <member name="P:Rock.Web.UI.RockBlock.CurrentPerson">
            <summary>
            Returns the currently logged in person. If user is not logged in, returns null
            </summary>
        </member>
        <member name="P:Rock.Web.UI.RockBlock.BlockValidationGroup">
            <summary>
            Gets or sets the validation group.
            </summary>
            <value>
            The validation group.
            </value>
        </member>
        <member name="P:Rock.Web.UI.RockBlock.BreadCrumbs">
            <summary>
            Gets the bread crumbs that were created during the page's oninit.  A block
            can add additional breadcrumbs to this list to be rendered.  Crumb's added 
            this way will not be saved to the current page reference's collection of 
            breadcrumbs, so wil not be available when user navigates to another child
            page.  Because of this only last-level crumbs should be added this way.  To
            persist breadcrumbs in the session state, override the GetBreadCrumbs 
            method instead.
            </summary>
            <value>
            The bread crumbs.
            </value>
        </member>
        <member name="P:Rock.Web.UI.RockBlock.RootPath">
            <summary>
            Gets the root URL Path.
            </summary>
        </member>
        <member name="P:Rock.Web.UI.RockBlock.ContextTypesRequired">
            <summary>
            Gets a list of any context entities that the block requires.
            </summary>
        </member>
        <member name="P:Rock.Web.UI.RockBlock.ContextEntities">
            <summary>
            Gets a dictionary of the current context entities.  The key is the type of context, and the value is the entity object
            </summary>
            <value>
            The context entities.
            </value>
        </member>
        <member name="E:Rock.Web.UI.RockBlock.BlockUpdated">
            <summary>
            Occurs when the block properties are updated.
            </summary>
        </member>
        <member name="M:Rock.Reporting.Dashboard.DashboardWidget.RenderControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            Outputs server control content to a provided <see cref="T:System.Web.UI.HtmlTextWriter" /> object and stores tracing information about the control if tracing is enabled.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter" /> object that receives the control content.</param>
        </member>
        <member name="M:Rock.Reporting.Dashboard.DashboardWidget.OnPreRender(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.PreRender" /> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs" /> object that contains the event data.</param>
        </member>
        <member name="P:Rock.Reporting.Dashboard.DashboardWidget.Title">
            <summary>
            Gets the Title attribute value
            </summary>
            <value>
            The title.
            </value>
        </member>
        <member name="P:Rock.Reporting.Dashboard.DashboardWidget.Subtitle">
            <summary>
            Gets the Subtitle attribute value
            </summary>
            <value>
            The subtitle.
            </value>
        </member>
        <member name="P:Rock.Reporting.Dashboard.DashboardWidget.ColumnWidth">
            <summary>
            Gets the Column Width attribute value
            This will be a value from 1-12 (or null) that represents the col-md- width of this Dashboard Widget
            </summary>
            <value>
            The width of the column.
            </value>
        </member>
        <member name="T:Rock.Data.DbService">
            <summary>
             Helper class to provide native SQL methods 
            </summary>
        </member>
        <member name="M:Rock.Data.DbService.GetDataReader(System.String,System.Data.CommandType,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Gets a data reader.
            </summary>
            <param name="query">The query.</param>
            <param name="commandType">Type of the command.</param>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Data.DbService.GetDataTable(System.String,System.Data.CommandType,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Gets a data table.
            </summary>
            <param name="query">The query.</param>
            <param name="commandType">Type of the command.</param>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Data.DbService.GetDataSet(System.String,System.Data.CommandType,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Gets a data set.
            </summary>
            <param name="query">The query.</param>
            <param name="commandType">Type of the command.</param>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Data.DbService.ExecuteCommand(System.String,System.Data.CommandType,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Executes the query, and returns number of rows affected
            </summary>
            <param name="query">The query.</param>
            <param name="commandType">Type of the command.</param>
            <param name="parameters">The parameters.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Rock.Data.DbService.ExecuteScaler(System.String,System.Data.CommandType,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Executes the query, and returns the first column of the first row in the
            result set returned by the query. Additional columns or rows are ignored.
            </summary>
            <param name="query">The query.</param>
            <param name="commandType">Type of the command.</param>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="T:Rock.Data.IgnoreCanDelete">
            <summary>
            Attribute so that the CodeGenerator knows to ignore this column when generating CanDelete code
            </summary>
        </member>
        <member name="T:Rock.Data.LinqRuntimeTypeBuilder">
            <summary>
            Helps create a Type at runtime that can be used when building a dynamic Linq select statement
            From http://stackoverflow.com/questions/606104/how-to-create-linq-expression-tree-with-anonymous-type-in-it
            see answer http://stackoverflow.com/a/723018/1755417
            The stackoverflow version only defined fields, but our implementation adds Properties
            </summary>
        </member>
        <member name="F:Rock.Data.LinqRuntimeTypeBuilder.assemblyName">
            <summary>
            Creates a new 'in-memory' assembly at runtime where the new type can be generated and stored
            </summary>
        </member>
        <member name="F:Rock.Data.LinqRuntimeTypeBuilder.moduleBuilder">
            <summary>
            The ModuleBuilder within our DynamicLinqTypes assembly where the new Type can be defined
            </summary>
        </member>
        <member name="F:Rock.Data.LinqRuntimeTypeBuilder.builtTypes">
            <summary>
            A place to store the types have already created so we don't have to recreate a type that has already been created
            </summary>
        </member>
        <member name="M:Rock.Data.LinqRuntimeTypeBuilder.#cctor">
            <summary>
            Initializes the <see cref="T:Rock.Data.LinqRuntimeTypeBuilder"/> class.
            </summary>
        </member>
        <member name="M:Rock.Data.LinqRuntimeTypeBuilder.GetTypeKey(System.Collections.Generic.Dictionary{System.String,System.Type})">
            <summary>
            Gets the type key which can be used to look in our cache of builtTypes
            </summary>
            <param name="fields">The fields.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Data.LinqRuntimeTypeBuilder.GetDynamicType(System.Collections.Generic.Dictionary{System.String,System.Type})">
            <summary>
            Creates a Type from a list of fields and their type then returns that Type 
            </summary>
            <param name="fields">The fields.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">fields</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">fields;fields must have at least 1 field definition</exception>
        </member>
        <member name="M:Rock.Data.LinqRuntimeTypeBuilder.GetTypeKey(System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo})">
            <summary>
            Gets the type key which can be used to look in our cache of builtTypes
            </summary>
            <param name="fields">The fields.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Data.LinqRuntimeTypeBuilder.GetDynamicType(System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo})">
            <summary>
            Creates a Type from a list of field PropertyInfos then returns that type
            </summary>
            <param name="fields">The fields.</param>
            <returns></returns>
        </member>
        <member name="T:Rock.Data.HideFromReportingAttribute">
            <summary>
            Custom attribute used to decorate model properties that should be not be pickable for report fields
            </summary>
        </member>
        <member name="T:Rock.Data.DbContext">
            <summary>
            Entity Framework Context
            </summary>
        </member>
        <member name="M:Rock.Data.DbContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Data.DbContext"/> class.
            </summary>
        </member>
        <member name="M:Rock.Data.DbContext.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Data.DbContext"/> class.
            </summary>
            <param name="nameOrConnectionString">Either the database name or a connection string.</param>
        </member>
        <member name="M:Rock.Data.DbContext.SaveChanges">
            <summary>
            Saves all changes made in this context to the underlying database.
            </summary>
            <returns>
            The number of objects written to the underlying database.
            </returns>
        </member>
        <member name="M:Rock.Data.DbContext.SaveChanges(System.Boolean)">
            <summary>
            Saves all changes made in this context to the underlying database.  The
            default pre and post processing can also optionally be disabled.  This 
            would disable audit records being created, workflows being triggered, and
            any PreSaveChanges() methods being called for changed entities.  
            </summary>
            <param name="disablePrePostProcessing">if set to <c>true</c> disables 
            the Pre and Post processing from being run. This should only be disabled
            when updating a large number of records at a time (e.g. importing records).</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Data.DbContext.RockPreSave(Rock.Data.DbContext,Rock.Model.PersonAlias)">
            <summary>
            Updates the Created/Modified data for any model being created or modified
            </summary>
            <param name="dbContext">The database context.</param>
            <param name="personAlias">The person alias.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Data.DbContext.RockPostSave(System.Collections.Generic.List{Rock.Data.DbContext.ContextItem},Rock.Model.PersonAlias)">
            <summary>
            Creates audit logs and/or triggers workflows for items that were changed
            </summary>
            <param name="updatedItems">The updated items.</param>
            <param name="personAlias">The person alias.</param>
        </member>
        <member name="P:Rock.Data.DbContext.SaveErrorMessages">
            <summary>
            Gets any error messages that occurred during a SaveChanges
            </summary>
            <value>
            The save error messages.
            </value>
        </member>
        <member name="T:Rock.Data.DbContext.ContextItem">
            <summary>
            State of entity being changed during a context save
            </summary>
        </member>
        <member name="M:Rock.Data.DbContext.ContextItem.#ctor(Rock.Data.IEntity,System.Data.Entity.EntityState)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Data.DbContext.ContextItem"/> class.
            </summary>
            <param name="entity">The entity.</param>
            <param name="state">The state.</param>
        </member>
        <member name="P:Rock.Data.DbContext.ContextItem.Entity">
            <summary>
            Gets or sets the entity.
            </summary>
            <value>
            The entity.
            </value>
        </member>
        <member name="P:Rock.Data.DbContext.ContextItem.State">
            <summary>
            Gets or sets the state.
            </summary>
            <value>
            The state.
            </value>
        </member>
        <member name="P:Rock.Data.DbContext.ContextItem.Audit">
            <summary>
            Gets or sets the audit.
            </summary>
            <value>
            The audit.
            </value>
        </member>
        <member name="T:Rock.Field.Types.CommunicationTemplateFieldType">
            <summary>
            Field Type to select 0 or more communication templates 
            </summary>
        </member>
        <member name="T:Rock.Field.FieldType">
            <summary>
            Abstract class that all custom field types should inherit from
            </summary>
        </member>
        <member name="M:Rock.Field.FieldType.#ctor">
            <summary>
            Initializes a new instance of the <see cref="N:Rock.Field"/> class.
            </summary>
        </member>
        <member name="M:Rock.Field.FieldType.FormatValue(System.Web.UI.Control,System.String,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.Boolean)">
            <summary>
            Returns the field's current value(s)
            </summary>
            <param name="parentControl">The parent control.</param>
            <param name="value">Information about the value</param>
            <param name="configurationValues">The configuration values.</param>
            <param name="condensed">Flag indicating if the value should be condensed (i.e. for use in a grid column)</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.FieldType.IsValid(System.String,System.Boolean,System.String@)">
            <summary>
            Tests the value to ensure that it is a valid value.  If not, message will indicate why
            </summary>
            <param name="value">The value.</param>
            <param name="required">if set to <c>true</c> [required].</param>
            <param name="message">The message.</param>
            <returns>
              <c>true</c> if the specified value is valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Rock.Field.FieldType.ConfigurationKeys">
            <summary>
            Returns a list of the configuration keys
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.FieldType.ConfigurationControls">
            <summary>
            Creates the HTML controls required to configure this type of field
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.FieldType.ConfigurationValues(System.Collections.Generic.List{System.Web.UI.Control})">
            <summary>
            Gets the configuration value.
            </summary>
            <param name="controls">The controls.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.FieldType.SetConfigurationValues(System.Collections.Generic.List{System.Web.UI.Control},System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue})">
            <summary>
            Sets the configuration value.
            </summary>
            <param name="controls">The controls.</param>
            <param name="configurationValues">The configuration values.</param>
        </member>
        <member name="M:Rock.Field.FieldType.EditControl(System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.String)">
            <summary>
            Creates the control(s) neccessary for prompting user for a new value
            </summary>
            <param name="configurationValues">The configuration values.</param>
            <param name="id"></param>
            <returns>
            The control
            </returns>
        </member>
        <member name="M:Rock.Field.FieldType.GetEditValue(System.Web.UI.Control,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue})">
            <summary>
            Reads new values entered by the user for the field
            </summary>
            <param name="control">Parent control that controls were added to in the CreateEditControl() method</param>
            <param name="configurationValues">The configuration values.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.FieldType.SetEditValue(System.Web.UI.Control,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.String)">
            <summary>
            Sets the value.
            </summary>
            <param name="control">The control.</param>
            <param name="configurationValues">The configuration values.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Rock.Field.FieldType.OnQualifierUpdated(System.Object,System.EventArgs)">
            <summary>
            Called when [qualifier updated].
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:Rock.Field.FieldType.AlignValue">
            <summary>
            Gets the align value that should be used when displaying value
            </summary>
        </member>
        <member name="E:Rock.Field.FieldType.QualifierUpdated">
            <summary>
            Occurs when [qualifier updated].
            </summary>
        </member>
        <member name="M:Rock.Field.Types.CommunicationTemplateFieldType.EditControl(System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.String)">
            <summary>
            Creates the control(s) neccessary for prompting user for a new value
            </summary>
            <param name="configurationValues">The configuration values.</param>
            <param name="id"></param>
            <returns>
            The control
            </returns>
        </member>
        <member name="M:Rock.Field.Types.CommunicationTemplateFieldType.GetEditValue(System.Web.UI.Control,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue})">
            <summary>
            Reads new values entered by the user for the field
            </summary>
            <param name="control">Parent control that controls were added to in the CreateEditControl() method</param>
            <param name="configurationValues"></param>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.CommunicationTemplateFieldType.SetEditValue(System.Web.UI.Control,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.String)">
            <summary>
            Sets the value.
            </summary>
            <param name="control">The control.</param>
            <param name="configurationValues"></param>
            <param name="value">The value.</param>
        </member>
        <member name="T:Rock.Field.Types.DaysOfWeekFieldType">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Field.Types.DaysOfWeekFieldType.FormatValue(System.Web.UI.Control,System.String,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.Boolean)">
            <summary>
            Returns the field's current value(s)
            </summary>
            <param name="parentControl">The parent control.</param>
            <param name="value">Information about the value</param>
            <param name="configurationValues">The configuration values.</param>
            <param name="condensed">Flag indicating if the value should be condensed (i.e. for use in a grid column)</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.DaysOfWeekFieldType.EditControl(System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.String)">
            <summary>
            Creates the control(s) neccessary for prompting user for a new value
            </summary>
            <param name="configurationValues">The configuration values.</param>
            <param name="id"></param>
            <returns>
            The control
            </returns>
        </member>
        <member name="M:Rock.Field.Types.DaysOfWeekFieldType.GetEditValue(System.Web.UI.Control,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue})">
            <summary>
            Reads new values entered by the user for the field
            </summary>
            <param name="control">Parent control that controls were added to in the CreateEditControl() method</param>
            <param name="configurationValues">The configuration values.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.DaysOfWeekFieldType.SetEditValue(System.Web.UI.Control,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.String)">
            <summary>
            Sets the value.
            </summary>
            <param name="control">The control.</param>
            <param name="configurationValues">The configuration values.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:Rock.Field.Types.DayOfWeekFieldType">
            <summary>
            Field Type to select a Day of the Week
            </summary>
        </member>
        <member name="M:Rock.Field.Types.DayOfWeekFieldType.FormatValue(System.Web.UI.Control,System.String,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.Boolean)">
            <summary>
            Returns the field's current value(s)
            </summary>
            <param name="parentControl">The parent control.</param>
            <param name="value">Information about the value</param>
            <param name="configurationValues">The configuration values.</param>
            <param name="condensed">Flag indicating if the value should be condensed (i.e. for use in a grid column)</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.DayOfWeekFieldType.EditControl(System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.String)">
            <summary>
            Creates the control(s) neccessary for prompting user for a new value
            </summary>
            <param name="configurationValues">The configuration values.</param>
            <param name="id"></param>
            <returns>
            The control
            </returns>
        </member>
        <member name="M:Rock.Field.Types.DayOfWeekFieldType.GetEditValue(System.Web.UI.Control,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue})">
            <summary>
            Reads new values entered by the user for the field
            </summary>
            <param name="control">Parent control that controls were added to in the CreateEditControl() method</param>
            <param name="configurationValues">The configuration values.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.DayOfWeekFieldType.SetEditValue(System.Web.UI.Control,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.String)">
            <summary>
            Sets the value.
            </summary>
            <param name="control">The control.</param>
            <param name="configurationValues">The configuration values.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:Rock.Field.Types.RemoteAuthsFieldType">
            <summary>
            Field Type used to display a checkbox list of MEF Components of a specific type
            </summary>
        </member>
        <member name="M:Rock.Field.Types.RemoteAuthsFieldType.FormatValue(System.Web.UI.Control,System.String,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.Boolean)">
            <summary>
            Returns the field's current value(s)
            </summary>
            <param name="parentControl">The parent control.</param>
            <param name="value">Information about the value</param>
            <param name="configurationValues">The configuration values.</param>
            <param name="condensed">Flag indicating if the value should be condensed (i.e. for use in a grid column)</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.RemoteAuthsFieldType.EditControl(System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.String)">
            <summary>
            Creates the control(s) neccessary for prompting user for a new value
            </summary>
            <param name="configurationValues">The configuration values.</param>
            <param name="id"></param>
            <returns>
            The control
            </returns>
        </member>
        <member name="M:Rock.Field.Types.RemoteAuthsFieldType.GetEditValue(System.Web.UI.Control,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue})">
            <summary>
            Reads new values entered by the user for the field
            </summary>
            <param name="control">Parent control that controls were added to in the CreateEditControl() method</param>
            <param name="configurationValues"></param>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.RemoteAuthsFieldType.SetEditValue(System.Web.UI.Control,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.String)">
            <summary>
            Sets the value.
            </summary>
            <param name="control">The control.</param>
            <param name="configurationValues"></param>
            <param name="value">The value.</param>
        </member>
        <member name="T:Rock.Field.Types.SiteFieldType">
            <summary>
            Field Type to select a single (or null) SiteFieldType
            </summary>
        </member>
        <member name="M:Rock.Field.Types.SiteFieldType.EditControl(System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.String)">
            <summary>
            Creates the control(s) neccessary for prompting user for a new value
            </summary>
            <param name="configurationValues">The configuration values.</param>
            <param name="id"></param>
            <returns>
            The control
            </returns>
        </member>
        <member name="M:Rock.Field.Types.SiteFieldType.GetEditValue(System.Web.UI.Control,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue})">
            <summary>
            Reads new values entered by the user for the field ( as int )
            </summary>
            <param name="control">Parent control that controls were added to in the CreateEditControl() method</param>
            <param name="configurationValues">The configuration values.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.SiteFieldType.SetEditValue(System.Web.UI.Control,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.String)">
            <summary>
            Sets the value. ( as int )
            </summary>
            <param name="control">The control.</param>
            <param name="configurationValues">The configuration values.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Rock.Field.Types.SiteFieldType.GetEditValueAsEntityId(System.Web.UI.Control,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue})">
            <summary>
            Gets the edit value as the IEntity.Id
            </summary>
            <param name="control">The control.</param>
            <param name="configurationValues">The configuration values.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.SiteFieldType.SetEditValueFromEntityId(System.Web.UI.Control,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.Nullable{System.Int32})">
            <summary>
            Sets the edit value from IEntity.Id value
            </summary>
            <param name="control">The control.</param>
            <param name="configurationValues">The configuration values.</param>
            <param name="id">The identifier.</param>
        </member>
        <member name="T:Rock.Field.Types.PersonBadgesFieldType">
            <summary>
            
            </summary>
        </member>
        <member name="T:Rock.Field.Types.SelectFromListFieldType">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Field.Types.SelectFromListFieldType.EditControl(System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.String)">
            <summary>
            Creates the control(s) neccessary for prompting user for a new value
            </summary>
            <param name="configurationValues">The configuration values.</param>
            <param name="id"></param>
            <returns>
            The control
            </returns>
        </member>
        <member name="M:Rock.Field.Types.SelectFromListFieldType.GetEditValue(System.Web.UI.Control,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue})">
            <summary>
            Reads new values entered by the user for the field
            </summary>
            <param name="control">Parent control that controls were added to in the CreateEditControl() method</param>
            <param name="configurationValues">The configuration values.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.SelectFromListFieldType.SetEditValue(System.Web.UI.Control,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.String)">
            <summary>
            Sets the value.
            </summary>
            <param name="control">The control.</param>
            <param name="configurationValues">The configuration values.</param>
            <param name="value">The value.</param>
        </member>
        <member name="P:Rock.Field.Types.SelectFromListFieldType.ListSource">
            <summary>
            Gets the list source.
            </summary>
            <value>
            The list source.
            </value>
        </member>
        <member name="P:Rock.Field.Types.PersonBadgesFieldType.ListSource">
            <summary>
            Gets the list source.
            </summary>
            <value>
            The list source.
            </value>
        </member>
        <member name="T:Rock.Field.Types.GroupLocationTypeFieldType">
            <summary>
            Field Type used to display a dropdown list of Defined Values for a specific Defined Type
            </summary>
        </member>
        <member name="M:Rock.Field.Types.GroupLocationTypeFieldType.FormatValue(System.Web.UI.Control,System.String,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.Boolean)">
            <summary>
            Returns the field's current value
            </summary>
            <param name="parentControl">The parent control.</param>
            <param name="value">Information about the value</param>
            <param name="configurationValues">The configuration values.</param>
            <param name="condensed">Flag indicating if the value should be condensed (i.e. for use in a grid column)</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.GroupLocationTypeFieldType.ConfigurationKeys">
            <summary>
            Returns a list of the configuration keys
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.GroupLocationTypeFieldType.ConfigurationControls">
            <summary>
            Creates the HTML controls required to configure this type of field
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.GroupLocationTypeFieldType.ConfigurationValues(System.Collections.Generic.List{System.Web.UI.Control})">
            <summary>
            Gets the configuration value.
            </summary>
            <param name="controls">The controls.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.GroupLocationTypeFieldType.SetConfigurationValues(System.Collections.Generic.List{System.Web.UI.Control},System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue})">
            <summary>
            Sets the configuration value.
            </summary>
            <param name="controls"></param>
            <param name="configurationValues"></param>
        </member>
        <member name="M:Rock.Field.Types.GroupLocationTypeFieldType.EditControl(System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.String)">
            <summary>
            Creates the control(s) neccessary for prompting user for a new value
            </summary>
            <param name="configurationValues">The configuration values.</param>
            <param name="id"></param>
            <returns>
            The control
            </returns>
        </member>
        <member name="M:Rock.Field.Types.GroupLocationTypeFieldType.GetEditValue(System.Web.UI.Control,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue})">
            <summary>
            Reads new values entered by the user for the field
            </summary>
            <param name="control">Parent control that controls were added to in the CreateEditControl() method</param>
            <param name="configurationValues"></param>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.GroupLocationTypeFieldType.SetEditValue(System.Web.UI.Control,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.String)">
            <summary>
            Sets the value.
            </summary>
            <param name="control">The control.</param>
            <param name="configurationValues"></param>
            <param name="value">The value.</param>
        </member>
        <member name="T:Rock.Field.Types.CodeEditorFieldType">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Field.Types.CodeEditorFieldType.ConfigurationKeys">
            <summary>
            Returns a list of the configuration keys
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.CodeEditorFieldType.ConfigurationControls">
            <summary>
            Creates the HTML controls required to configure this type of field
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.CodeEditorFieldType.ConfigurationValues(System.Collections.Generic.List{System.Web.UI.Control})">
            <summary>
            Gets the configuration value.
            </summary>
            <param name="controls">The controls.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.CodeEditorFieldType.SetConfigurationValues(System.Collections.Generic.List{System.Web.UI.Control},System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue})">
            <summary>
            Sets the configuration value.
            </summary>
            <param name="controls"></param>
            <param name="configurationValues"></param>
        </member>
        <member name="M:Rock.Field.Types.CodeEditorFieldType.EditControl(System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.String)">
            <summary>
            Creates the control(s) neccessary for prompting user for a new value
            </summary>
            <param name="configurationValues">The configuration values.</param>
            <param name="id"></param>
            <returns>
            The control
            </returns>
        </member>
        <member name="T:Rock.Field.Types.TimeFieldType">
            <summary>
            Field used to save and display a time value
            </summary>
        </member>
        <member name="M:Rock.Field.Types.TimeFieldType.FormatValue(System.Web.UI.Control,System.String,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.Boolean)">
            <summary>
            Formats time display
            </summary>
            <param name="parentControl">The parent control.</param>
            <param name="value">Information about the value</param>
            <param name="configurationValues">The configuration values.</param>
            <param name="condensed">Flag indicating if the value should be condensed (i.e. for use in a grid column)</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.TimeFieldType.EditControl(System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.String)">
            <summary>
            Creates the control(s) neccessary for prompting user for a new value
            </summary>
            <param name="configurationValues">The configuration values.</param>
            <param name="id"></param>
            <returns>
            The control
            </returns>
        </member>
        <member name="M:Rock.Field.Types.TimeFieldType.GetEditValue(System.Web.UI.Control,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue})">
            <summary>
            Reads new values entered by the user for the field
            </summary>
            <param name="control">Parent control that controls were added to in the CreateEditControl() method</param>
            <param name="configurationValues">The configuration values.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.TimeFieldType.SetEditValue(System.Web.UI.Control,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.String)">
            <summary>
            Sets the value.
            </summary>
            <param name="control">The control.</param>
            <param name="configurationValues">The configuration values.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:Rock.Field.Types.IntegerRangeFieldType">
            <summary>
            Field used to save and display a pair of integer values
            </summary>
        </member>
        <member name="M:Rock.Field.Types.IntegerRangeFieldType.IsValid(System.String,System.Boolean,System.String@)">
            <summary>
            Tests the value to ensure that it is a valid value.  If not, message will indicate why
            </summary>
            <param name="value">The value.</param>
            <param name="required">if set to <c>true</c> [required].</param>
            <param name="message">The message.</param>
            <returns>
              <c>true</c> if the specified value is valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Rock.Field.Types.IntegerRangeFieldType.EditControl(System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.String)">
            <summary>
            Creates the control(s) neccessary for prompting user for a new value
            </summary>
            <param name="configurationValues">The configuration values.</param>
            <param name="id"></param>
            <returns>
            The control
            </returns>
        </member>
        <member name="M:Rock.Field.Types.IntegerRangeFieldType.GetEditValue(System.Web.UI.Control,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue})">
            <summary>
            Reads new values entered by the user for the field
            </summary>
            <param name="control">Parent control that controls were added to in the CreateEditControl() method</param>
            <param name="configurationValues">The configuration values.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.IntegerRangeFieldType.SetEditValue(System.Web.UI.Control,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.String)">
            <summary>
            Sets the value.
            </summary>
            <param name="control">The control.</param>
            <param name="configurationValues">The configuration values.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Rock.Field.Types.IntegerRangeFieldType.FormatValue(System.Web.UI.Control,System.String,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.Boolean)">
            <summary>
            Returns the field's current value(s)
            </summary> 
            <param name="parentControl">The parent control.</param>
            <param name="value">Information about the value</param>
            <param name="configurationValues">The configuration values.</param>
            <param name="condensed">Flag indicating if the value should be condensed (i.e. for use in a grid column)</param>
            <returns></returns>
        </member>
        <member name="T:Rock.Field.Types.DateRangeFieldType">
            <summary>
            Field used to save and display a pair of date values
            </summary>
        </member>
        <member name="M:Rock.Field.Types.DateRangeFieldType.IsValid(System.String,System.Boolean,System.String@)">
            <summary>
            Tests the value to ensure that it is a valid value.  If not, message will indicate why
            </summary>
            <param name="value">The value.</param>
            <param name="required">if set to <c>true</c> [required].</param>
            <param name="message">The message.</param>
            <returns>
              <c>true</c> if the specified value is valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Rock.Field.Types.DateRangeFieldType.EditControl(System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.String)">
            <summary>
            Creates the control(s) neccessary for prompting user for a new value
            </summary>
            <param name="configurationValues">The configuration values.</param>
            <param name="id"></param>
            <returns>
            The control
            </returns>
        </member>
        <member name="M:Rock.Field.Types.DateRangeFieldType.GetEditValue(System.Web.UI.Control,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue})">
            <summary>
            Reads new values entered by the user for the field
            </summary>
            <param name="control">Parent control that controls were added to in the CreateEditControl() method</param>
            <param name="configurationValues">The configuration values.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.DateRangeFieldType.SetEditValue(System.Web.UI.Control,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.String)">
            <summary>
            Sets the value.
            </summary>
            <param name="control">The control.</param>
            <param name="configurationValues">The configuration values.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Rock.Field.Types.DateRangeFieldType.FormatValue(System.Web.UI.Control,System.String,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.Boolean)">
            <summary>
            Returns the field's current value(s)
            </summary> 
            <param name="parentControl">The parent control.</param>
            <param name="value">Information about the value</param>
            <param name="configurationValues">The configuration values.</param>
            <param name="condensed">Flag indicating if the value should be condensed (i.e. for use in a grid column)</param>
            <returns></returns>
        </member>
        <member name="T:Rock.Field.Types.DecimalRangeFieldType">
            <summary>
            Field used to save and display a pair of decimal values
            </summary>
        </member>
        <member name="M:Rock.Field.Types.DecimalRangeFieldType.IsValid(System.String,System.Boolean,System.String@)">
            <summary>
            Tests the value to ensure that it is a valid value.  If not, message will indicate why
            </summary>
            <param name="value">The value.</param>
            <param name="required">if set to <c>true</c> [required].</param>
            <param name="message">The message.</param>
            <returns>
              <c>true</c> if the specified value is valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Rock.Field.Types.DecimalRangeFieldType.EditControl(System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.String)">
            <summary>
            Creates the control(s) neccessary for prompting user for a new value
            </summary>
            <param name="configurationValues">The configuration values.</param>
            <param name="id"></param>
            <returns>
            The control
            </returns>
        </member>
        <member name="M:Rock.Field.Types.DecimalRangeFieldType.GetEditValue(System.Web.UI.Control,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue})">
            <summary>
            Reads new values entered by the user for the field
            </summary>
            <param name="control">Parent control that controls were added to in the CreateEditControl() method</param>
            <param name="configurationValues">The configuration values.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.DecimalRangeFieldType.SetEditValue(System.Web.UI.Control,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.String)">
            <summary>
            Sets the value.
            </summary>
            <param name="control">The control.</param>
            <param name="configurationValues">The configuration values.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Rock.Field.Types.DecimalRangeFieldType.FormatValue(System.Web.UI.Control,System.String,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.Boolean)">
            <summary>
            Returns the field's current value(s)
            </summary> 
            <param name="parentControl">The parent control.</param>
            <param name="value">Information about the value</param>
            <param name="configurationValues">The configuration values.</param>
            <param name="condensed">Flag indicating if the value should be condensed (i.e. for use in a grid column)</param>
            <returns></returns>
        </member>
        <member name="T:Rock.Financial.PaymentInfo">
            <summary>
            Information about a payment to be processed by a financial gateway
            </summary>
        </member>
        <member name="P:Rock.Financial.PaymentInfo.Amount">
            <summary>
            Gets or sets the amount.
            </summary>
        </member>
        <member name="P:Rock.Financial.PaymentInfo.FirstName">
            <summary>
            Gets or sets the first name.
            </summary>
        </member>
        <member name="P:Rock.Financial.PaymentInfo.LastName">
            <summary>
            Gets or sets the last name.
            </summary>
        </member>
        <member name="P:Rock.Financial.PaymentInfo.FullName">
            <summary>
            Gets the full name.
            </summary>
        </member>
        <member name="P:Rock.Financial.PaymentInfo.Email">
            <summary>
            Gets or sets the email.
            </summary>
            <value>
            The email.
            </value>
        </member>
        <member name="P:Rock.Financial.PaymentInfo.Phone">
            <summary>
            Gets or sets the phone.
            </summary>
            <value>
            The phone.
            </value>
        </member>
        <member name="P:Rock.Financial.PaymentInfo.Street">
            <summary>
            The billing street
            </summary>
        </member>
        <member name="P:Rock.Financial.PaymentInfo.City">
            <summary>
            The billing city
            </summary>
        </member>
        <member name="P:Rock.Financial.PaymentInfo.State">
            <summary>
            The billing state
            </summary>
        </member>
        <member name="P:Rock.Financial.PaymentInfo.Zip">
            <summary>
            The billing zip
            </summary>
        </member>
        <member name="P:Rock.Financial.PaymentInfo.MaskedNumber">
            <summary>
            Gets the account number.
            </summary>
        </member>
        <member name="P:Rock.Financial.PaymentInfo.CurrencyTypeValue">
            <summary>
            Gets the currency type value.
            </summary>
        </member>
        <member name="P:Rock.Financial.PaymentInfo.CreditCardTypeValue">
            <summary>
            Gets the credit card type value id.
            </summary>
        </member>
        <member name="T:Rock.Financial.SwipePaymentInfo">
            <summary>
            Information about a credit card swipe payment to be processed by a financial gateway.  A swipe
            payment is used when the card is present (physically used)
            </summary>
        </member>
        <member name="M:Rock.Financial.SwipePaymentInfo.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Financial.SwipePaymentInfo"/> struct.
            </summary>
            <param name="swipeInfo">The swipe info.</param>
        </member>
        <member name="P:Rock.Financial.SwipePaymentInfo.SwipeInfo">
            <summary>
            The information obtained from a card-present swipe
            </summary>
        </member>
        <member name="P:Rock.Financial.SwipePaymentInfo.MaskedNumber">
            <summary>
            Gets the account number.
            </summary>
        </member>
        <member name="P:Rock.Financial.SwipePaymentInfo.CurrencyTypeValue">
            <summary>
            Gets the currency type value.
            </summary>
        </member>
        <member name="T:Rock.Financial.ReferencePaymentInfo">
            <summary>
            Information about a reference payment to be processed by a financial gateway.  A 
            reference payment is initiated using a code returned by a previous payment (i.e. using
            a saved account number)
            </summary>
        </member>
        <member name="P:Rock.Financial.ReferencePaymentInfo.TransactionCode">
            <summary>
            Gets or sets the transaction code.
            </summary>
        </member>
        <member name="P:Rock.Financial.ReferencePaymentInfo.ReferenceNumber">
            <summary>
            Gets or sets the reference number.
            </summary>
        </member>
        <member name="P:Rock.Financial.ReferencePaymentInfo.MaskedAccountNumber">
            <summary>
            Gets or sets the masked account number.
            </summary>
        </member>
        <member name="P:Rock.Financial.ReferencePaymentInfo.InitialCurrencyTypeValue">
            <summary>
            Gets or sets the initial currency type value.
            </summary>
            <value>
            The initial currency type value.
            </value>
        </member>
        <member name="P:Rock.Financial.ReferencePaymentInfo.InitialCreditCardTypeValue">
            <summary>
            Gets or sets the initial credit card type value id.
            </summary>
            <value>
            The initial credit card type value id.
            </value>
        </member>
        <member name="P:Rock.Financial.ReferencePaymentInfo.MaskedNumber">
            <summary>
            Gets the account number.
            </summary>
        </member>
        <member name="P:Rock.Financial.ReferencePaymentInfo.CurrencyTypeValue">
            <summary>
            Gets the currency type value.
            </summary>
        </member>
        <member name="P:Rock.Financial.ReferencePaymentInfo.CreditCardTypeValue">
            <summary>
            Gets the credit card type value id.
            </summary>
        </member>
        <member name="T:Rock.Financial.PaymentSchedule">
            <summary>
            Information related to a scheduled payment frequency
            </summary>
        </member>
        <member name="M:Rock.Financial.PaymentSchedule.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Rock.Financial.PaymentSchedule.PersonId">
            <summary>
            Gets or sets the person id that is authorizing the payment schedule
            </summary>
            <value>
            The person id.
            </value>
        </member>
        <member name="P:Rock.Financial.PaymentSchedule.TransactionFrequencyValue">
            <summary>
            Gets or sets the transaction frequency value.
            </summary>
            <value>
            The transaction frequency value.
            </value>
        </member>
        <member name="P:Rock.Financial.PaymentSchedule.StartDate">
            <summary>
            Gets or sets the start date.
            </summary>
            <value>
            The start date.
            </value>
        </member>
        <member name="P:Rock.Financial.PaymentSchedule.EndDate">
            <summary>
            Gets or sets the end date.
            </summary>
            <value>
            The end date.
            </value>
        </member>
        <member name="P:Rock.Financial.PaymentSchedule.NumberOfPayments">
            <summary>
            Gets or sets the number of payments.
            </summary>
            <value>
            The number of payments.
            </value>
        </member>
        <member name="T:Rock.Financial.Payment">
            <summary>
            Information about a scheduled payment transaction that has been processed
            </summary>
        </member>
        <member name="P:Rock.Financial.Payment.Amount">
            <summary>
            Gets or sets the amount.
            </summary>
        </member>
        <member name="P:Rock.Financial.Payment.TransactionCode">
            <summary>
            Gets or sets the transaction code.
            </summary>
        </member>
        <member name="P:Rock.Financial.Payment.TransactionDateTime">
            <summary>
            Gets or sets the transaction date time.
            </summary>
        </member>
        <member name="P:Rock.Financial.Payment.GatewayScheduleId">
            <summary>
            Gets or sets the gateway schedule id.
            </summary>
        </member>
        <member name="P:Rock.Financial.Payment.ScheduleActive">
            <summary>
            Gets or sets a value indicating whether schedule is still active.
            </summary>
        </member>
        <member name="T:Rock.Financial.GatewayComponent">
            <summary>
            Base class for financial provider components
            </summary>
        </member>
        <member name="M:Rock.Financial.GatewayComponent.Charge(Rock.Financial.PaymentInfo,System.String@)">
            <summary>
            Charges the specified payment info.
            </summary>
            <param name="paymentInfo">The payment info.</param>
            <param name="errorMessage">The error message.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Financial.GatewayComponent.AddScheduledPayment(Rock.Financial.PaymentSchedule,Rock.Financial.PaymentInfo,System.String@)">
            <summary>
            Adds the scheduled payment.
            </summary>
            <param name="schedule">The schedule.</param>
            <param name="paymentInfo">The payment info.</param>
            <param name="errorMessage">The error message.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Financial.GatewayComponent.UpdateScheduledPayment(Rock.Model.FinancialScheduledTransaction,Rock.Financial.PaymentInfo,System.String@)">
            <summary>
            Updates the scheduled payment.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="paymentInfo">The payment info.</param>
            <param name="errorMessage">The error message.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Financial.GatewayComponent.CancelScheduledPayment(Rock.Model.FinancialScheduledTransaction,System.String@)">
            <summary>
            Cancels the scheduled payment.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="errorMessage">The error message.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Financial.GatewayComponent.GetScheduledPaymentStatus(Rock.Model.FinancialScheduledTransaction,System.String@)">
            <summary>
            Gets the scheduled payment status.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="errorMessage">The error message.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Financial.GatewayComponent.GetPayments(System.DateTime,System.DateTime,System.String@)">
            <summary>
            Gets the payments that have been processed for any scheduled transactions
            </summary>
            <param name="startDate">The start date.</param>
            <param name="endDate">The end date.</param>
            <param name="errorMessage">The error message.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Financial.GatewayComponent.GetReferenceNumber(Rock.Model.FinancialTransaction,System.String@)">
            <summary>
            Gets an optional reference number needed to process future transaction from saved account.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="errorMessage">The error message.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Financial.GatewayComponent.GetReferenceNumber(Rock.Model.FinancialScheduledTransaction,System.String@)">
            <summary>
            Gets an optional reference number needed to process future transaction from saved account.
            </summary>
            <param name="scheduledTransaction">The scheduled transaction.</param>
            <param name="errorMessage">The error message.</param>
            <returns></returns>
        </member>
        <member name="P:Rock.Financial.GatewayComponent.SplitNameOnCard">
            <summary>
            Gets a value indicating whether gateway provider needs first and last name on credit card as two distinct fields.
            </summary>
            <value>
              <c>true</c> if [split name on card]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Financial.GatewayComponent.SupportedPaymentSchedules">
            <summary>
            Gets the supported payment schedules.
            </summary>
            <value>
            The supported payment schedules.
            </value>
        </member>
        <member name="P:Rock.Financial.GatewayComponent.BatchTimeOffset">
            <summary>
            Gets the batch time offset.  By default online payments will be grouped into batches with a start time
            of 12:00:00 AM.  However if the the payment gateway groups transactions into batches based on a different
            time, this offset can specified so that Rock will use the same time when creating batches for online
            transactions
            </summary>
        </member>
        <member name="T:Rock.Financial.GatewayContainer">
            <summary>
            MEF Container class for Binary File Gateway Components
            </summary>
        </member>
        <member name="F:Rock.Financial.GatewayContainer.instance">
            <summary>
            Singleton instance
            </summary>
        </member>
        <member name="M:Rock.Financial.GatewayContainer.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:Rock.Financial.GatewayContainer"/> class from being created.
            </summary>
        </member>
        <member name="M:Rock.Financial.GatewayContainer.GetComponent(System.String)">
            <summary>
            Gets the component with the matching Entity Type Name.
            </summary>
            <param name="entityType">Type of the entity.</param>
            <returns></returns>
        </member>
        <member name="P:Rock.Financial.GatewayContainer.Instance">
            <summary>
            Gets the instance.
            </summary>
            <value>
            The instance.
            </value>
        </member>
        <member name="P:Rock.Financial.GatewayContainer.MEFComponents">
            <summary>
            Gets or sets the MEF components.
            </summary>
            <value>
            The MEF components.
            </value>
        </member>
        <member name="T:Rock.Jobs.LocationServicesVerify">
            <summary>
            Job to keep a heartbeat of the job process so we know when the jobs stop working
            </summary>
        </member>
        <member name="M:Rock.Jobs.LocationServicesVerify.#ctor">
            <summary> 
            Empty constructor for job initilization
            <para>
            Jobs require a public empty constructor so that the
            scheduler can instantiate the class whenever it needs.
            </para>
            </summary>
        </member>
        <member name="M:Rock.Jobs.LocationServicesVerify.Execute(Quartz.IJobExecutionContext)">
            <summary> 
            Job that updates the JobPulse setting with the current date/time.
            This will allow us to notify an admin if the jobs stop running.
            
            Called by the <see cref="T:Quartz.IScheduler"/> when a
            <see cref="T:Quartz.ITrigger"/> fires that is associated with
            the <see cref="T:Quartz.IJob"/>.
            </summary>
        </member>
        <member name="T:Rock.Jobs.LaunchWorkflow">
            <summary>
            Job to launch a workflow
            </summary>
        </member>
        <member name="M:Rock.Jobs.LaunchWorkflow.#ctor">
            <summary> 
            Empty constructor for job initialization
            <para>
            Jobs require a public empty constructor so that the
            scheduler can instantiate the class whenever it needs.
            </para>
            </summary>
        </member>
        <member name="M:Rock.Jobs.LaunchWorkflow.Execute(Quartz.IJobExecutionContext)">
            <summary>
            Job that will launch a workflow.
            
            Called by the <see cref="T:Quartz.IScheduler"/> when a
            <see cref="T:Quartz.ITrigger"/> fires that is associated with
            the <see cref="T:Quartz.IJob"/>.
            </summary>
        </member>
        <member name="M:Rock.Jobs.LaunchWorkflow.LaunchTheWorkflow(System.String)">
            <summary>
            Launch the workflow
            </summary>
        </member>
        <member name="T:Rock.Jobs.SendCommunications">
            <summary>
            Job to process communications
            </summary>
        </member>
        <member name="M:Rock.Jobs.SendCommunications.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Jobs.SendCommunications"/> class.
            </summary>
        </member>
        <member name="M:Rock.Jobs.SendCommunications.Execute(Quartz.IJobExecutionContext)">
            <summary>
            Executes the specified context.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="T:Rock.Jobs.RunSQL">
            <summary>
            Job to run quick SQL queries on a schedule
            </summary>
        </member>
        <member name="M:Rock.Jobs.RunSQL.#ctor">
            <summary> 
            Empty constructor for job initialization
            <para>
            Jobs require a public empty constructor so that the
            scheduler can instantiate the class whenever it needs.
            </para>
            </summary>
        </member>
        <member name="M:Rock.Jobs.RunSQL.Execute(Quartz.IJobExecutionContext)">
            <summary>
            Job that will run quick SQL queries on a schedule.
            
            Called by the <see cref="T:Quartz.IScheduler"/> when a
            <see cref="T:Quartz.ITrigger"/> fires that is associated with
            the <see cref="T:Quartz.IJob"/>.
            </summary>
        </member>
        <member name="T:Rock.Model.CommunicationRecipientActivityService">
            <summary>
            CommunicationRecipientActivity Service class
            </summary>
        </member>
        <member name="M:Rock.Model.CommunicationRecipientActivityService.#ctor(Rock.Data.RockContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.CommunicationRecipientActivityService"/> class
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Rock.Model.CommunicationRecipientActivityService.CanDelete(Rock.Model.CommunicationRecipientActivity,System.String@)">
            <summary>
            Determines whether this instance can delete the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="errorMessage">The error message.</param>
            <returns>
              <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Rock.Model.CommunicationRecipientActivityExtensionMethods">
            <summary>
            Generated Extension Methods
            </summary>
        </member>
        <member name="M:Rock.Model.CommunicationRecipientActivityExtensionMethods.Clone(Rock.Model.CommunicationRecipientActivity,System.Boolean)">
            <summary>
            Clones this CommunicationRecipientActivity object to a new CommunicationRecipientActivity object
            </summary>
            <param name="source">The source.</param>
            <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.CommunicationRecipientActivityExtensionMethods.CopyPropertiesFrom(Rock.Model.CommunicationRecipientActivity,Rock.Model.CommunicationRecipientActivity)">
            <summary>
            Copies the properties from another CommunicationRecipientActivity object to this CommunicationRecipientActivity object
            </summary>
            <param name="target">The target.</param>
            <param name="source">The source.</param>
        </member>
        <member name="T:Rock.Model.CommunicationTemplateService">
            <summary>
            CommunicationTemplate Service class
            </summary>
        </member>
        <member name="M:Rock.Model.CommunicationTemplateService.#ctor(Rock.Data.RockContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.CommunicationTemplateService"/> class
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Rock.Model.CommunicationTemplateService.CanDelete(Rock.Model.CommunicationTemplate,System.String@)">
            <summary>
            Determines whether this instance can delete the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="errorMessage">The error message.</param>
            <returns>
              <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Rock.Model.CommunicationTemplateExtensionMethods">
            <summary>
            Generated Extension Methods
            </summary>
        </member>
        <member name="M:Rock.Model.CommunicationTemplateExtensionMethods.Clone(Rock.Model.CommunicationTemplate,System.Boolean)">
            <summary>
            Clones this CommunicationTemplate object to a new CommunicationTemplate object
            </summary>
            <param name="source">The source.</param>
            <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.CommunicationTemplateExtensionMethods.CopyPropertiesFrom(Rock.Model.CommunicationTemplate,Rock.Model.CommunicationTemplate)">
            <summary>
            Copies the properties from another CommunicationTemplate object to this CommunicationTemplate object
            </summary>
            <param name="target">The target.</param>
            <param name="source">The source.</param>
        </member>
        <member name="T:Rock.Model.MetricCategoryService">
            <summary>
            MetricCategory Service class
            </summary>
        </member>
        <member name="M:Rock.Model.MetricCategoryService.#ctor(Rock.Data.RockContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.MetricCategoryService"/> class
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Rock.Model.MetricCategoryService.CanDelete(Rock.Model.MetricCategory,System.String@)">
            <summary>
            Determines whether this instance can delete the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="errorMessage">The error message.</param>
            <returns>
              <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Rock.Model.MetricCategoryExtensionMethods">
            <summary>
            Generated Extension Methods
            </summary>
        </member>
        <member name="M:Rock.Model.MetricCategoryExtensionMethods.Clone(Rock.Model.MetricCategory,System.Boolean)">
            <summary>
            Clones this MetricCategory object to a new MetricCategory object
            </summary>
            <param name="source">The source.</param>
            <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.MetricCategoryExtensionMethods.CopyPropertiesFrom(Rock.Model.MetricCategory,Rock.Model.MetricCategory)">
            <summary>
            Copies the properties from another MetricCategory object to this MetricCategory object
            </summary>
            <param name="target">The target.</param>
            <param name="source">The source.</param>
        </member>
        <member name="T:Rock.Model.MetricService">
            <summary>
            Metric Service class
            </summary>
        </member>
        <member name="M:Rock.Model.MetricService.#ctor(Rock.Data.RockContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.MetricService"/> class
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Rock.Model.MetricService.CanDelete(Rock.Model.Metric,System.String@)">
            <summary>
            Determines whether this instance can delete the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="errorMessage">The error message.</param>
            <returns>
              <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Rock.Model.MetricExtensionMethods">
            <summary>
            Generated Extension Methods
            </summary>
        </member>
        <member name="M:Rock.Model.MetricExtensionMethods.Clone(Rock.Model.Metric,System.Boolean)">
            <summary>
            Clones this Metric object to a new Metric object
            </summary>
            <param name="source">The source.</param>
            <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.MetricExtensionMethods.CopyPropertiesFrom(Rock.Model.Metric,Rock.Model.Metric)">
            <summary>
            Copies the properties from another Metric object to this Metric object
            </summary>
            <param name="target">The target.</param>
            <param name="source">The source.</param>
        </member>
        <member name="T:Rock.Model.MetricValueService">
            <summary>
            MetricValue Service class
            </summary>
        </member>
        <member name="M:Rock.Model.MetricValueService.#ctor(Rock.Data.RockContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.MetricValueService"/> class
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Rock.Model.MetricValueService.CanDelete(Rock.Model.MetricValue,System.String@)">
            <summary>
            Determines whether this instance can delete the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="errorMessage">The error message.</param>
            <returns>
              <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Rock.Model.MetricValueExtensionMethods">
            <summary>
            Generated Extension Methods
            </summary>
        </member>
        <member name="M:Rock.Model.MetricValueExtensionMethods.Clone(Rock.Model.MetricValue,System.Boolean)">
            <summary>
            Clones this MetricValue object to a new MetricValue object
            </summary>
            <param name="source">The source.</param>
            <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.MetricValueExtensionMethods.CopyPropertiesFrom(Rock.Model.MetricValue,Rock.Model.MetricValue)">
            <summary>
            Copies the properties from another MetricValue object to this MetricValue object
            </summary>
            <param name="target">The target.</param>
            <param name="source">The source.</param>
        </member>
        <member name="T:Rock.Model.WorkflowActionFormAttributeService">
            <summary>
            WorkflowActionFormAttribute Service class
            </summary>
        </member>
        <member name="M:Rock.Model.WorkflowActionFormAttributeService.#ctor(Rock.Data.RockContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.WorkflowActionFormAttributeService"/> class
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Rock.Model.WorkflowActionFormAttributeService.CanDelete(Rock.Model.WorkflowActionFormAttribute,System.String@)">
            <summary>
            Determines whether this instance can delete the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="errorMessage">The error message.</param>
            <returns>
              <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Rock.Model.WorkflowActionFormAttributeExtensionMethods">
            <summary>
            Generated Extension Methods
            </summary>
        </member>
        <member name="M:Rock.Model.WorkflowActionFormAttributeExtensionMethods.Clone(Rock.Model.WorkflowActionFormAttribute,System.Boolean)">
            <summary>
            Clones this WorkflowActionFormAttribute object to a new WorkflowActionFormAttribute object
            </summary>
            <param name="source">The source.</param>
            <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.WorkflowActionFormAttributeExtensionMethods.CopyPropertiesFrom(Rock.Model.WorkflowActionFormAttribute,Rock.Model.WorkflowActionFormAttribute)">
            <summary>
            Copies the properties from another WorkflowActionFormAttribute object to this WorkflowActionFormAttribute object
            </summary>
            <param name="target">The target.</param>
            <param name="source">The source.</param>
        </member>
        <member name="T:Rock.Model.WorkflowActionFormService">
            <summary>
            WorkflowActionForm Service class
            </summary>
        </member>
        <member name="M:Rock.Model.WorkflowActionFormService.#ctor(Rock.Data.RockContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.WorkflowActionFormService"/> class
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Rock.Model.WorkflowActionFormService.CanDelete(Rock.Model.WorkflowActionForm,System.String@)">
            <summary>
            Determines whether this instance can delete the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="errorMessage">The error message.</param>
            <returns>
              <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Rock.Model.WorkflowActionFormExtensionMethods">
            <summary>
            Generated Extension Methods
            </summary>
        </member>
        <member name="M:Rock.Model.WorkflowActionFormExtensionMethods.Clone(Rock.Model.WorkflowActionForm,System.Boolean)">
            <summary>
            Clones this WorkflowActionForm object to a new WorkflowActionForm object
            </summary>
            <param name="source">The source.</param>
            <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.WorkflowActionFormExtensionMethods.CopyPropertiesFrom(Rock.Model.WorkflowActionForm,Rock.Model.WorkflowActionForm)">
            <summary>
            Copies the properties from another WorkflowActionForm object to this WorkflowActionForm object
            </summary>
            <param name="target">The target.</param>
            <param name="source">The source.</param>
        </member>
        <member name="T:Rock.Model.WorkflowActionService">
            <summary>
            WorkflowAction Service class
            </summary>
        </member>
        <member name="M:Rock.Model.WorkflowActionService.#ctor(Rock.Data.RockContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.WorkflowActionService"/> class
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Rock.Model.WorkflowActionService.CanDelete(Rock.Model.WorkflowAction,System.String@)">
            <summary>
            Determines whether this instance can delete the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="errorMessage">The error message.</param>
            <returns>
              <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Rock.Model.WorkflowActionExtensionMethods">
            <summary>
            Generated Extension Methods
            </summary>
        </member>
        <member name="M:Rock.Model.WorkflowActionExtensionMethods.Clone(Rock.Model.WorkflowAction,System.Boolean)">
            <summary>
            Clones this WorkflowAction object to a new WorkflowAction object
            </summary>
            <param name="source">The source.</param>
            <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.WorkflowActionExtensionMethods.CopyPropertiesFrom(Rock.Model.WorkflowAction,Rock.Model.WorkflowAction)">
            <summary>
            Copies the properties from another WorkflowAction object to this WorkflowAction object
            </summary>
            <param name="target">The target.</param>
            <param name="source">The source.</param>
        </member>
        <member name="T:Rock.Model.CommunicationRecipientActivity">
            <summary>
            Communication Recipient Activity POCO Entity.
            </summary>
        </member>
        <member name="F:Rock.Model.CommunicationRecipientActivity.ACTIVITY_TYPE_CLICK">
            <summary>
            User clicked link
            </summary>
        </member>
        <member name="M:Rock.Model.CommunicationRecipientActivity.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Rock.Model.CommunicationRecipientActivity.CommunicationRecipientId">
            <summary>
            Gets or sets the the CommunicationRecipientId of the <see cref="T:Rock.Model.CommunicationRecipient"/>.
            </summary>
            <value>
            A <see cref="T:System.Int32"/> representing the CommunicationRecipientId of the <see cref="T:Rock.Model.CommunicationRecipient"/>.
            </value>
        </member>
        <member name="P:Rock.Model.CommunicationRecipientActivity.ActivityDateTime">
            <summary>
            Gets or sets the activity date time.
            </summary>
            <value>
            The activity date time.
            </value>
        </member>
        <member name="P:Rock.Model.CommunicationRecipientActivity.ActivityType">
            <summary>
            Gets or sets the type of the activity.
            </summary>
            <value>
            The type of the activity.
            </value>
        </member>
        <member name="P:Rock.Model.CommunicationRecipientActivity.ActivityDetail">
            <summary>
            Gets or sets the activity detail.
            </summary>
            <value>
            The activity detail.
            </value>
        </member>
        <member name="P:Rock.Model.CommunicationRecipientActivity.CommunicationRecipient">
            <summary>
            Gets or sets the <see cref="T:Rock.Model.CommunicationRecipient"/>.
            </summary>
            <value>
            The <see cref="T:Rock.Model.CommunicationRecipient"/>
            </value>
        </member>
        <member name="T:Rock.Model.CommunicationRecipientActivityConfiguration">
            <summary>
            Communication Recipient Configuration class.
            </summary>
        </member>
        <member name="M:Rock.Model.CommunicationRecipientActivityConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.CommunicationRecipientActivityConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Rock.Model.CommunicationTemplate">
            <summary>
            Represents a communication Template in Rock (i.e. email, SMS message, etc.).
            </summary>
        </member>
        <member name="M:Rock.Model.CommunicationTemplate.GetChannelDataValue(System.String)">
            <summary>
            Returns a channel data value.
            </summary>
            <param name="key">A <see cref="T:System.String"/> containing the key associated with the value to retrieve. </param>
            <returns>A <see cref="T:System.String"/> representing the value that is linked with the specified key.</returns>
        </member>
        <member name="M:Rock.Model.CommunicationTemplate.SetChannelDataValue(System.String,System.String)">
            <summary>
            Sets a channel data value. If the key exists, the value will be replaced with the new value, otherwise a new key value pair will be added to dictionary.
            </summary>
            <param name="key">A <see cref="T:System.String"/> representing the key.</param>
            <param name="value">A <see cref="T:System.String"/> representing the value.</param>
        </member>
        <member name="M:Rock.Model.CommunicationTemplate.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Rock.Model.CommunicationTemplate.Name">
            <summary>
            Gets or sets the name of the Communication Template
            </summary>
            <value>
            A <see cref="T:System.String"/> that represents the name of the communication template
            </value>
        </member>
        <member name="P:Rock.Model.CommunicationTemplate.Description">
            <summary>
            Gets or sets the description.
            </summary>
            <value>
            The description.
            </value>
        </member>
        <member name="P:Rock.Model.CommunicationTemplate.SenderPersonAliasId">
            <summary>
            Gets or sets the PersonId of the <see cref="T:Rock.Model.Person"/> who is the sender of the Communication
            </summary>
            <value>
            A <see cref="T:System.Int32"/> representing the PersonId of the <see cref="T:Rock.Model.Person"/> who is the sender of the Communication.
            </value>
        </member>
        <member name="P:Rock.Model.CommunicationTemplate.Subject">
            <summary>
            Gets or sets the Subject of the Communication
            </summary>
            <value>
            A <see cref="T:System.String"/> that represents the Subject of the communication.
            </value>
        </member>
        <member name="P:Rock.Model.CommunicationTemplate.ChannelEntityTypeId">
            <summary>
            Gets or sets the EntityTypeId of the <see cref="T:Rock.Model.EntityType"/> for the Communication Channel that is being used for this Communication.
            </summary>
            <value>
            A <see cref="T:System.Int32"/> representing the EntityTypeId of the <see cref="T:Rock.Model.EntityType"/> for the Communication Channel that is being used for this Communication. 
            </value>
        </member>
        <member name="P:Rock.Model.CommunicationTemplate.ChannelDataJson">
            <summary>
            Gets or sets a Json formatted string containing the Channel specific data.
            </summary>
            <value>
            A Json formatted <see cref="T:System.String"/> that contains any Channel specific data.
            </value>
        </member>
        <member name="P:Rock.Model.CommunicationTemplate.SenderPersonAlias">
            <summary>
            Gets or sets the <see cref="T:Rock.Model.PersonAlias"/> of the Communication's sender.
            </summary>
            <value>
            A <see cref="T:Rock.Model.PersonAlias"/> that represents the Communication's sender.
            </value>
        </member>
        <member name="P:Rock.Model.CommunicationTemplate.ChannelEntityType">
            <summary>
            Gets or sets the <see cref="T:Rock.Model.EntityType"/> of the communications Channel that is being used by this Communication.
            </summary>
            <value>
            The <see cref="T:Rock.Model.EntityType"/> of the communications Channel that is being used by this Communication.
            </value>
        </member>
        <member name="P:Rock.Model.CommunicationTemplate.Channel">
            <summary>
            Gets the <see cref="T:Rock.Communication.ChannelComponent"/> for the communication channel that is being used.
            </summary>
            <value>
            The <see cref="T:Rock.Communication.ChannelComponent"/> for the communication channel that is being used.
            </value>
        </member>
        <member name="P:Rock.Model.CommunicationTemplate.ChannelData">
            <summary>
            Gets or sets the data used by the selected communication channel.
            </summary>
            <value>
            A <see cref="T:System.Collections.Generic.Dictionary`2"/> of key value pairs that contain channel specific data.
            </value>
        </member>
        <member name="T:Rock.Model.CommunicationTemplateConfiguration">
            <summary>
            Communication Configuration class.
            </summary>
        </member>
        <member name="M:Rock.Model.CommunicationTemplateConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.CommunicationTemplateConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Rock.Model.FinancialPersonBankAccountService">
            <summary>
            Service and data access class for <see cref="T:Rock.Model.FinancialPersonBankAccount"/> objects.
            </summary>
            <summary>
            FinancialPersonBankAccount Service class
            </summary>
        </member>
        <member name="M:Rock.Model.FinancialPersonBankAccountService.Get(System.String,System.String)">
            <summary>
            Gets the specified bank account record.
            </summary>
            <param name="routingNumber">The routing number.</param>
            <param name="accountNumber">The account number.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.FinancialPersonBankAccountService.#ctor(Rock.Data.RockContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.FinancialPersonBankAccountService"/> class
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Rock.Model.FinancialPersonBankAccountService.CanDelete(Rock.Model.FinancialPersonBankAccount,System.String@)">
            <summary>
            Determines whether this instance can delete the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="errorMessage">The error message.</param>
            <returns>
              <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Rock.Model.FinancialTransactionImage">
            <summary>
            Represents an image that is associated with a <see cref="T:Rock.Model.FinancialTransaction"/>. Examples could be 
            the front or back side of a check or an offering envelope.
            </summary>
        </member>
        <member name="M:Rock.Model.FinancialTransactionImage.PreSaveChanges(Rock.Data.DbContext,System.Data.Entity.EntityState)">
            <summary>
            Pres the save.
            </summary>
            <param name="dbContext">The database context.</param>
            <param name="state">The state.</param>
        </member>
        <member name="P:Rock.Model.FinancialTransactionImage.TransactionId">
            <summary>
            Gets or sets the TransactionId of the <see cref="T:Rock.Model.FinancialTransaction"/> that this image belongs to
            </summary>
            <value>
            A <see cref="T:System.Int32"/> representing the <see cref="T:Rock.Model.FinancialTransaction"/>that this image belongs to.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialTransactionImage.BinaryFileId">
            <summary>
            Gets or sets the BinaryFileId of the image's <see cref="T:Rock.Model.BinaryFile"/> 
            </summary>
            <value>
            A <see cref="T:System.Int32"/> representing BinaryFileId of the image's <see cref="T:Rock.Model.BinaryFile"/>
            </value>
        </member>
        <member name="P:Rock.Model.FinancialTransactionImage.TransactionImageTypeValueId">
            <summary>
            Gets or sets DefinedValueId of the transaction image type <see cref="T:Rock.Model.DefinedValue"/> for this image.
            </summary>
            <value>
            A <see cref="T:System.Int32"/> representing the DefinedValueId of the transaction image type <see cref="T:Rock.Model.DefinedValue"/>
            for this image.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialTransactionImage.Transaction">
            <summary>
            Gets or sets the <see cref="T:Rock.Model.FinancialTransaction"/> that this image belongs to.
            </summary>
            <value>
            The <see cref="T:Rock.Model.FinancialTransaction"/> that this image belongs to.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialTransactionImage.BinaryFile">
            <summary>
            Gets or sets the <see cref="T:Rock.Model.BinaryFile"/> of the image.
            </summary>
            <value>
            The image's <see cref="T:Rock.Model.BinaryFile"/>
            </value>
        </member>
        <member name="P:Rock.Model.FinancialTransactionImage.TransactionImageTypeValue">
            <summary>
            Gets or sets the transaction image type <see cref="T:Rock.Model.DefinedValue"/> of this image.
            </summary>
            <value>
            The transaction image type <see cref="T:Rock.Model.DefinedValue"/> of this image.
            </value>
        </member>
        <member name="T:Rock.Model.FinancialTransactionImageConfiguration">
            <summary>
            TransactionImage Configuration class
            </summary>
        </member>
        <member name="M:Rock.Model.FinancialTransactionImageConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.FinancialTransactionImageConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Rock.Model.MetricCategory">
            <summary>
            
            </summary>
        </member>
        <member name="T:Rock.Data.IOrdered">
            <summary>
            Represents a model that supports specific ordering
            </summary>
        </member>
        <member name="P:Rock.Data.IOrdered.Order">
            <summary>
            Gets or sets the order.
            </summary>
            <value>
            The order.
            </value>
        </member>
        <member name="T:Rock.Data.ICategorized">
            <summary>
            Represents a model that is categorized (has a foreign key to the Category model)
            </summary>
        </member>
        <member name="P:Rock.Data.ICategorized.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:Rock.Data.ICategorized.CategoryId">
            <summary>
            Gets or sets the category id.
            </summary>
            <value>
            The category id.
            </value>
        </member>
        <member name="P:Rock.Data.ICategorized.Category">
            <summary>
            Gets or sets the category.
            </summary>
            <value>
            The category.
            </value>
        </member>
        <member name="M:Rock.Model.MetricCategory.IsAuthorized(System.String,Rock.Model.Person)">
            <summary>
            Return <c>true</c> if the user is authorized to perform the selected action on this object.
            </summary>
            <param name="action">The action.</param>
            <param name="person">The person.</param>
            <returns>
              <c>true</c> if the specified action is authorized; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Rock.Model.MetricCategory.IsAllowedByDefault(System.String)">
            <summary>
            If a user or role is not specifically allowed or denied to perform the selected action,
            return <c>true</c> if they should be allowed anyway or <c>false</c> if not.
            </summary>
            <param name="action">The action.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.MetricCategory.IsPrivate(System.String,Rock.Model.Person)">
            <summary>
            Determines whether the specified action is private (Only the current user has access).
            </summary>
            <param name="action">The action.</param>
            <param name="person">The person.</param>
            <returns>
              <c>true</c> if the specified action is private; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Rock.Model.MetricCategory.MakePrivate(System.String,Rock.Model.Person)">
            <summary>
            Makes the action on the current entity private (Only the current user will have access).
            </summary>
            <param name="action">The action.</param>
            <param name="person">The person.</param>
        </member>
        <member name="M:Rock.Model.MetricCategory.MakeUnPrivate(System.String,Rock.Model.Person)">
            <summary>
            If action on the current entity is private, removes security that made it private.
            </summary>
            <param name="action">The action.</param>
            <param name="person">The person.</param>
        </member>
        <member name="P:Rock.Model.MetricCategory.MetricId">
            <summary>
            Gets or sets the metric identifier.
            </summary>
            <value>
            The metric identifier.
            </value>
        </member>
        <member name="P:Rock.Model.MetricCategory.CategoryId">
            <summary>
            Gets or sets the category identifier.
            </summary>
            <value>
            The category identifier.
            </value>
        </member>
        <member name="P:Rock.Model.MetricCategory.Order">
            <summary>
            Gets or sets the order.
            </summary>
            <value>
            The order.
            </value>
        </member>
        <member name="P:Rock.Model.MetricCategory.Metric">
            <summary>
            Gets or sets the metric.
            </summary>
            <value>
            The metric.
            </value>
        </member>
        <member name="P:Rock.Model.MetricCategory.Category">
            <summary>
            Gets or sets the category.
            </summary>
            <value>
            The category.
            </value>
        </member>
        <member name="P:Rock.Model.MetricCategory.IconCssClass">
            <summary>
            Gets the icon CSS class.
            </summary>
            <value>
            The icon CSS class.
            </value>
        </member>
        <member name="P:Rock.Model.MetricCategory.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:Rock.Model.MetricCategory.Rock#Data#ICategorized#CategoryId">
            <summary>
            Gets or sets the category id.
            </summary>
            <value>
            The category id.
            </value>
        </member>
        <member name="P:Rock.Model.MetricCategory.ParentAuthority">
            <summary>
            A parent authority.  If a user is not specifically allowed or denied access to
            this object, Rock will check access to the parent authority specified by this property.
            </summary>
        </member>
        <member name="P:Rock.Model.MetricCategory.SupportedActions">
            <summary>
            A dictionary of actions that this class supports and the description of each.
            </summary>
        </member>
        <member name="T:Rock.Model.MetricCategoryConfiguration">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Model.MetricCategoryConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.MetricCategoryConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Rock.Model.Metaphone">
            <summary>
            Represents the Metaphone characters for a given name
            </summary>
        </member>
        <member name="M:Rock.Model.Metaphone.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Rock.Model.Metaphone.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:Rock.Model.Metaphone.Metaphone1">
            <summary>
            Gets or sets the metaphone1.
            </summary>
            <value>
            The metaphone1.
            </value>
        </member>
        <member name="P:Rock.Model.Metaphone.Metaphone2">
            <summary>
            Gets or sets the metaphone2.
            </summary>
            <value>
            The metaphone2.
            </value>
        </member>
        <member name="T:Rock.Model.MetaphoneConfiguration">
            <summary>
            Entity Change Configuration class.
            </summary>
        </member>
        <member name="M:Rock.Model.MetaphoneConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.EntityTypeConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Rock.Model.FollowingService">
            <summary>
            Following Service class
            </summary>
        </member>
        <member name="M:Rock.Model.FollowingService.#ctor(Rock.Data.RockContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.FollowingService"/> class
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Rock.Model.FollowingService.CanDelete(Rock.Model.Following,System.String@)">
            <summary>
            Determines whether this instance can delete the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="errorMessage">The error message.</param>
            <returns>
              <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Rock.Model.FollowingExtensionMethods">
            <summary>
            Generated Extension Methods
            </summary>
        </member>
        <member name="M:Rock.Model.FollowingExtensionMethods.Clone(Rock.Model.Following,System.Boolean)">
            <summary>
            Clones this Following object to a new Following object
            </summary>
            <param name="source">The source.</param>
            <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.FollowingExtensionMethods.CopyPropertiesFrom(Rock.Model.Following,Rock.Model.Following)">
            <summary>
            Copies the properties from another Following object to this Following object
            </summary>
            <param name="target">The target.</param>
            <param name="source">The source.</param>
        </member>
        <member name="T:Rock.Model.Following">
            <summary>
            Represents an instance where a <see cref="T:Rock.Model.Person"/> followed an instance of an entity
            </summary>
        </member>
        <member name="P:Rock.Model.Following.EntityTypeId">
            <summary>
            Gets or sets the entity type identifier.
            </summary>
            <value>
            The entity type identifier.
            </value>
        </member>
        <member name="P:Rock.Model.Following.EntityId">
            <summary>
            Gets or sets the entity identifier.
            </summary>
            <value>
            The entity identifier.
            </value>
        </member>
        <member name="P:Rock.Model.Following.PersonAliasId">
            <summary>
            Gets or sets the person alias identifier.
            </summary>
            <value>
            The person alias identifier.
            </value>
        </member>
        <member name="P:Rock.Model.Following.EntityType">
            <summary>
            Gets or sets the type of the entity.
            </summary>
            <value>
            The type of the entity.
            </value>
        </member>
        <member name="P:Rock.Model.Following.PersonAlias">
            <summary>
            Gets or sets the person alias.
            </summary>
            <value>
            The person alias.
            </value>
        </member>
        <member name="T:Rock.Model.FollowingConfiguration">
            <summary>
            File Configuration class.
            </summary>
        </member>
        <member name="M:Rock.Model.FollowingConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.FollowingConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Rock.Model.AuditDetail">
            <summary>
            Represents an Audit Log entry that is created when an add/update/delete is performed against an <see cref="T:Rock.Data.IEntity"/> of an
            auditable <see cref="T:Rock.Model.EntityType"/>.
            </summary>
        </member>
        <member name="M:Rock.Model.AuditDetail.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Rock.Model.AuditDetail.AuditId">
            <summary>
            Gets or sets the EntityTypeId for the <see cref="T:Rock.Model.EntityType"/> of entity that was modified. This property is required.
            </summary>
            <value>
            A <see cref="T:System.Int32"/> representing the EntityTypeId for the <see cref="T:Rock.Model.EntityType"/> of the entity that was modified.
            </value>
        </member>
        <member name="P:Rock.Model.AuditDetail.Property">
            <summary>
            Gets or sets the Property.
            </summary>
            <value>
            Property.
            </value>
        </member>
        <member name="P:Rock.Model.AuditDetail.OriginalValue">
            <summary>
            Gets or sets the Original Value.
            </summary>
            <value>
            Original Value.
            </value>
        </member>
        <member name="P:Rock.Model.AuditDetail.CurrentValue">
            <summary>
            Gets or sets the Current Value.
            </summary>
            <value>
            Current Value.
            </value>
        </member>
        <member name="P:Rock.Model.AuditDetail.Audit">
            <summary>
            Gets or sets the <see cref="T:Rock.Model.Audit"/> parent entity.
            </summary>
            <value>
            The <see cref="T:Rock.Model.Audit"/>
            </value>
        </member>
        <member name="T:Rock.Model.AuditDetailConfiguration">
            <summary>
            Entity Change Configuration class.
            </summary>
        </member>
        <member name="M:Rock.Model.AuditDetailConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.EntityTypeConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Rock.Model.PageViewService">
            <summary>
            PageView Service class
            </summary>
            <summary>
            Data Access/service class for <see cref="T:Rock.Model.PageView"/> entities.
            </summary>
        </member>
        <member name="M:Rock.Model.PageViewService.#ctor(Rock.Data.RockContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.PageViewService"/> class
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Rock.Model.PageViewService.CanDelete(Rock.Model.PageView,System.String@)">
            <summary>
            Determines whether this instance can delete the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="errorMessage">The error message.</param>
            <returns>
              <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Rock.Model.PageViewService.GetByPageId(System.Nullable{System.Int32})">
            <summary>
            Returns an enumerable collection of <see cref="T:Rock.Model.PageView"/> entities by the Id of the <see cref="T:Rock.Model.Page"/>
            </summary>
            <param name="pageId">The page identifier.</param>
            <returns>
            An enumerable collection of <see cref="T:Rock.Model.PageView"/> entities where the Id of the <see cref="T:Rock.Model.Page"/> matches the provided value.
            </returns>
        </member>
        <member name="M:Rock.Model.PageViewService.GetByPersonId(System.Nullable{System.Int32})">
            <summary>
            Returns an enumerable collection of <see cref="T:Rock.Model.PageView"/> entities by the Id of the Viewer <see cref="T:Rock.Model.Person"/>.
            </summary>
            <param name="personId">The person identifier.</param>
            <returns>
            An enumerable collection of <see cref="T:Rock.Model.PageView"/> entities where the Id of the viewer <see cref="T:Rock.Model.Person"/> matches the provided value.
            </returns>
        </member>
        <member name="T:Rock.Model.PageViewExtensionMethods">
            <summary>
            Generated Extension Methods
            </summary>
        </member>
        <member name="M:Rock.Model.PageViewExtensionMethods.Clone(Rock.Model.PageView,System.Boolean)">
            <summary>
            Clones this PageView object to a new PageView object
            </summary>
            <param name="source">The source.</param>
            <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.PageViewExtensionMethods.CopyPropertiesFrom(Rock.Model.PageView,Rock.Model.PageView)">
            <summary>
            Copies the properties from another PageView object to this PageView object
            </summary>
            <param name="target">The target.</param>
            <param name="source">The source.</param>
        </member>
        <member name="T:Rock.Model.PersonBadgeService">
            <summary>
            PersonBadge Service class
            </summary>
        </member>
        <member name="M:Rock.Model.PersonBadgeService.#ctor(Rock.Data.RockContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.PersonBadgeService"/> class
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Rock.Model.PersonBadgeService.CanDelete(Rock.Model.PersonBadge,System.String@)">
            <summary>
            Determines whether this instance can delete the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="errorMessage">The error message.</param>
            <returns>
              <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Rock.Model.PersonBadgeExtensionMethods">
            <summary>
            Generated Extension Methods
            </summary>
        </member>
        <member name="M:Rock.Model.PersonBadgeExtensionMethods.Clone(Rock.Model.PersonBadge,System.Boolean)">
            <summary>
            Clones this PersonBadge object to a new PersonBadge object
            </summary>
            <param name="source">The source.</param>
            <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.PersonBadgeExtensionMethods.CopyPropertiesFrom(Rock.Model.PersonBadge,Rock.Model.PersonBadge)">
            <summary>
            Copies the properties from another PersonBadge object to this PersonBadge object
            </summary>
            <param name="target">The target.</param>
            <param name="source">The source.</param>
        </member>
        <member name="T:Rock.Model.Metric">
            <summary>
            Metric POCO Entity.
            </summary>
        </member>
        <member name="M:Rock.Model.Metric.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this Metric
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this Metric
            </returns>
        </member>
        <member name="P:Rock.Model.Metric.IsSystem">
            <summary>
            Gets or sets a flag indicating if this Metric is part of the Rock core system/framework. This property is required.
            </summary>
            <value>
            A <see cref="T:System.Boolean"/> that is <c>true</c> if the Metric is part of the core system/framework; otherwise <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Model.Metric.Title">
            <summary>
            Gets or sets the Title of this Metric.
            </summary>
            <value>
            A <see cref="T:System.String"/> representing the user defined title of this Metric. This property is required.
            </value>
        </member>
        <member name="P:Rock.Model.Metric.Subtitle">
            <summary>
            Gets or sets the Subtitle of the Metric.
            </summary>
            <value>
            A <see cref="T:System.String"/> representing the Subtitle of the Metric.
            </value>
        </member>
        <member name="P:Rock.Model.Metric.Description">
            <summary>
            Gets or sets a user defined description of the Metric.
            </summary>
            <value>
            A <see cref="T:System.String"/> representing the description of the Metric.
            </value>
        </member>
        <member name="P:Rock.Model.Metric.IconCssClass">
            <summary>
            Gets or sets the icon CSS class.
            </summary>
            <value>
            The icon CSS class.
            </value>
        </member>
        <member name="P:Rock.Model.Metric.IsCumulative">
            <summary>
            Gets or sets a value indicating whether [is cumulative].
            </summary>
            <value>
              <c>true</c> if [is cumulative]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Model.Metric.SourceValueTypeId">
            <summary>
            Gets or sets the source value type identifier.
            </summary>
            <value>
            The source value type identifier.
            </value>
        </member>
        <member name="P:Rock.Model.Metric.SourceSql">
            <summary>
            Gets or sets the SQL query that returns the data for the Metric.
            </summary>
            <value>
            A <see cref="T:System.String"/> that represents the SQL Query that returns the data for the Metric.
            </value>
        </member>
        <member name="P:Rock.Model.Metric.DataViewId">
            <summary>
            Gets or sets the data view identifier.
            </summary>
            <value>
            The data view identifier.
            </value>
        </member>
        <member name="P:Rock.Model.Metric.XAxisLabel">
            <summary>
            Gets or sets the x axis label.
            </summary>
            <value>
            The x axis label.
            </value>
        </member>
        <member name="P:Rock.Model.Metric.YAxisLabel">
            <summary>
            Gets or sets the y axis label.
            </summary>
            <value>
            The y axis label.
            </value>
        </member>
        <member name="P:Rock.Model.Metric.MetricChampionPersonAliasId">
            <summary>
            Gets or sets the metric champion person alias identifier.
            </summary>
            <value>
            The metric champion person alias identifier.
            </value>
        </member>
        <member name="P:Rock.Model.Metric.AdminPersonAliasId">
            <summary>
            Gets or sets the admin person alias identifier.
            </summary>
            <value>
            The admin person alias identifier.
            </value>
        </member>
        <member name="P:Rock.Model.Metric.ScheduleId">
            <summary>
            Gets or sets the schedule identifier.
            </summary>
            <value>
            The schedule identifier.
            </value>
        </member>
        <member name="P:Rock.Model.Metric.LastRunDateTime">
            <summary>
            Gets or sets the last run date time.
            </summary>
            <value>
            The last run date time.
            </value>
        </member>
        <member name="P:Rock.Model.Metric.EntityTypeId">
            <summary>
            Gets or sets the entity type identifier.
            </summary>
            <value>
            The entity type identifier.
            </value>
        </member>
        <member name="P:Rock.Model.Metric.MetricValues">
            <summary>
            Gets or sets a collection that contains all the <see cref="T:Rock.Model.MetricValue">Metric Values</see> (values) for this Metric.
            </summary>
            <value>
            A collection of <see cref="T:Rock.Model.MetricValue">MetricValues</see> that are associated with this Metric.
            </value>
        </member>
        <member name="P:Rock.Model.Metric.SourceValueType">
            <summary>
            Gets or sets the type of the source value.
            </summary>
            <value>
            The type of the source value.
            </value>
        </member>
        <member name="P:Rock.Model.Metric.DataView">
            <summary>
            Gets or sets the data view.
            </summary>
            <value>
            The data view.
            </value>
        </member>
        <member name="P:Rock.Model.Metric.MetricChampionPersonAlias">
            <summary>
            Gets or sets the metric champion person alias.
            </summary>
            <value>
            The metric champion person alias.
            </value>
        </member>
        <member name="P:Rock.Model.Metric.AdminPersonAlias">
            <summary>
            Gets or sets the admin person alias.
            </summary>
            <value>
            The admin person alias.
            </value>
        </member>
        <member name="P:Rock.Model.Metric.Schedule">
            <summary>
            Gets or sets the schedule.
            </summary>
            <value>
            The schedule.
            </value>
        </member>
        <member name="P:Rock.Model.Metric.MetricCategories">
            <summary>
            Gets or sets the metric categories.
            </summary>
            <value>
            The metric categories.
            </value>
        </member>
        <member name="P:Rock.Model.Metric.EntityType">
            <summary>
            Gets or sets the type of the entity.
            </summary>
            <value>
            The type of the entity.
            </value>
        </member>
        <member name="T:Rock.Model.MetricConfiguration">
            <summary>
            Metric Configuration class.
            </summary>
        </member>
        <member name="M:Rock.Model.MetricConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.MetricConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Rock.Model.MetricValue">
            <summary>
            MetricValue POCO Entity.
            </summary>
        </member>
        <member name="M:Rock.Model.MetricValue.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Rock.Model.MetricValue.MetricValueType">
            <summary>
            Gets or sets the type of the metric value.
            </summary>
            <value>
            The type of the metric value.
            </value>
        </member>
        <member name="P:Rock.Model.MetricValue.XValue">
            <summary>
            Gets or sets the X axis value.
            </summary>
            <value>
            The x value.
            </value>
        </member>
        <member name="P:Rock.Model.MetricValue.YValue">
            <summary>
            Gets or sets the Y axis value.
            </summary>
            <value>
            The y value.
            </value>
        </member>
        <member name="P:Rock.Model.MetricValue.Order">
            <summary>
            Gets or sets the Order.
            </summary>
            <value>
            Order.
            </value>
        </member>
        <member name="P:Rock.Model.MetricValue.MetricId">
            <summary>
            Gets or sets the MetricId.
            </summary>
            <value>
            MetricId.
            </value>
        </member>
        <member name="P:Rock.Model.MetricValue.Note">
            <summary>
            Gets or sets the note.
            </summary>
            <value>
            The note.
            </value>
        </member>
        <member name="P:Rock.Model.MetricValue.MetricValueDateTime">
            <summary>
            Gets or sets the metric value date time.
            </summary>
            <value>
            The metric value date time.
            </value>
        </member>
        <member name="P:Rock.Model.MetricValue.EntityId">
            <summary>
            Gets or sets the entity identifier.
            </summary>
            <value>
            The entity identifier.
            </value>
        </member>
        <member name="P:Rock.Model.MetricValue.Metric">
            <summary>
            Gets or sets the metric.
            </summary>
            <value>
            The metric.
            </value>
        </member>
        <member name="P:Rock.Model.MetricValue.MetricValueJavascriptTimeStamp">
            <summary>
            Gets the metric value datetime as a javascript time stamp (handy for chart apis)
            </summary>
            <value>
            The metric value javascript time stamp.
            </value>
        </member>
        <member name="P:Rock.Model.MetricValue.ParentAuthority">
            <summary>
            Gets the parent authority.
            </summary>
        </member>
        <member name="T:Rock.Model.MetricValueConfiguration">
            <summary>
            MetricValue Configuration class.
            </summary>
        </member>
        <member name="M:Rock.Model.MetricValueConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.MetricValueConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Rock.Model.MetricValueType">
            <summary>
            The type of Metric Value that a Metric Value represents
            </summary>
        </member>
        <member name="F:Rock.Model.MetricValueType.Measure">
            <summary>
            Metric Value represents something that was measured (for example: Fundraising Total)
            </summary>
        </member>
        <member name="F:Rock.Model.MetricValueType.Goal">
            <summary>
            Metric Value represents a goal (for example: Fundraising Goal)
            </summary>
        </member>
        <member name="T:Rock.Model.PersonBadge">
            <summary>
            Represents a type or category of binary files in Rock, and configures how binary files of this type are stored and accessed.
            </summary>
        </member>
        <member name="M:Rock.Model.PersonBadge.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Rock.Model.PersonBadge.Name">
            <summary>
            Gets or sets the given Name of the PersonBadge. This value is an alternate key and is required.
            </summary>
            <value>
            A <see cref="T:System.String"/> representing the given Name of the PersonBadge. 
            </value>
        </member>
        <member name="P:Rock.Model.PersonBadge.Description">
            <summary>
            Gets or sets a description of the PersonBadge.
            </summary>
            <value>
            A <see cref="T:System.String"/> representing the description of the PersonBadge.
            </value>
        </member>
        <member name="P:Rock.Model.PersonBadge.EntityTypeId">
            <summary>
            Gets or sets the Id of the badge component
            </summary>
            <value>
            An <see cref="T:System.Int32"/> representing the Id of the badge component entity type
            </value>
        </member>
        <member name="P:Rock.Model.PersonBadge.Order">
            <summary>
            Gets or sets the order.
            </summary>
            <value>
            The order.
            </value>
        </member>
        <member name="P:Rock.Model.PersonBadge.EntityType">
            <summary>
            Gets or sets the storage mode <see cref="T:Rock.Model.EntityType"/>.
            </summary>
            <value>
            The storage mode <see cref="T:Rock.Model.EntityType"/>.
            </value>
        </member>
        <member name="T:Rock.Model.PersonBadgeConfiguration">
            <summary>
            File Configuration class.
            </summary>
        </member>
        <member name="M:Rock.Model.PersonBadgeConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.PersonBadgeConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Rock.Model.AuditDetailService">
            <summary>
            AuditDetail Service class
            </summary>
        </member>
        <member name="M:Rock.Model.AuditDetailService.#ctor(Rock.Data.RockContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.AuditDetailService"/> class
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Rock.Model.AuditDetailService.CanDelete(Rock.Model.AuditDetail,System.String@)">
            <summary>
            Determines whether this instance can delete the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="errorMessage">The error message.</param>
            <returns>
              <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Rock.Model.AuditDetailExtensionMethods">
            <summary>
            Generated Extension Methods
            </summary>
        </member>
        <member name="M:Rock.Model.AuditDetailExtensionMethods.Clone(Rock.Model.AuditDetail,System.Boolean)">
            <summary>
            Clones this AuditDetail object to a new AuditDetail object
            </summary>
            <param name="source">The source.</param>
            <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.AuditDetailExtensionMethods.CopyPropertiesFrom(Rock.Model.AuditDetail,Rock.Model.AuditDetail)">
            <summary>
            Copies the properties from another AuditDetail object to this AuditDetail object
            </summary>
            <param name="target">The target.</param>
            <param name="source">The source.</param>
        </member>
        <member name="T:Rock.Model.HistoryService">
            <summary>
            History Service class
            </summary>
            <summary>
            The data access/service class for the <see cref="T:Rock.Model.History"/> entity. This inherits from the Service class
            </summary>
        </member>
        <member name="M:Rock.Model.HistoryService.#ctor(Rock.Data.RockContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.HistoryService"/> class
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Rock.Model.HistoryService.CanDelete(Rock.Model.History,System.String@)">
            <summary>
            Determines whether this instance can delete the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="errorMessage">The error message.</param>
            <returns>
              <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Rock.Model.HistoryService.SaveChanges(Rock.Data.RockContext,System.Type,System.Guid,System.Int32,System.Collections.Generic.List{System.String})">
            <summary>
            Saves a list of history messages.
            </summary>
            <param name="rockContext">The rock context.</param>
            <param name="modelType">Type of the model.</param>
            <param name="categoryGuid">The category unique identifier.</param>
            <param name="entityId">The entity identifier.</param>
            <param name="changes">The changes.</param>
        </member>
        <member name="M:Rock.Model.HistoryService.SaveChanges(Rock.Data.RockContext,System.Type,System.Guid,System.Int32,System.Collections.Generic.List{System.String},System.String,System.Type,System.Nullable{System.Int32})">
            <summary>
            Saves the changes.
            </summary>
            <param name="rockContext">The rock context.</param>
            <param name="modelType">Type of the model.</param>
            <param name="categoryGuid">The category unique identifier.</param>
            <param name="entityId">The entity identifier.</param>
            <param name="changes">The changes.</param>
            <param name="caption">The caption.</param>
            <param name="relatedModelType">Type of the related model.</param>
            <param name="relatedEntityId">The related entity identifier.</param>
        </member>
        <member name="T:Rock.Model.HistoryExtensionMethods">
            <summary>
            Generated Extension Methods
            </summary>
        </member>
        <member name="M:Rock.Model.HistoryExtensionMethods.Clone(Rock.Model.History,System.Boolean)">
            <summary>
            Clones this History object to a new History object
            </summary>
            <param name="source">The source.</param>
            <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.HistoryExtensionMethods.CopyPropertiesFrom(Rock.Model.History,Rock.Model.History)">
            <summary>
            Copies the properties from another History object to this History object
            </summary>
            <param name="target">The target.</param>
            <param name="source">The source.</param>
        </member>
        <member name="T:Rock.Model.LayoutService">
            <summary>
            Layout Service class
            </summary>
            <summary>
            The data access/service class for the <see cref="T:Rock.Model.Site"/> entity. This inherits from the Service class
            </summary>
        </member>
        <member name="M:Rock.Model.LayoutService.#ctor(Rock.Data.RockContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.LayoutService"/> class
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Rock.Model.LayoutService.CanDelete(Rock.Model.Layout,System.String@)">
            <summary>
            Determines whether this instance can delete the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="errorMessage">The error message.</param>
            <returns>
              <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Rock.Model.LayoutService.GetBySiteId(System.Int32)">
            <summary>
            Gets the Layout by site id.
            </summary>
            <param name="siteId">The site id.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.LayoutService.RegisterLayouts(System.String,Rock.Web.Cache.SiteCache)">
            <summary>
            Registers any layouts in a particular site's theme folder that do not currently have any layouts registered in Rock.
            </summary>
            <param name="physWebAppPath">A <see cref="T:System.String"/> containing the physical path to Rock on the server.</param>
            <param name="site">The site.</param>
        </member>
        <member name="T:Rock.Model.LayoutExtensionMethods">
            <summary>
            Generated Extension Methods
            </summary>
        </member>
        <member name="M:Rock.Model.LayoutExtensionMethods.Clone(Rock.Model.Layout,System.Boolean)">
            <summary>
            Clones this Layout object to a new Layout object
            </summary>
            <param name="source">The source.</param>
            <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.LayoutExtensionMethods.CopyPropertiesFrom(Rock.Model.Layout,Rock.Model.Layout)">
            <summary>
            Copies the properties from another Layout object to this Layout object
            </summary>
            <param name="target">The target.</param>
            <param name="source">The source.</param>
        </member>
        <member name="T:Rock.Model.PersonAliasService">
            <summary>
            PersonAlias Service class
            </summary>
            <summary>
            Data access/service class for <see cref="T:Rock.Model.PersonAlias"/> entity type objects.
            </summary>
        </member>
        <member name="M:Rock.Model.PersonAliasService.#ctor(Rock.Data.RockContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.PersonAliasService"/> class
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Rock.Model.PersonAliasService.CanDelete(Rock.Model.PersonAlias,System.String@)">
            <summary>
            Determines whether this instance can delete the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="errorMessage">The error message.</param>
            <returns>
              <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Rock.Model.PersonAliasService.GetByAliasId(System.Int32)">
            <summary>
            Gets the PersonAlias the by alias identifier.
            </summary>
            <param name="aliasPersonId">The alias person identifier.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.PersonAliasService.GetByAliasGuid(System.Guid)">
            <summary>
            Gets the by alias unique identifier.
            </summary>
            <param name="aliasPersonGuid">The alias person unique identifier.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.PersonAliasService.GetByAliasEncryptedKey(System.String)">
            <summary>
            Gets the by encrypted key.
            </summary>
            <param name="encryptedKey">The encrypted key.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.PersonAliasService.GetByAliasPublicKey(System.String)">
            <summary>
            Gets the by public key.
            </summary>
            <param name="publicKey">The public key.</param>
            <returns></returns>
        </member>
        <member name="T:Rock.Model.PersonAliasExtensionMethods">
            <summary>
            Generated Extension Methods
            </summary>
        </member>
        <member name="M:Rock.Model.PersonAliasExtensionMethods.Clone(Rock.Model.PersonAlias,System.Boolean)">
            <summary>
            Clones this PersonAlias object to a new PersonAlias object
            </summary>
            <param name="source">The source.</param>
            <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.PersonAliasExtensionMethods.CopyPropertiesFrom(Rock.Model.PersonAlias,Rock.Model.PersonAlias)">
            <summary>
            Copies the properties from another PersonAlias object to this PersonAlias object
            </summary>
            <param name="target">The target.</param>
            <param name="source">The source.</param>
        </member>
        <member name="T:Rock.Model.ReportFieldService">
            <summary>
            ReportField Service class
            </summary>
        </member>
        <member name="M:Rock.Model.ReportFieldService.#ctor(Rock.Data.RockContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.ReportFieldService"/> class
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Rock.Model.ReportFieldService.CanDelete(Rock.Model.ReportField,System.String@)">
            <summary>
            Determines whether this instance can delete the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="errorMessage">The error message.</param>
            <returns>
              <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Rock.Model.ReportFieldExtensionMethods">
            <summary>
            Generated Extension Methods
            </summary>
        </member>
        <member name="M:Rock.Model.ReportFieldExtensionMethods.Clone(Rock.Model.ReportField,System.Boolean)">
            <summary>
            Clones this ReportField object to a new ReportField object
            </summary>
            <param name="source">The source.</param>
            <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.ReportFieldExtensionMethods.CopyPropertiesFrom(Rock.Model.ReportField,Rock.Model.ReportField)">
            <summary>
            Copies the properties from another ReportField object to this ReportField object
            </summary>
            <param name="target">The target.</param>
            <param name="source">The source.</param>
        </member>
        <member name="T:Rock.Model.RestActionService">
            <summary>
            RestAction Service class
            </summary>
        </member>
        <member name="M:Rock.Model.RestActionService.#ctor(Rock.Data.RockContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.RestActionService"/> class
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Rock.Model.RestActionService.CanDelete(Rock.Model.RestAction,System.String@)">
            <summary>
            Determines whether this instance can delete the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="errorMessage">The error message.</param>
            <returns>
              <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Rock.Model.RestActionExtensionMethods">
            <summary>
            Generated Extension Methods
            </summary>
        </member>
        <member name="M:Rock.Model.RestActionExtensionMethods.Clone(Rock.Model.RestAction,System.Boolean)">
            <summary>
            Clones this RestAction object to a new RestAction object
            </summary>
            <param name="source">The source.</param>
            <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.RestActionExtensionMethods.CopyPropertiesFrom(Rock.Model.RestAction,Rock.Model.RestAction)">
            <summary>
            Copies the properties from another RestAction object to this RestAction object
            </summary>
            <param name="target">The target.</param>
            <param name="source">The source.</param>
        </member>
        <member name="T:Rock.Model.RestControllerService">
            <summary>
            RestController Service class
            </summary>
            <summary>
            Service/Data access class for <see cref="T:Rock.Model.RestControllerService"/> entity objects.
            </summary>
        </member>
        <member name="M:Rock.Model.RestControllerService.#ctor(Rock.Data.RockContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.RestControllerService"/> class
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Rock.Model.RestControllerService.CanDelete(Rock.Model.RestController,System.String@)">
            <summary>
            Determines whether this instance can delete the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="errorMessage">The error message.</param>
            <returns>
              <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Rock.Model.RestControllerService.RegisterControllers">
            <summary>
            Registers the controllers.
            </summary>
        </member>
        <member name="T:Rock.Model.RestControllerExtensionMethods">
            <summary>
            Generated Extension Methods
            </summary>
        </member>
        <member name="M:Rock.Model.RestControllerExtensionMethods.Clone(Rock.Model.RestController,System.Boolean)">
            <summary>
            Clones this RestController object to a new RestController object
            </summary>
            <param name="source">The source.</param>
            <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.RestControllerExtensionMethods.CopyPropertiesFrom(Rock.Model.RestController,Rock.Model.RestController)">
            <summary>
            Copies the properties from another RestController object to this RestController object
            </summary>
            <param name="target">The target.</param>
            <param name="source">The source.</param>
        </member>
        <member name="T:Rock.Model.DbGeographyConverter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Model.DbGeographyConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
              <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Rock.Model.DbGeographyConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>
            The object value.
            </returns>
        </member>
        <member name="M:Rock.Model.DbGeographyConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="T:Rock.Model.RestAction">
            <summary>
            </summary>
        </member>
        <member name="M:Rock.Model.RestAction.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this RestAction.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this RestAction.
            </returns>
        </member>
        <member name="P:Rock.Model.RestAction.ControllerId">
            <summary>
            Gets or sets the controller identifier.
            </summary>
            <value>
            The controller identifier.
            </value>
        </member>
        <member name="P:Rock.Model.RestAction.Method">
            <summary>
            Gets or sets the method.
            </summary>
            <value>
            The method.
            </value>
        </member>
        <member name="P:Rock.Model.RestAction.ApiId">
            <summary>
            Gets or sets the api identifier.
            </summary>
            <value>
            The rest identifier.
            </value>
        </member>
        <member name="P:Rock.Model.RestAction.Path">
            <summary>
            Gets or sets the path.
            </summary>
            <value>
            The path.
            </value>
        </member>
        <member name="P:Rock.Model.RestAction.Controller">
            <summary>
            Gets or sets the controller.
            </summary>
            <value>
            The controller.
            </value>
        </member>
        <member name="P:Rock.Model.RestAction.ParentAuthority">
            <summary>
            Gets the parent authority.
            </summary>
            <value>
            The parent authority.
            </value>
        </member>
        <member name="T:Rock.Model.RestActionConfiguration">
            <summary>
            Defined Type Configuration class.
            </summary>
        </member>
        <member name="M:Rock.Model.RestActionConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.RestActionConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Rock.Model.RestController">
            <summary>
            </summary>
        </member>
        <member name="M:Rock.Model.RestController.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.RestController"/> class.
            </summary>
        </member>
        <member name="M:Rock.Model.RestController.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this RestController.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this RestController.
            </returns>
        </member>
        <member name="P:Rock.Model.RestController.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:Rock.Model.RestController.ClassName">
            <summary>
            Gets or sets the class name.
            </summary>
            <value>
            The class name.
            </value>
        </member>
        <member name="P:Rock.Model.RestController.Actions">
            <summary>
            Gets or sets the actions.
            </summary>
            <value>
            The actions.
            </value>
        </member>
        <member name="T:Rock.Model.RestControllerConfiguration">
            <summary>
            Defined Type Configuration class.
            </summary>
        </member>
        <member name="M:Rock.Model.RestControllerConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.RestControllerConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Rock.Model.FinancialScheduledTransactionService">
            <summary>
            Service/Data access class for <see cref="T:Rock.Model.FinancialScheduledTransaction"/> entity objects.
            </summary>
            <summary>
            FinancialScheduledTransaction Service class
            </summary>
        </member>
        <member name="M:Rock.Model.FinancialScheduledTransactionService.Get(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean)">
            <summary>
            Gets schedule transactions associated to a person.  Includes any transactions associated to person
            or any other perosn with same giving group id
            </summary>
            <param name="personId">The person identifier.</param>
            <param name="givingGroupId">The giving group identifier.</param>
            <param name="includeInactive">if set to <c>true</c> [include inactive].</param>
            <returns>
            The <see cref="T:Rock.Model.FinancialTransaction"/> that matches the transaction code, this value will be null if a match is not found.
            </returns>
        </member>
        <member name="M:Rock.Model.FinancialScheduledTransactionService.GetByScheduleId(System.String)">
            <summary>
            Gets the by schedule identifier.
            </summary>
            <param name="scheduleId">The schedule identifier.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.FinancialScheduledTransactionService.GetStatus(Rock.Model.FinancialScheduledTransaction,System.String@)">
            <summary>
            Sets the status.
            </summary>
            <param name="scheduledTransaction">The scheduled transaction.</param>
            <param name="errorMessages">The error messages.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.FinancialScheduledTransactionService.#ctor(Rock.Data.RockContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.FinancialScheduledTransactionService"/> class
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Rock.Model.FinancialScheduledTransactionService.CanDelete(Rock.Model.FinancialScheduledTransaction,System.String@)">
            <summary>
            Determines whether this instance can delete the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="errorMessage">The error message.</param>
            <returns>
              <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Rock.Model.Layout">
            <summary>
            A logical representation of a physical html layout (page).  The physical layout controls the zones that 
            are availble for one or more <see cref="T:Rock.Model.Page">Pages</see> to use.  The logical layout is used to configure
            which blocks are present in each zone
            </summary>
        </member>
        <member name="M:Rock.Model.Layout.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance. Returns the name of the Layout
            </returns>
        </member>
        <member name="P:Rock.Model.Layout.IsSystem">
            <summary>
            Gets or sets a flag indicating if this Layout was created by and is a part of the Rock core system/framework. This property is required.
            </summary>
            <value>
            A <see cref="T:System.Boolean"/> that is <c>true</c> if this Block is part of the Rock core system/framework, otherwise is <c>false</c>.
            </value>
            <example>
            True
            </example>
        </member>
        <member name="P:Rock.Model.Layout.SiteId">
            <summary>
            Gets or sets the Id of the <see cref="T:Rock.Model.Site"/> that this layout is associated with. 
            </summary>
            <value>
            An <see cref="T:System.Int32"/> that represents the Id of the <see cref="T:Rock.Model.Site"/> that this layout is associated with.
            </value>
        </member>
        <member name="P:Rock.Model.Layout.FileName">
            <summary>
            Gets or sets the file name portion of the associated .Net ASCX UserControl that provides the HTML Markup and code for this Layout. 
            Value should not include the extension.  And the path is relative to the theme folder.
            </summary>
            <value>
            A <see cref="T:System.String"/> that represents the relative path to the supporting UserControl for the Layout.
            </value>
            <example>
            ~/Blocks/Security/Login.ascx
            </example>
        </member>
        <member name="P:Rock.Model.Layout.Name">
            <summary>
            Gets or sets the logical name of the Layout.
            </summary>
            <value>
            A <see cref="T:System.String"/> that represents the logical Name of the Layout. This property is required.
            </value>
            <example>
            Login
            </example>
        </member>
        <member name="P:Rock.Model.Layout.Description">
            <summary>
            Gets or sets the user defined description of the Layout. 
            </summary>
            <value>
            A <see cref="T:System.String"/> that represents the Description of the Layout
            </value>
            <example>
            Provides ability to login to site.
            </example>
        </member>
        <member name="P:Rock.Model.Layout.Site">
            <summary>
            Gets or sets the <see cref="T:Rock.Model.Site"/> that this Layout Block is associated with.
            </summary>
            <value>
            The <see cref="T:Rock.Model.Site"/> that this Layout Block is associated with.
            </value>
        </member>
        <member name="P:Rock.Model.Layout.Pages">
            <summary>
            Gets or sets a collection of  <see cref="T:Rock.Model.Page">Pages</see> that are using this Layout.
            </summary>
            <value>
            Collection of <see cref="T:Rock.Model.Page">Pages</see> that use this Layout.
            </value>
        </member>
        <member name="P:Rock.Model.Layout.Blocks">
            <summary>
            Gets or sets the collection of <see cref="T:Rock.Model.Block">Blocks</see> that are used on the layout.
            </summary>
            <value>
            Collection of <see cref="T:Rock.Model.Block"/> entities that are used on the layout.
            </value>
        </member>
        <member name="P:Rock.Model.Layout.ParentAuthority">
            <summary>
            Gets the parent authority for the layout. Layout security is automatically inherited from the site.
            </summary>
            <value>
            The parent authority.
            </value>
        </member>
        <member name="T:Rock.Model.LayoutConfiguration">
            <summary>
            Block Type Configuration class.
            </summary>
        </member>
        <member name="M:Rock.Model.LayoutConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.LayoutConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Rock.Model.FinancialPersonSavedAccountService">
            <summary>
            Service and data access class for <see cref="T:Rock.Model.FinancialPersonSavedAccount"/> objects.
            </summary>
            <summary>
            FinancialPersonSavedAccount Service class
            </summary>
        </member>
        <member name="M:Rock.Model.FinancialPersonSavedAccountService.GetByPersonId(System.Int32)">
            <summary>
            Returns an queryable collection of saved accounts (<see cref="T:Rock.Model.FinancialPersonSavedAccount"/> by PersonId
            </summary>
            <param name="personId">A <see cref="T:System.Int32"/> representing the PersonId of the <see cref="T:Rock.Model.Person"/> to retrieve saved accounts for.</param>
            <returns>A queryable collection of <see cref="T:Rock.Model.FinancialPersonSavedAccount">Saved Accounts</see> belonging to the specified <see cref="T:Rock.Model.Person"/>.</returns>
        </member>
        <member name="M:Rock.Model.FinancialPersonSavedAccountService.#ctor(Rock.Data.RockContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.FinancialPersonSavedAccountService"/> class
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Rock.Model.FinancialPersonSavedAccountService.CanDelete(Rock.Model.FinancialPersonSavedAccount,System.String@)">
            <summary>
            Determines whether this instance can delete the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="errorMessage">The error message.</param>
            <returns>
              <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Rock.Model.History">
            <summary>
            Represents a history that is entered in Rock and is associated with a specific entity. For example, a history could be entered on a person, GroupMember, a device, etc or for a specific subset of an entity type.
            </summary>
        </member>
        <member name="M:Rock.Model.History.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Rock.Model.History.EvaluateChange(System.Collections.Generic.List{System.String},System.String,System.String,System.String)">
            <summary>
            Evaluates the change, and adds a summary string of what if anything changed
            </summary>
            <param name="historyMessages">The history messages.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:Rock.Model.History.EvaluateChange(System.Collections.Generic.List{System.String},System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Evaluates the change, and adds a summary string of what if anything changed
            </summary>
            <param name="historyMessages">The history messages.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:Rock.Model.History.EvaluateChange(System.Collections.Generic.List{System.String},System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Boolean)">
            <summary>
            Evaluates the change.
            </summary>
            <param name="historyMessages">The history messages.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
            <param name="includeTime">if set to <c>true</c> [include time].</param>
        </member>
        <member name="M:Rock.Model.History.EvaluateChange(System.Collections.Generic.List{System.String},System.String,System.Boolean,System.Boolean)">
            <summary>
            Evaluates the change.
            </summary>
            <param name="historyMessages">The history messages.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="oldValue">if set to <c>true</c> [old value].</param>
            <param name="newValue">if set to <c>true</c> [new value].</param>
        </member>
        <member name="M:Rock.Model.History.EvaluateChange(System.Collections.Generic.List{System.String},System.String,System.Enum,System.Enum)">
            <summary>
            Evaluates the change.
            </summary>
            <param name="historyMessages">The history messages.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="P:Rock.Model.History.IsSystem">
            <summary>
            Gets or sets a flag indicating if this history is part of the Rock core system/framework. This property is required.
            </summary>
            <value>
            A <see cref="T:System.Boolean"/> value that is <c>true</c> if this history is part of the Rock core system/framework; otherwise <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Model.History.CategoryId">
            <summary>
            Gets or sets the Id of the <see cref="T:Rock.Model.Category"/>. This property is required.
            </summary>
            <value>
            A <see cref="T:System.Int32"/> representing the Id of the <see cref="T:Rock.Model.Category"/>
            </value>
        </member>
        <member name="P:Rock.Model.History.EntityTypeId">
            <summary>
            Gets or sets the Id of the <see cref="T:Rock.Model.EntityType"/>. This property is required.
            </summary>
            <value>
            A <see cref="T:System.Int32"/> representing the Id of the <see cref="T:Rock.Model.EntityType"/>
            </value>
        </member>
        <member name="P:Rock.Model.History.EntityId">
            <summary>
            Gets or sets the Id of the entity that this history is related to.
            </summary>
            <value>
            A <see cref="T:System.Int32"/> representing the Id of the entity (object) that this history is related to.
            </value>
        </member>
        <member name="P:Rock.Model.History.Caption">
            <summary>
            Gets or sets the caption
            </summary>
            <value>
            A <see cref="T:System.String"/> representing the caption of the History.
            </value>
        </member>
        <member name="P:Rock.Model.History.Summary">
            <summary>
            Gets or sets the summary.
            </summary>
            <value>
            The summary.
            </value>
        </member>
        <member name="P:Rock.Model.History.RelatedEntityTypeId">
            <summary>
            Gets or sets the related entity type identifier.
            </summary>
            <value>
            The related entity type identifier.
            </value>
            
        </member>
        <member name="P:Rock.Model.History.RelatedEntityId">
            <summary>
            Gets or sets the related entity identifier.
            </summary>
            <value>
            The related entity identifier.
            </value>
        </member>
        <member name="P:Rock.Model.History.EntityType">
            <summary>
            Gets or sets the entity type this history is associated with
            </summary>
            <value>
            The <see cref="T:Rock.Model.EntityType"/> of this history.
            </value>
        </member>
        <member name="P:Rock.Model.History.Category">
            <summary>
            Gets or sets the category.
            </summary>
            <value>
            The category.
            </value>
        </member>
        <member name="P:Rock.Model.History.RelatedEntityType">
            <summary>
            Gets or sets the type of the related entity.
            </summary>
            <value>
            The type of the related entity.
            </value>
        </member>
        <member name="P:Rock.Model.History.ParentAuthority">
            <summary>
            Gets the parent security authority of this History. Where security is inherited from.
            </summary>
            <value>
            The parent authority.
            </value>
        </member>
        <member name="T:Rock.Model.HistoryConfiguration">
            <summary>
            History Configuration class.
            </summary>
        </member>
        <member name="M:Rock.Model.HistoryConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.HistoryConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Rock.Model.PersonAlias">
            <summary>
            Represents the merge history for people in Rock. When a person is found to have a duplicate <see cref="T:Rock.Model.Person"/> entity in the database
            the duplicate entities need to be merged together into one record to avoid confusion and to ensure that we have accurate contact, involvement, and 
            contribution data. It also helps to avoid situations where an individual is counted or contacted multiple times.
            
            The PersonAlias entity is a log containing the merge history (previous Person identifiers) and a pointer to the Person's current Id.
            </summary>
        </member>
        <member name="M:Rock.Model.PersonAlias.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Rock.Model.PersonAlias.Name">
            <summary>
            Gets or sets the name of the alias
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:Rock.Model.PersonAlias.PersonId">
            <summary>
            Gets or sets the person Id of the <see cref="T:Rock.Model.Person"/>. This property is required.
            </summary>
            <value>
            An <see cref="T:System.Int32"/> representing a person Id of the <see cref="T:Rock.Model.Person"/>.
            </value>
        </member>
        <member name="P:Rock.Model.PersonAlias.AliasPersonId">
            <summary>
            Gets or sets an alias person Id.  In the case of a merged person record, the AliasPersonId is the previous person id that was merged into
            a new person. This property is required.
            </summary>
            <value>
            A <see cref="T:System.Int32"/> representing the new/current Id of the <see cref="T:Rock.Model.Person"/>.
            </value>
        </member>
        <member name="P:Rock.Model.PersonAlias.AliasPersonGuid">
            <summary>
            Gets or sets the new <see cref="T:System.Guid"/> identifier of the <see cref="T:Rock.Model.Person"/>. This property is required.
            </summary>
            <value>
            A <see cref="T:System.Guid"/> representing the new/current Guid identifier of the <see cref="T:Rock.Model.Person"/>.
            </value>
        </member>
        <member name="P:Rock.Model.PersonAlias.Person">
            <summary>
            Gets or sets the person.
            </summary>
            <value>
            The person.
            </value>
        </member>
        <member name="P:Rock.Model.PersonAlias.AliasEncryptedKey">
            <summary>
            Gets the previous encrypted key for the <see cref="T:Rock.Model.Person"/>.
            </summary>
            <value>
            A <see cref="T:System.String"/> representing the previous encrypted key for the <see cref="T:Rock.Model.Person"/>.
            </value>
        </member>
        <member name="T:Rock.Model.PersonAliasConfiguration">
            <summary>
            Person Alias Configuration class.
            </summary>
        </member>
        <member name="M:Rock.Model.PersonAliasConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.PersonAliasConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Rock.Model.ReportField">
            <summary>
            
            </summary>
        </member>
        <member name="P:Rock.Model.ReportField.ReportId">
            <summary>
            Gets or sets the report identifier.
            </summary>
            <value>
            The report identifier.
            </value>
        </member>
        <member name="P:Rock.Model.ReportField.ReportFieldType">
            <summary>
            Gets or sets the type of the report field.
            </summary>
            <value>
            The type of the report field.
            </value>
        </member>
        <member name="P:Rock.Model.ReportField.ShowInGrid">
            <summary>
            Gets or sets a value indicating whether [show in grid].
            </summary>
            <value>
              <c>true</c> if [show in grid]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Model.ReportField.DataSelectComponentEntityTypeId">
            <summary>
            Gets or sets the data select component entity type identifier.
            </summary>
            <value>
            The data select component entity type identifier.
            </value>
        </member>
        <member name="P:Rock.Model.ReportField.Selection">
            <summary>
            Selection is where the FieldType stores specific parameter values 
            If ReportFieldType is Column or Attribute, it is the Column or Attribute name
            If ReportFieldType is DataSelectComponent, it will be some values of whatever the DataSelectComponent implements for specific parameters
            </summary>
            <value>
            The selection.
            </value>
        </member>
        <member name="P:Rock.Model.ReportField.Order">
            <summary>
            Gets or sets the order.
            </summary>
            <value>
            The order.
            </value>
        </member>
        <member name="P:Rock.Model.ReportField.ColumnHeaderText">
            <summary>
            Gets or sets the column header text.
            </summary>
            <value>
            The column header text.
            </value>
        </member>
        <member name="P:Rock.Model.ReportField.Report">
            <summary>
            Gets or sets the report.
            </summary>
            <value>
            The report.
            </value>
        </member>
        <member name="P:Rock.Model.ReportField.DataSelectComponentEntityType">
            <summary>
            Gets or sets the type of the data select component entity.
            </summary>
            <value>
            The type of the data select component entity.
            </value>
        </member>
        <member name="T:Rock.Model.ReportFieldConfiguration">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Model.ReportFieldConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.ReportFieldConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Rock.Model.ReportFieldType">
            <summary>
            
            </summary>
        </member>
        <member name="F:Rock.Model.ReportFieldType.Property">
            <summary>
            The field is one of the properties of the entity
            </summary>
        </member>
        <member name="F:Rock.Model.ReportFieldType.Attribute">
            <summary>
            The field is one of the attributes of the entity
            </summary>
        </member>
        <member name="F:Rock.Model.ReportFieldType.DataSelectComponent">
            <summary>
            The field(s) that result from a <see cref="T:Rock.Reporting.DataSelectComponent"/>
            </summary>
        </member>
        <member name="T:Rock.Model.PageView">
            <summary>
            Site Model Entity. A Site in Rock is a collection of <see cref="P:Rock.Model.PageView.Page">pages</see> and usually 
            associated with one or more <see cref="T:Rock.Model.SiteDomain">SiteDomains </see>.
            </summary>
        </member>
        <member name="P:Rock.Model.PageView.PageId">
            <summary>
            Gets or sets the page id of the page viewed.
            </summary>
            <value>
            A <see cref="T:System.Int32"/> the id of the page viewed.
            </value>
            
        </member>
        <member name="P:Rock.Model.PageView.SiteId">
            <summary>
            Gets or sets the site id of the page viewed.
            </summary>
            <value>
            A <see cref="T:System.Int32"/> the id of the site viewed.
            </value>
        </member>
        <member name="P:Rock.Model.PageView.PersonAliasId">
            <summary>
            Gets or sets the person alias id of the person who viewed the page.
            </summary>
            <value>
            A <see cref="T:System.Int32"/> the id of the person alias who viewed the page.
            </value>
        </member>
        <member name="P:Rock.Model.PageView.DateTimeViewed">
            <summary>
            Gets or sets the date and time the page was viewed.
            </summary>
            <value>
            A <see cref="T:System.DateTime"/> the date and time the page was viewed.
            </value>
        </member>
        <member name="P:Rock.Model.PageView.UserAgent">
            <summary>
            Gets or sets the user-agent of the browser.
            </summary>
            <value>
            A <see cref="T:System.String"/> of the user-agent of the browser.
            </value>
        </member>
        <member name="P:Rock.Model.PageView.ClientType">
            <summary>
            Gets or sets the type of client.
            </summary>
            <value>
            A <see cref="T:System.String"/> client type.
            </value>
        </member>
        <member name="P:Rock.Model.PageView.Url">
            <summary>
            Gets or sets the query string of the request.
            </summary>
            <value>
            A <see cref="T:System.String"/> of the query string of the request.
            </value>
        </member>
        <member name="P:Rock.Model.PageView.PageTitle">
            <summary>
            Gets or sets the page title of the request.
            </summary>
            <value>
            A <see cref="T:System.String"/> of the page title of the request.
            </value>
        </member>
        <member name="P:Rock.Model.PageView.SessionId">
            <summary>
            Gets or sets the session id of the request.
            </summary>
            <value>
            A <see cref="T:System.String"/> of the session id of the request.
            </value>
        </member>
        <member name="P:Rock.Model.PageView.IpAddress">
            <summary>
            Gets or sets the IP address of the request.
            </summary>
            <value>
            A <see cref="T:System.String"/> of the IP address of the request.
            </value>
        </member>
        <member name="P:Rock.Model.PageView.Page">
            <summary>
            Gets or sets the <see cref="T:Rock.Model.Page"/> page that was viewed.
            </summary>
            <value>
            The <see cref="T:Rock.Model.Page"/> that was viewed. 
            </value>
        </member>
        <member name="P:Rock.Model.PageView.Site">
            <summary>
            Gets or sets the <see cref="T:Rock.Model.Site"/> that the page is a part of
            </summary>
            <value>
            The site the page is a part of
            </value>
        </member>
        <member name="P:Rock.Model.PageView.PersonAlias">
            <summary>
            Gets or sets the person alias.
            </summary>
            <value>
            The person alias.
            </value>
        </member>
        <member name="T:Rock.Model.PageViewConfiguration">
            <summary>
            Site Configuration class.
            </summary>
        </member>
        <member name="M:Rock.Model.PageViewConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.SiteConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Rock.Model.WorkflowActionFormAttribute">
            <summary>
            Represents an <see cref="T:Rock.Model.WorkflowActionFormAttribute"/> used by a <see cref="T:Rock.Model.WorkflowActionForm"/>.
            </summary>
        </member>
        <member name="P:Rock.Model.WorkflowActionFormAttribute.WorkflowActionFormId">
            <summary>
            Gets or sets the header.
            </summary>
            <value>
            The header.
            </value>
        </member>
        <member name="P:Rock.Model.WorkflowActionFormAttribute.AttributeId">
            <summary>
            Gets or sets the attribute identifier.
            </summary>
            <value>
            The attribute identifier.
            </value>
        </member>
        <member name="P:Rock.Model.WorkflowActionFormAttribute.Order">
            <summary>
            Gets or sets the order.
            </summary>
            <value>
            The order.
            </value>
        </member>
        <member name="P:Rock.Model.WorkflowActionFormAttribute.IsVisible">
            <summary>
            Gets or sets a value indicating whether [is visible].
            </summary>
            <value>
              <c>true</c> if [is visible]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Model.WorkflowActionFormAttribute.IsReadOnly">
            <summary>
            Gets or sets a value indicating whether [is read only].
            </summary>
            <value>
              <c>true</c> if [is read only]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Model.WorkflowActionFormAttribute.IsRequired">
            <summary>
            Gets or sets a value indicating whether [is required].
            </summary>
            <value>
              <c>true</c> if [is required]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Model.WorkflowActionFormAttribute.WorkflowActionForm">
            <summary>
            Gets or sets the workflow action form.
            </summary>
            <value>
            The workflow action form.
            </value>
        </member>
        <member name="P:Rock.Model.WorkflowActionFormAttribute.Attribute">
            <summary>
            Gets or sets the attribute.
            </summary>
            <value>
            The attribute.
            </value>
        </member>
        <member name="T:Rock.Model.WorkflowActionFormAttributeConfiguration">
            <summary>
            Workflow Form attribute Configuration class.
            </summary>
        </member>
        <member name="M:Rock.Model.WorkflowActionFormAttributeConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.WorkflowActionFormAttributeConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Rock.Model.WorkflowActionForm">
            <summary>
            Represents an <see cref="T:Rock.Model.WorkflowActionForm"/> (action or task) that is performed as part of a <see cref="T:Rock.Model.WorkflowActionForm"/>.
            </summary>
        </member>
        <member name="P:Rock.Model.WorkflowActionForm.Header">
            <summary>
            Gets or sets the header.
            </summary>
            <value>
            The header.
            </value>
        </member>
        <member name="P:Rock.Model.WorkflowActionForm.Footer">
            <summary>
            Gets or sets the footer.
            </summary>
            <value>
            The footer.
            </value>
        </member>
        <member name="P:Rock.Model.WorkflowActionForm.Actions">
            <summary>
            Gets or sets the delimited list of action buttons and actions.
            </summary>
            <value>
            The actions.
            </value>
        </member>
        <member name="T:Rock.Model.WorkflowActionFormConfiguration">
            <summary>
            Workflow Form Configuration class.
            </summary>
        </member>
        <member name="M:Rock.Model.WorkflowActionFormConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.WorkflowActionFormConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Rock.Net.RestParameters.ContributionStatementOptions">
            <summary>
            
            </summary>
        </member>
        <member name="P:Rock.Net.RestParameters.ContributionStatementOptions.StartDate">
            <summary>
            Gets or sets the start date.
            </summary>
            <value>
            The start date.
            </value>
        </member>
        <member name="P:Rock.Net.RestParameters.ContributionStatementOptions.EndDate">
            <summary>
            Gets or sets the end date.
            </summary>
            <value>
            The end date.
            </value>
        </member>
        <member name="P:Rock.Net.RestParameters.ContributionStatementOptions.AccountIds">
            <summary>
            Gets or sets the account ids.
            </summary>
            <value>
            The account ids.
            </value>
        </member>
        <member name="P:Rock.Net.RestParameters.ContributionStatementOptions.PersonId">
            <summary>
            Gets or sets the person id.
            </summary>
            <value>
            The person id.
            </value>
        </member>
        <member name="P:Rock.Net.RestParameters.ContributionStatementOptions.OrderByZipCode">
            <summary>
            Gets or sets a value indicating whether [order by zip code].
            </summary>
            <value>
              <c>true</c> if [order by zip code]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Rock.PersonProfile.Badge.Campus">
            <summary>
            Campus Badge
            </summary>
        </member>
        <member name="T:Rock.PersonProfile.HighlightLabelBadge">
            <summary>
            Base class for person profile icon badges
            </summary>
        </member>
        <member name="T:Rock.PersonProfile.BadgeComponent">
            <summary>
            Base class for person profile badges
            </summary>
        </member>
        <member name="M:Rock.PersonProfile.BadgeComponent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.PersonProfile.BadgeComponent"/> class.
            </summary>
        </member>
        <member name="M:Rock.PersonProfile.BadgeComponent.LoadAttributes">
            <summary>
            Loads the attributes.
            </summary>
            <exception cref="T:System.Exception">Person Badge attributes are saved specific to the current badge, which requires that the current badge is included in order to load or retrieve values.  Use the LoadAttributes( PersonBadge badge ) method instead.</exception>
        </member>
        <member name="M:Rock.PersonProfile.BadgeComponent.LoadAttributes(Rock.Model.PersonBadge)">
            <summary>
            Loads the attributes for the badge.  The attributes are loaded by the framework prior to executing the badge, 
            so typically Person Badges do not need to load the attributes
            </summary>
            <param name="badge">The badge.</param>
        </member>
        <member name="M:Rock.PersonProfile.BadgeComponent.GetAttributeValue(System.String)">
            <summary>
            Use GetAttributeValue( PersonBadge badge, string key) instead.  Person Badge attribute values are 
            specific to the badge instance (rather than global).  This method will throw an exception
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
            <exception cref="T:System.Exception">Person Badge attributes are saved specific to the current badge, which requires that the current badge is included in order to load or retrieve values.  Use the GetAttributeValue( PersonBadge badge, string key ) method instead.</exception>
        </member>
        <member name="M:Rock.PersonProfile.BadgeComponent.GetAttributeValue(Rock.Web.Cache.PersonBadgeCache,System.String)">
            <summary>
            Gets the attribute value for the badge
            </summary>
            <param name="badge">The badge.</param>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.PersonProfile.BadgeComponent.Render(Rock.Web.Cache.PersonBadgeCache,System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders the specified writer.
            </summary>
            <param name="badge">The badge.</param>
            <param name="writer">The writer.</param>
        </member>
        <member name="P:Rock.PersonProfile.BadgeComponent.AttributeValueDefaults">
            <summary>
            Gets the attribute value defaults.
            </summary>
            <value>
            The attribute defaults.
            </value>
        </member>
        <member name="P:Rock.PersonProfile.BadgeComponent.IsActive">
            <summary>
            Gets a value indicating whether this instance is active.
            </summary>
            <value>
              <c>true</c> if this instance is active; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.PersonProfile.BadgeComponent.Order">
            <summary>
            Gets the order.
            </summary>
            <value>
            The order.
            </value>
        </member>
        <member name="P:Rock.PersonProfile.BadgeComponent.ParentPersonBlock">
            <summary>
            Gets or sets the parent person block.
            </summary>
            <value>
            The parent person block.
            </value>
        </member>
        <member name="P:Rock.PersonProfile.BadgeComponent.Person">
            <summary>
            Gets or sets the person.
            </summary>
            <value>
            The person.
            </value>
        </member>
        <member name="M:Rock.PersonProfile.HighlightLabelBadge.GetLabel(Rock.Model.Person)">
            <summary>
            Gets the badge label
            </summary>
            <param name="person">The person.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.PersonProfile.HighlightLabelBadge.Render(Rock.Web.Cache.PersonBadgeCache,System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders the specified writer.
            </summary>
            <param name="badge">The badge.</param>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:Rock.PersonProfile.Badge.Campus.GetLabel(Rock.Model.Person)">
            <summary>
            Gets the badge label
            </summary>
            <param name="person">The person.</param>
            <returns></returns>
        </member>
        <member name="T:Rock.PersonProfile.Badge.AttendingDuration">
            <summary>
            FamilyAttendance Badge
            </summary>
        </member>
        <member name="M:Rock.PersonProfile.Badge.AttendingDuration.Render(Rock.Web.Cache.PersonBadgeCache,System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders the specified writer.
            </summary>
            <param name="badge">The badge.</param>
            <param name="writer">The writer.</param>
        </member>
        <member name="T:Rock.PersonProfile.Badge.LastVisitOnSite">
            <summary>
            FamilyAttendance Badge
            </summary>
        </member>
        <member name="M:Rock.PersonProfile.Badge.LastVisitOnSite.Render(Rock.Web.Cache.PersonBadgeCache,System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders the specified writer.
            </summary>
            <param name="badge">The badge.</param>
            <param name="writer">The writer.</param>
        </member>
        <member name="T:Rock.PersonProfile.Badge.InGroupOfType">
            <summary>
            FamilyAttendance Badge
            </summary>
        </member>
        <member name="M:Rock.PersonProfile.Badge.InGroupOfType.Render(Rock.Web.Cache.PersonBadgeCache,System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders the specified writer.
            </summary>
            <param name="badge">The badge.</param>
            <param name="writer">The writer.</param>
        </member>
        <member name="T:Rock.PersonProfile.Badge.FamilyWeeksAttendedInDuration">
            <summary>
            FamilyAttendance Badge
            </summary>
        </member>
        <member name="M:Rock.PersonProfile.Badge.FamilyWeeksAttendedInDuration.Render(Rock.Web.Cache.PersonBadgeCache,System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders the specified writer.
            </summary>
            <param name="badge">The badge.</param>
            <param name="writer">The writer.</param>
        </member>
        <member name="T:Rock.PersonProfile.Badge.Liquid">
            <summary>
            Liquid Badge
            </summary>
        </member>
        <member name="M:Rock.PersonProfile.Badge.Liquid.Render(Rock.Web.Cache.PersonBadgeCache,System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders the specified writer.
            </summary>
            <param name="badge">The badge.</param>
            <param name="writer">The writer.</param>
        </member>
        <member name="T:Rock.Reporting.DataFilter.Group.DistanceFromFilter">
            <summary>
            
            </summary>
        </member>
        <member name="T:Rock.Reporting.DataFilterComponent">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Reporting.DataFilterComponent.GetTitle(System.Type)">
            <summary>
            Gets the title.
            </summary>
            <value>
            The title.
            </value>
        </member>
        <member name="M:Rock.Reporting.DataFilterComponent.GetClientFormatSelection(System.Type)">
            <summary>
            Formats the selection on the client-side.  When the filter is collapsed by the user, the Filterfield control
            will set the description of the filter to whatever is returned by this property.  If including script, the
            controls parent container can be referenced through a '$content' variable that is set by the control before 
            referencing this property.
            </summary>
            <value>
            The client format script.
            </value>
        </member>
        <member name="M:Rock.Reporting.DataFilterComponent.FormatSelection(System.Type,System.String)">
            <summary>
            Formats the selection.
            </summary>
            <param name="entityType">Type of the entity.</param>
            <param name="selection">The selection.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Reporting.DataFilterComponent.CreateChildControls(System.Type,Rock.Web.UI.Controls.FilterField)">
            <summary>
            Creates the child controls.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rock.Reporting.DataFilterComponent.RenderControls(System.Type,Rock.Web.UI.Controls.FilterField,System.Web.UI.HtmlTextWriter,System.Web.UI.Control[])">
            <summary>
            Renders the controls.
            </summary>
            <param name="entityType">Type of the entity.</param>
            <param name="filterControl">The filter control.</param>
            <param name="writer">The writer.</param>
            <param name="controls">The controls.</param>
        </member>
        <member name="M:Rock.Reporting.DataFilterComponent.GetSelection(System.Type,System.Web.UI.Control[])">
            <summary>
            Gets the selection.
            </summary>
            <param name="entityType">Type of the entity.</param>
            <param name="controls">The controls.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Reporting.DataFilterComponent.SetSelection(System.Type,System.Web.UI.Control[],System.String)">
            <summary>
            Sets the selection.
            </summary>
            <param name="entityType">Type of the entity.</param>
            <param name="controls">The controls.</param>
            <param name="selection">The selection.</param>
        </member>
        <member name="M:Rock.Reporting.DataFilterComponent.GetExpression(System.Type,Rock.Data.IService,System.Linq.Expressions.ParameterExpression,System.String)">
            <summary>
            Gets the expression.
            </summary>
            <param name="entityType">Type of the entity.</param>
            <param name="serviceInstance">The service instance.</param>
            <param name="parameterExpression">The parameter expression.</param>
            <param name="selection">The selection.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Reporting.DataFilterComponent.ComparisonExpression(Rock.Model.ComparisonType,System.Linq.Expressions.MemberExpression,System.Linq.Expressions.Expression)">
            <summary>
            Gets the comparison expression.
            </summary>
            <param name="comparisonType">Type of the comparison.</param>
            <param name="property">The property.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Reporting.DataFilterComponent.ComparisonControl(Rock.Model.ComparisonType)">
            <summary>
            Gets a dropdownlist of the supported comparison types
            </summary>
            <param name="supportedComparisonTypes">The supported comparison types.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Reporting.DataFilterComponent.RegisterFilterCompareChangeScript(Rock.Web.UI.Controls.FilterField)">
            <summary>
            Registers Javascript to hide/show .js-filter-control child elements of a .js-filter-compare dropdown
            </summary>
            <value>
            </value>
        </member>
        <member name="P:Rock.Reporting.DataFilterComponent.AppliesToEntityType">
            <summary>
            Gets the entity type that filter applies to.  Filter should be an empty string
            if it applies to all entities
            </summary>
            <value>
            The entity that filter applies to.
            </value>
        </member>
        <member name="P:Rock.Reporting.DataFilterComponent.Section">
            <summary>
            Gets the section.
            </summary>
            <value>
            The section.
            </value>
        </member>
        <member name="P:Rock.Reporting.DataFilterComponent.AttributeValueDefaults">
            <summary>
            Gets the attribute value defaults.
            </summary>
            <value>
            The attribute defaults.
            </value>
        </member>
        <member name="P:Rock.Reporting.DataFilterComponent.StringFilterComparisonTypes">
            <summary>
            Gets the comparison types typically used for string fields
            </summary>
        </member>
        <member name="P:Rock.Reporting.DataFilterComponent.NumericFilterComparisonTypes">
            <summary>
            Gets the comparison types typically used for numeric fields
            </summary>
        </member>
        <member name="P:Rock.Reporting.DataFilterComponent.DateFilterComparisonTypes">
            <summary>
            Gets the date filter comparison types.
            </summary>
            <value>
            The date filter comparison types.
            </value>
        </member>
        <member name="M:Rock.Reporting.DataFilter.Group.DistanceFromFilter.GetTitle(System.Type)">
            <summary>
            Gets the title.
            </summary>
            <param name="entityType"></param>
            <returns></returns>
            <value>
            The title.
            </value>
        </member>
        <member name="M:Rock.Reporting.DataFilter.Group.DistanceFromFilter.GetClientFormatSelection(System.Type)">
            <summary>
            Formats the selection on the client-side.  When the filter is collapsed by the user, the Filterfield control
            will set the description of the filter to whatever is returned by this property.  If including script, the
            controls parent container can be referenced through a '$content' variable that is set by the control before 
            referencing this property.
            </summary>
            <value>
            The client format script.
            </value>
        </member>
        <member name="M:Rock.Reporting.DataFilter.Group.DistanceFromFilter.FormatSelection(System.Type,System.String)">
            <summary>
            Formats the selection.
            </summary>
            <param name="entityType">Type of the entity.</param>
            <param name="selection">The selection.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Reporting.DataFilter.Group.DistanceFromFilter.CreateChildControls(System.Type,Rock.Web.UI.Controls.FilterField)">
            <summary>
            Creates the child controls.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rock.Reporting.DataFilter.Group.DistanceFromFilter.RenderControls(System.Type,Rock.Web.UI.Controls.FilterField,System.Web.UI.HtmlTextWriter,System.Web.UI.Control[])">
            <summary>
            Renders the controls.
            </summary>
            <param name="entityType">Type of the entity.</param>
            <param name="filterControl">The filter control.</param>
            <param name="writer">The writer.</param>
            <param name="controls">The controls.</param>
        </member>
        <member name="M:Rock.Reporting.DataFilter.Group.DistanceFromFilter.GetSelection(System.Type,System.Web.UI.Control[])">
            <summary>
            Gets the selection.
            </summary>
            <param name="entityType">Type of the entity.</param>
            <param name="controls">The controls.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Reporting.DataFilter.Group.DistanceFromFilter.SetSelection(System.Type,System.Web.UI.Control[],System.String)">
            <summary>
            Sets the selection.
            </summary>
            <param name="entityType">Type of the entity.</param>
            <param name="controls">The controls.</param>
            <param name="selection">The selection.</param>
        </member>
        <member name="M:Rock.Reporting.DataFilter.Group.DistanceFromFilter.GetExpression(System.Type,Rock.Data.IService,System.Linq.Expressions.ParameterExpression,System.String)">
            <summary>
            Gets the expression.
            </summary>
            <param name="entityType">Type of the entity.</param>
            <param name="serviceInstance">The service instance.</param>
            <param name="parameterExpression">The parameter expression.</param>
            <param name="selection">The selection.</param>
            <returns></returns>
        </member>
        <member name="P:Rock.Reporting.DataFilter.Group.DistanceFromFilter.AppliesToEntityType">
            <summary>
            Gets the entity type that filter applies to.
            </summary>
            <value>
            The entity that filter applies to.
            </value>
        </member>
        <member name="P:Rock.Reporting.DataFilter.Group.DistanceFromFilter.Section">
            <summary>
            Gets the section.
            </summary>
            <value>
            The section.
            </value>
        </member>
        <member name="T:Rock.Reporting.DataFilter.Group.SimpleMemberCountFilter">
            <summary>
            
            </summary>
        </member>
        <member name="T:Rock.Reporting.DataFilter.Group.MemberCountFilter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Reporting.DataFilter.Group.MemberCountFilter.GetTitle(System.Type)">
            <summary>
            Gets the title.
            </summary>
            <param name="entityType"></param>
            <returns></returns>
            <value>
            The title.
            </value>
        </member>
        <member name="M:Rock.Reporting.DataFilter.Group.MemberCountFilter.GetClientFormatSelection(System.Type)">
            <summary>
            Formats the selection on the client-side.  When the filter is collapsed by the user, the Filterfield control
            will set the description of the filter to whatever is returned by this property.  If including script, the
            controls parent container can be referenced through a '$content' variable that is set by the control before 
            referencing this property.
            </summary>
            <value>
            The client format script.
            </value>
        </member>
        <member name="M:Rock.Reporting.DataFilter.Group.MemberCountFilter.FormatSelection(System.Type,System.String)">
            <summary>
            Formats the selection.
            </summary>
            <param name="entityType">Type of the entity.</param>
            <param name="selection">The selection.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Reporting.DataFilter.Group.MemberCountFilter.CreateChildControls(System.Type,Rock.Web.UI.Controls.FilterField)">
            <summary>
            Creates the child controls.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rock.Reporting.DataFilter.Group.MemberCountFilter.RenderControls(System.Type,Rock.Web.UI.Controls.FilterField,System.Web.UI.HtmlTextWriter,System.Web.UI.Control[])">
            <summary>
            Renders the controls.
            </summary>
            <param name="entityType">Type of the entity.</param>
            <param name="filterControl">The filter control.</param>
            <param name="writer">The writer.</param>
            <param name="controls">The controls.</param>
        </member>
        <member name="M:Rock.Reporting.DataFilter.Group.MemberCountFilter.GetSelection(System.Type,System.Web.UI.Control[])">
            <summary>
            Gets the selection.
            </summary>
            <param name="entityType">Type of the entity.</param>
            <param name="controls">The controls.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Reporting.DataFilter.Group.MemberCountFilter.SetSelection(System.Type,System.Web.UI.Control[],System.String)">
            <summary>
            Sets the selection.
            </summary>
            <param name="entityType">Type of the entity.</param>
            <param name="controls">The controls.</param>
            <param name="selection">The selection.</param>
        </member>
        <member name="M:Rock.Reporting.DataFilter.Group.MemberCountFilter.GetExpression(System.Type,Rock.Data.IService,System.Linq.Expressions.ParameterExpression,System.String)">
            <summary>
            Gets the expression.
            </summary>
            <param name="entityType">Type of the entity.</param>
            <param name="serviceInstance">The service instance.</param>
            <param name="parameterExpression">The parameter expression.</param>
            <param name="selection">The selection.</param>
            <returns></returns>
        </member>
        <member name="P:Rock.Reporting.DataFilter.Group.MemberCountFilter.AppliesToEntityType">
            <summary>
            Gets the entity type that filter applies to.
            </summary>
            <value>
            The entity that filter applies to.
            </value>
        </member>
        <member name="P:Rock.Reporting.DataFilter.Group.MemberCountFilter.Section">
            <summary>
            Gets the section.
            </summary>
            <value>
            The section.
            </value>
        </member>
        <member name="P:Rock.Reporting.DataFilter.Group.MemberCountFilter.SimpleMemberCountMode">
            <summary>
            Gets a value indicating whether [simple member count mode].
            </summary>
            <value>
            <c>true</c> if [simple member count mode]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Rock.Reporting.DataFilter.Group.SimpleMemberCountFilter.GetTitle(System.Type)">
            <summary>
            Gets the title.
            </summary>
            <param name="entityType"></param>
            <returns></returns>
            <value>
            The title.
              </value>
        </member>
        <member name="P:Rock.Reporting.DataFilter.Group.SimpleMemberCountFilter.SimpleMemberCountMode">
            <summary>
            Gets a value indicating whether [simple member count mode].
            </summary>
            <value>
            <c>true</c> if [simple member count mode]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Rock.Reporting.DataFilter.Group.CampusFilter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Reporting.DataFilter.Group.CampusFilter.GetTitle(System.Type)">
            <summary>
            Gets the title.
            </summary>
            <param name="entityType"></param>
            <returns></returns>
            <value>
            The title.
            </value>
        </member>
        <member name="M:Rock.Reporting.DataFilter.Group.CampusFilter.GetClientFormatSelection(System.Type)">
            <summary>
            Formats the selection on the client-side.  When the filter is collapsed by the user, the Filterfield control
            will set the description of the filter to whatever is returned by this property.  If including script, the
            controls parent container can be referenced through a '$content' variable that is set by the control before 
            referencing this property.
            </summary>
            <value>
            The client format script.
            </value>
        </member>
        <member name="M:Rock.Reporting.DataFilter.Group.CampusFilter.FormatSelection(System.Type,System.String)">
            <summary>
            Formats the selection.
            </summary>
            <param name="entityType">Type of the entity.</param>
            <param name="selection">The selection.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Reporting.DataFilter.Group.CampusFilter.CreateChildControls(System.Type,Rock.Web.UI.Controls.FilterField)">
            <summary>
            Creates the child controls.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rock.Reporting.DataFilter.Group.CampusFilter.RenderControls(System.Type,Rock.Web.UI.Controls.FilterField,System.Web.UI.HtmlTextWriter,System.Web.UI.Control[])">
            <summary>
            Renders the controls.
            </summary>
            <param name="entityType">Type of the entity.</param>
            <param name="filterControl">The filter control.</param>
            <param name="writer">The writer.</param>
            <param name="controls">The controls.</param>
        </member>
        <member name="M:Rock.Reporting.DataFilter.Group.CampusFilter.GetSelection(System.Type,System.Web.UI.Control[])">
            <summary>
            Gets the selection.
            </summary>
            <param name="entityType">Type of the entity.</param>
            <param name="controls">The controls.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Reporting.DataFilter.Group.CampusFilter.SetSelection(System.Type,System.Web.UI.Control[],System.String)">
            <summary>
            Sets the selection.
            </summary>
            <param name="entityType">Type of the entity.</param>
            <param name="controls">The controls.</param>
            <param name="selection">The selection.</param>
        </member>
        <member name="M:Rock.Reporting.DataFilter.Group.CampusFilter.GetExpression(System.Type,Rock.Data.IService,System.Linq.Expressions.ParameterExpression,System.String)">
            <summary>
            Gets the expression.
            </summary>
            <param name="entityType">Type of the entity.</param>
            <param name="serviceInstance">The service instance.</param>
            <param name="parameterExpression">The parameter expression.</param>
            <param name="selection">The selection.</param>
            <returns></returns>
        </member>
        <member name="P:Rock.Reporting.DataFilter.Group.CampusFilter.AppliesToEntityType">
            <summary>
            Gets the entity type that filter applies to.
            </summary>
            <value>
            The entity that filter applies to.
            </value>
        </member>
        <member name="P:Rock.Reporting.DataFilter.Group.CampusFilter.Section">
            <summary>
            Gets the section.
            </summary>
            <value>
            The section.
            </value>
        </member>
        <member name="T:Rock.Reporting.DataFilter.Group.GroupTypeFilter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Reporting.DataFilter.Group.GroupTypeFilter.GetTitle(System.Type)">
            <summary>
            Gets the title.
            </summary>
            <param name="entityType"></param>
            <returns></returns>
            <value>
            The title.
            </value>
        </member>
        <member name="M:Rock.Reporting.DataFilter.Group.GroupTypeFilter.GetClientFormatSelection(System.Type)">
            <summary>
            Formats the selection on the client-side.  When the filter is collapsed by the user, the Filterfield control
            will set the description of the filter to whatever is returned by this property.  If including script, the
            controls parent container can be referenced through a '$content' variable that is set by the control before 
            referencing this property.
            </summary>
            <value>
            The client format script.
            </value>
        </member>
        <member name="M:Rock.Reporting.DataFilter.Group.GroupTypeFilter.FormatSelection(System.Type,System.String)">
            <summary>
            Formats the selection.
            </summary>
            <param name="entityType">Type of the entity.</param>
            <param name="selection">The selection.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Reporting.DataFilter.Group.GroupTypeFilter.CreateChildControls(System.Type,Rock.Web.UI.Controls.FilterField)">
            <summary>
            Creates the child controls.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rock.Reporting.DataFilter.Group.GroupTypeFilter.RenderControls(System.Type,Rock.Web.UI.Controls.FilterField,System.Web.UI.HtmlTextWriter,System.Web.UI.Control[])">
            <summary>
            Renders the controls.
            </summary>
            <param name="entityType">Type of the entity.</param>
            <param name="filterControl">The filter control.</param>
            <param name="writer">The writer.</param>
            <param name="controls">The controls.</param>
        </member>
        <member name="M:Rock.Reporting.DataFilter.Group.GroupTypeFilter.GetSelection(System.Type,System.Web.UI.Control[])">
            <summary>
            Gets the selection.
            </summary>
            <param name="entityType">Type of the entity.</param>
            <param name="controls">The controls.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Reporting.DataFilter.Group.GroupTypeFilter.SetSelection(System.Type,System.Web.UI.Control[],System.String)">
            <summary>
            Sets the selection.
            </summary>
            <param name="entityType">Type of the entity.</param>
            <param name="controls">The controls.</param>
            <param name="selection">The selection.</param>
        </member>
        <member name="M:Rock.Reporting.DataFilter.Group.GroupTypeFilter.GetExpression(System.Type,Rock.Data.IService,System.Linq.Expressions.ParameterExpression,System.String)">
            <summary>
            Gets the expression.
            </summary>
            <param name="entityType">Type of the entity.</param>
            <param name="serviceInstance">The service instance.</param>
            <param name="parameterExpression">The parameter expression.</param>
            <param name="selection">The selection.</param>
            <returns></returns>
        </member>
        <member name="P:Rock.Reporting.DataFilter.Group.GroupTypeFilter.AppliesToEntityType">
            <summary>
            Gets the entity type that filter applies to.
            </summary>
            <value>
            The entity that filter applies to.
            </value>
        </member>
        <member name="P:Rock.Reporting.DataFilter.Group.GroupTypeFilter.Section">
            <summary>
            Gets the section.
            </summary>
            <value>
            The section.
            </value>
        </member>
        <member name="T:Rock.Reporting.DataFilter.Group.GroupAttributesFilter">
            <summary>
            Filter group on any of it's attribute values
            </summary>
        </member>
        <member name="T:Rock.Reporting.DataFilter.EntityFieldFilter">
            <summary>
            Abstract class that is used by DataFilters that let a user select a field/attribute of an entity
            </summary>
        </member>
        <member name="M:Rock.Reporting.DataFilter.EntityFieldFilter.AddFieldTypeControls(System.Web.UI.Control,System.Collections.Generic.List{System.Web.UI.Control},Rock.Reporting.EntityField)">
            <summary>
            Adds the field type controls.
            </summary>
            <param name="parentControl">The filter control.</param>
            <param name="controls">The controls.</param>
            <param name="entityField">The entity field.</param>
        </member>
        <member name="M:Rock.Reporting.DataFilter.EntityFieldFilter.GetEntityFieldFormatSelection(System.Collections.Generic.List{System.String},Rock.Reporting.EntityField)">
            <summary>
            Gets the entity field format selection.
            </summary>
            <param name="values">The values.</param>
            <param name="entityField">The entity field.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Reporting.DataFilter.EntityFieldFilter.RenderEntityFieldsControls(System.Type,Rock.Web.UI.Controls.FilterField,System.Web.UI.HtmlTextWriter,System.Collections.Generic.List{Rock.Reporting.EntityField},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.Web.UI.Control}},System.Web.UI.WebControls.DropDownList)">
            <summary>
            Renders the entity fields controls.
            </summary>
            <param name="entityType">Type of the entity.</param>
            <param name="filterControl">The filter control.</param>
            <param name="writer">The writer.</param>
            <param name="entityFields">The entity fields.</param>
            <param name="groupedControls">The grouped controls.</param>
            <param name="ddlEntityField">The DDL entity field.</param>
        </member>
        <member name="M:Rock.Reporting.DataFilter.EntityFieldFilter.GetSelectionValuesForProperty(System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.Web.UI.Control}},System.Collections.Generic.List{System.String})">
            <summary>
            Gets the selection values for property.
            </summary>
            <param name="selectedProperty">The selected property.</param>
            <param name="groupedControls">The grouped controls.</param>
            <param name="values">The values.</param>
        </member>
        <member name="M:Rock.Reporting.DataFilter.EntityFieldFilter.SetEntityFieldSelection(System.Web.UI.WebControls.DropDownList,System.Collections.Generic.List{System.String},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.Web.UI.Control}})">
            <summary>
            Sets the entity field selection.
            </summary>
            <param name="ddlProperty">The DDL property.</param>
            <param name="values">The values.</param>
            <param name="groupedControls">The grouped controls.</param>
        </member>
        <member name="M:Rock.Reporting.DataFilter.EntityFieldFilter.GetAttributeExpression(Rock.Data.IService,System.Linq.Expressions.ParameterExpression,Rock.Reporting.EntityField,System.Collections.Generic.List{System.String})">
            <summary>
            Builds an expression for an attribute field
            </summary>
            <param name="serviceInstance">The service instance.</param>
            <param name="parameterExpression">The parameter expression.</param>
            <param name="property">The property.</param>
            <param name="values">The values.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Reporting.DataFilter.Group.GroupAttributesFilter.GetTitle(System.Type)">
            <summary>
            Gets the title.
            </summary>
            <param name="entityType">Type of the entity.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Reporting.DataFilter.Group.GroupAttributesFilter.GetClientFormatSelection(System.Type)">
            <summary>
            Formats the selection on the client-side.  When the filter is collapsed by the user, the Filterfield control
            will set the description of the filter to whatever is returned by this property.  If including script, the
            controls parent container can be referenced through a '$content' variable that is set by the control before 
            referencing this property.
            </summary>
            <value>
            The client format script.
            </value>
        </member>
        <member name="M:Rock.Reporting.DataFilter.Group.GroupAttributesFilter.FormatSelection(System.Type,System.String)">
            <summary>
            Formats the selection.
            </summary>
            <param name="entityType"></param>
            <param name="selection">The selection.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Reporting.DataFilter.Group.GroupAttributesFilter.CreateChildControls(System.Type,Rock.Web.UI.Controls.FilterField)">
            <summary>
            Creates the child controls.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rock.Reporting.DataFilter.Group.GroupAttributesFilter.groupTypePicker_SelectedIndexChanged(System.Object,System.EventArgs)">
            <summary>
            Handles the SelectedIndexChanged event of the groupTypePicker control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Rock.Reporting.DataFilter.Group.GroupAttributesFilter.RenderControls(System.Type,Rock.Web.UI.Controls.FilterField,System.Web.UI.HtmlTextWriter,System.Web.UI.Control[])">
            <summary>
            Renders the controls.
            </summary>
            <param name="entityType">Type of the entity.</param>
            <param name="filterControl">The filter control.</param>
            <param name="writer">The writer.</param>
            <param name="controls">The controls.</param>
        </member>
        <member name="M:Rock.Reporting.DataFilter.Group.GroupAttributesFilter.GetSelection(System.Type,System.Web.UI.Control[])">
            <summary>
            Gets the selection.
            </summary>
            <param name="entityType"></param>
            <param name="controls">The controls.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Reporting.DataFilter.Group.GroupAttributesFilter.SetSelection(System.Type,System.Web.UI.Control[],System.String)">
            <summary>
            Sets the selection.
            </summary>
            <param name="entityType"></param>
            <param name="controls">The controls.</param>
            <param name="selection">The selection.</param>
        </member>
        <member name="M:Rock.Reporting.DataFilter.Group.GroupAttributesFilter.GetExpression(System.Type,Rock.Data.IService,System.Linq.Expressions.ParameterExpression,System.String)">
            <summary>
            Gets the expression.
            </summary>
            <param name="entityType"></param>
            <param name="serviceInstance">The service instance.</param>
            <param name="parameterExpression">The parameter expression.</param>
            <param name="selection">The selection.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Reporting.DataFilter.Group.GroupAttributesFilter.GetGroupAttributes(System.Nullable{System.Int32})">
            <summary>
            Gets the properties and attributes for the entity
            </summary>
            <param name="groupTypeId">The group type identifier.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Reporting.DataFilter.Group.GroupAttributesFilter.GroupControls(System.Type,System.Web.UI.Control[])">
            <summary>
            Groups all the controls for each field
            </summary>
            <param name="entityType">Type of the entity.</param>
            <param name="controls">The controls.</param>
            <returns></returns>
        </member>
        <member name="P:Rock.Reporting.DataFilter.Group.GroupAttributesFilter.AppliesToEntityType">
            <summary>
            Gets the entity type that filter applies to.
            </summary>
            <value>
            The entity that filter applies to.
            </value>
        </member>
        <member name="P:Rock.Reporting.DataFilter.Group.GroupAttributesFilter.Section">
            <summary>
            Gets the section.
            </summary>
            <value>
            The section.
            </value>
        </member>
        <member name="T:Rock.Reporting.DataFilter.Person.GradeFilter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Reporting.DataFilter.Person.GradeFilter.GetTitle(System.Type)">
            <summary>
            Gets the title.
            </summary>
            <param name="entityType"></param>
            <returns></returns>
            <value>
            The title.
            </value>
        </member>
        <member name="M:Rock.Reporting.DataFilter.Person.GradeFilter.GetClientFormatSelection(System.Type)">
            <summary>
            Formats the selection on the client-side.  When the filter is collapsed by the user, the Filterfield control
            will set the description of the filter to whatever is returned by this property.  If including script, the
            controls parent container can be referenced through a '$content' variable that is set by the control before 
            referencing this property.
            </summary>
            <value>
            The client format script.
            </value>
        </member>
        <member name="M:Rock.Reporting.DataFilter.Person.GradeFilter.FormatSelection(System.Type,System.String)">
            <summary>
            Formats the selection.
            </summary>
            <param name="entityType">Type of the entity.</param>
            <param name="selection">The selection.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Reporting.DataFilter.Person.GradeFilter.CreateChildControls(System.Type,Rock.Web.UI.Controls.FilterField)">
            <summary>
            Creates the child controls.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rock.Reporting.DataFilter.Person.GradeFilter.RenderControls(System.Type,Rock.Web.UI.Controls.FilterField,System.Web.UI.HtmlTextWriter,System.Web.UI.Control[])">
            <summary>
            Renders the controls.
            </summary>
            <param name="entityType">Type of the entity.</param>
            <param name="filterControl">The filter control.</param>
            <param name="writer">The writer.</param>
            <param name="controls">The controls.</param>
        </member>
        <member name="M:Rock.Reporting.DataFilter.Person.GradeFilter.GetSelection(System.Type,System.Web.UI.Control[])">
            <summary>
            Gets the selection.
            </summary>
            <param name="entityType">Type of the entity.</param>
            <param name="controls">The controls.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Reporting.DataFilter.Person.GradeFilter.SetSelection(System.Type,System.Web.UI.Control[],System.String)">
            <summary>
            Sets the selection.
            </summary>
            <param name="entityType">Type of the entity.</param>
            <param name="controls">The controls.</param>
            <param name="selection">The selection.</param>
        </member>
        <member name="M:Rock.Reporting.DataFilter.Person.GradeFilter.GetExpression(System.Type,Rock.Data.IService,System.Linq.Expressions.ParameterExpression,System.String)">
            <summary>
            Gets the expression.
            </summary>
            <param name="entityType">Type of the entity.</param>
            <param name="serviceInstance">The service instance.</param>
            <param name="parameterExpression">The parameter expression.</param>
            <param name="selection">The selection.</param>
            <returns></returns>
        </member>
        <member name="P:Rock.Reporting.DataFilter.Person.GradeFilter.AppliesToEntityType">
            <summary>
            Gets the entity type that filter applies to.
            </summary>
            <value>
            The entity that filter applies to.
            </value>
        </member>
        <member name="P:Rock.Reporting.DataFilter.Person.GradeFilter.Section">
            <summary>
            Gets the section.
            </summary>
            <value>
            The section.
            </value>
        </member>
        <member name="T:Rock.Reporting.DataFilter.Person.AgeFilter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Reporting.DataFilter.Person.AgeFilter.GetTitle(System.Type)">
            <summary>
            Gets the title.
            </summary>
            <param name="entityType"></param>
            <returns></returns>
            <value>
            The title.
            </value>
        </member>
        <member name="M:Rock.Reporting.DataFilter.Person.AgeFilter.GetClientFormatSelection(System.Type)">
            <summary>
            Formats the selection on the client-side.  When the filter is collapsed by the user, the Filterfield control
            will set the description of the filter to whatever is returned by this property.  If including script, the
            controls parent container can be referenced through a '$content' variable that is set by the control before 
            referencing this property.
            </summary>
            <value>
            The client format script.
            </value>
        </member>
        <member name="M:Rock.Reporting.DataFilter.Person.AgeFilter.FormatSelection(System.Type,System.String)">
            <summary>
            Formats the selection.
            </summary>
            <param name="entityType">Type of the entity.</param>
            <param name="selection">The selection.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Reporting.DataFilter.Person.AgeFilter.CreateChildControls(System.Type,Rock.Web.UI.Controls.FilterField)">
            <summary>
            Creates the child controls.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rock.Reporting.DataFilter.Person.AgeFilter.RenderControls(System.Type,Rock.Web.UI.Controls.FilterField,System.Web.UI.HtmlTextWriter,System.Web.UI.Control[])">
            <summary>
            Renders the controls.
            </summary>
            <param name="entityType">Type of the entity.</param>
            <param name="filterControl">The filter control.</param>
            <param name="writer">The writer.</param>
            <param name="controls">The controls.</param>
        </member>
        <member name="M:Rock.Reporting.DataFilter.Person.AgeFilter.GetSelection(System.Type,System.Web.UI.Control[])">
            <summary>
            Gets the selection.
            </summary>
            <param name="entityType">Type of the entity.</param>
            <param name="controls">The controls.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Reporting.DataFilter.Person.AgeFilter.SetSelection(System.Type,System.Web.UI.Control[],System.String)">
            <summary>
            Sets the selection.
            </summary>
            <param name="entityType">Type of the entity.</param>
            <param name="controls">The controls.</param>
            <param name="selection">The selection.</param>
        </member>
        <member name="M:Rock.Reporting.DataFilter.Person.AgeFilter.GetExpression(System.Type,Rock.Data.IService,System.Linq.Expressions.ParameterExpression,System.String)">
            <summary>
            Gets the expression.
            </summary>
            <param name="entityType">Type of the entity.</param>
            <param name="serviceInstance">The service instance.</param>
            <param name="parameterExpression">The parameter expression.</param>
            <param name="selection">The selection.</param>
            <returns></returns>
        </member>
        <member name="P:Rock.Reporting.DataFilter.Person.AgeFilter.AppliesToEntityType">
            <summary>
            Gets the entity type that filter applies to.
            </summary>
            <value>
            The entity that filter applies to.
            </value>
        </member>
        <member name="P:Rock.Reporting.DataFilter.Person.AgeFilter.Section">
            <summary>
            Gets the section.
            </summary>
            <value>
            The section.
            </value>
        </member>
        <member name="T:Rock.Reporting.DataFilter.Person.TagFilter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Reporting.DataFilter.Person.TagFilter.GetTitle(System.Type)">
            <summary>
            Gets the title.
            </summary>
            <param name="entityType"></param>
            <returns></returns>
            <value>
            The title.
            </value>
        </member>
        <member name="M:Rock.Reporting.DataFilter.Person.TagFilter.GetClientFormatSelection(System.Type)">
            <summary>
            Formats the selection on the client-side.  When the filter is collapsed by the user, the Filterfield control
            will set the description of the filter to whatever is returned by this property.  If including script, the
            controls parent container can be referenced through a '$content' variable that is set by the control before 
            referencing this property.
            </summary>
            <value>
            The client format script.
            </value>
        </member>
        <member name="M:Rock.Reporting.DataFilter.Person.TagFilter.FormatSelection(System.Type,System.String)">
            <summary>
            Formats the selection.
            </summary>
            <param name="entityType">Type of the entity.</param>
            <param name="selection">The selection.</param>
            <returns></returns>
        </member>
        <member name="F:Rock.Reporting.DataFilter.Person.TagFilter._rblTagType">
            <summary>
            The Tag Type radio button list
            </summary>
        </member>
        <member name="F:Rock.Reporting.DataFilter.Person.TagFilter._ddlTagList">
            <summary>
            The tag list dropdownlist
            </summary>
        </member>
        <member name="M:Rock.Reporting.DataFilter.Person.TagFilter.CreateChildControls(System.Type,Rock.Web.UI.Controls.FilterField)">
            <summary>
            Creates the child controls.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rock.Reporting.DataFilter.Person.TagFilter.rblTagType_SelectedIndexChanged(System.Object,System.EventArgs)">
            <summary>
            Handles the SelectedIndexChanged event of the rblTagType control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Rock.Reporting.DataFilter.Person.TagFilter.PopulateTagList">
            <summary>
            Populates the tag list.
            </summary>
        </member>
        <member name="M:Rock.Reporting.DataFilter.Person.TagFilter.RenderControls(System.Type,Rock.Web.UI.Controls.FilterField,System.Web.UI.HtmlTextWriter,System.Web.UI.Control[])">
            <summary>
            Renders the controls.
            </summary>
            <param name="entityType">Type of the entity.</param>
            <param name="filterControl">The filter control.</param>
            <param name="writer">The writer.</param>
            <param name="controls">The controls.</param>
        </member>
        <member name="M:Rock.Reporting.DataFilter.Person.TagFilter.GetSelection(System.Type,System.Web.UI.Control[])">
            <summary>
            Gets the selection.
            </summary>
            <param name="entityType">Type of the entity.</param>
            <param name="controls">The controls.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Reporting.DataFilter.Person.TagFilter.SetSelection(System.Type,System.Web.UI.Control[],System.String)">
            <summary>
            Sets the selection.
            </summary>
            <param name="entityType">Type of the entity.</param>
            <param name="controls">The controls.</param>
            <param name="selection">The selection.</param>
        </member>
        <member name="M:Rock.Reporting.DataFilter.Person.TagFilter.GetExpression(System.Type,Rock.Data.IService,System.Linq.Expressions.ParameterExpression,System.String)">
            <summary>
            Gets the expression.
            </summary>
            <param name="entityType">Type of the entity.</param>
            <param name="serviceInstance">The service instance.</param>
            <param name="parameterExpression">The parameter expression.</param>
            <param name="selection">The selection.</param>
            <returns></returns>
        </member>
        <member name="P:Rock.Reporting.DataFilter.Person.TagFilter.AppliesToEntityType">
            <summary>
            Gets the entity type that filter applies to.
            </summary>
            <value>
            The entity that filter applies to.
            </value>
        </member>
        <member name="P:Rock.Reporting.DataFilter.Person.TagFilter.Section">
            <summary>
            Gets the section.
            </summary>
            <value>
            The section.
            </value>
        </member>
        <member name="T:Rock.Reporting.DataSelectComponent">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Reporting.DataSelectComponent.GetGridField(System.Type,System.String)">
            <summary>
            Gets the grid field.
            </summary>
            <param name="entityType">Type of the entity.</param>
            <param name="selection">The selection.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Reporting.DataSelectComponent.GetTitle(System.Type)">
            <summary>
            Gets the title.
            </summary>
            <value>
            The title.
            </value>
        </member>
        <member name="M:Rock.Reporting.DataSelectComponent.CreateChildControls(System.Web.UI.Control)">
            <summary>
            Creates the child controls.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rock.Reporting.DataSelectComponent.RenderControls(System.Web.UI.Control,System.Web.UI.HtmlTextWriter,System.Web.UI.Control[])">
            <summary>
            Renders the controls.
            </summary>
            <param name="parentControl">The parent control.</param>
            <param name="writer">The writer.</param>
            <param name="controls">The controls.</param>
        </member>
        <member name="M:Rock.Reporting.DataSelectComponent.GetSelection(System.Web.UI.Control[])">
            <summary>
            Gets the selection.
            This is typically a string that contains the values selected with the Controls
            </summary>
            <param name="controls">The controls.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Reporting.DataSelectComponent.SetSelection(System.Web.UI.Control[],System.String)">
            <summary>
            Sets the selection.
            </summary>
            <param name="controls">The controls.</param>
            <param name="selection">The selection.</param>
        </member>
        <member name="M:Rock.Reporting.DataSelectComponent.GetExpression(Rock.Data.RockContext,System.Linq.Expressions.MemberExpression,System.String)">
            <summary>
            Gets the expression.
            </summary>
            <param name="context">The context.</param>
            <param name="entityIdProperty">The entity identifier property.</param>
            <param name="selection">The selection.</param>
            <returns></returns>
        </member>
        <member name="P:Rock.Reporting.DataSelectComponent.AppliesToEntityType">
            <summary>
            Gets the name of the entity type. Filter should be an empty string
            if it applies to all entities
            </summary>
            <value>
            The name of the entity type.
            </value>
        </member>
        <member name="P:Rock.Reporting.DataSelectComponent.Section">
            <summary>
            Gets the section that this will appear in in the Field Selector
            </summary>
            <value>
            The section.
            </value>
        </member>
        <member name="P:Rock.Reporting.DataSelectComponent.AttributeValueDefaults">
            <summary>
            Gets the attribute value defaults.
            </summary>
            <value>
            The attribute defaults.
            </value>
        </member>
        <member name="P:Rock.Reporting.DataSelectComponent.ColumnPropertyName">
            <summary>
            The PropertyName of the property in the anonymous class returned by the SelectExpression
            </summary>
            <value>
            The name of the column property.
            </value>
        </member>
        <member name="P:Rock.Reporting.DataSelectComponent.ColumnFieldType">
            <summary>
            Gets the type of the column field.
            </summary>
            <value>
            The type of the column field.
            </value>
        </member>
        <member name="P:Rock.Reporting.DataSelectComponent.ColumnHeaderText">
            <summary>
            Gets the default column header text.
            </summary>
            <value>
            The default column header text.
            </value>
        </member>
        <member name="T:Rock.Reporting.DataFilter.Person.GivingAmountFilter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Reporting.DataFilter.Person.GivingAmountFilter.GetTitle(System.Type)">
            <summary>
            Gets the title.
            </summary>
            <param name="entityType"></param>
            <returns></returns>
            <value>
            The title.
            </value>
        </member>
        <member name="M:Rock.Reporting.DataFilter.Person.GivingAmountFilter.GetClientFormatSelection(System.Type)">
            <summary>
            Formats the selection on the client-side.  When the filter is collapsed by the user, the Filterfield control
            will set the description of the filter to whatever is returned by this property.  If including script, the
            controls parent container can be referenced through a '$content' variable that is set by the control before 
            referencing this property.
            </summary>
            <value>
            The client format script.
            </value>
        </member>
        <member name="M:Rock.Reporting.DataFilter.Person.GivingAmountFilter.FormatSelection(System.Type,System.String)">
            <summary>
            Formats the selection.
            </summary>
            <param name="entityType">Type of the entity.</param>
            <param name="selection">The selection.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Reporting.DataFilter.Person.GivingAmountFilter.CreateChildControls(System.Type,Rock.Web.UI.Controls.FilterField)">
            <summary>
            Creates the child controls.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rock.Reporting.DataFilter.Person.GivingAmountFilter.RenderControls(System.Type,Rock.Web.UI.Controls.FilterField,System.Web.UI.HtmlTextWriter,System.Web.UI.Control[])">
            <summary>
            Renders the controls.
            </summary>
            <param name="entityType">Type of the entity.</param>
            <param name="filterControl">The filter control.</param>
            <param name="writer">The writer.</param>
            <param name="controls">The controls.</param>
        </member>
        <member name="M:Rock.Reporting.DataFilter.Person.GivingAmountFilter.GetSelection(System.Type,System.Web.UI.Control[])">
            <summary>
            Gets the selection.
            </summary>
            <param name="entityType">Type of the entity.</param>
            <param name="controls">The controls.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Reporting.DataFilter.Person.GivingAmountFilter.SetSelection(System.Type,System.Web.UI.Control[],System.String)">
            <summary>
            Sets the selection.
            </summary>
            <param name="entityType">Type of the entity.</param>
            <param name="controls">The controls.</param>
            <param name="selection">The selection.</param>
        </member>
        <member name="M:Rock.Reporting.DataFilter.Person.GivingAmountFilter.GetExpression(System.Type,Rock.Data.IService,System.Linq.Expressions.ParameterExpression,System.String)">
            <summary>
            Gets the expression.
            </summary>
            <param name="entityType">Type of the entity.</param>
            <param name="serviceInstance">The service instance.</param>
            <param name="parameterExpression">The parameter expression.</param>
            <param name="selection">The selection.</param>
            <returns></returns>
        </member>
        <member name="P:Rock.Reporting.DataFilter.Person.GivingAmountFilter.AppliesToEntityType">
            <summary>
            Gets the entity type that filter applies to.
            </summary>
            <value>
            The entity that filter applies to.
            </value>
        </member>
        <member name="P:Rock.Reporting.DataFilter.Person.GivingAmountFilter.Section">
            <summary>
            Gets the section.
            </summary>
            <value>
            The section.
            </value>
        </member>
        <member name="T:Rock.Reporting.DataFilter.Person.DistanceFromFilter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Reporting.DataFilter.Person.DistanceFromFilter.GetTitle(System.Type)">
            <summary>
            Gets the title.
            </summary>
            <param name="entityType"></param>
            <returns></returns>
            <value>
            The title.
            </value>
        </member>
        <member name="M:Rock.Reporting.DataFilter.Person.DistanceFromFilter.GetClientFormatSelection(System.Type)">
            <summary>
            Formats the selection on the client-side.  When the filter is collapsed by the user, the Filterfield control
            will set the description of the filter to whatever is returned by this property.  If including script, the
            controls parent container can be referenced through a '$content' variable that is set by the control before 
            referencing this property.
            </summary>
            <value>
            The client format script.
            </value>
        </member>
        <member name="M:Rock.Reporting.DataFilter.Person.DistanceFromFilter.FormatSelection(System.Type,System.String)">
            <summary>
            Formats the selection.
            </summary>
            <param name="entityType">Type of the entity.</param>
            <param name="selection">The selection.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Reporting.DataFilter.Person.DistanceFromFilter.CreateChildControls(System.Type,Rock.Web.UI.Controls.FilterField)">
            <summary>
            Creates the child controls.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rock.Reporting.DataFilter.Person.DistanceFromFilter.RenderControls(System.Type,Rock.Web.UI.Controls.FilterField,System.Web.UI.HtmlTextWriter,System.Web.UI.Control[])">
            <summary>
            Renders the controls.
            </summary>
            <param name="entityType">Type of the entity.</param>
            <param name="filterControl">The filter control.</param>
            <param name="writer">The writer.</param>
            <param name="controls">The controls.</param>
        </member>
        <member name="M:Rock.Reporting.DataFilter.Person.DistanceFromFilter.GetSelection(System.Type,System.Web.UI.Control[])">
            <summary>
            Gets the selection.
            </summary>
            <param name="entityType">Type of the entity.</param>
            <param name="controls">The controls.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Reporting.DataFilter.Person.DistanceFromFilter.SetSelection(System.Type,System.Web.UI.Control[],System.String)">
            <summary>
            Sets the selection.
            </summary>
            <param name="entityType">Type of the entity.</param>
            <param name="controls">The controls.</param>
            <param name="selection">The selection.</param>
        </member>
        <member name="M:Rock.Reporting.DataFilter.Person.DistanceFromFilter.GetExpression(System.Type,Rock.Data.IService,System.Linq.Expressions.ParameterExpression,System.String)">
            <summary>
            Gets the expression.
            </summary>
            <param name="entityType">Type of the entity.</param>
            <param name="serviceInstance">The service instance.</param>
            <param name="parameterExpression">The parameter expression.</param>
            <param name="selection">The selection.</param>
            <returns></returns>
        </member>
        <member name="P:Rock.Reporting.DataFilter.Person.DistanceFromFilter.AppliesToEntityType">
            <summary>
            Gets the entity type that filter applies to.
            </summary>
            <value>
            The entity that filter applies to.
            </value>
        </member>
        <member name="P:Rock.Reporting.DataFilter.Person.DistanceFromFilter.Section">
            <summary>
            Gets the section.
            </summary>
            <value>
            The section.
            </value>
        </member>
        <member name="T:Rock.Reporting.DataFilter.Person.InGroupGroupTypeFilter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Reporting.DataFilter.Person.InGroupGroupTypeFilter.GetTitle(System.Type)">
            <summary>
            Gets the title.
            </summary>
            <param name="entityType"></param>
            <returns></returns>
            <value>
            The title.
            </value>
        </member>
        <member name="M:Rock.Reporting.DataFilter.Person.InGroupGroupTypeFilter.GetClientFormatSelection(System.Type)">
            <summary>
            Formats the selection on the client-side.  When the filter is collapsed by the user, the Filterfield control
            will set the description of the filter to whatever is returned by this property.  If including script, the
            controls parent container can be referenced through a '$content' variable that is set by the control before 
            referencing this property.
            </summary>
            <value>
            The client format script.
            </value>
        </member>
        <member name="M:Rock.Reporting.DataFilter.Person.InGroupGroupTypeFilter.FormatSelection(System.Type,System.String)">
            <summary>
            Formats the selection.
            </summary>
            <param name="entityType">Type of the entity.</param>
            <param name="selection">The selection.</param>
            <returns></returns>
        </member>
        <member name="F:Rock.Reporting.DataFilter.Person.InGroupGroupTypeFilter.groupTypePicker">
            <summary>
            The GroupTypePicker
            </summary>
        </member>
        <member name="F:Rock.Reporting.DataFilter.Person.InGroupGroupTypeFilter.cblRole">
            <summary>
            The GroupTypeRole CheckBoxList
            </summary>
        </member>
        <member name="M:Rock.Reporting.DataFilter.Person.InGroupGroupTypeFilter.CreateChildControls(System.Type,Rock.Web.UI.Controls.FilterField)">
            <summary>
            Creates the child controls.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rock.Reporting.DataFilter.Person.InGroupGroupTypeFilter.groupTypePicker_SelectedIndexChanged(System.Object,System.EventArgs)">
            <summary>
            Handles the SelectedIndexChanged event of the groupTypePicker control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Rock.Reporting.DataFilter.Person.InGroupGroupTypeFilter.PopulateGroupRolesCheckList(System.Int32)">
            <summary>
            Populates the group roles.
            </summary>
            <param name="groupTypeId">The group type identifier.</param>
        </member>
        <member name="M:Rock.Reporting.DataFilter.Person.InGroupGroupTypeFilter.RenderControls(System.Type,Rock.Web.UI.Controls.FilterField,System.Web.UI.HtmlTextWriter,System.Web.UI.Control[])">
            <summary>
            Renders the controls.
            </summary>
            <param name="entityType">Type of the entity.</param>
            <param name="filterControl">The filter control.</param>
            <param name="writer">The writer.</param>
            <param name="controls">The controls.</param>
        </member>
        <member name="M:Rock.Reporting.DataFilter.Person.InGroupGroupTypeFilter.GetSelection(System.Type,System.Web.UI.Control[])">
            <summary>
            Gets the selection.
            </summary>
            <param name="entityType">Type of the entity.</param>
            <param name="controls">The controls.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Reporting.DataFilter.Person.InGroupGroupTypeFilter.SetSelection(System.Type,System.Web.UI.Control[],System.String)">
            <summary>
            Sets the selection.
            </summary>
            <param name="entityType">Type of the entity.</param>
            <param name="controls">The controls.</param>
            <param name="selection">The selection.</param>
        </member>
        <member name="M:Rock.Reporting.DataFilter.Person.InGroupGroupTypeFilter.GetExpression(System.Type,Rock.Data.IService,System.Linq.Expressions.ParameterExpression,System.String)">
            <summary>
            Gets the expression.
            </summary>
            <param name="entityType">Type of the entity.</param>
            <param name="serviceInstance">The service instance.</param>
            <param name="parameterExpression">The parameter expression.</param>
            <param name="selection">The selection.</param>
            <returns></returns>
        </member>
        <member name="P:Rock.Reporting.DataFilter.Person.InGroupGroupTypeFilter.AppliesToEntityType">
            <summary>
            Gets the entity type that filter applies to.
            </summary>
            <value>
            The entity that filter applies to.
            </value>
        </member>
        <member name="P:Rock.Reporting.DataFilter.Person.InGroupGroupTypeFilter.Section">
            <summary>
            Gets the section.
            </summary>
            <value>
            The section.
            </value>
        </member>
        <member name="T:Rock.Reporting.DataFilter.Person.InGroupFilter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Reporting.DataFilter.Person.InGroupFilter.GetTitle(System.Type)">
            <summary>
            Gets the title.
            </summary>
            <param name="entityType"></param>
            <returns></returns>
            <value>
            The title.
            </value>
        </member>
        <member name="M:Rock.Reporting.DataFilter.Person.InGroupFilter.GetClientFormatSelection(System.Type)">
            <summary>
            Formats the selection on the client-side.  When the filter is collapsed by the user, the Filterfield control
            will set the description of the filter to whatever is returned by this property.  If including script, the
            controls parent container can be referenced through a '$content' variable that is set by the control before 
            referencing this property.
            </summary>
            <value>
            The client format script.
            </value>
        </member>
        <member name="M:Rock.Reporting.DataFilter.Person.InGroupFilter.FormatSelection(System.Type,System.String)">
            <summary>
            Formats the selection.
            </summary>
            <param name="entityType">Type of the entity.</param>
            <param name="selection">The selection.</param>
            <returns></returns>
        </member>
        <member name="F:Rock.Reporting.DataFilter.Person.InGroupFilter.gp">
            <summary>
            The GroupPicker
            </summary>
        </member>
        <member name="F:Rock.Reporting.DataFilter.Person.InGroupFilter.cblRole">
            <summary>
            The GroupTypeRole CheckBoxList
            </summary>
        </member>
        <member name="M:Rock.Reporting.DataFilter.Person.InGroupFilter.CreateChildControls(System.Type,Rock.Web.UI.Controls.FilterField)">
            <summary>
            Creates the child controls.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rock.Reporting.DataFilter.Person.InGroupFilter.gp_SelectItem(System.Object,System.EventArgs)">
            <summary>
            Handles the SelectItem event of the gp control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Rock.Reporting.DataFilter.Person.InGroupFilter.RenderControls(System.Type,Rock.Web.UI.Controls.FilterField,System.Web.UI.HtmlTextWriter,System.Web.UI.Control[])">
            <summary>
            Renders the controls.
            </summary>
            <param name="entityType">Type of the entity.</param>
            <param name="filterControl">The filter control.</param>
            <param name="writer">The writer.</param>
            <param name="controls">The controls.</param>
        </member>
        <member name="M:Rock.Reporting.DataFilter.Person.InGroupFilter.GetSelection(System.Type,System.Web.UI.Control[])">
            <summary>
            Gets the selection.
            </summary>
            <param name="entityType">Type of the entity.</param>
            <param name="controls">The controls.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Reporting.DataFilter.Person.InGroupFilter.SetSelection(System.Type,System.Web.UI.Control[],System.String)">
            <summary>
            Sets the selection.
            </summary>
            <param name="entityType">Type of the entity.</param>
            <param name="controls">The controls.</param>
            <param name="selection">The selection.</param>
        </member>
        <member name="M:Rock.Reporting.DataFilter.Person.InGroupFilter.GetExpression(System.Type,Rock.Data.IService,System.Linq.Expressions.ParameterExpression,System.String)">
            <summary>
            Gets the expression.
            </summary>
            <param name="entityType">Type of the entity.</param>
            <param name="serviceInstance">The service instance.</param>
            <param name="parameterExpression">The parameter expression.</param>
            <param name="selection">The selection.</param>
            <returns></returns>
        </member>
        <member name="P:Rock.Reporting.DataFilter.Person.InGroupFilter.AppliesToEntityType">
            <summary>
            Gets the entity type that filter applies to.
            </summary>
            <value>
            The entity that filter applies to.
            </value>
        </member>
        <member name="P:Rock.Reporting.DataFilter.Person.InGroupFilter.Section">
            <summary>
            Gets the section.
            </summary>
            <value>
            The section.
            </value>
        </member>
        <member name="T:Rock.Reporting.DataSelect.Group.DistanceFromSelect">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Reporting.DataSelect.Group.DistanceFromSelect.GetTitle(System.Type)">
            <summary>
            Gets the title.
            </summary>
            <param name="entityType"></param>
            <returns></returns>
            <value>
            The title.
            </value>
        </member>
        <member name="M:Rock.Reporting.DataSelect.Group.DistanceFromSelect.GetExpression(Rock.Data.RockContext,System.Linq.Expressions.MemberExpression,System.String)">
            <summary>
            Gets the expression.
            </summary>
            <param name="context">The context.</param>
            <param name="entityIdProperty">The entity identifier property.</param>
            <param name="selection">The selection.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Reporting.DataSelect.Group.DistanceFromSelect.CreateChildControls(System.Web.UI.Control)">
            <summary>
            Creates the child controls.
            </summary>
            <param name="parentControl"></param>
            <returns></returns>
        </member>
        <member name="M:Rock.Reporting.DataSelect.Group.DistanceFromSelect.RenderControls(System.Web.UI.Control,System.Web.UI.HtmlTextWriter,System.Web.UI.Control[])">
            <summary>
            Renders the controls.
            </summary>
            <param name="parentControl">The parent control.</param>
            <param name="writer">The writer.</param>
            <param name="controls">The controls.</param>
        </member>
        <member name="M:Rock.Reporting.DataSelect.Group.DistanceFromSelect.GetSelection(System.Web.UI.Control[])">
            <summary>
            Gets the selection.
            </summary>
            <param name="controls">The controls.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Reporting.DataSelect.Group.DistanceFromSelect.SetSelection(System.Web.UI.Control[],System.String)">
            <summary>
            Sets the selection.
            </summary>
            <param name="controls">The controls.</param>
            <param name="selection">The selection.</param>
        </member>
        <member name="P:Rock.Reporting.DataSelect.Group.DistanceFromSelect.AppliesToEntityType">
            <summary>
            Gets the name of the entity type. Filter should be an empty string
            if it applies to all entities
            </summary>
            <value>
            The name of the entity type.
            </value>
        </member>
        <member name="P:Rock.Reporting.DataSelect.Group.DistanceFromSelect.Section">
            <summary>
            Gets the section that this will appear in in the Field Selector
            </summary>
            <value>
            The section.
            </value>
        </member>
        <member name="P:Rock.Reporting.DataSelect.Group.DistanceFromSelect.ColumnPropertyName">
            <summary>
            The PropertyName of the property in the anonymous class returned by the SelectExpression
            </summary>
            <value>
            The name of the column property.
            </value>
        </member>
        <member name="P:Rock.Reporting.DataSelect.Group.DistanceFromSelect.ColumnFieldType">
            <summary>
            Gets the type of the column field.
            </summary>
            <value>
            The type of the column field.
            </value>
        </member>
        <member name="P:Rock.Reporting.DataSelect.Group.DistanceFromSelect.ColumnHeaderText">
            <summary>
            Gets the default column header text.
            </summary>
            <value>
            The default column header text.
            </value>
        </member>
        <member name="T:Rock.Reporting.DataSelect.Group.LocationSelect">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Reporting.DataSelect.Group.LocationSelect.GetTitle(System.Type)">
            <summary>
            Gets the title.
            </summary>
            <param name="entityType"></param>
            <returns></returns>
            <value>
            The title.
            </value>
        </member>
        <member name="M:Rock.Reporting.DataSelect.Group.LocationSelect.GetExpression(Rock.Data.RockContext,System.Linq.Expressions.MemberExpression,System.String)">
            <summary>
            Gets the expression.
            </summary>
            <param name="context">The context.</param>
            <param name="entityIdProperty">The entity identifier property.</param>
            <param name="selection">The selection.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Reporting.DataSelect.Group.LocationSelect.CreateChildControls(System.Web.UI.Control)">
            <summary>
            Creates the child controls.
            </summary>
            <param name="parentControl"></param>
            <returns></returns>
        </member>
        <member name="M:Rock.Reporting.DataSelect.Group.LocationSelect.RenderControls(System.Web.UI.Control,System.Web.UI.HtmlTextWriter,System.Web.UI.Control[])">
            <summary>
            Renders the controls.
            </summary>
            <param name="parentControl">The parent control.</param>
            <param name="writer">The writer.</param>
            <param name="controls">The controls.</param>
        </member>
        <member name="M:Rock.Reporting.DataSelect.Group.LocationSelect.GetSelection(System.Web.UI.Control[])">
            <summary>
            Gets the selection.
            </summary>
            <param name="controls">The controls.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Reporting.DataSelect.Group.LocationSelect.SetSelection(System.Web.UI.Control[],System.String)">
            <summary>
            Sets the selection.
            </summary>
            <param name="controls">The controls.</param>
            <param name="selection">The selection.</param>
        </member>
        <member name="P:Rock.Reporting.DataSelect.Group.LocationSelect.AppliesToEntityType">
            <summary>
            Gets the name of the entity type. Filter should be an empty string
            if it applies to all entities
            </summary>
            <value>
            The name of the entity type.
            </value>
        </member>
        <member name="P:Rock.Reporting.DataSelect.Group.LocationSelect.Section">
            <summary>
            Gets the section that this will appear in in the Field Selector
            </summary>
            <value>
            The section.
            </value>
        </member>
        <member name="P:Rock.Reporting.DataSelect.Group.LocationSelect.ColumnPropertyName">
            <summary>
            The PropertyName of the property in the anonymous class returned by the SelectExpression
            </summary>
            <value>
            The name of the column property.
            </value>
        </member>
        <member name="P:Rock.Reporting.DataSelect.Group.LocationSelect.ColumnFieldType">
            <summary>
            Gets the type of the column field.
            </summary>
            <value>
            The type of the column field.
            </value>
        </member>
        <member name="P:Rock.Reporting.DataSelect.Group.LocationSelect.ColumnHeaderText">
            <summary>
            Gets the default column header text.
            </summary>
            <value>
            The default column header text.
            </value>
        </member>
        <member name="T:Rock.Reporting.DataSelect.LiquidSelect">
            <summary>
            A special-case DataSelectComponent that can be used to apply a DotLiquid template against the row returned from a Report query
            </summary>
        </member>
        <member name="M:Rock.Reporting.DataSelect.LiquidSelect.GetGridField(System.Type,System.String)">
            <summary>
            Gets the grid field.
            </summary>
            <param name="entityType">Type of the entity.</param>
            <param name="selection">The selection.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Reporting.DataSelect.LiquidSelect.GetTitle(System.Type)">
            <summary>
            Gets the title.
            </summary>
            <param name="entityType"></param>
            <returns></returns>
            <value>
            The title.
            </value>
        </member>
        <member name="M:Rock.Reporting.DataSelect.LiquidSelect.GetExpression(Rock.Data.RockContext,System.Linq.Expressions.MemberExpression,System.String)">
            <summary>
            Gets the expression.
            </summary>
            <param name="context">The context.</param>
            <param name="entityIdProperty">The entity identifier property.</param>
            <param name="selection">The selection.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Reporting.DataSelect.LiquidSelect.CreateChildControls(System.Web.UI.Control)">
            <summary>
            Creates the child controls.
            </summary>
            <param name="parentControl"></param>
            <returns></returns>
        </member>
        <member name="M:Rock.Reporting.DataSelect.LiquidSelect.RenderControls(System.Web.UI.Control,System.Web.UI.HtmlTextWriter,System.Web.UI.Control[])">
            <summary>
            Renders the controls.
            </summary>
            <param name="parentControl">The parent control.</param>
            <param name="writer">The writer.</param>
            <param name="controls">The controls.</param>
        </member>
        <member name="M:Rock.Reporting.DataSelect.LiquidSelect.GetSelection(System.Web.UI.Control[])">
            <summary>
            Gets the selection.
            </summary>
            <param name="controls">The controls.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Reporting.DataSelect.LiquidSelect.SetSelection(System.Web.UI.Control[],System.String)">
            <summary>
            Sets the selection.
            </summary>
            <param name="controls">The controls.</param>
            <param name="selection">The selection.</param>
        </member>
        <member name="P:Rock.Reporting.DataSelect.LiquidSelect.AppliesToEntityType">
            <summary>
            Gets the name of the entity type. Filter should be an empty string
            if it applies to all entities
            </summary>
            <value>
            The name of the entity type.
            </value>
        </member>
        <member name="P:Rock.Reporting.DataSelect.LiquidSelect.Section">
            <summary>
            Gets the section.
            </summary>
            <value>
            The section.
            </value>
        </member>
        <member name="P:Rock.Reporting.DataSelect.LiquidSelect.ColumnPropertyName">
            <summary>
            The PropertyName of the property in the anonymous class returned by the SelectExpression
            </summary>
            <value>
            The name of the column property.
            </value>
        </member>
        <member name="P:Rock.Reporting.DataSelect.LiquidSelect.ColumnFieldType">
            <summary>
            Gets the type of the column field.
            </summary>
            <value>
            The type of the column field.
            </value>
        </member>
        <member name="P:Rock.Reporting.DataSelect.LiquidSelect.ColumnHeaderText">
            <summary>
            Gets the default column header text.
            </summary>
            <value>
            The default column header text.
            </value>
        </member>
        <member name="T:Rock.Reporting.DataSelect.Person.InGroupGroupTypeSelect">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Reporting.DataSelect.Person.InGroupGroupTypeSelect.GetTitle(System.Type)">
            <summary>
            Gets the title.
            </summary>
            <param name="entityType"></param>
            <returns></returns>
            <value>
            The title.
            </value>
        </member>
        <member name="M:Rock.Reporting.DataSelect.Person.InGroupGroupTypeSelect.GetExpression(Rock.Data.RockContext,System.Linq.Expressions.MemberExpression,System.String)">
            <summary>
            Gets the expression.
            </summary>
            <param name="context">The context.</param>
            <param name="entityIdProperty">The entity identifier property.</param>
            <param name="selection">The selection.</param>
            <returns></returns>
        </member>
        <member name="F:Rock.Reporting.DataSelect.Person.InGroupGroupTypeSelect.groupTypePicker">
            <summary>
            The GroupTypePicker
            </summary>
        </member>
        <member name="F:Rock.Reporting.DataSelect.Person.InGroupGroupTypeSelect.cblRole">
            <summary>
            The GroupTypeRole CheckBoxList
            </summary>
        </member>
        <member name="M:Rock.Reporting.DataSelect.Person.InGroupGroupTypeSelect.CreateChildControls(System.Web.UI.Control)">
            <summary>
            Creates the child controls.
            </summary>
            <param name="parentControl"></param>
            <returns></returns>
        </member>
        <member name="M:Rock.Reporting.DataSelect.Person.InGroupGroupTypeSelect.groupTypePicker_SelectedIndexChanged(System.Object,System.EventArgs)">
            <summary>
            Handles the SelectedIndexChanged event of the groupTypePicker control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Rock.Reporting.DataSelect.Person.InGroupGroupTypeSelect.PopulateGroupRolesCheckList(System.Int32)">
            <summary>
            Populates the group roles.
            </summary>
            <param name="groupTypeId">The group type identifier.</param>
        </member>
        <member name="M:Rock.Reporting.DataSelect.Person.InGroupGroupTypeSelect.RenderControls(System.Web.UI.Control,System.Web.UI.HtmlTextWriter,System.Web.UI.Control[])">
            <summary>
            Renders the controls.
            </summary>
            <param name="parentControl">The parent control.</param>
            <param name="writer">The writer.</param>
            <param name="controls">The controls.</param>
        </member>
        <member name="M:Rock.Reporting.DataSelect.Person.InGroupGroupTypeSelect.GetSelection(System.Web.UI.Control[])">
            <summary>
            Gets the selection.
            </summary>
            <param name="controls">The controls.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Reporting.DataSelect.Person.InGroupGroupTypeSelect.SetSelection(System.Web.UI.Control[],System.String)">
            <summary>
            Sets the selection.
            </summary>
            <param name="controls">The controls.</param>
            <param name="selection">The selection.</param>
        </member>
        <member name="P:Rock.Reporting.DataSelect.Person.InGroupGroupTypeSelect.AppliesToEntityType">
            <summary>
            Gets the name of the entity type. Filter should be an empty string
            if it applies to all entities
            </summary>
            <value>
            The name of the entity type.
            </value>
        </member>
        <member name="P:Rock.Reporting.DataSelect.Person.InGroupGroupTypeSelect.ColumnPropertyName">
            <summary>
            The PropertyName of the property in the anonymous class returned by the SelectExpression
            </summary>
            <value>
            The name of the column property.
            </value>
        </member>
        <member name="P:Rock.Reporting.DataSelect.Person.InGroupGroupTypeSelect.ColumnFieldType">
            <summary>
            Gets the type of the column field.
            </summary>
            <value>
            The type of the column field.
            </value>
        </member>
        <member name="P:Rock.Reporting.DataSelect.Person.InGroupGroupTypeSelect.ColumnHeaderText">
            <summary>
            Gets the default column header text.
            </summary>
            <value>
            The default column header text.
            </value>
        </member>
        <member name="T:Rock.Reporting.DataSelect.Person.PhotoSelect">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Reporting.DataSelect.Person.PhotoSelect.GetGridField(System.Type,System.String)">
            <summary>
            Gets the grid field.
            </summary>
            <param name="entityType">Type of the entity.</param>
            <param name="selection">The selection.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Reporting.DataSelect.Person.PhotoSelect.GetTitle(System.Type)">
            <summary>
            Gets the title.
            </summary>
            <param name="entityType"></param>
            <returns></returns>
            <value>
            The title.
            </value>
        </member>
        <member name="M:Rock.Reporting.DataSelect.Person.PhotoSelect.GetExpression(Rock.Data.RockContext,System.Linq.Expressions.MemberExpression,System.String)">
            <summary>
            Gets the expression.
            </summary>
            <param name="context">The context.</param>
            <param name="entityIdProperty">The entity identifier property.</param>
            <param name="selection">The selection.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Reporting.DataSelect.Person.PhotoSelect.CreateChildControls(System.Web.UI.Control)">
            <summary>
            Creates the child controls.
            </summary>
            <param name="parentControl"></param>
            <returns></returns>
        </member>
        <member name="M:Rock.Reporting.DataSelect.Person.PhotoSelect.RenderControls(System.Web.UI.Control,System.Web.UI.HtmlTextWriter,System.Web.UI.Control[])">
            <summary>
            Renders the controls.
            </summary>
            <param name="parentControl">The parent control.</param>
            <param name="writer">The writer.</param>
            <param name="controls">The controls.</param>
        </member>
        <member name="M:Rock.Reporting.DataSelect.Person.PhotoSelect.GetSelection(System.Web.UI.Control[])">
            <summary>
            Gets the selection.
            </summary>
            <param name="controls">The controls.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Reporting.DataSelect.Person.PhotoSelect.SetSelection(System.Web.UI.Control[],System.String)">
            <summary>
            Sets the selection.
            </summary>
            <param name="controls">The controls.</param>
            <param name="selection">The selection.</param>
        </member>
        <member name="P:Rock.Reporting.DataSelect.Person.PhotoSelect.AppliesToEntityType">
            <summary>
            Gets the name of the entity type. Filter should be an empty string
            if it applies to all entities
            </summary>
            <value>
            The name of the entity type.
            </value>
        </member>
        <member name="P:Rock.Reporting.DataSelect.Person.PhotoSelect.ColumnPropertyName">
            <summary>
            The PropertyName of the property in the anonymous class returned by the SelectExpression
            </summary>
            <value>
            The name of the column property.
            </value>
        </member>
        <member name="P:Rock.Reporting.DataSelect.Person.PhotoSelect.ColumnFieldType">
            <summary>
            Gets the type of the column field.
            </summary>
            <value>
            The type of the column field.
            </value>
        </member>
        <member name="P:Rock.Reporting.DataSelect.Person.PhotoSelect.ColumnHeaderText">
            <summary>
            Gets the default column header text.
            </summary>
            <value>
            The default column header text.
            </value>
        </member>
        <member name="T:Rock.Reporting.DataSelect.Person.GradeSelect">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Reporting.DataSelect.Person.GradeSelect.GetTitle(System.Type)">
            <summary>
            Gets the title.
            </summary>
            <param name="entityType"></param>
            <returns></returns>
            <value>
            The title.
            </value>
        </member>
        <member name="M:Rock.Reporting.DataSelect.Person.GradeSelect.GetExpression(Rock.Data.RockContext,System.Linq.Expressions.MemberExpression,System.String)">
            <summary>
            Gets the expression.
            </summary>
            <param name="context">The context.</param>
            <param name="entityIdProperty">The entity identifier property.</param>
            <param name="selection">The selection.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Reporting.DataSelect.Person.GradeSelect.CreateChildControls(System.Web.UI.Control)">
            <summary>
            Creates the child controls.
            </summary>
            <param name="parentControl"></param>
            <returns></returns>
        </member>
        <member name="M:Rock.Reporting.DataSelect.Person.GradeSelect.RenderControls(System.Web.UI.Control,System.Web.UI.HtmlTextWriter,System.Web.UI.Control[])">
            <summary>
            Renders the controls.
            </summary>
            <param name="parentControl">The parent control.</param>
            <param name="writer">The writer.</param>
            <param name="controls">The controls.</param>
        </member>
        <member name="M:Rock.Reporting.DataSelect.Person.GradeSelect.GetSelection(System.Web.UI.Control[])">
            <summary>
            Gets the selection.
            </summary>
            <param name="controls">The controls.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Reporting.DataSelect.Person.GradeSelect.SetSelection(System.Web.UI.Control[],System.String)">
            <summary>
            Sets the selection.
            </summary>
            <param name="controls">The controls.</param>
            <param name="selection">The selection.</param>
        </member>
        <member name="P:Rock.Reporting.DataSelect.Person.GradeSelect.AppliesToEntityType">
            <summary>
            Gets the name of the entity type. Filter should be an empty string
            if it applies to all entities
            </summary>
            <value>
            The name of the entity type.
            </value>
        </member>
        <member name="P:Rock.Reporting.DataSelect.Person.GradeSelect.ColumnPropertyName">
            <summary>
            The PropertyName of the property in the anonymous class returned by the SelectExpression
            </summary>
            <value>
            The name of the column property.
            </value>
        </member>
        <member name="P:Rock.Reporting.DataSelect.Person.GradeSelect.ColumnFieldType">
            <summary>
            Gets the type of the column field.
            </summary>
            <value>
            The type of the column field.
            </value>
        </member>
        <member name="P:Rock.Reporting.DataSelect.Person.GradeSelect.ColumnHeaderText">
            <summary>
            Gets the default column header text.
            </summary>
            <value>
            The default column header text.
            </value>
        </member>
        <member name="T:Rock.Reporting.DataSelect.Person.DistanceFromSelect">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Reporting.DataSelect.Person.DistanceFromSelect.GetTitle(System.Type)">
            <summary>
            Gets the title.
            </summary>
            <param name="entityType"></param>
            <returns></returns>
            <value>
            The title.
            </value>
        </member>
        <member name="M:Rock.Reporting.DataSelect.Person.DistanceFromSelect.GetExpression(Rock.Data.RockContext,System.Linq.Expressions.MemberExpression,System.String)">
            <summary>
            Gets the expression.
            </summary>
            <param name="context">The context.</param>
            <param name="entityIdProperty">The entity identifier property.</param>
            <param name="selection">The selection.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Reporting.DataSelect.Person.DistanceFromSelect.CreateChildControls(System.Web.UI.Control)">
            <summary>
            Creates the child controls.
            </summary>
            <param name="parentControl"></param>
            <returns></returns>
        </member>
        <member name="M:Rock.Reporting.DataSelect.Person.DistanceFromSelect.RenderControls(System.Web.UI.Control,System.Web.UI.HtmlTextWriter,System.Web.UI.Control[])">
            <summary>
            Renders the controls.
            </summary>
            <param name="parentControl">The parent control.</param>
            <param name="writer">The writer.</param>
            <param name="controls">The controls.</param>
        </member>
        <member name="M:Rock.Reporting.DataSelect.Person.DistanceFromSelect.GetSelection(System.Web.UI.Control[])">
            <summary>
            Gets the selection.
            </summary>
            <param name="controls">The controls.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Reporting.DataSelect.Person.DistanceFromSelect.SetSelection(System.Web.UI.Control[],System.String)">
            <summary>
            Sets the selection.
            </summary>
            <param name="controls">The controls.</param>
            <param name="selection">The selection.</param>
        </member>
        <member name="P:Rock.Reporting.DataSelect.Person.DistanceFromSelect.AppliesToEntityType">
            <summary>
            Gets the name of the entity type. Filter should be an empty string
            if it applies to all entities
            </summary>
            <value>
            The name of the entity type.
            </value>
        </member>
        <member name="P:Rock.Reporting.DataSelect.Person.DistanceFromSelect.Section">
            <summary>
            Gets the section that this will appear in in the Field Selector
            </summary>
            <value>
            The section.
            </value>
        </member>
        <member name="P:Rock.Reporting.DataSelect.Person.DistanceFromSelect.ColumnPropertyName">
            <summary>
            The PropertyName of the property in the anonymous class returned by the SelectExpression
            </summary>
            <value>
            The name of the column property.
            </value>
        </member>
        <member name="P:Rock.Reporting.DataSelect.Person.DistanceFromSelect.ColumnFieldType">
            <summary>
            Gets the type of the column field.
            </summary>
            <value>
            The type of the column field.
            </value>
        </member>
        <member name="P:Rock.Reporting.DataSelect.Person.DistanceFromSelect.ColumnHeaderText">
            <summary>
            Gets the default column header text.
            </summary>
            <value>
            The default column header text.
            </value>
        </member>
        <member name="T:Rock.Reporting.DataSelect.Person.AddressSelect">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Reporting.DataSelect.Person.AddressSelect.GetTitle(System.Type)">
            <summary>
            Gets the title.
            </summary>
            <param name="entityType"></param>
            <returns></returns>
            <value>
            The title.
            </value>
        </member>
        <member name="M:Rock.Reporting.DataSelect.Person.AddressSelect.GetExpression(Rock.Data.RockContext,System.Linq.Expressions.MemberExpression,System.String)">
            <summary>
            Gets the expression.
            </summary>
            <param name="context">The context.</param>
            <param name="entityIdProperty">The entity identifier property.</param>
            <param name="selection">The selection.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Reporting.DataSelect.Person.AddressSelect.CreateChildControls(System.Web.UI.Control)">
            <summary>
            Creates the child controls.
            </summary>
            <param name="parentControl"></param>
            <returns></returns>
        </member>
        <member name="M:Rock.Reporting.DataSelect.Person.AddressSelect.RenderControls(System.Web.UI.Control,System.Web.UI.HtmlTextWriter,System.Web.UI.Control[])">
            <summary>
            Renders the controls.
            </summary>
            <param name="parentControl">The parent control.</param>
            <param name="writer">The writer.</param>
            <param name="controls">The controls.</param>
        </member>
        <member name="M:Rock.Reporting.DataSelect.Person.AddressSelect.GetSelection(System.Web.UI.Control[])">
            <summary>
            Gets the selection.
            </summary>
            <param name="controls">The controls.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Reporting.DataSelect.Person.AddressSelect.SetSelection(System.Web.UI.Control[],System.String)">
            <summary>
            Sets the selection.
            </summary>
            <param name="controls">The controls.</param>
            <param name="selection">The selection.</param>
        </member>
        <member name="P:Rock.Reporting.DataSelect.Person.AddressSelect.AppliesToEntityType">
            <summary>
            Gets the name of the entity type. Filter should be an empty string
            if it applies to all entities
            </summary>
            <value>
            The name of the entity type.
            </value>
        </member>
        <member name="P:Rock.Reporting.DataSelect.Person.AddressSelect.Section">
            <summary>
            Gets the section that this will appear in in the Field Selector
            </summary>
            <value>
            The section.
            </value>
        </member>
        <member name="P:Rock.Reporting.DataSelect.Person.AddressSelect.ColumnPropertyName">
            <summary>
            The PropertyName of the property in the anonymous class returned by the SelectExpression
            </summary>
            <value>
            The name of the column property.
            </value>
        </member>
        <member name="P:Rock.Reporting.DataSelect.Person.AddressSelect.ColumnFieldType">
            <summary>
            Gets the type of the column field.
            </summary>
            <value>
            The type of the column field.
            </value>
        </member>
        <member name="P:Rock.Reporting.DataSelect.Person.AddressSelect.ColumnHeaderText">
            <summary>
            Gets the default column header text.
            </summary>
            <value>
            The default column header text.
            </value>
        </member>
        <member name="T:Rock.Reporting.DataSelect.Person.CampusSelect">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Reporting.DataSelect.Person.CampusSelect.GetTitle(System.Type)">
            <summary>
            Gets the title.
            </summary>
            <param name="entityType"></param>
            <returns></returns>
            <value>
            The title.
            </value>
        </member>
        <member name="M:Rock.Reporting.DataSelect.Person.CampusSelect.GetExpression(Rock.Data.RockContext,System.Linq.Expressions.MemberExpression,System.String)">
            <summary>
            Gets the expression.
            </summary>
            <param name="context">The context.</param>
            <param name="entityIdProperty">The entity identifier property.</param>
            <param name="selection">The selection.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Reporting.DataSelect.Person.CampusSelect.CreateChildControls(System.Web.UI.Control)">
            <summary>
            Creates the child controls.
            </summary>
            <param name="parentControl"></param>
            <returns></returns>
        </member>
        <member name="M:Rock.Reporting.DataSelect.Person.CampusSelect.RenderControls(System.Web.UI.Control,System.Web.UI.HtmlTextWriter,System.Web.UI.Control[])">
            <summary>
            Renders the controls.
            </summary>
            <param name="parentControl">The parent control.</param>
            <param name="writer">The writer.</param>
            <param name="controls">The controls.</param>
        </member>
        <member name="M:Rock.Reporting.DataSelect.Person.CampusSelect.GetSelection(System.Web.UI.Control[])">
            <summary>
            Gets the selection.
            </summary>
            <param name="controls">The controls.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Reporting.DataSelect.Person.CampusSelect.SetSelection(System.Web.UI.Control[],System.String)">
            <summary>
            Sets the selection.
            </summary>
            <param name="controls">The controls.</param>
            <param name="selection">The selection.</param>
        </member>
        <member name="P:Rock.Reporting.DataSelect.Person.CampusSelect.AppliesToEntityType">
            <summary>
            Gets the name of the entity type. Filter should be an empty string
            if it applies to all entities
            </summary>
            <value>
            The name of the entity type.
            </value>
        </member>
        <member name="P:Rock.Reporting.DataSelect.Person.CampusSelect.Section">
            <summary>
            Gets the section that this will appear in in the Field Selector
            </summary>
            <value>
            The section.
            </value>
        </member>
        <member name="P:Rock.Reporting.DataSelect.Person.CampusSelect.ColumnPropertyName">
            <summary>
            The PropertyName of the property in the anonymous class returned by the SelectExpression
            </summary>
            <value>
            The name of the column property.
            </value>
        </member>
        <member name="P:Rock.Reporting.DataSelect.Person.CampusSelect.ColumnFieldType">
            <summary>
            Gets the type of the column field.
            </summary>
            <value>
            The type of the column field.
            </value>
        </member>
        <member name="P:Rock.Reporting.DataSelect.Person.CampusSelect.ColumnHeaderText">
            <summary>
            Gets the default column header text.
            </summary>
            <value>
            The default column header text.
            </value>
        </member>
        <member name="T:Rock.Reporting.DataSelect.Person.PhoneNumberSelect">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Reporting.DataSelect.Person.PhoneNumberSelect.GetTitle(System.Type)">
            <summary>
            Gets the title.
            </summary>
            <param name="entityType"></param>
            <returns></returns>
            <value>
            The title.
            </value>
        </member>
        <member name="M:Rock.Reporting.DataSelect.Person.PhoneNumberSelect.GetExpression(Rock.Data.RockContext,System.Linq.Expressions.MemberExpression,System.String)">
            <summary>
            Gets the expression.
            </summary>
            <param name="context">The context.</param>
            <param name="entityIdProperty">The entity identifier property.</param>
            <param name="selection">The selection.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Reporting.DataSelect.Person.PhoneNumberSelect.CreateChildControls(System.Web.UI.Control)">
            <summary>
            Creates the child controls.
            </summary>
            <param name="parentControl"></param>
            <returns></returns>
        </member>
        <member name="M:Rock.Reporting.DataSelect.Person.PhoneNumberSelect.RenderControls(System.Web.UI.Control,System.Web.UI.HtmlTextWriter,System.Web.UI.Control[])">
            <summary>
            Renders the controls.
            </summary>
            <param name="parentControl">The parent control.</param>
            <param name="writer">The writer.</param>
            <param name="controls">The controls.</param>
        </member>
        <member name="M:Rock.Reporting.DataSelect.Person.PhoneNumberSelect.GetSelection(System.Web.UI.Control[])">
            <summary>
            Gets the selection.
            </summary>
            <param name="controls">The controls.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Reporting.DataSelect.Person.PhoneNumberSelect.SetSelection(System.Web.UI.Control[],System.String)">
            <summary>
            Sets the selection.
            </summary>
            <param name="controls">The controls.</param>
            <param name="selection">The selection.</param>
        </member>
        <member name="P:Rock.Reporting.DataSelect.Person.PhoneNumberSelect.AppliesToEntityType">
            <summary>
            Gets the name of the entity type. Filter should be an empty string
            if it applies to all entities
            </summary>
            <value>
            The name of the entity type.
            </value>
        </member>
        <member name="P:Rock.Reporting.DataSelect.Person.PhoneNumberSelect.Section">
            <summary>
            Gets the section that this will appear in in the Field Selector
            </summary>
            <value>
            The section.
            </value>
        </member>
        <member name="P:Rock.Reporting.DataSelect.Person.PhoneNumberSelect.ColumnPropertyName">
            <summary>
            The PropertyName of the property in the anonymous class returned by the SelectExpression
            </summary>
            <value>
            The name of the column property.
            </value>
        </member>
        <member name="P:Rock.Reporting.DataSelect.Person.PhoneNumberSelect.ColumnFieldType">
            <summary>
            Gets the type of the column field.
            </summary>
            <value>
            The type of the column field.
            </value>
        </member>
        <member name="P:Rock.Reporting.DataSelect.Person.PhoneNumberSelect.ColumnHeaderText">
            <summary>
            Gets the default column header text.
            </summary>
            <value>
            The default column header text.
            </value>
        </member>
        <member name="T:Rock.Reporting.DataSelect.Person.AgeSelect">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Reporting.DataSelect.Person.AgeSelect.GetTitle(System.Type)">
            <summary>
            Gets the title.
            </summary>
            <param name="entityType"></param>
            <returns></returns>
            <value>
            The title.
            </value>
        </member>
        <member name="M:Rock.Reporting.DataSelect.Person.AgeSelect.GetExpression(Rock.Data.RockContext,System.Linq.Expressions.MemberExpression,System.String)">
            <summary>
            Gets the expression.
            </summary>
            <param name="context">The context.</param>
            <param name="entityIdProperty">The entity identifier property.</param>
            <param name="selection">The selection.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Reporting.DataSelect.Person.AgeSelect.CreateChildControls(System.Web.UI.Control)">
            <summary>
            Creates the child controls.
            </summary>
            <param name="parentControl"></param>
            <returns></returns>
        </member>
        <member name="M:Rock.Reporting.DataSelect.Person.AgeSelect.RenderControls(System.Web.UI.Control,System.Web.UI.HtmlTextWriter,System.Web.UI.Control[])">
            <summary>
            Renders the controls.
            </summary>
            <param name="parentControl">The parent control.</param>
            <param name="writer">The writer.</param>
            <param name="controls">The controls.</param>
        </member>
        <member name="M:Rock.Reporting.DataSelect.Person.AgeSelect.GetSelection(System.Web.UI.Control[])">
            <summary>
            Gets the selection.
            </summary>
            <param name="controls">The controls.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Reporting.DataSelect.Person.AgeSelect.SetSelection(System.Web.UI.Control[],System.String)">
            <summary>
            Sets the selection.
            </summary>
            <param name="controls">The controls.</param>
            <param name="selection">The selection.</param>
        </member>
        <member name="P:Rock.Reporting.DataSelect.Person.AgeSelect.AppliesToEntityType">
            <summary>
            Gets the name of the entity type. Filter should be an empty string
            if it applies to all entities
            </summary>
            <value>
            The name of the entity type.
            </value>
        </member>
        <member name="P:Rock.Reporting.DataSelect.Person.AgeSelect.ColumnPropertyName">
            <summary>
            The PropertyName of the property in the anonymous class returned by the SelectExpression
            </summary>
            <value>
            The name of the column property.
            </value>
        </member>
        <member name="P:Rock.Reporting.DataSelect.Person.AgeSelect.ColumnFieldType">
            <summary>
            Gets the type of the column field.
            </summary>
            <value>
            The type of the column field.
            </value>
        </member>
        <member name="P:Rock.Reporting.DataSelect.Person.AgeSelect.ColumnHeaderText">
            <summary>
            Gets the default column header text.
            </summary>
            <value>
            The default column header text.
            </value>
        </member>
        <member name="T:Rock.Reporting.DataSelect.Person.FamilyNameSelect">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Reporting.DataSelect.Person.FamilyNameSelect.GetTitle(System.Type)">
            <summary>
            Gets the title.
            </summary>
            <param name="entityType"></param>
            <returns></returns>
            <value>
            The title.
            </value>
        </member>
        <member name="M:Rock.Reporting.DataSelect.Person.FamilyNameSelect.GetExpression(Rock.Data.RockContext,System.Linq.Expressions.MemberExpression,System.String)">
            <summary>
            Gets the expression.
            </summary>
            <param name="context">The context.</param>
            <param name="entityIdProperty">The entity identifier property.</param>
            <param name="selection">The selection.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Reporting.DataSelect.Person.FamilyNameSelect.CreateChildControls(System.Web.UI.Control)">
            <summary>
            Creates the child controls.
            </summary>
            <param name="parentControl"></param>
            <returns></returns>
        </member>
        <member name="M:Rock.Reporting.DataSelect.Person.FamilyNameSelect.RenderControls(System.Web.UI.Control,System.Web.UI.HtmlTextWriter,System.Web.UI.Control[])">
            <summary>
            Renders the controls.
            </summary>
            <param name="parentControl">The parent control.</param>
            <param name="writer">The writer.</param>
            <param name="controls">The controls.</param>
        </member>
        <member name="M:Rock.Reporting.DataSelect.Person.FamilyNameSelect.GetSelection(System.Web.UI.Control[])">
            <summary>
            Gets the selection.
            </summary>
            <param name="controls">The controls.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Reporting.DataSelect.Person.FamilyNameSelect.SetSelection(System.Web.UI.Control[],System.String)">
            <summary>
            Sets the selection.
            </summary>
            <param name="controls">The controls.</param>
            <param name="selection">The selection.</param>
        </member>
        <member name="P:Rock.Reporting.DataSelect.Person.FamilyNameSelect.AppliesToEntityType">
            <summary>
            Gets the name of the entity type. Filter should be an empty string
            if it applies to all entities
            </summary>
            <value>
            The name of the entity type.
            </value>
        </member>
        <member name="P:Rock.Reporting.DataSelect.Person.FamilyNameSelect.Section">
            <summary>
            Gets the section that this will appear in in the Field Selector
            </summary>
            <value>
            The section.
            </value>
        </member>
        <member name="P:Rock.Reporting.DataSelect.Person.FamilyNameSelect.ColumnPropertyName">
            <summary>
            The PropertyName of the property in the anonymous class returned by the SelectExpression
            </summary>
            <value>
            The name of the column property.
            </value>
        </member>
        <member name="P:Rock.Reporting.DataSelect.Person.FamilyNameSelect.ColumnFieldType">
            <summary>
            Gets the type of the column field.
            </summary>
            <value>
            The type of the column field.
            </value>
        </member>
        <member name="P:Rock.Reporting.DataSelect.Person.FamilyNameSelect.ColumnHeaderText">
            <summary>
            Gets the default column header text.
            </summary>
            <value>
            The default column header text.
            </value>
        </member>
        <member name="T:Rock.Reporting.DataSelect.Person.ChildNamesSelect">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Reporting.DataSelect.Person.ChildNamesSelect.GetGridField(System.Type,System.String)">
            <summary>
            Gets the grid field.
            </summary>
            <param name="entityType">Type of the entity.</param>
            <param name="selection">The selection.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Reporting.DataSelect.Person.ChildNamesSelect.GetTitle(System.Type)">
            <summary>
            Gets the title.
            </summary>
            <param name="entityType"></param>
            <returns></returns>
            <value>
            The title.
            </value>
        </member>
        <member name="M:Rock.Reporting.DataSelect.Person.ChildNamesSelect.GetExpression(Rock.Data.RockContext,System.Linq.Expressions.MemberExpression,System.String)">
            <summary>
            Gets the expression.
            </summary>
            <param name="context">The context.</param>
            <param name="entityIdProperty">The entity identifier property.</param>
            <param name="selection">The selection.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Reporting.DataSelect.Person.ChildNamesSelect.CreateChildControls(System.Web.UI.Control)">
            <summary>
            Creates the child controls.
            </summary>
            <param name="parentControl"></param>
            <returns></returns>
        </member>
        <member name="M:Rock.Reporting.DataSelect.Person.ChildNamesSelect.RenderControls(System.Web.UI.Control,System.Web.UI.HtmlTextWriter,System.Web.UI.Control[])">
            <summary>
            Renders the controls.
            </summary>
            <param name="parentControl">The parent control.</param>
            <param name="writer">The writer.</param>
            <param name="controls">The controls.</param>
        </member>
        <member name="M:Rock.Reporting.DataSelect.Person.ChildNamesSelect.GetSelection(System.Web.UI.Control[])">
            <summary>
            Gets the selection.
            </summary>
            <param name="controls">The controls.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Reporting.DataSelect.Person.ChildNamesSelect.SetSelection(System.Web.UI.Control[],System.String)">
            <summary>
            Sets the selection.
            </summary>
            <param name="controls">The controls.</param>
            <param name="selection">The selection.</param>
        </member>
        <member name="P:Rock.Reporting.DataSelect.Person.ChildNamesSelect.AppliesToEntityType">
            <summary>
            Gets the name of the entity type. Filter should be an empty string
            if it applies to all entities
            </summary>
            <value>
            The name of the entity type.
            </value>
        </member>
        <member name="P:Rock.Reporting.DataSelect.Person.ChildNamesSelect.Section">
            <summary>
            Gets the section that this will appear in in the Field Selector
            </summary>
            <value>
            The section.
            </value>
        </member>
        <member name="P:Rock.Reporting.DataSelect.Person.ChildNamesSelect.ColumnPropertyName">
            <summary>
            The PropertyName of the property in the anonymous class returned by the SelectExpression
            </summary>
            <value>
            The name of the column property.
            </value>
        </member>
        <member name="P:Rock.Reporting.DataSelect.Person.ChildNamesSelect.ColumnFieldType">
            <summary>
            Gets the type of the column field.
            </summary>
            <value>
            The type of the column field.
            </value>
        </member>
        <member name="P:Rock.Reporting.DataSelect.Person.ChildNamesSelect.ColumnHeaderText">
            <summary>
            Gets the default column header text.
            </summary>
            <value>
            The default column header text.
            </value>
        </member>
        <member name="T:Rock.Reporting.DataSelect.Person.ParentsNamesSelect">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Reporting.DataSelect.Person.ParentsNamesSelect.GetGridField(System.Type,System.String)">
            <summary>
            Gets the grid field.
            </summary>
            <param name="entityType">Type of the entity.</param>
            <param name="selection">The selection.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Reporting.DataSelect.Person.ParentsNamesSelect.GetTitle(System.Type)">
            <summary>
            Gets the title.
            </summary>
            <param name="entityType"></param>
            <returns></returns>
            <value>
            The title.
            </value>
        </member>
        <member name="M:Rock.Reporting.DataSelect.Person.ParentsNamesSelect.GetExpression(Rock.Data.RockContext,System.Linq.Expressions.MemberExpression,System.String)">
            <summary>
            Gets the expression.
            </summary>
            <param name="context">The context.</param>
            <param name="entityIdProperty">The entity identifier property.</param>
            <param name="selection">The selection.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Reporting.DataSelect.Person.ParentsNamesSelect.CreateChildControls(System.Web.UI.Control)">
            <summary>
            Creates the child controls.
            </summary>
            <param name="parentControl"></param>
            <returns></returns>
        </member>
        <member name="M:Rock.Reporting.DataSelect.Person.ParentsNamesSelect.RenderControls(System.Web.UI.Control,System.Web.UI.HtmlTextWriter,System.Web.UI.Control[])">
            <summary>
            Renders the controls.
            </summary>
            <param name="parentControl">The parent control.</param>
            <param name="writer">The writer.</param>
            <param name="controls">The controls.</param>
        </member>
        <member name="M:Rock.Reporting.DataSelect.Person.ParentsNamesSelect.GetSelection(System.Web.UI.Control[])">
            <summary>
            Gets the selection.
            </summary>
            <param name="controls">The controls.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Reporting.DataSelect.Person.ParentsNamesSelect.SetSelection(System.Web.UI.Control[],System.String)">
            <summary>
            Sets the selection.
            </summary>
            <param name="controls">The controls.</param>
            <param name="selection">The selection.</param>
        </member>
        <member name="P:Rock.Reporting.DataSelect.Person.ParentsNamesSelect.AppliesToEntityType">
            <summary>
            Gets the name of the entity type. Filter should be an empty string
            if it applies to all entities
            </summary>
            <value>
            The name of the entity type.
            </value>
        </member>
        <member name="P:Rock.Reporting.DataSelect.Person.ParentsNamesSelect.Section">
            <summary>
            Gets the section that this will appear in in the Field Selector
            </summary>
            <value>
            The section.
            </value>
        </member>
        <member name="P:Rock.Reporting.DataSelect.Person.ParentsNamesSelect.ColumnPropertyName">
            <summary>
            The PropertyName of the property in the anonymous class returned by the SelectExpression
            </summary>
            <value>
            The name of the column property.
            </value>
        </member>
        <member name="P:Rock.Reporting.DataSelect.Person.ParentsNamesSelect.ColumnFieldType">
            <summary>
            Gets the type of the column field.
            </summary>
            <value>
            The type of the column field.
            </value>
        </member>
        <member name="P:Rock.Reporting.DataSelect.Person.ParentsNamesSelect.ColumnHeaderText">
            <summary>
            Gets the default column header text.
            </summary>
            <value>
            The default column header text.
            </value>
        </member>
        <member name="T:Rock.Reporting.DataSelect.Person.SpouseNameSelect">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Reporting.DataSelect.Person.SpouseNameSelect.GetTitle(System.Type)">
            <summary>
            Gets the title.
            </summary>
            <param name="entityType"></param>
            <returns></returns>
            <value>
            The title.
            </value>
        </member>
        <member name="M:Rock.Reporting.DataSelect.Person.SpouseNameSelect.GetExpression(Rock.Data.RockContext,System.Linq.Expressions.MemberExpression,System.String)">
            <summary>
            Gets the expression.
            </summary>
            <param name="context">The context.</param>
            <param name="entityIdProperty">The entity identifier property.</param>
            <param name="selection">The selection.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Reporting.DataSelect.Person.SpouseNameSelect.CreateChildControls(System.Web.UI.Control)">
            <summary>
            Creates the child controls.
            </summary>
            <param name="parentControl"></param>
            <returns></returns>
        </member>
        <member name="M:Rock.Reporting.DataSelect.Person.SpouseNameSelect.RenderControls(System.Web.UI.Control,System.Web.UI.HtmlTextWriter,System.Web.UI.Control[])">
            <summary>
            Renders the controls.
            </summary>
            <param name="parentControl">The parent control.</param>
            <param name="writer">The writer.</param>
            <param name="controls">The controls.</param>
        </member>
        <member name="M:Rock.Reporting.DataSelect.Person.SpouseNameSelect.GetSelection(System.Web.UI.Control[])">
            <summary>
            Gets the selection.
            </summary>
            <param name="controls">The controls.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Reporting.DataSelect.Person.SpouseNameSelect.SetSelection(System.Web.UI.Control[],System.String)">
            <summary>
            Sets the selection.
            </summary>
            <param name="controls">The controls.</param>
            <param name="selection">The selection.</param>
        </member>
        <member name="P:Rock.Reporting.DataSelect.Person.SpouseNameSelect.AppliesToEntityType">
            <summary>
            Gets the name of the entity type. Filter should be an empty string
            if it applies to all entities
            </summary>
            <value>
            The name of the entity type.
            </value>
        </member>
        <member name="P:Rock.Reporting.DataSelect.Person.SpouseNameSelect.Section">
            <summary>
            Gets the section that this will appear in in the Field Selector
            </summary>
            <value>
            The section.
            </value>
        </member>
        <member name="P:Rock.Reporting.DataSelect.Person.SpouseNameSelect.ColumnPropertyName">
            <summary>
            The PropertyName of the property in the anonymous class returned by the SelectExpression
            </summary>
            <value>
            The name of the column property.
            </value>
        </member>
        <member name="P:Rock.Reporting.DataSelect.Person.SpouseNameSelect.ColumnFieldType">
            <summary>
            Gets the type of the column field.
            </summary>
            <value>
            The type of the column field.
            </value>
        </member>
        <member name="P:Rock.Reporting.DataSelect.Person.SpouseNameSelect.ColumnHeaderText">
            <summary>
            Gets the default column header text.
            </summary>
            <value>
            The default column header text.
            </value>
        </member>
        <member name="T:Rock.Reporting.DataSelect.Person.LastContributionSelect">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Reporting.DataSelect.Person.LastContributionSelect.GetTitle(System.Type)">
            <summary>
            Gets the title.
            </summary>
            <param name="entityType"></param>
            <returns></returns>
            <value>
            The title.
              </value>
        </member>
        <member name="M:Rock.Reporting.DataSelect.Person.LastContributionSelect.GetExpression(Rock.Data.RockContext,System.Linq.Expressions.MemberExpression,System.String)">
            <summary>
            Gets the expression.
            </summary>
            <param name="context">The context.</param>
            <param name="entityIdProperty">The entity identifier property.</param>
            <param name="selection"></param>
            <returns></returns>
        </member>
        <member name="M:Rock.Reporting.DataSelect.Person.LastContributionSelect.CreateChildControls(System.Web.UI.Control)">
            <summary>
            Creates the child controls.
            </summary>
            <param name="parentControl"></param>
            <returns></returns>
        </member>
        <member name="M:Rock.Reporting.DataSelect.Person.LastContributionSelect.RenderControls(System.Web.UI.Control,System.Web.UI.HtmlTextWriter,System.Web.UI.Control[])">
            <summary>
            Renders the controls.
            </summary>
            <param name="parentControl">The parent control.</param>
            <param name="writer">The writer.</param>
            <param name="controls">The controls.</param>
        </member>
        <member name="M:Rock.Reporting.DataSelect.Person.LastContributionSelect.GetSelection(System.Web.UI.Control[])">
            <summary>
            Gets the selection.
            </summary>
            <param name="controls">The controls.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Reporting.DataSelect.Person.LastContributionSelect.SetSelection(System.Web.UI.Control[],System.String)">
            <summary>
            Sets the selection.
            </summary>
            <param name="controls">The controls.</param>
            <param name="selection">The selection.</param>
        </member>
        <member name="P:Rock.Reporting.DataSelect.Person.LastContributionSelect.AppliesToEntityType">
            <summary>
            Gets the name of the entity type.
            </summary>
            <value>
            The name of the entity type.
            </value>
        </member>
        <member name="P:Rock.Reporting.DataSelect.Person.LastContributionSelect.Section">
            <summary>
            Gets the section that this will appear in in the Field Selector
            </summary>
            <value>
            The section.
            </value>
        </member>
        <member name="P:Rock.Reporting.DataSelect.Person.LastContributionSelect.ColumnPropertyName">
            <summary>
            The PropertyName of the property in the anonymous class returned by the SelectExpression
            </summary>
            <value>
            The name of the column property.
            </value>
        </member>
        <member name="P:Rock.Reporting.DataSelect.Person.LastContributionSelect.ColumnFieldType">
            <summary>
            Gets the type of the column field.
            </summary>
            <value>
            The type of the column field.
            </value>
        </member>
        <member name="P:Rock.Reporting.DataSelect.Person.LastContributionSelect.ColumnHeaderText">
            <summary>
            Gets the default column header text.
            </summary>
            <value>
            The default column header text.
            </value>
        </member>
        <member name="T:Rock.Reporting.DataSelectContainer">
            <summary>
            MEF Container class for data selects
            </summary>
        </member>
        <member name="F:Rock.Reporting.DataSelectContainer.instance">
            <summary>
            The instance
            </summary>
        </member>
        <member name="M:Rock.Reporting.DataSelectContainer.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:Rock.Reporting.DataSelectContainer"/> class from being created.
            </summary>
        </member>
        <member name="M:Rock.Reporting.DataSelectContainer.GetAvailableSelectEntityTypeNames">
            <summary>
            Gets the available select entity type names.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rock.Reporting.DataSelectContainer.GetComponent(System.String)">
            <summary>
            Gets the component with the matching Entity Type Name
            </summary>
            <param name="entityTypeName">Name of the entity type.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Reporting.DataSelectContainer.GetComponentsBySelectedEntityTypeName(System.String)">
            <summary>
            Gets the components that are for transformed a given entity type name
            </summary>
            <param name="entityTypeName">Name of the entity type.</param>
            <returns></returns>
        </member>
        <member name="P:Rock.Reporting.DataSelectContainer.Instance">
            <summary>
            Gets the instance.
            </summary>
        </member>
        <member name="T:Rock.Reporting.EntityHelper">
            <summary>
            
            </summary>
        </member>
        <member name="F:Rock.Reporting.EntityHelper._entityFields">
            <summary>
            the list of fields and attributes for the EntityType. 
            ThreadStatic so that the fields don't get refetched more than once per page load, but also don't become stale
            </summary>
        </member>
        <member name="M:Rock.Reporting.EntityHelper.GetEntityFields(System.Type,System.Boolean)">
            <summary>
            Gets the entity fields.
            </summary>
            <param name="entityType">Type of the entity.</param>
            <param name="includeOnlyReportingFields">if set to <c>true</c> [include only reporting fields].</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Reporting.EntityHelper.AddEntityFieldForAttribute(System.Collections.Generic.List{Rock.Reporting.EntityField},Rock.Web.Cache.AttributeCache)">
            <summary>
            Adds the entity field for attribute.
            </summary>
            <param name="entityFields">The entity fields.</param>
            <param name="attribute">The attribute.</param>
        </member>
        <member name="T:Rock.Reporting.EntityField">
            <summary>
            Helper class for saving information about each property and attribute of an entity
            Note: the type of a field or attribute does not neccesarily determine the ui rendered for filtering.   For example, a Single-Select attribute
            will use a multi-select ui so that user can filter on one or more values.  The FilterFieldType property determines the UI rendered for filtering
            and not the type of field.
            
            Entity Property Types and their renderd filter field type
                string              ->  TEXT
                bool or bool?       ->  SINGLE_SELECT
                date or date?       ->  DATE
                int or int?
                    Defined Values  ->  MULTI_SELECT
                    otherwise       ->  INTEGER
                enumeration         ->  MULTI_SELECT
            
            Attribute types and their rendered filter field type
                MULTI_SELECT        ->  MULTI_SELECT
                SINGLE_SELECT       ->  MULTI_SELECT
                BOOLEAN             ->  SINGLE_SELECT (True or False)
                DATE                ->  DATE
                INTEGER             ->  INTEGER
                TEXT                ->  TEXT
                
            </summary>
        </member>
        <member name="M:Rock.Reporting.EntityField.#ctor(System.String,Rock.Reporting.FieldKind,System.Type,System.Int32,System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Reporting.EntityField"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="fieldKind">Kind of the field.</param>
            <param name="propertyType">Type of the property.</param>
            <param name="controlCount">The control count.</param>
            <param name="attributeId">The attribute identifier.</param>
        </member>
        <member name="M:Rock.Reporting.EntityField.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Rock.Reporting.EntityField.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:Rock.Reporting.EntityField.Title">
            <summary>
            Gets or sets the title.
            </summary>
            <value>
            The title.
            </value>
        </member>
        <member name="P:Rock.Reporting.EntityField.FieldKind">
            <summary>
            Gets or sets the kind of the field.
            </summary>
            <value>
            The kind of the field.
            </value>
        </member>
        <member name="P:Rock.Reporting.EntityField.PropertyType">
            <summary>
            Gets or sets the type of the property.
            </summary>
            <value>
            The type of the property.
            </value>
        </member>
        <member name="P:Rock.Reporting.EntityField.Index">
            <summary>
            Gets or sets the index.
            </summary>
            <value>
            The index.
            </value>
        </member>
        <member name="P:Rock.Reporting.EntityField.ControlCount">
            <summary>
            Gets or sets the control count.
            </summary>
            <value>
            The control count.
            </value>
        </member>
        <member name="P:Rock.Reporting.EntityField.AttributeId">
            <summary>
            Gets or sets the attribute identifier.
            </summary>
            <value>
            The attribute identifier.
            </value>
        </member>
        <member name="P:Rock.Reporting.EntityField.FilterFieldType">
            <summary>
            Gets or sets the type of the filter field.
            </summary>
            <value>
            The type of the filter field.
            </value>
        </member>
        <member name="P:Rock.Reporting.EntityField.DefinedTypeId">
            <summary>
            Gets or sets the defined type identifier.
            </summary>
            <value>
            The defined type identifier.
            </value>
        </member>
        <member name="P:Rock.Reporting.EntityField.IsPreviewable">
            <summary>
            Gets or sets a value indicating whether [is previewable].
            </summary>
            <value>
              <c>true</c> if [is previewable]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Rock.Reporting.FieldKind">
            <summary>
            
            </summary>
        </member>
        <member name="F:Rock.Reporting.FieldKind.Property">
            <summary>
            Property Field
            </summary>
        </member>
        <member name="F:Rock.Reporting.FieldKind.Attribute">
            <summary>
            Attribute Field
            </summary>
        </member>
        <member name="T:Rock.Reporting.SelectExpressionExtractor">
            <summary>
            Helper class than can extract the first inner SELECT from an IQueryable. Useful for building DataSelect expressions for Reporting
            </summary>
        </member>
        <member name="M:Rock.Reporting.SelectExpressionExtractor.Extract``1(System.Linq.IQueryable,System.Linq.Expressions.MemberExpression,System.String)">
            <summary>
            Extracts the first inner SELECT from an IQueryable. Useful for building DataSelect expressions for Reporting
            </summary>
            <typeparam name="T"></typeparam>
            <param name="qry">The qry.</param>
            <param name="propertyExpression">The property expression.</param>
            <param name="parameterName">Name of the parameter (forexample: 'p') from the qry to replace with the parameterExpression.</param>
            <returns></returns>
        </member>
        <member name="T:Rock.Reporting.SelectExpressionExtractor.PropertyParameterExpressionVisitor">
            <summary>
            Helps rewrite the expression by replacing the parameter expression in the qry with another parameterExpression
            </summary>
        </member>
        <member name="M:Rock.Reporting.SelectExpressionExtractor.PropertyParameterExpressionVisitor.#ctor(System.Linq.Expressions.MemberExpression,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Reporting.SelectExpressionExtractor.PropertyParameterExpressionVisitor"/> class.
            </summary>
            <param name="propertyExpression">The property expression.</param>
            <param name="parameterName">Name of the parameter.</param>
        </member>
        <member name="M:Rock.Reporting.SelectExpressionExtractor.PropertyParameterExpressionVisitor.VisitParameter(System.Linq.Expressions.ParameterExpression)">
            <summary>
            Visits the parameter.
            </summary>
            <param name="p">The application.</param>
            <returns></returns>
        </member>
        <member name="T:Rock.Reporting.FilterExpressionExtractor">
            <summary>
            Helper class than can extract the "Where" clause Expression from an IQueryable
            </summary>
        </member>
        <member name="M:Rock.Reporting.FilterExpressionExtractor.Extract``1(System.Linq.IQueryable,System.Linq.Expressions.ParameterExpression,System.String)">
            <summary>
            Extracts the "Where" clause Expression from an IQueryable
            </summary>
            <param name="qry">The qry.</param>
            <param name="parameterExpression">The original parameter expression.</param>
            <param name="parameterName">Name of the parameter (forexample: 'p') from the qry to replace with the parameterExpression.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Reporting.FilterExpressionExtractor.AlterComparisonType(Rock.Model.ComparisonType,System.Linq.Expressions.BinaryExpression,System.Object)">
            <summary>
            Alters the type of the comparison.
            </summary>
            <param name="comparisonType">Type of the comparison.</param>
            <param name="compareEqualExpression">The compare equal expression.</param>
            <param name="blankValue">the value to compare equal to for IsBlank/IsNotBlank.</param>
            <returns></returns>
        </member>
        <member name="T:Rock.Reporting.FilterExpressionExtractor.ParameterExpressionVisitor">
            <summary>
            Helps rewrite the expression by replacing the parameter expression in the qry with another parameterExpression
            </summary>
        </member>
        <member name="M:Rock.Reporting.FilterExpressionExtractor.ParameterExpressionVisitor.#ctor(System.Linq.Expressions.ParameterExpression,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Reporting.FilterExpressionExtractor.ParameterExpressionVisitor"/> class.
            </summary>
            <param name="parameterExpression">The parameter expression.</param>
            <param name="parameterName">Name of the parameter.</param>
        </member>
        <member name="M:Rock.Reporting.FilterExpressionExtractor.ParameterExpressionVisitor.VisitParameter(System.Linq.Expressions.ParameterExpression)">
            <summary>
            Visits the parameter.
            </summary>
            <param name="p">The application.</param>
            <returns></returns>
        </member>
        <member name="T:Rock.Transactions.SaveMetaphoneTransaction">
            <summary>
            Updates metaphone data when a person is added or updated.
            </summary>
        </member>
        <member name="T:Rock.Transactions.ITransaction">
            <summary>
            Represents a Transaction class
            </summary>
        </member>
        <member name="M:Rock.Transactions.ITransaction.Execute">
            <summary>
            Executes this instance.
            </summary>
        </member>
        <member name="M:Rock.Transactions.SaveMetaphoneTransaction.#ctor(Rock.Model.Person)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Transactions.SaveMetaphoneTransaction"/> class.
            </summary>
            <param name="person">The person.</param>
        </member>
        <member name="M:Rock.Transactions.SaveMetaphoneTransaction.Execute">
            <summary>
            Execute method to write transaction to the database.
            </summary>
        </member>
        <member name="T:Rock.Utility.DoubleMetaphone">
            <summary>Implements the Double Metaphone phonetic matching algorithm published
                by Lawrence Phillips in June 2000 C/C++ Users Journal. 
            
                Optimized and ported to C# by Adam Nelson (anelson@nullpointer.net)
            										</summary>
        </member>
        <member name="F:Rock.Utility.DoubleMetaphone.METAPHONE_KEY_LENGTH">
            <summary>
            The metaphone key length
            </summary>
        </member>
        <member name="F:Rock.Utility.DoubleMetaphone.m_primaryKey">
            StringBuilders used to construct the keys
        </member>
        <member name="F:Rock.Utility.DoubleMetaphone.m_alternateKey">
            StringBuilders used to construct the keys
        </member>
        <member name="F:Rock.Utility.DoubleMetaphone.m_primaryKeyString">
            Actual keys, populated after construction
        </member>
        <member name="F:Rock.Utility.DoubleMetaphone.m_alternateKeyString">
            Actual keys, populated after construction
        </member>
        <member name="F:Rock.Utility.DoubleMetaphone.m_primaryKeyLength">
            Variables to track the key length w/o having to grab the .Length attr
        </member>
        <member name="F:Rock.Utility.DoubleMetaphone.m_alternateKeyLength">
            Variables to track the key length w/o having to grab the .Length attr
        </member>
        <member name="F:Rock.Utility.DoubleMetaphone.m_word">
            Working copy of the word, and the original word
        </member>
        <member name="F:Rock.Utility.DoubleMetaphone.m_originalWord">
            Working copy of the word, and the original word
        </member>
        <member name="F:Rock.Utility.DoubleMetaphone.m_length">
            Length and last valid zero-based index into word
        </member>
        <member name="F:Rock.Utility.DoubleMetaphone.m_last">
            Length and last valid zero-based index into word
        </member>
        <member name="F:Rock.Utility.DoubleMetaphone.m_hasAlternate">
            Flag indicating if an alternate metaphone key was computed for the word
        </member>
        <member name="M:Rock.Utility.DoubleMetaphone.#ctor">
            <summary>Default ctor, initializes by computing the keys of an empty string,
                which are both empty strings</summary>
        </member>
        <member name="M:Rock.Utility.DoubleMetaphone.#ctor(System.String)">
            <summary>Constructs a new DoubleMetaphone object, and initializes it with
                the metaphone keys for a given word</summary>
            
            <param name="word">Word with which to initialize the object.  Computes the metaphone keys
                of this word.</param>
        </member>
        <member name="M:Rock.Utility.DoubleMetaphone.doubleMetaphone(System.String,System.String@,System.String@)">
            <summary>Static wrapper around the class, enables computation of metaphone keys
                without instantiating a class.</summary>
            
            <param name="word">Word whose metaphone keys are to be computed</param>
            <param name="primaryKey">Ref to var to receive primary metaphone key</param>
            <param name="alternateKey">Ref to var to receive alternate metaphone key, or be set to null if
                word has no alternate key by double metaphone</param>
        </member>
        <member name="M:Rock.Utility.DoubleMetaphone.computeKeys(System.String)">
            <summary>Sets a new current word for the instance, computing the new word's metaphone
                keys</summary>
            
            <param name="word">New word to set to current word.  Discards previous metaphone keys,
                and computes new keys for this word</param>
        </member>
        <member name="M:Rock.Utility.DoubleMetaphone.buildMetaphoneKeys">
            Internal impl of double metaphone algorithm.  Populates m_primaryKey and m_alternateKey.  Modified copy-past of
            Phillips' original code
        </member>
        <member name="M:Rock.Utility.DoubleMetaphone.isWordSlavoGermanic">
            Returns true if m_word is classified as "slavo-germanic" by Phillips' algorithm
            
            @return true if word contains strings that Lawrence's algorithm considers indicative of
                    slavo-germanic origin; else false
        </member>
        <member name="M:Rock.Utility.DoubleMetaphone.isVowel(System.Int32)">
            Returns true if letter at given position in word is a Roman vowel
            
            @param pos    Position at which to check for a vowel
            
            @return True if m_word[pos] is a Roman vowel, else false
        </member>
        <member name="M:Rock.Utility.DoubleMetaphone.addMetaphoneCharacter(System.String)">
            Appends the given metaphone character to the primary and alternate keys
            
            @param primaryCharacter
                          Character to append
        </member>
        <member name="M:Rock.Utility.DoubleMetaphone.addMetaphoneCharacter(System.String,System.String)">
            Appends a metaphone character to the primary, and a possibly different alternate,
            metaphone keys for the word.
            
            @param primaryCharacter
                          Primary character to append to primary key, and, if no alternate char is present,
                          the alternate key as well
            @param alternateCharacter
                          Alternate character to append to alternate key.  May be null or a zero-length string,
                          in which case the primary character will be appended to the alternate key instead
        </member>
        <member name="M:Rock.Utility.DoubleMetaphone.areStringsAt(System.Int32,System.Int32,System.String[])">
            Tests if any of the strings passed as variable arguments are at the given start position and
            length within word
            
            @param start   Start position in m_word
            @param length  Length of substring starting at start in m_word to compare to the given strings
            @param strings params array of zero or more strings for which to search in m_word
            
            @return true if any one string in the strings array was found in m_word at the given position
                    and length
        </member>
        <member name="P:Rock.Utility.DoubleMetaphone.PrimaryKey">
            <summary>The primary metaphone key for the current word</summary>
        </member>
        <member name="P:Rock.Utility.DoubleMetaphone.AlternateKey">
            <summary>The alternate metaphone key for the current word, or null if the current
                word does not have an alternate key by Double Metaphone</summary>
        </member>
        <member name="P:Rock.Utility.DoubleMetaphone.Word">
            <summary>Original word for which the keys were computed</summary>
        </member>
        <member name="T:Rock.Utility.EnumAsStringJsonConverter">
            <summary>
            Serializes an enum as a string value, instead of an integer value
            </summary>
        </member>
        <member name="M:Rock.Utility.EnumAsStringJsonConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            <c>true</c> if this instance can convert the specified object type; otherwise, 
            <c>false</c>.
            </returns>
        </member>
        <member name="M:Rock.Utility.EnumAsStringJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>
            The object value.
            </returns>
        </member>
        <member name="M:Rock.Utility.EnumAsStringJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="T:Rock.RockDateTime">
            <summary>
            Special Class that returns current Current DateTime based on the TimeZone set in Web.Config
            This is done because the system may be hosted in a different timezone than the organization
            Rock developers should use RockDateTime.Now instead of DateTime.Now
            </summary>
        </member>
        <member name="M:Rock.RockDateTime.ConvertLocalDateTimeToRockDateTime(System.DateTime)">
            <summary>
            Converts the local date time to rock date time.
            Use this to convert a local datetime (for example, the datetime of a file stored on the server) to the Rock OrgTimeZone
            </summary>
            <param name="localDateTime">The local date time.</param>
            <returns></returns>
        </member>
        <member name="P:Rock.RockDateTime.OrgTimeZoneInfo">
            <summary>
            Gets the time zone information from the OrgTimeZone setting set in web.config.
            </summary>
            <value>
            A <see cref="T:System.TimeZoneInfo"/> that represents the organization's time zone.
            </value>
        </member>
        <member name="P:Rock.RockDateTime.Now">
            <summary>
            Gets current datetime based on the OrgTimeZone setting set in web.config.
            </summary>
            <value>
            A <see cref="T:System.DateTime"/> that current datetime based on the Organization's TimeZone.
            </value>
        </member>
        <member name="P:Rock.RockDateTime.Today">
            <summary>
            Gets the current date based on the OrgTimeZone setting set in web.config.
            </summary>
            <value>
            A <see cref="T:System.DateTime"/> that current date based on the Organization's TimeZone.
            </value>
        </member>
        <member name="T:Rock.Services.NuGet.NuGetExtensionsMethods">
            <summary>
            NuGet specific extension methods
            </summary>
        </member>
        <member name="M:Rock.Services.NuGet.NuGetExtensionsMethods.Flatten(System.Collections.Generic.IEnumerable{NuGet.PackageDependencySet})">
            <summary>
            Flattens the specified dependency sets.
            </summary>
            <param name="dependencySets">The dependency sets.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Services.NuGet.NuGetExtensionsMethods.Flatten(System.Collections.Generic.ICollection{NuGet.PackageDependency})">
            <summary>
            Flattens the specified dependencies.
            </summary>
            <param name="dependencies">The dependencies.</param>
            <returns></returns>
        </member>
        <member name="T:Rock.Storage.ProviderComponent">
            <summary>
            Base class for BinaryFile storage components
            </summary>
        </member>
        <member name="M:Rock.Storage.ProviderComponent.SaveFile(Rock.Model.BinaryFile,System.Web.HttpContext)">
            <summary>
            Saves the file to the external storage medium associated with the provider.
            </summary>
            <param name="file">The file.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Rock.Storage.ProviderComponent.RemoveFile(Rock.Model.BinaryFile,System.Web.HttpContext)">
            <summary>
            Removes the file from the external storage medium associated with the provider.
            </summary>
            <param name="file">The file.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Rock.Storage.ProviderComponent.GetFileContent(Rock.Model.BinaryFile,System.Web.HttpContext)">
            <summary>
            Gets the file bytes from the external storage medium associated with the provider.
            </summary>
            <param name="file">The file.</param>
            <param name="context">The context.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Storage.ProviderComponent.GenerateUrl(Rock.Model.BinaryFile)">
            <summary>
            Generate a URL for the file based on the rules of the StorageProvider
            </summary>
            <param name="file">The file.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Storage.ProviderComponent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Storage.ProviderComponent"/> class.
            </summary>
        </member>
        <member name="T:Rock.Storage.ProviderContainer">
            <summary>
            MEF Container class for Binary File Storage Components
            </summary>
        </member>
        <member name="F:Rock.Storage.ProviderContainer.DEFAULT_COMPONENT_NAME">
            <summary>
            The fully qualified class name of the default provider.
            </summary>
        </member>
        <member name="F:Rock.Storage.ProviderContainer.instance">
            <summary>
            Singleton instance
            </summary>
        </member>
        <member name="M:Rock.Storage.ProviderContainer.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:Rock.Storage.ProviderContainer"/> class from being created.
            </summary>
        </member>
        <member name="M:Rock.Storage.ProviderContainer.GetComponent(System.String)">
            <summary>
            Gets the component with the matching Entity Type Name.
            </summary>
            <param name="entityTypeName">Name of the entity type.</param>
            <returns></returns>
        </member>
        <member name="P:Rock.Storage.ProviderContainer.Instance">
            <summary>
            Gets the instance.
            </summary>
            <value>
            The instance.
            </value>
        </member>
        <member name="P:Rock.Storage.ProviderContainer.DefaultComponent">
            <summary>
            Gets the default component.
            </summary>
            <value>
            The default component.
            </value>
        </member>
        <member name="P:Rock.Storage.ProviderContainer.MEFComponents">
            <summary>
            Gets or sets the MEF components.
            </summary>
            <value>
            The MEF components.
            </value>
        </member>
        <member name="T:Rock.Storage.Provider.Database">
            <summary>
            Storage provider for saving binary files to Rock database
            </summary>
        </member>
        <member name="M:Rock.Storage.Provider.Database.RemoveFile(Rock.Model.BinaryFile,System.Web.HttpContext)">
            <summary>
            Removes the file from the external storage medium associated with the provider.
            </summary>
            <param name="file">The file.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Rock.Storage.Provider.Database.SaveFile(Rock.Model.BinaryFile,System.Web.HttpContext)">
            <summary>
            Saves the file to the external storage medium associated with the provider.
            </summary>
            <param name="file">The file.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Rock.Storage.Provider.Database.GetFileContent(Rock.Model.BinaryFile,System.Web.HttpContext)">
            <summary>
            Gets the file bytes from the external storage medium associated with the provider.
            </summary>
            <param name="file">The file.</param>
            <param name="context">The context.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Storage.Provider.Database.GenerateUrl(Rock.Model.BinaryFile)">
            <summary>
            Generate a URL for the file based on the rules of the StorageProvider
            </summary>
            <param name="file">The file.</param>
            <returns></returns>
        </member>
        <member name="T:Rock.Storage.Provider.FileSystem">
            <summary>
            Storage provider for saving binary files to file system
            </summary>
        </member>
        <member name="M:Rock.Storage.Provider.FileSystem.SaveFile(Rock.Model.BinaryFile,System.Web.HttpContext)">
            <summary>
            Saves the file to the external storage medium associated with the provider.
            </summary>
            <param name="file">The file.</param>
            <param name="context">The context.</param>
            <exception cref="T:System.ArgumentException">File Data must not be null.</exception>
        </member>
        <member name="M:Rock.Storage.Provider.FileSystem.RemoveFile(Rock.Model.BinaryFile,System.Web.HttpContext)">
            <summary>
            Removes the file from the external storage medium associated with the provider.
            </summary>
            <param name="file">The file.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Rock.Storage.Provider.FileSystem.GetFileContent(Rock.Model.BinaryFile,System.Web.HttpContext)">
            <summary>
            Gets the file bytes from the external storage medium associated with the provider.
            </summary>
            <param name="file">The file.</param>
            <param name="context">The context.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Storage.Provider.FileSystem.GenerateUrl(Rock.Model.BinaryFile)">
            <summary>
            Generate a URL for the file based on the rules of the StorageProvider
            </summary>
            <param name="file">The file.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Storage.Provider.FileSystem.GetRootPath(System.Int32)">
            <summary>
            Gets the root path.
            </summary>
            <param name="binaryFileTypeId">The binary file type identifier.</param>
            <returns></returns>
            <value>
            The root path.
            </value>
        </member>
        <member name="M:Rock.Storage.Provider.FileSystem.GetPhysicalPath(System.String,System.Web.HttpContext)">
            <summary>
            Gets the physical path.
            </summary>
            <param name="path">The path.</param>
            <param name="context">The context.</param>
            <returns></returns>
        </member>
        <member name="T:Rock.Field.Types.ComponentsFieldType">
            <summary>
            Field Type used to display a checkbox list of MEF Components of a specific type
            </summary>
        </member>
        <member name="M:Rock.Field.Types.ComponentsFieldType.FormatValue(System.Web.UI.Control,System.String,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.Boolean)">
            <summary>
            Returns the field's current value(s)
            </summary>
            <param name="parentControl">The parent control.</param>
            <param name="value">Information about the value</param>
            <param name="configurationValues">The configuration values.</param>
            <param name="condensed">Flag indicating if the value should be condensed (i.e. for use in a grid column)</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.ComponentsFieldType.ConfigurationKeys">
            <summary>
            Returns a list of the configuration keys
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.ComponentsFieldType.ConfigurationControls">
            <summary>
            Creates the HTML controls required to configure this type of field
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.ComponentsFieldType.ConfigurationValues(System.Collections.Generic.List{System.Web.UI.Control})">
            <summary>
            Gets the configuration value.
            </summary>
            <param name="controls">The controls.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.ComponentsFieldType.SetConfigurationValues(System.Collections.Generic.List{System.Web.UI.Control},System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue})">
            <summary>
            Sets the configuration value.
            </summary>
            <param name="controls"></param>
            <param name="configurationValues"></param>
        </member>
        <member name="M:Rock.Field.Types.ComponentsFieldType.EditControl(System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.String)">
            <summary>
            Creates the control(s) neccessary for prompting user for a new value
            </summary>
            <param name="configurationValues">The configuration values.</param>
            <param name="id"></param>
            <returns>
            The control
            </returns>
        </member>
        <member name="M:Rock.Field.Types.ComponentsFieldType.GetEditValue(System.Web.UI.Control,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue})">
            <summary>
            Reads new values entered by the user for the field
            </summary>
            <param name="control">Parent control that controls were added to in the CreateEditControl() method</param>
            <param name="configurationValues"></param>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.ComponentsFieldType.SetEditValue(System.Web.UI.Control,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.String)">
            <summary>
            Sets the value.
            </summary>
            <param name="control">The control.</param>
            <param name="configurationValues"></param>
            <param name="value">The value.</param>
        </member>
        <member name="T:Rock.Field.Types.CategoryFieldType">
            <summary>
            
            </summary>
        </member>
        <member name="F:Rock.Field.Types.CategoryFieldType.ENTITY_TYPE_NAME_KEY">
            <summary>
            Entity Type Name Key
            </summary>
        </member>
        <member name="F:Rock.Field.Types.CategoryFieldType.QUALIFIER_COLUMN_KEY">
            <summary>
            Qualifier Column Key
            </summary>
        </member>
        <member name="F:Rock.Field.Types.CategoryFieldType.QUALIFIER_VALUE_KEY">
            <summary>
            Qualifier Value Key
            </summary>
        </member>
        <member name="M:Rock.Field.Types.CategoryFieldType.ConfigurationKeys">
            <summary>
            Returns a list of the configuration keys
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.CategoryFieldType.ConfigurationControls">
            <summary>
            Creates the HTML controls required to configure this type of field
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.CategoryFieldType.ConfigurationValues(System.Collections.Generic.List{System.Web.UI.Control})">
            <summary>
            Gets the configuration value.
            </summary>
            <param name="controls">The controls.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.CategoryFieldType.SetConfigurationValues(System.Collections.Generic.List{System.Web.UI.Control},System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue})">
            <summary>
            Sets the configuration value.
            </summary>
            <param name="controls"></param>
            <param name="configurationValues"></param>
        </member>
        <member name="M:Rock.Field.Types.CategoryFieldType.FormatValue(System.Web.UI.Control,System.String,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.Boolean)">
            <summary>
            Returns the field's current value(s)
            </summary>
            <param name="parentControl">The parent control.</param>
            <param name="value">Information about the value</param>
            <param name="configurationValues">The configuration values.</param>
            <param name="condensed">Flag indicating if the value should be condensed (i.e. for use in a grid column)</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.CategoryFieldType.EditControl(System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.String)">
            <summary>
            Creates the control(s) neccessary for prompting user for a new value
            </summary>
            <param name="configurationValues">The configuration values.</param>
            <param name="id"></param>
            <returns>
            The control
            </returns>
        </member>
        <member name="M:Rock.Field.Types.CategoryFieldType.GetEditValue(System.Web.UI.Control,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue})">
            <summary>
            Reads new values entered by the user for the field
            return value as Category.Guid
            </summary>
            <param name="control">Parent control that controls were added to in the CreateEditControl() method</param>
            <param name="configurationValues">The configuration values.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.CategoryFieldType.SetEditValue(System.Web.UI.Control,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.String)">
            <summary>
            Sets the value.
            value is a Category.Guid string
            </summary>
            <param name="control">The control.</param>
            <param name="configurationValues">The configuration values.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Rock.Field.Types.CategoryFieldType.GetEditValueAsEntityId(System.Web.UI.Control,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue})">
            <summary>
            Gets the edit value as the IEntity.Id
            </summary>
            <param name="control">The control.</param>
            <param name="configurationValues">The configuration values.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.CategoryFieldType.SetEditValueFromEntityId(System.Web.UI.Control,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.Nullable{System.Int32})">
            <summary>
            Sets the edit value from IEntity.Id value
            </summary>
            <param name="control">The control.</param>
            <param name="configurationValues">The configuration values.</param>
            <param name="id">The identifier.</param>
        </member>
        <member name="T:Rock.Field.Types.CategoriesFieldType">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Field.Types.CategoriesFieldType.FormatValue(System.Web.UI.Control,System.String,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.Boolean)">
            <summary>
            Returns the field's current value(s)
            </summary>
            <param name="parentControl">The parent control.</param>
            <param name="value">Information about the value</param>
            <param name="configurationValues">The configuration values.</param>
            <param name="condensed">Flag indicating if the value should be condensed (i.e. for use in a grid column)</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.CategoriesFieldType.EditControl(System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.String)">
            <summary>
            Creates the control(s) neccessary for prompting user for a new value
            </summary>
            <param name="configurationValues">The configuration values.</param>
            <param name="id"></param>
            <returns>
            The control
            </returns>
        </member>
        <member name="M:Rock.Field.Types.CategoriesFieldType.GetEditValue(System.Web.UI.Control,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue})">
            <summary>
            Reads new values entered by the user for the field
            </summary>
            <param name="control">Parent control that controls were added to in the CreateEditControl() method</param>
            <param name="configurationValues">The configuration values.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.CategoriesFieldType.SetEditValue(System.Web.UI.Control,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.String)">
            <summary>
            Sets the value.
            </summary>
            <param name="control">The control.</param>
            <param name="configurationValues">The configuration values.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:Rock.Field.Types.LocationFieldType">
            <summary>
            Field used to save and display a location value
            </summary>
        </member>
        <member name="M:Rock.Field.Types.LocationFieldType.FormatValue(System.Web.UI.Control,System.String,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.Boolean)">
            <summary>
            Returns the field's current value(s)
            </summary>
            <param name="parentControl">The parent control.</param>
            <param name="value">Information about the value</param>
            <param name="configurationValues">The configuration values.</param>
            <param name="condensed">Flag indicating if the value should be condensed (i.e. for use in a grid column)</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.LocationFieldType.EditControl(System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.String)">
            <summary>
            Creates the control(s) neccessary for prompting user for a new value ( as Guid )
            </summary>
            <param name="configurationValues">The configuration values.</param>
            <param name="id"></param>
            <returns>
            The control
            </returns>
        </member>
        <member name="M:Rock.Field.Types.LocationFieldType.GetEditValue(System.Web.UI.Control,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue})">
            <summary>
            Reads new values entered by the user for the field ( as Guid )
            </summary>
            <param name="control">Parent control that controls were added to in the CreateEditControl() method</param>
            <param name="configurationValues">The configuration values.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.LocationFieldType.SetEditValue(System.Web.UI.Control,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.String)">
            <summary>
            Sets the value. ( as Guid )
            </summary>
            <param name="control">The control.</param>
            <param name="configurationValues">The configuration values.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Rock.Field.Types.LocationFieldType.GetEditValueAsEntityId(System.Web.UI.Control,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue})">
            <summary>
            Gets the edit value as the IEntity.Id
            </summary>
            <param name="control">The control.</param>
            <param name="configurationValues">The configuration values.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.LocationFieldType.SetEditValueFromEntityId(System.Web.UI.Control,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.Nullable{System.Int32})">
            <summary>
            Sets the edit value from IEntity.Id value
            </summary>
            <param name="control">The control.</param>
            <param name="configurationValues">The configuration values.</param>
            <param name="id">The identifier.</param>
        </member>
        <member name="T:Rock.Field.Types.GroupRoleFieldType">
            <summary>
            Field Type to select a single (or null) GroupType
            </summary>
        </member>
        <member name="M:Rock.Field.Types.GroupRoleFieldType.FormatValue(System.Web.UI.Control,System.String,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.Boolean)">
            <summary>
            Returns the field's current value(s)
            </summary>
            <param name="parentControl">The parent control.</param>
            <param name="value">Information about the value</param>
            <param name="configurationValues">The configuration values.</param>
            <param name="condensed">Flag indicating if the value should be condensed (i.e. for use in a grid column)</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.GroupRoleFieldType.ConfigurationKeys">
            <summary>
            Returns a list of the configuration keys
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.GroupRoleFieldType.ConfigurationControls">
            <summary>
            Creates the HTML controls required to configure this type of field
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.GroupRoleFieldType.ConfigurationValues(System.Collections.Generic.List{System.Web.UI.Control})">
            <summary>
            Gets the configuration value.
            </summary>
            <param name="controls">The controls.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.GroupRoleFieldType.SetConfigurationValues(System.Collections.Generic.List{System.Web.UI.Control},System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue})">
            <summary>
            Sets the configuration value.
            </summary>
            <param name="controls"></param>
            <param name="configurationValues"></param>
        </member>
        <member name="M:Rock.Field.Types.GroupRoleFieldType.EditControl(System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.String)">
            <summary>
            Creates the control(s) necessary for prompting user for a new value
            </summary>
            <param name="configurationValues">The configuration values.</param>
            <param name="id"></param>
            <returns>
            The control
            </returns>
        </member>
        <member name="M:Rock.Field.Types.GroupRoleFieldType.GetEditValue(System.Web.UI.Control,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue})">
            <summary>
            Reads new values entered by the user for the field ( as Guid )
            </summary>
            <param name="control">Parent control that controls were added to in the CreateEditControl() method</param>
            <param name="configurationValues">The configuration values.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.GroupRoleFieldType.SetEditValue(System.Web.UI.Control,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.String)">
            <summary>
            Sets the value. ( as Guid )
            </summary>
            <param name="control">The control.</param>
            <param name="configurationValues">The configuration values.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Rock.Field.Types.GroupRoleFieldType.GetEditValueAsEntityId(System.Web.UI.Control,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue})">
            <summary>
            Gets the edit value as the IEntity.Id
            </summary>
            <param name="control">The control.</param>
            <param name="configurationValues">The configuration values.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.GroupRoleFieldType.SetEditValueFromEntityId(System.Web.UI.Control,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.Nullable{System.Int32})">
            <summary>
            Sets the edit value from IEntity.Id value
            </summary>
            <param name="control">The control.</param>
            <param name="configurationValues">The configuration values.</param>
            <param name="id">The identifier.</param>
        </member>
        <member name="T:Rock.Model.BinaryFileDataService">
            <summary>
            BinaryFileData Service class
            </summary>
        </member>
        <member name="M:Rock.Model.BinaryFileDataService.#ctor(Rock.Data.RockContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.BinaryFileDataService"/> class
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Rock.Model.BinaryFileDataService.CanDelete(Rock.Model.BinaryFileData,System.String@)">
            <summary>
            Determines whether this instance can delete the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="errorMessage">The error message.</param>
            <returns>
              <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Rock.Model.BinaryFileDataExtensionMethods">
            <summary>
            Generated Extension Methods
            </summary>
        </member>
        <member name="M:Rock.Model.BinaryFileDataExtensionMethods.Clone(Rock.Model.BinaryFileData,System.Boolean)">
            <summary>
            Clones this BinaryFileData object to a new BinaryFileData object
            </summary>
            <param name="source">The source.</param>
            <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.BinaryFileDataExtensionMethods.CopyPropertiesFrom(Rock.Model.BinaryFileData,Rock.Model.BinaryFileData)">
            <summary>
            Copies the properties from another BinaryFileData object to this BinaryFileData object
            </summary>
            <param name="target">The target.</param>
            <param name="source">The source.</param>
        </member>
        <member name="T:Rock.Model.FinancialPersonBankAccountExtensionMethods">
            <summary>
            Generated Extension Methods
            </summary>
        </member>
        <member name="M:Rock.Model.FinancialPersonBankAccountExtensionMethods.Clone(Rock.Model.FinancialPersonBankAccount,System.Boolean)">
            <summary>
            Clones this FinancialPersonBankAccount object to a new FinancialPersonBankAccount object
            </summary>
            <param name="source">The source.</param>
            <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.FinancialPersonBankAccountExtensionMethods.CopyPropertiesFrom(Rock.Model.FinancialPersonBankAccount,Rock.Model.FinancialPersonBankAccount)">
            <summary>
            Copies the properties from another FinancialPersonBankAccount object to this FinancialPersonBankAccount object
            </summary>
            <param name="target">The target.</param>
            <param name="source">The source.</param>
        </member>
        <member name="T:Rock.Model.FinancialPersonSavedAccountExtensionMethods">
            <summary>
            Generated Extension Methods
            </summary>
        </member>
        <member name="M:Rock.Model.FinancialPersonSavedAccountExtensionMethods.Clone(Rock.Model.FinancialPersonSavedAccount,System.Boolean)">
            <summary>
            Clones this FinancialPersonSavedAccount object to a new FinancialPersonSavedAccount object
            </summary>
            <param name="source">The source.</param>
            <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.FinancialPersonSavedAccountExtensionMethods.CopyPropertiesFrom(Rock.Model.FinancialPersonSavedAccount,Rock.Model.FinancialPersonSavedAccount)">
            <summary>
            Copies the properties from another FinancialPersonSavedAccount object to this FinancialPersonSavedAccount object
            </summary>
            <param name="target">The target.</param>
            <param name="source">The source.</param>
        </member>
        <member name="T:Rock.Model.FinancialTransactionRefundService">
            <summary>
            FinancialTransactionRefund Service class
            </summary>
        </member>
        <member name="M:Rock.Model.FinancialTransactionRefundService.#ctor(Rock.Data.RockContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.FinancialTransactionRefundService"/> class
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Rock.Model.FinancialTransactionRefundService.CanDelete(Rock.Model.FinancialTransactionRefund,System.String@)">
            <summary>
            Determines whether this instance can delete the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="errorMessage">The error message.</param>
            <returns>
              <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Rock.Model.FinancialTransactionRefundExtensionMethods">
            <summary>
            Generated Extension Methods
            </summary>
        </member>
        <member name="M:Rock.Model.FinancialTransactionRefundExtensionMethods.Clone(Rock.Model.FinancialTransactionRefund,System.Boolean)">
            <summary>
            Clones this FinancialTransactionRefund object to a new FinancialTransactionRefund object
            </summary>
            <param name="source">The source.</param>
            <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.FinancialTransactionRefundExtensionMethods.CopyPropertiesFrom(Rock.Model.FinancialTransactionRefund,Rock.Model.FinancialTransactionRefund)">
            <summary>
            Copies the properties from another FinancialTransactionRefund object to this FinancialTransactionRefund object
            </summary>
            <param name="target">The target.</param>
            <param name="source">The source.</param>
        </member>
        <member name="T:Rock.Model.FinancialTransactionScannedCheckService">
            <summary>
            FinancialTransactionScannedCheck Service class
            </summary>
        </member>
        <member name="M:Rock.Model.FinancialTransactionScannedCheckService.#ctor(Rock.Data.RockContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.FinancialTransactionScannedCheckService"/> class
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="T:Rock.Model.FinancialTransactionScannedCheckExtensionMethods">
            <summary>
            Generated Extension Methods
            </summary>
        </member>
        <member name="M:Rock.Model.FinancialTransactionScannedCheckExtensionMethods.Clone(Rock.Model.FinancialTransactionScannedCheck,System.Boolean)">
            <summary>
            Clones this FinancialTransactionScannedCheck object to a new FinancialTransactionScannedCheck object
            </summary>
            <param name="source">The source.</param>
            <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.FinancialTransactionScannedCheckExtensionMethods.CopyPropertiesFrom(Rock.Model.FinancialTransactionScannedCheck,Rock.Model.FinancialTransactionScannedCheck)">
            <summary>
            Copies the properties from another FinancialTransactionScannedCheck object to this FinancialTransactionScannedCheck object
            </summary>
            <param name="target">The target.</param>
            <param name="source">The source.</param>
        </member>
        <member name="T:Rock.Model.BinaryFileData">
            <summary>
            Represents the data/content of a <see cref="T:Rock.Model.BinaryFile"/> this entity can either be used to temporary store the 
            file content in memory or can be persisted to the database. 
            </summary>
        </member>
        <member name="P:Rock.Model.BinaryFileData.Content">
            <summary>
            Gets or sets the data/content of a <see cref="T:Rock.Model.BinaryFile"/>
            </summary>
            <value>
            A <see cref="T:System.Byte"/> array that contains the data/content of a <see cref="T:Rock.Model.BinaryFile"/>
            </value>
        </member>
        <member name="T:Rock.Model.BinaryFileDataConfiguration">
            <summary>
            File Configuration class.
            </summary>
        </member>
        <member name="M:Rock.Model.BinaryFileDataConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.BinaryFileDataConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Rock.Net.RockRestClient">
            <summary>
            from http://stackoverflow.com/questions/4740752/how-to-login-with-webclient-c-sharp
            and http://stackoverflow.com/questions/1777221/using-cookiecontainer-with-webclient-class
            Used by Apps.CheckScannerUtility
            </summary>
        </member>
        <member name="M:Rock.Net.RockRestClient.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Net.RockRestClient"/> class.
            </summary>
        </member>
        <member name="M:Rock.Net.RockRestClient.#ctor(System.String,System.Net.CookieContainer)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Net.RockRestClient"/> class.
            </summary>
            <param name="rockBaseUrl">The rock base URL.</param>
            <param name="c">The c.</param>
        </member>
        <member name="M:Rock.Net.RockRestClient.GetWebRequest(System.Uri)">
            <summary>
            Returns a <see cref="T:System.Net.WebRequest" /> object for the specified resource.
            </summary>
            <param name="address">A <see cref="T:System.Uri" /> that identifies the resource to request.</param>
            <returns>
            A new <see cref="T:System.Net.WebRequest" /> object for the specified resource.
            </returns>
        </member>
        <member name="M:Rock.Net.RockRestClient.GetWebResponse(System.Net.WebRequest,System.IAsyncResult)">
            <summary>
            Returns the <see cref="T:System.Net.WebResponse" /> for the specified <see cref="T:System.Net.WebRequest" /> using the specified <see cref="T:System.IAsyncResult" />.
            </summary>
            <param name="request">A <see cref="T:System.Net.WebRequest" /> that is used to obtain the response.</param>
            <param name="result">An <see cref="T:System.IAsyncResult" /> object obtained from a previous call to <see cref="M:System.Net.WebRequest.BeginGetResponse(System.AsyncCallback,System.Object)" /> .</param>
            <returns>
            A <see cref="T:System.Net.WebResponse" /> containing the response for the specified <see cref="T:System.Net.WebRequest" />.
            </returns>
        </member>
        <member name="M:Rock.Net.RockRestClient.GetWebResponse(System.Net.WebRequest)">
            <summary>
            Returns the <see cref="T:System.Net.WebResponse" /> for the specified <see cref="T:System.Net.WebRequest" />.
            </summary>
            <param name="request">A <see cref="T:System.Net.WebRequest" /> that is used to obtain the response.</param>
            <returns>
            A <see cref="T:System.Net.WebResponse" /> containing the response for the specified <see cref="T:System.Net.WebRequest" />.
            </returns>
        </member>
        <member name="M:Rock.Net.RockRestClient.ReadCookies(System.Net.WebResponse)">
            <summary>
            Reads the cookies.
            </summary>
            <param name="r">The r.</param>
        </member>
        <member name="M:Rock.Net.RockRestClient.Login(System.String,System.String,System.String)">
            <summary>
            Logins the specified username.
            </summary>
            <param name="username">The username.</param>
            <param name="password">The password.</param>
            <param name="rockLoginUrl">The rock login URL.</param>
        </member>
        <member name="M:Rock.Net.RockRestClient.GetData``1(System.String,System.String)">
            <summary>
            Gets the data.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="getPath">The get path, for example "api/BinaryFileTypes"</param>
            <param name="odataFilter">The odata filter.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Net.RockRestClient.GetDataByGuid``1(System.String,System.Guid)">
            <summary>
            Gets the data by GUID.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="getPath">The get path.</param>
            <param name="guid">The GUID.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Net.RockRestClient.GetDataByEnum``1(System.String,System.String,System.Enum)">
            <summary>
            Gets the data by enum.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="getPath">The get path.</param>
            <param name="enumFieldName">Name of the enum field.</param>
            <param name="enumVal">The enum val.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Net.RockRestClient.PostData``1(System.String,``0)">
            <summary>
            Posts the data. Use this for Adding a new record
            </summary>
            <typeparam name="T"></typeparam>
            <param name="postPath">The post path.</param>
            <param name="data">The data.</param>
        </member>
        <member name="M:Rock.Net.RockRestClient.PutData``1(System.String,``0)">
            <summary>
            Puts the data. Use this for Updating an existing record
            </summary>
            <typeparam name="T"></typeparam>
            <param name="postPath">The post path.</param>
            <param name="data">The data.</param>
        </member>
        <member name="M:Rock.Net.RockRestClient.PostPutData``1(System.String,``0,System.Net.Http.HttpMethod)">
            <summary>
            Posts or Puts the data depending on httpMethod
            </summary>
            <typeparam name="T"></typeparam>
            <param name="postPath">The post path.</param>
            <param name="data">The data.</param>
            <param name="httpMethod">The HTTP method.</param>
            <exception cref="T:Rock.Net.HttpErrorException"></exception>
        </member>
        <member name="M:Rock.Net.RockRestClient.PostNonIEntityData``1(System.String,``0)">
            <summary>
            Posts or Puts the data depending on httpMethod
            </summary>
            <typeparam name="T"></typeparam>
            <param name="postPath">The post path.</param>
            <param name="data">The data.</param>
            <exception cref="T:Rock.Net.HttpErrorException"></exception>
        </member>
        <member name="M:Rock.Net.RockRestClient.PostDataWithResult``2(System.String,``0)">
            <summary>
            Posts the data with result.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="R"></typeparam>
            <param name="postPath">The post path.</param>
            <param name="data">The data.</param>
            <returns></returns>
            <exception cref="T:Rock.Net.HttpErrorException"></exception>
        </member>
        <member name="M:Rock.Net.RockRestClient.GetXml(System.String,System.Int32,System.String)">
            <summary>
            Gets the XML.
            </summary>
            <param name="getPath">The get path.</param>
            <param name="maxWaitMilliseconds">The maximum wait milliseconds.</param>
            <param name="odataFilter">The odata filter.</param>
            <returns></returns>
        </member>
        <member name="P:Rock.Net.RockRestClient.rockBaseUri">
            <summary>
            Gets or sets the rock base URI.
            </summary>
            <value>
            The rock base URI.
            </value>
        </member>
        <member name="P:Rock.Net.RockRestClient.CookieContainer">
            <summary>
            Gets or sets the cookie container.
            </summary>
            <value>
            The cookie container.
            </value>
        </member>
        <member name="T:Rock.Net.HttpErrorException">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Net.HttpErrorException.#ctor(System.Web.Http.HttpError)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Net.HttpErrorException"/> class.
            </summary>
            <param name="httpError">The HTTP error.</param>
        </member>
        <member name="P:Rock.Net.HttpErrorException._message">
            <summary>
            Gets or sets the _message.
            </summary>
            <value>
            The _message.
            </value>
        </member>
        <member name="P:Rock.Net.HttpErrorException.Message">
            <summary>
            Gets a message that describes the current exception.
            </summary>
            <returns>The error message that explains the reason for the exception, or an empty string("").</returns>
        </member>
        <member name="T:Rock.Net.RockWebRequest">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Net.RockWebRequest.Get(System.String)">
            <summary>
            Gets the specified request URI string.
            </summary>
            <param name="requestUriString">The request URI string.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Net.RockWebRequest.Send(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Sends the specified request URI string.
            </summary>
            <param name="requestUriString">The request URI string.</param>
            <param name="method">The method.</param>
            <param name="queryStringData">The query string data.</param>
            <param name="formData">The form data.</param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:Rock.Net.RockWebRequest.GetResponseString(System.IO.Stream)">
            <summary>
            Gets the response string.
            </summary>
            <param name="responseStream">The response stream.</param>
            <returns></returns>
        </member>
        <member name="T:Rock.Net.RockWebResponse">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Net.RockWebResponse.#ctor(System.Net.HttpStatusCode,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Net.RockWebResponse"/> class.
            </summary>
            <param name="httpStatusCode">The HTTP status code.</param>
            <param name="message">The message.</param>
        </member>
        <member name="P:Rock.Net.RockWebResponse.HttpStatusCode">
            <summary>
            Gets the HTTP status code.
            </summary>
            <value>
            The HTTP status code.
            </value>
        </member>
        <member name="P:Rock.Net.RockWebResponse.Message">
            <summary>
            Gets the message.
            </summary>
            <value>
            The message.
            </value>
        </member>
        <member name="T:Rock.PersonProfile.BadgeContainer">
            <summary>
            MEF Container class for Person Badge Componenets
            </summary>
        </member>
        <member name="M:Rock.PersonProfile.BadgeContainer.Refresh">
            <summary>
            Refreshes this instance.
            </summary>
        </member>
        <member name="M:Rock.PersonProfile.BadgeContainer.GetComponent(System.String)">
            <summary>
            Gets the component with the matching Entity Type Name
            </summary>
            <param name="entityTypeName">Name of the entity type.</param>
            <returns></returns>
        </member>
        <member name="P:Rock.PersonProfile.BadgeContainer.Instance">
            <summary>
            Gets the instance.
            </summary>
        </member>
        <member name="T:Rock.PersonProfile.Badge.FamilyAttendance">
            <summary>
            FamilyAttendance Badge
            </summary>
        </member>
        <member name="M:Rock.PersonProfile.Badge.FamilyAttendance.Render(Rock.Web.Cache.PersonBadgeCache,System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders the specified writer.
            </summary>
            <param name="badge">The badge.</param>
            <param name="writer">The writer.</param>
        </member>
        <member name="T:Rock.PersonProfile.IconBadge">
            <summary>
            Base class for person profile icon badges
            </summary>
        </member>
        <member name="M:Rock.PersonProfile.IconBadge.GetToolTipText(Rock.Model.Person)">
            <summary>
            Gets the tool tip text.
            </summary>
            <param name="person">The person.</param>
        </member>
        <member name="M:Rock.PersonProfile.IconBadge.GetIconPath(Rock.Model.Person)">
            <summary>
            Gets the icon path.
            </summary>
            <param name="person">The person.</param>
        </member>
        <member name="M:Rock.PersonProfile.IconBadge.Render(Rock.Web.Cache.PersonBadgeCache,System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders the specified writer.
            </summary>
            <param name="badge">The badge.</param>
            <param name="writer">The writer.</param>
        </member>
        <member name="T:Rock.Search.Group.Name">
            <summary>
            Searches for people with matching names
            </summary>
        </member>
        <member name="T:Rock.Search.SearchComponent">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Search.SearchComponent.Search(System.String)">
            <summary>
            Returns a list of value/label results matching the searchterm
            </summary>
            <param name="searchterm">The searchterm.</param>
            <returns></returns>
        </member>
        <member name="P:Rock.Search.SearchComponent.SearchLabel">
            <summary>
            The label to display for the type of search
            </summary>
        </member>
        <member name="P:Rock.Search.SearchComponent.ResultUrl">
            <summary>
            The url to redirect user to after they've entered search criteria
            </summary>
        </member>
        <member name="M:Rock.Search.Group.Name.Search(System.String)">
            <summary>
            Returns a list of matching people
            </summary>
            <param name="searchterm"></param>
            <returns></returns>
        </member>
        <member name="P:Rock.Search.Group.Name.AttributeValueDefaults">
            <summary>
            Gets the attribute value defaults.
            </summary>
            <value>
            The attribute defaults.
            </value>
        </member>
        <member name="T:Rock.SystemGuid.Category">
            <summary>
            System file types.  
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.Category.HISTORY_PERSON">
            <summary>
            History changes for person
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.Category.HISTORY_PERSON_DEMOGRAPHIC_CHANGES">
            <summary>
            History of person demographic changes
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.Category.HISTORY_PERSON_FAMILY_CHANGES">
            <summary>
            History of Family changes
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.Category.HISTORY_PERSON_GROUP_MEMBERSHIP">
            <summary>
            history of group membership
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.Category.HISTORY_PERSON_COMMUNICATIONS">
            <summary>
            History of person communications
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.Category.HISTORY_PERSON_ACTIVITY">
            <summary>
            History of person activity
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.Category.SCHEDULE_SERVICE_TIMES">
            <summary>
            Gets the Service Times schedule category guid
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.Category.SCHEDULE_METRICS">
            <summary>
            Gets the Metrics schedule category guid
            </summary>
        </member>
        <member name="T:Rock.SystemGuid.EntityType">
            <summary>
            System Email Templates
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.EntityType.AUTHENTICATION_DATABASE">
            <summary>
            The database authentication provider
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.EntityType.COMMUNICATION_CHANNEL_EMAIL">
            <summary>
            The guid for the email communication channel
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.EntityType.STORAGE_PROVIDER_DATABASE">
            <summary>
            The guid for the database storage provider entity
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.EntityType.STORAGE_PROVIDER_FILESYSTEM">
            <summary>
            The guid for the filesystem storage provider entity
            </summary>
        </member>
        <member name="T:Rock.Transactions.SendCommunicationTransaction">
            <summary>
            Writes entity audits 
            </summary>
        </member>
        <member name="M:Rock.Transactions.SendCommunicationTransaction.Execute">
            <summary>
            Execute method to write transaction to the database.
            </summary>
        </member>
        <member name="P:Rock.Transactions.SendCommunicationTransaction.CommunicationId">
            <summary>
            Gets or sets the communication id
            </summary>
            <value>
            The communication id.
            </value>
        </member>
        <member name="P:Rock.Transactions.SendCommunicationTransaction.PersonAlias">
            <summary>
            Gets or sets the person alias.
            </summary>
            <value>
            The person alias.
            </value>
        </member>
        <member name="T:Rock.Web.Cache.PersonBadgeCache">
            <summary>
            Information about a personBadge that is required by the rendering engine.
            This information will be cached by the engine
            </summary>
        </member>
        <member name="T:Rock.Web.Cache.CachedModel`1">
            <summary>
            A Secured data transfer object
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Rock.Web.Cache.CachedModel`1.CopyFromModel(Rock.Data.IEntity)">
            <summary>
            Copies from model.
            </summary>
            <param name="model">The model.</param>
        </member>
        <member name="M:Rock.Web.Cache.CachedModel`1.IsAuthorized(System.String,Rock.Model.Person)">
            <summary>
            Return <c>true</c> if the user is authorized to perform the selected action on this object.
            </summary>
            <param name="action">The action.</param>
            <param name="person">The person.</param>
            <returns>
              <c>true</c> if the specified action is authorized; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Rock.Web.Cache.CachedModel`1.IsAllowedByDefault(System.String)">
            <summary>
            If a user or role is not specifically allowed or denied to perform the selected action,
            return <c>true</c> if they should be allowed anyway or <c>false</c> if not.
            </summary>
            <param name="action">The action.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.Cache.CachedModel`1.IsPrivate(System.String,Rock.Model.Person)">
            <summary>
            Determines whether the specified action is private (Only the current user has access).
            </summary>
            <param name="action">The action.</param>
            <param name="person">The person.</param>
            <returns>
              <c>true</c> if the specified action is private; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Rock.Web.Cache.CachedModel`1.MakePrivate(System.String,Rock.Model.Person)">
            <summary>
            Makes the action on the current entity private (Only the current user will have access).
            </summary>
            <param name="action">The action.</param>
            <param name="person">The person.</param>
        </member>
        <member name="M:Rock.Web.Cache.CachedModel`1.MakeUnPrivate(System.String,Rock.Model.Person)">
            <summary>
            If action on the current entity is private, removes security that made it private.
            </summary>
            <param name="action">The action.</param>
            <param name="person">The person.</param>
        </member>
        <member name="F:Rock.Web.Cache.CachedModel`1.AttributeIds">
            <summary>
            The attribute ids
            </summary>
        </member>
        <member name="M:Rock.Web.Cache.CachedModel`1.SaveAttributeValues">
            <summary>
            Saves the attribute values.
            </summary>
        </member>
        <member name="M:Rock.Web.Cache.CachedModel`1.GetAttributeValue(System.String)">
            <summary>
            Gets the first value of an attribute key.
            </summary>
            <param name="key">The key.</param>
            <returns>The stored value as a string or null if none exists.</returns>
        </member>
        <member name="M:Rock.Web.Cache.CachedModel`1.GetAttributeValues(System.String)">
            <summary>
            Gets the first value of an attribute key - splitting that delimited value into a list of strings.
            </summary>
            <param name="key">The key.</param>
            <returns>A list of strings or an empty list if none exists.</returns>
        </member>
        <member name="M:Rock.Web.Cache.CachedModel`1.SetAttributeValue(System.String,System.String)">
            <summary>
            Sets the value of an attribute key in memory. Once values have been set, use the <see cref="M:Rock.Web.Cache.CachedModel`1.SaveAttributeValues"/> method to save all values to database
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Rock.Web.Cache.CachedModel`1.ReloadAttributeValues">
            <summary>
            Reloads the attribute values.
            </summary>
        </member>
        <member name="P:Rock.Web.Cache.CachedModel`1.Id">
            <summary>
            Gets or sets the id.
            </summary>
            <value>
            The id.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.CachedModel`1.Guid">
            <summary>
            Gets or sets the GUID.
            </summary>
            <value>
            The GUID.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.CachedModel`1.TypeId">
            <summary>
            Gets the Entity Type ID for this entity.
            </summary>
            <value>
            The type id.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.CachedModel`1.TypeName">
            <summary>
            The auth entity. Classes that implement the <see cref="T:Rock.Security.ISecured"/> interface should return
            a value that is unique across all <see cref="T:Rock.Security.ISecured"/> classes.  Typically this is the
            qualified name of the class.
            </summary>
        </member>
        <member name="P:Rock.Web.Cache.CachedModel`1.ParentAuthority">
            <summary>
            A parent authority.  If a user is not specifically allowed or denied access to
            this object, Rock will check access to the parent authority specified by this property.
            </summary>
        </member>
        <member name="P:Rock.Web.Cache.CachedModel`1.SupportedActions">
            <summary>
            A dictionary of actions that this class supports and the description of each.
            </summary>
        </member>
        <member name="P:Rock.Web.Cache.CachedModel`1.Attributes">
            <summary>
            List of attributes associated with the object.  This property will not include the attribute values.
            The <see cref="P:Rock.Web.Cache.CachedModel`1.AttributeValues"/> property should be used to get attribute values.  Dictionary key
            is the attribute key, and value is the cached attribute
            </summary>
            <value>
            The attributes.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.CachedModel`1.AttributeValues">
            <summary>
            Dictionary of all attributes and their value.
            </summary>
        </member>
        <member name="P:Rock.Web.Cache.CachedModel`1.AttributeValueDefaults">
            <summary>
            Gets the attribute value defaults.
            </summary>
            <value>
            The attribute defaults.
            </value>
        </member>
        <member name="M:Rock.Web.Cache.PersonBadgeCache.CopyFromModel(Rock.Data.IEntity)">
            <summary>
            Copies from model.
            </summary>
            <param name="model">The model.</param>
        </member>
        <member name="M:Rock.Web.Cache.PersonBadgeCache.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Rock.Web.Cache.PersonBadgeCache.Read(System.Int32)">
            <summary>
            Returns PersonBadge object from cache.  If personBadge does not already exist in cache, it
            will be read and added to cache
            </summary>
            <param name="id">The id.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.Cache.PersonBadgeCache.Read(System.Guid)">
            <summary>
            Reads the specified GUID.
            </summary>
            <param name="guid">The GUID.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.Cache.PersonBadgeCache.Read(Rock.Model.PersonBadge)">
            <summary>
            Adds PersonBadge model to cache, and returns cached object
            </summary>
            <param name="personBadgeModel">The personBadge model.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.Cache.PersonBadgeCache.Flush(System.Int32)">
            <summary>
            Removes personBadge from cache
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:Rock.Web.Cache.PersonBadgeCache.FromJson(System.String)">
            <summary>
            Froms the json.
            </summary>
            <param name="json">The json.</param>
            <returns></returns>
        </member>
        <member name="P:Rock.Web.Cache.PersonBadgeCache.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.PersonBadgeCache.Description">
            <summary>
            Gets or sets the description
            </summary>
            <value>
            The description.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.PersonBadgeCache.EntityTypeId">
            <summary>
            Gets or sets the entity type id.
            </summary>
            <value>
            The entity type id.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.PersonBadgeCache.Order">
            <summary>
            Gets or sets the order.
            </summary>
            <value>
            The order.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.PersonBadgeCache.EntityType">
            <summary>
            Gets the Entity Type.
            </summary>
        </member>
        <member name="P:Rock.Web.Cache.PersonBadgeCache.BadgeComponent">
            <summary>
            Gets the <see cref="T:Rock.Workflow.ActionComponent"/>
            </summary>
            <value>
            The <see cref="T:Rock.Workflow.ActionComponent"/>
            </value>
        </member>
        <member name="T:Rock.Web.Cache.CategoryCache">
            <summary>
            Information about a category that is cached by Rock. 
            </summary>
        </member>
        <member name="M:Rock.Web.Cache.CategoryCache.CopyFromModel(Rock.Data.IEntity)">
            <summary>
            Copies from model.
            </summary>
            <param name="model">The model.</param>
        </member>
        <member name="M:Rock.Web.Cache.CategoryCache.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Rock.Web.Cache.CategoryCache.Read(System.Int32)">
            <summary>
            Returns Category object from cache.  If category does not already exist in cache, it
            will be read and added to cache
            </summary>
            <param name="id">The id of the Category to read</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.Cache.CategoryCache.Read(System.Guid)">
            <summary>
            Reads the specified GUID.
            </summary>
            <param name="guid">The GUID.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.Cache.CategoryCache.Read(Rock.Model.Category)">
            <summary>
            Adds Category model to cache, and returns cached object
            </summary>
            <param name="categoryModel">The categoryModel to cache</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.Cache.CategoryCache.Flush(System.Int32)">
            <summary>
            Removes category from cache
            </summary>
            <param name="id">The id of the category to remove from cache</param>
        </member>
        <member name="P:Rock.Web.Cache.CategoryCache.IsSystem">
            <summary>
            Gets or sets a value indicating whether this instance is system.
            </summary>
            <value>
              <c>true</c> if this instance is system; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.CategoryCache.ParentCategoryId">
            <summary>
            Gets or sets the parent category id.
            </summary>
            <value>
            The parent category id.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.CategoryCache.EntityTypeId">
            <summary>
            Gets or sets the entity type id.
            </summary>
            <value>
            The entity type id.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.CategoryCache.EntityTypeQualifierColumn">
            <summary>
            Gets or sets the entity type qualifier column.
            </summary>
            <value>
            The entity type qualifier column.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.CategoryCache.EntityTypeQualifierValue">
            <summary>
            Gets or sets the entity type qualifier value.
            </summary>
            <value>
            The entity type qualifier value.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.CategoryCache.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.CategoryCache.Description">
            <summary>
            Gets or sets the description.
            </summary>
            <value>
            The description.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.CategoryCache.Order">
            <summary>
            Gets or sets the order.
            </summary>
            <value>
            The order.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.CategoryCache.IconCssClass">
            <summary>
            Gets or sets the icon CSS class.
            </summary>
            <value>
            The icon CSS class.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.CategoryCache.ParentCategory">
            <summary>
            Gets the parent category.
            </summary>
            <value>
            The parent category.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.CategoryCache.Categories">
            <summary>
            Gets the categories.
            </summary>
            <value>
            The categories.
            </value>
        </member>
        <member name="T:Rock.Web.Cache.RestControllerCache">
            <summary>
            Information about a RestController that is required by the rendering engine.
            This information will be cached by the engine
            </summary>
        </member>
        <member name="M:Rock.Web.Cache.RestControllerCache.CopyFromModel(Rock.Data.IEntity)">
            <summary>
            Copies from model.
            </summary>
            <param name="model">The model.</param>
        </member>
        <member name="M:Rock.Web.Cache.RestControllerCache.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Rock.Web.Cache.RestControllerCache.Read(System.Int32)">
            <summary>
            Returns RestController object from cache.  If RestController does not already exist in cache, it
            will be read and added to cache
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.Cache.RestControllerCache.Read(System.Guid)">
            <summary>
            Reads the specified GUID.
            </summary>
            <param name="guid">The GUID.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.Cache.RestControllerCache.Read(System.String)">
            <summary>
            Reads the specified class name.
            </summary>
            <param name="className">Name of the class.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.Cache.RestControllerCache.Read(Rock.Model.RestController)">
            <summary>
            Reads the specified defined type model.
            </summary>
            <param name="RestControllerModel">The defined type model.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.Cache.RestControllerCache.Flush(System.Int32)">
            <summary>
            Removes RestController from cache
            </summary>
            <param name="id"></param>
        </member>
        <member name="P:Rock.Web.Cache.RestControllerCache.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.RestControllerCache.ClassName">
            <summary>
            Gets or sets the description.
            </summary>
            <value>
            The description.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.RestControllerCache.RestActions">
            <summary>
            Gets the defined values.
            </summary>
            <value>
            The defined values.
            </value>
        </member>
        <member name="T:Rock.Web.Cache.RestActionCache">
            <summary>
            Information about a RestAction that is required by the rendering engine.
            This information will be cached by the engine
            </summary>
        </member>
        <member name="M:Rock.Web.Cache.RestActionCache.CopyFromModel(Rock.Data.IEntity)">
            <summary>
            Copies the model property values to the DTO properties
            </summary>
            <param name="model">The model.</param>
        </member>
        <member name="M:Rock.Web.Cache.RestActionCache.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Rock.Web.Cache.RestActionCache.Read(System.Int32)">
            <summary>
            Returns RestAction object from cache.  If RestAction does not already exist in cache, it
            will be read and added to cache
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.Cache.RestActionCache.Read(System.Guid)">
            <summary>
            Reads the specified GUID.
            </summary>
            <param name="guid">The GUID.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.Cache.RestActionCache.Read(System.String)">
            <summary>
            Reads the specified API identifier.
            </summary>
            <param name="apiId">The API identifier.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.Cache.RestActionCache.Read(Rock.Model.RestAction)">
            <summary>
            Reads the specified defined value model.
            </summary>
            <param name="RestActionModel">The defined value model.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.Cache.RestActionCache.Flush(System.Int32)">
            <summary>
            Removes RestAction from cache
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:Rock.Web.Cache.RestActionCache.GetName(System.Nullable{System.Int32})">
            <summary>
            Gets the name of the defined value given an id
            </summary>
            <param name="id">The identifier.</param>
            <returns></returns>
        </member>
        <member name="P:Rock.Web.Cache.RestActionCache.ControllerId">
            <summary>
            Gets or sets the defined type id.
            </summary>
            <value>
            The defined type id.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.RestActionCache.Method">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.RestActionCache.ApiId">
            <summary>
            Gets or sets the description.
            </summary>
            <value>
            The description.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.RestActionCache.Path">
            <summary>
            Gets or sets the path.
            </summary>
            <value>
            The path.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.RestActionCache.RestController">
            <summary>
            Gets the type of the field.
            </summary>
            <value>
            The type of the field.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.RestActionCache.ParentAuthority">
            <summary>
            Gets the parent authority.
            </summary>
            <value>
            The parent authority.
            </value>
        </member>
        <member name="T:Rock.Web.FileUploadException">
            <summary>
            Exception for when a file upload fails.  We don't want these to go to the standard error page, this is why we have a special exception class
            </summary>
        </member>
        <member name="M:Rock.Web.FileUploadException.#ctor(System.String,System.Net.HttpStatusCode)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Web.FileUploadException"/> class.
            </summary>
            <param name="detail">The detail.</param>
            <param name="statusCode">The status code.</param>
        </member>
        <member name="T:Rock.Web.Fingerprint">
            <summary>
            Allows Static HTML Resources to have a Fingerprint so that we can set long cache expiration dates
            see http://madskristensen.net/post/cache-busting-in-aspnet
            </summary>
        </member>
        <member name="M:Rock.Web.Fingerprint.Tag(System.String)">
            <summary>
            Tags the specified root relative path.
            </summary>
            <param name="rootRelativePath">The root relative path.</param>
            <returns></returns>
        </member>
        <member name="T:Rock.Web.FingerprintExpressionBuilder">
            <summary>
            An ExpressionBuilder that can be used to fingerprint URL properties of server controls
            </summary>
        </member>
        <member name="M:Rock.Web.FingerprintExpressionBuilder.GetEvalData(System.String,System.Type,System.String)">
            <summary>
            Gets the eval data.
            </summary>
            <param name="expression">The expression.</param>
            <param name="target">The target.</param>
            <param name="entry">The entry.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.FingerprintExpressionBuilder.GetCodeExpression(System.Web.UI.BoundPropertyEntry,System.Object,System.Web.Compilation.ExpressionBuilderContext)">
            <summary>
            When overridden in a derived class, returns code that is used during page execution to obtain the evaluated expression.
            </summary>
            <param name="entry">The object that represents information about the property bound to by the expression.</param>
            <param name="parsedData">The object containing parsed data as returned by <see cref="M:System.Web.Compilation.ExpressionBuilder.ParseExpression(System.String,System.Type,System.Web.Compilation.ExpressionBuilderContext)" />.</param>
            <param name="context">Contextual information for the evaluation of the expression.</param>
            <returns>
            A <see cref="T:System.CodeDom.CodeExpression" /> that is used for property assignment.
            </returns>
        </member>
        <member name="P:Rock.Web.FingerprintExpressionBuilder.SupportsEvaluate">
            <summary>
            When overridden in a derived class, returns a value indicating whether the current <see cref="T:System.Web.Compilation.ExpressionBuilder" /> object supports no-compile pages.
            </summary>
            <returns>true if the <see cref="T:System.Web.Compilation.ExpressionBuilder" /> supports expression evaluation; otherwise, false.</returns>
        </member>
        <member name="T:Rock.Web.RequestValidator">
            <summary>
            Validates all http request values
            </summary>
        </member>
        <member name="M:Rock.Web.RequestValidator.IsValidRequestString(System.Web.HttpContext,System.String,System.Web.Util.RequestValidationSource,System.String,System.Int32@)">
            <summary>
            Validates a string that contains HTTP request data.
            </summary>
            <param name="context">The context of the current request.</param>
            <param name="value">The HTTP request data to validate.</param>
            <param name="requestValidationSource">An enumeration that represents the source of request data that is being validated. The following are possible values for the enumeration:QueryStringForm CookiesFilesRawUrlPathPathInfoHeaders</param>
            <param name="collectionKey">The key in the request collection of the item to validate. This parameter is optional. This parameter is used if the data to validate is obtained from a collection. If the data to validate is not from a collection, <paramref name="collectionKey" /> can be null.</param>
            <param name="validationFailureIndex">When this method returns, indicates the zero-based starting point of the problematic or invalid text in the request collection. This parameter is passed uninitialized.</param>
            <returns>
            true if the string to be validated is valid; otherwise, false.
            </returns>
        </member>
        <member name="T:Rock.Web.SystemSettings">
            <summary>
            System Settings can be used to persist a key/value 
            </summary>
        </member>
        <member name="M:Rock.Web.SystemSettings.GetRockInstanceId">
            <summary>
            Gets the RockInstanceId for this particular installation.
            </summary>
            <returns>the Guid of this Rock instance</returns>
        </member>
        <member name="M:Rock.Web.SystemSettings.GetValue(System.String)">
            <summary>
            Gets the Global Attribute values for the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.SystemSettings.SetValue(System.String,System.String)">
            <summary>
            Sets the value.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Rock.Web.SystemSettings.Read">
            <summary>
            Returns Global Attributes from cache.  If they are not already in cache, they
            will be read and added to cache
            </summary>
            <returns></returns>
        </member>
        <member name="T:Rock.Web.Cache.GroupTypeCache">
            <summary>
            Information about a groupType. This information will be cached by the engine
            </summary>
        </member>
        <member name="M:Rock.Web.Cache.GroupTypeCache.CopyFromModel(Rock.Data.IEntity)">
            <summary>
            Copies from model.
            </summary>
            <param name="model">The model.</param>
        </member>
        <member name="M:Rock.Web.Cache.GroupTypeCache.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Rock.Web.Cache.GroupTypeCache.Read(System.Int32)">
            <summary>
            Returns GroupType object from cache.  If groupType does not already exist in cache, it
            will be read and added to cache
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.Cache.GroupTypeCache.Read(System.String)">
            <summary>
            Reads the specified GUID.
            </summary>
            <param name="guid">The GUID.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.Cache.GroupTypeCache.Read(System.Guid)">
            <summary>
            Reads the specified GUID.
            </summary>
            <param name="guid">The GUID.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.Cache.GroupTypeCache.Read(Rock.Model.GroupType)">
            <summary>
            Reads the specified field type model.
            </summary>
            <param name="groupTypeModel">The field type model.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.Cache.GroupTypeCache.Flush(System.Int32)">
            <summary>
            Removes groupType from cache
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:Rock.Web.Cache.GroupTypeCache.GetFamilyGroupType">
            <summary>
            Gets the 'Family' Group Type.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.Cache.GroupTypeCache.GetSecurityRoleGroupType">
            <summary>
            Gets the 'Security Role' Group Type.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Rock.Web.Cache.GroupTypeCache.IsSystem">
            <summary>
            Gets or sets a value indicating whether this instance is system.
            </summary>
            <value>
              <c>true</c> if this instance is system; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.GroupTypeCache.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.GroupTypeCache.Description">
            <summary>
            Gets or sets the description.
            </summary>
            <value>
            The description.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.GroupTypeCache.GroupTerm">
            <summary>
            Gets or sets the group term.
            </summary>
            <value>
            The group term.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.GroupTypeCache.GroupMemberTerm">
            <summary>
            Gets or sets the group member term.
            </summary>
            <value>
            The group member term.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.GroupTypeCache.DefaultGroupRoleId">
            <summary>
            Gets or sets the default group role identifier.
            </summary>
            <value>
            The default group role identifier.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.GroupTypeCache.AllowMultipleLocations">
            <summary>
            Gets or sets a value indicating whether [allow multiple locations].
            </summary>
            <value>
            <c>true</c> if [allow multiple locations]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.GroupTypeCache.ShowInGroupList">
            <summary>
            Gets or sets a value indicating whether [show in group list].
            </summary>
            <value>
              <c>true</c> if [show in group list]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.GroupTypeCache.ShowInNavigation">
            <summary>
            Gets or sets a value indicating whether [show in navigation].
            </summary>
            <value>
              <c>true</c> if [show in navigation]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.GroupTypeCache.IconCssClass">
            <summary>
            Gets or sets the icon CSS class.
            </summary>
            <value>
            The icon CSS class.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.GroupTypeCache.TakesAttendance">
            <summary>
            Gets or sets a value indicating whether [takes attendance].
            </summary>
            <value>
              <c>true</c> if [takes attendance]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.GroupTypeCache.AttendanceRule">
            <summary>
            Gets or sets the attendance rule.
            </summary>
            <value>
            The attendance rule.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.GroupTypeCache.AttendancePrintTo">
            <summary>
            Gets or sets the attendance print to.
            </summary>
            <value>
            The attendance print to.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.GroupTypeCache.Order">
            <summary>
            Gets or sets the order.
            </summary>
            <value>
            The order.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.GroupTypeCache.InheritedGroupTypeId">
            <summary>
            Gets or sets the inherited group type identifier.
            </summary>
            <value>
            The inherited group type identifier.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.GroupTypeCache.InheritedGroupType">
            <summary>
            Gets the type of the inherited group.
            </summary>
            <value>
            The type of the inherited group.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.GroupTypeCache.LocationSelectionMode">
            <summary>
            Gets or sets the location selection mode.
            </summary>
            <value>
            The location selection mode.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.GroupTypeCache.GroupTypePurposeValueId">
            <summary>
            Gets or sets the group type purpose value identifier.
            </summary>
            <value>
            The group type purpose value identifier.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.GroupTypeCache.GroupTypePurposeValue">
            <summary>
            Gets the group type purpose value.
            </summary>
            <value>
            The group type purpose value.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.GroupTypeCache.Roles">
            <summary>
            Gets or sets the roles.
            </summary>
            <value>
            The roles.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.GroupTypeCache.ChildGroupTypes">
            <summary>
            Gets the child group types.
            </summary>
            <value>
            The child group types.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.GroupTypeCache.ParentGroupTypes">
            <summary>
            Gets the parent group types.
            </summary>
            <value>
            The parent group types.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.GroupTypeCache.LocationTypeValues">
            <summary>
            Gets the location type values.
            </summary>
            <value>
            The location type values.
            </value>
        </member>
        <member name="T:Rock.Web.Cache.GroupTypeRoleCache">
            <summary>
            Cached version of GroupTypeRole
            </summary>
        </member>
        <member name="M:Rock.Web.Cache.GroupTypeRoleCache.#ctor(Rock.Model.GroupTypeRole)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Web.Cache.GroupTypeRoleCache"/> class.
            </summary>
            <param name="role">The role.</param>
        </member>
        <member name="P:Rock.Web.Cache.GroupTypeRoleCache.Id">
            <summary>
            Gets or sets the identifier.
            </summary>
            <value>
            The identifier.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.GroupTypeRoleCache.Guid">
            <summary>
            Gets or sets the unique identifier.
            </summary>
            <value>
            The unique identifier.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.GroupTypeRoleCache.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="T:Rock.Web.Cache.LayoutCache">
            <summary>
            Information about a Layout that is required by the rendering engine.
            This information will be cached by the engine
            </summary>
        </member>
        <member name="M:Rock.Web.Cache.LayoutCache.CopyFromModel(Rock.Data.IEntity)">
            <summary>
            Copies from model.
            </summary>
            <param name="model">The model.</param>
        </member>
        <member name="M:Rock.Web.Cache.LayoutCache.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Rock.Web.Cache.LayoutCache.Read(System.Int32)">
            <summary>
            Returns Layout object from cache.  If Layout does not already exist in cache, it
            will be read and added to cache
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.Cache.LayoutCache.Read(System.Guid)">
            <summary>
            Reads the specified GUID.
            </summary>
            <param name="guid">The GUID.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.Cache.LayoutCache.Read(Rock.Model.Layout)">
            <summary>
            Adds Layout model to cache, and returns cached object
            </summary>
            <param name="LayoutModel"></param>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.Cache.LayoutCache.Flush(System.Int32)">
            <summary>
            Removes Layout from cache
            </summary>
            <param name="id"></param>
        </member>
        <member name="P:Rock.Web.Cache.LayoutCache.IsSystem">
            <summary>
            Gets or sets a value indicating whether this instance is system.
            </summary>
            <value>
              <c>true</c> if this instance is system; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.LayoutCache.SiteId">
            <summary>
            Gets or sets the site id.
            </summary>
            <value>
            The site id.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.LayoutCache.FileName">
            <summary>
            Gets or sets the name of the file.
            </summary>
            <value>
            The name of the file.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.LayoutCache.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.LayoutCache.Description">
            <summary>
            Gets or sets the description.
            </summary>
            <value>
            The description.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.LayoutCache.Site">
            <summary>
            Gets the site.
            </summary>
            <value>
            The site.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.LayoutCache.ParentAuthority">
            <summary>
            Gets the parent authority.
            </summary>
            <value>
            The parent authority.
            </value>
        </member>
        <member name="T:Rock.Web.DescriptionList">
            <summary>
            Helps generate Bootstrap Description List HTML (<dl>...</dl>)
            </summary>
        </member>
        <member name="F:Rock.Web.DescriptionList._termDescriptionList">
            <summary>
            The term description list
            </summary>
        </member>
        <member name="M:Rock.Web.DescriptionList.Add(System.String,System.Object,System.Boolean)">
            <summary>
            Adds the specified term.
            </summary>
            <param name="term">The term.</param>
            <param name="description">The description.</param>
            <param name="showIfBlank">if set to <c>true</c> [show if blank].</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.DescriptionList.Add(System.String,System.Nullable{System.DateTime},System.String,System.Boolean)">
            <summary>
            Adds the specified term.
            </summary>
            <param name="term">The term.</param>
            <param name="dateTime">The date time.</param>
            <param name="format">The format.</param>
            <param name="showIfBlank">if set to <c>true</c> [show if blank].</param>
            <returns></returns>
        </member>
        <member name="P:Rock.Web.DescriptionList.Html">
            <summary>
            Gets the HTML.
            </summary>
            <value>
            The HTML.
            </value>
        </member>
        <member name="T:Rock.Web.UI.Adapters.CheckBoxListAdapter">
            <summary>
            Control adapter for checkbox list
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Adapters.CheckBoxListAdapter.RenderBeginTag(System.Web.UI.HtmlTextWriter)">
            <summary>
            Creates the beginning tag for the Web control in the markup that is transmitted to the target browser.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter" /> containing methods to render the target-specific output.</param>
        </member>
        <member name="M:Rock.Web.UI.Adapters.CheckBoxListAdapter.RenderEndTag(System.Web.UI.HtmlTextWriter)">
            <summary>
            Creates the ending tag for the Web control in the markup that is transmitted to the target browser.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter" /> containing methods to render the target-specific output.</param>
        </member>
        <member name="M:Rock.Web.UI.Adapters.CheckBoxListAdapter.RenderContents(System.Web.UI.HtmlTextWriter)">
            <summary>
            Generates the target-specific inner markup for the Web control to which the control adapter is attached.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter" /> containing methods to render the target-specific output.</param>
        </member>
        <member name="T:Rock.Web.UI.Controls.BootstrapButton">
            <summary>
            A Bootstrap LinkButton as per http://getbootstrap.com/javascript/#buttons can 
            disable itself on click and display some loading text. Useful for preventing
            a button click action from happening more than once.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.BootstrapButton.RenderControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            Outputs server control content to a provided <see cref="T:System.Web.UI.HtmlTextWriter" /> object and stores tracing information about the control if tracing is enabled.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter" /> object that receives the control content.</param>
        </member>
        <member name="P:Rock.Web.UI.Controls.BootstrapButton.DataLoadingText">
            <summary>
            Gets or sets text to use when the button has been clicked.
            </summary>
            <value>
            The button text
            </value>
        </member>
        <member name="T:Rock.Web.UI.Controls.CheckinGroupEditor">
            <summary>
            Report Filter control
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.CheckinGroupEditor.OnInit(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.Init" /> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs" /> object that contains the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.CheckinGroupEditor.OnLoad(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.Load" /> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs" /> object that contains the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.CheckinGroupEditor.HandleGridEvents">
            <summary>
            Handles the grid events.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.CheckinGroupEditor.GetGroup">
            <summary>
            Gets or sets the group.
            </summary>
            <value>
            The group.
            </value>
        </member>
        <member name="M:Rock.Web.UI.Controls.CheckinGroupEditor.SetGroup(Rock.Model.Group)">
            <summary>
            Sets the group.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.CheckinGroupEditor.CreateChildControls">
            <summary>
            Called by the ASP.NET page framework to notify server controls that use composition-based implementation to create any child controls they contain in preparation for posting back or rendering.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.CheckinGroupEditor.CreateLocationsGrid">
            <summary>
            Creates the locations grid.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.CheckinGroupEditor.DeleteLocation_Click(System.Object,Rock.Web.UI.Controls.RowEventArgs)">
            <summary>
            Handles the Click event of the DeleteLocation control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:Rock.Web.UI.Controls.RowEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.CheckinGroupEditor.AddLocation_Click(System.Object,System.EventArgs)">
            <summary>
            Handles the Click event of the AddLocation control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.CheckinGroupEditor.RenderControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            Writes the <see cref="T:System.Web.UI.WebControls.CompositeControl" /> content to the specified <see cref="T:System.Web.UI.HtmlTextWriter" /> object, for display on the client.
            </summary>
            <param name="writer">An <see cref="T:System.Web.UI.HtmlTextWriter" /> that represents the output stream to render HTML content on the client.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.CheckinGroupEditor.CreateGroupAttributeControls(Rock.Model.Group)">
            <summary>
            Creates the group attribute controls.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.CheckinGroupEditor.lbDeleteGroup_Click(System.Object,System.EventArgs)">
            <summary>
            Handles the Click event of the lbDeleteGroup control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:Rock.Web.UI.Controls.CheckinGroupEditor.ForceContentVisible">
            <summary>
            Gets or sets a value indicating whether [force content visible].
            </summary>
            <value>
              <c>true</c> if [force content visible]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.CheckinGroupEditor.IsDeleteEnabled">
            <summary>
            Gets or sets a value indicating whether this instance is delete enabled.
            </summary>
            <value>
            <c>true</c> if this instance is delete enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.CheckinGroupEditor.Locations">
            <summary>
            Gets or sets the locations.
            </summary>
            <value>
            The locations.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.CheckinGroupEditor.GroupGuid">
            <summary>
            Gets the group unique identifier.
            </summary>
            <value>
            The group unique identifier.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.CheckinGroupEditor.GroupTypeId">
            <summary>
            Gets the group type unique identifier.
            </summary>
            <value>
            The group type unique identifier.
            </value>
        </member>
        <member name="E:Rock.Web.UI.Controls.CheckinGroupEditor.DeleteGroupClick">
            <summary>
            Occurs when [delete group click].
            </summary>
        </member>
        <member name="E:Rock.Web.UI.Controls.CheckinGroupEditor.DeleteLocationClick">
            <summary>
            Occurs when [delete location click].
            </summary>
        </member>
        <member name="E:Rock.Web.UI.Controls.CheckinGroupEditor.AddLocationClick">
            <summary>
            Occurs when [add location click].
            </summary>
        </member>
        <member name="T:Rock.Web.UI.Controls.CheckinGroupEditor.LocationGridItem">
            <summary>
            
            </summary>
        </member>
        <member name="P:Rock.Web.UI.Controls.CheckinGroupEditor.LocationGridItem.LocationId">
            <summary>
            Gets or sets the location unique identifier.
            </summary>
            <value>
            The location unique identifier.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.CheckinGroupEditor.LocationGridItem.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="T:Rock.Web.UI.Controls.CheckinGroupTypeEditor">
            <summary>
            Report Filter control
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.CheckinGroupTypeEditor.OnInit(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.Init" /> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs" /> object that contains the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.CheckinGroupTypeEditor.OnLoad(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.Load" /> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs" /> object that contains the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.CheckinGroupTypeEditor.HandleGridEvents">
            <summary>
            Handles the grid events.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.CheckinGroupTypeEditor.GetCheckinGroupType">
            <summary>
            Gets the type of the checkin group.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.UI.Controls.CheckinGroupTypeEditor.SetGroupType(Rock.Model.GroupType)">
            <summary>
            Sets the type of the group.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.CheckinGroupTypeEditor.GetCheckinLabelAttributes(Rock.Model.GroupType)">
            <summary>
            Gets the checkin label attribute keys.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.UI.Controls.CheckinGroupTypeEditor.CreateChildControls">
            <summary>
            Called by the ASP.NET page framework to notify server controls that use composition-based implementation to create any child controls they contain in preparation for posting back or rendering.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.CheckinGroupTypeEditor.CreateCheckinLabelsGrid">
            <summary>
            Creates the checkin labels grid.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.CheckinGroupTypeEditor.DeleteCheckinLabel_Click(System.Object,Rock.Web.UI.Controls.RowEventArgs)">
            <summary>
            Handles the Click event of the DeleteCheckinLabel control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:Rock.Web.UI.Controls.RowEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.CheckinGroupTypeEditor.AddCheckinLabel_Click(System.Object,System.EventArgs)">
            <summary>
            Handles the Click event of the AddCheckinLabel control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.CheckinGroupTypeEditor.ddlGroupTypeInheritFrom_SelectedIndexChanged(System.Object,System.EventArgs)">
            <summary>
            Handles the SelectedIndexChanged event of the ddlGroupTypeInheritFrom control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.CheckinGroupTypeEditor.RenderControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            Writes the <see cref="T:System.Web.UI.WebControls.CompositeControl" /> content to the specified <see cref="T:System.Web.UI.HtmlTextWriter" /> object, for display on the client.
            </summary>
            <param name="writer">An <see cref="T:System.Web.UI.HtmlTextWriter" /> that represents the output stream to render HTML content on the client.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.CheckinGroupTypeEditor.CreateGroupTypeAttributeControls">
            <summary>
            Creates the group type attribute controls.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.CheckinGroupTypeEditor.lbDeleteGroupType_Click(System.Object,System.EventArgs)">
            <summary>
            Handles the Click event of the lbDeleteGroupType control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.CheckinGroupTypeEditor.lbAddGroup_Click(System.Object,System.EventArgs)">
            <summary>
            Handles the Click event of the lbAddGroup control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.CheckinGroupTypeEditor.lbAddCheckinGroupType_Click(System.Object,System.EventArgs)">
            <summary>
            Handles the Click event of the lbAddCheckinGroupType control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:Rock.Web.UI.Controls.CheckinGroupTypeEditor.ForceContentVisible">
            <summary>
            Gets or sets a value indicating whether [force content visible].
            </summary>
            <value>
              <c>true</c> if [force content visible]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.CheckinGroupTypeEditor.IsDeleteEnabled">
            <summary>
            Gets or sets a value indicating whether this instance is delete enabled.
            </summary>
            <value>
            <c>true</c> if this instance is delete enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.CheckinGroupTypeEditor.CheckinLabels">
            <summary>
            Gets or sets the checkin labels.
            Key is AttributeKey
            Value is BinaryFileName
            </summary>
            <value>
            The checkin labels.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.CheckinGroupTypeEditor.GroupTypeGuid">
            <summary>
            Gets the group type unique identifier.
            </summary>
            <value>
            The group type unique identifier.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.CheckinGroupTypeEditor.ParentGroupTypeEditor">
            <summary>
            Gets the parent group type editor.
            </summary>
            <value>
            The parent group type editor.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.CheckinGroupTypeEditor.InheritedGroupTypeId">
            <summary>
            Gets the inherited group type unique identifier.
            </summary>
            <value>
            The inherited group type unique identifier.
            </value>
        </member>
        <member name="E:Rock.Web.UI.Controls.CheckinGroupTypeEditor.DeleteGroupTypeClick">
            <summary>
            Occurs when [delete group type click].
            </summary>
        </member>
        <member name="E:Rock.Web.UI.Controls.CheckinGroupTypeEditor.AddGroupClick">
            <summary>
            Occurs when [add group click].
            </summary>
        </member>
        <member name="E:Rock.Web.UI.Controls.CheckinGroupTypeEditor.AddGroupTypeClick">
            <summary>
            Occurs when [add group type click].
            </summary>
        </member>
        <member name="E:Rock.Web.UI.Controls.CheckinGroupTypeEditor.DeleteCheckinLabelClick">
            <summary>
            Occurs when [delete checkin label click].
            </summary>
        </member>
        <member name="E:Rock.Web.UI.Controls.CheckinGroupTypeEditor.AddCheckinLabelClick">
            <summary>
            Occurs when [add checkin label click].
            </summary>
        </member>
        <member name="T:Rock.Web.UI.Controls.CheckinGroupTypeEditor.CheckinLabelAttributeInfo">
            <summary>
            special class for storing CheckinLabel attributes for the grid
            </summary>
        </member>
        <member name="P:Rock.Web.UI.Controls.CheckinGroupTypeEditor.CheckinLabelAttributeInfo.AttributeKey">
            <summary>
            Gets or sets the attribute key.
            </summary>
            <value>
            The attribute key.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.CheckinGroupTypeEditor.CheckinLabelAttributeInfo.BinaryFileId">
            <summary>
            Gets or sets the binary file unique identifier.
            </summary>
            <value>
            The binary file unique identifier.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.CheckinGroupTypeEditor.CheckinLabelAttributeInfo.FileName">
            <summary>
            Gets or sets the name of the file.
            </summary>
            <value>
            The name of the file.
            </value>
        </member>
        <member name="T:Rock.Web.UI.Controls.Communication.ChannelControl">
            <summary>
            abstract class for controls used to render a communication channel
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.Communication.ChannelControl.InitializeFromSender(Rock.Model.Person)">
            <summary>
            On new communicaiton, initializes controls from sender values
            </summary>
            <param name="sender">The sender.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.Communication.ChannelControl.GetDataValue(System.Collections.Generic.Dictionary{System.String,System.String},System.String)">
            <summary>
            Gets the data value.
            </summary>
            <param name="data">The data.</param>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="P:Rock.Web.UI.Controls.Communication.ChannelControl.IsTemplate">
            <summary>
            Gets or sets a value indicating whether the communication is a template.
            </summary>
            <value>
              <c>true</c> if [is template]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.Communication.ChannelControl.ChannelData">
            <summary>
            Gets or sets the channel data.
            </summary>
            <value>
            The channel data.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.Communication.ChannelControl.AdditionalMergeFields">
            <summary>
            Gets or sets any additional merge fields.
            </summary>
        </member>
        <member name="P:Rock.Web.UI.Controls.Communication.ChannelControl.ValidationGroup">
            <summary>
            Gets or sets the validation group.
            </summary>
            <value>
            The validation group.
            </value>
        </member>
        <member name="T:Rock.Data.IgnoreModelErrorsAttribute">
            <summary>
            derived from http://mrbigglesworth79.blogspot.in/2011/12/partial-validation-with-data.html
            </summary>
        </member>
        <member name="M:Rock.Data.IgnoreModelErrorsAttribute.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Data.IgnoreModelErrorsAttribute"/> class.
            </summary>
            <param name="keys">The keys.</param>
        </member>
        <member name="P:Rock.Data.IgnoreModelErrorsAttribute.Keys">
            <summary>
            The keys string
            </summary>
        </member>
        <member name="T:Rock.Model.CommunicationRecipientService">
            <summary>
            Communication Recipient POCO Service class
            </summary>
            <summary>
            CommunicationRecipient Service class
            </summary>
        </member>
        <member name="M:Rock.Model.CommunicationRecipientService.Get(System.Int32,Rock.Model.CommunicationRecipientStatus)">
            <summary>
            Returns a queryable collection of <see cref="T:Rock.Model.CommunicationRecipient">CommunicationRecipients</see> by <see cref="T:Rock.Model.Communication"/> and <see cref="T:Rock.Model.CommunicationRecipientStatus"/>
            </summary>
            <param name="communicationId">A <see cref="T:System.Int32"/> representing the CommunicationId of the <see cref="T:Rock.Model.Communication"/> to search by.</param>
            <param name="status">A <see cref="T:Rock.Model.CommunicationRecipientStatus"/> Enum value representing the status of the communication submission.</param>
            <returns>A queryable collection of <see cref="T:Rock.Model.CommunicationRecipient">CommunicationRecipients</see> for the specified <see cref="T:Rock.Model.Communication"/> and <see cref="T:Rock.Model.CommunicationRecipientStatus"/></returns>
        </member>
        <member name="M:Rock.Model.CommunicationRecipientService.GetByCommunicationId(System.Int32)">
            <summary>
            Gets a queryable collection of <see cref="T:Rock.Model.CommunicationRecipient">CommunicationRecipients</see> by <see cref="T:Rock.Model.Communication"/>.
            </summary>
            <param name="communicationId">A <see cref="T:System.Int32"/> representing the CommunicationId of a  <see cref="T:Rock.Model.Communication"/> to search by.</param>
            <returns>A queryable collection of <see cref="T:Rock.Model.CommunicationRecipient">CommunicationRecipients</see> for the specified <see cref="T:Rock.Model.Communication"/>.</returns>
        </member>
        <member name="M:Rock.Model.CommunicationRecipientService.#ctor(Rock.Data.RockContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.CommunicationRecipientService"/> class
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Rock.Model.CommunicationRecipientService.CanDelete(Rock.Model.CommunicationRecipient,System.String@)">
            <summary>
            Determines whether this instance can delete the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="errorMessage">The error message.</param>
            <returns>
              <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Rock.Security.LoginParameters">
            <summary>
            
            </summary>
        </member>
        <member name="P:Rock.Security.LoginParameters.Username">
            <summary>
            Gets or sets the username.
            </summary>
            <value>
            The username.
            </value>
        </member>
        <member name="P:Rock.Security.LoginParameters.Password">
            <summary>
            Gets or sets the password.
            </summary>
            <value>
            The password.
            </value>
        </member>
        <member name="T:Rock.CheckIn.CheckInBlock">
            <summary>
            A RockBlock specific to check-in
            </summary>
        </member>
        <member name="F:Rock.CheckIn.CheckInBlock.CurrentGroupTypeIds">
            <summary>
            The current group type ids
            </summary>
        </member>
        <member name="F:Rock.CheckIn.CheckInBlock.CurrentCheckInState">
            <summary>
            The current check-in state
            </summary>
        </member>
        <member name="F:Rock.CheckIn.CheckInBlock.CurrentWorkflow">
            <summary>
            The current workflow
            </summary>
        </member>
        <member name="M:Rock.CheckIn.CheckInBlock.OnInit(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.Init" /> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs" /> object that contains the event data.</param>
        </member>
        <member name="M:Rock.CheckIn.CheckInBlock.ProcessActivity(System.String,System.Collections.Generic.List{System.String}@)">
            <summary>
            Activates and processes a workflow activity.  If the workflow has not yet been activated, it will
            also be activated
            </summary>
            <param name="activityName">Name of the activity.</param>
            <param name="errorMessages">The error messages.</param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:Rock.CheckIn.CheckInBlock.SaveState">
            <summary>
            Saves the current state of the kiosk and workflow
            </summary>
        </member>
        <member name="M:Rock.CheckIn.CheckInBlock.ProcessSelection(Rock.Web.UI.Controls.ModalAlert)">
            <summary>
            Processes the selection, save state and navigates to the next page if no errors
            are encountered during processing the activity.
            </summary>
            <param name="modalAlert">The modal alert control to show if errors occur.</param>
            <returns>a list of errors encountered during processing the activity</returns>
        </member>
        <member name="M:Rock.CheckIn.CheckInBlock.ProcessSelection(Rock.Web.UI.Controls.ModalAlert,System.Func{System.Boolean},System.String)">
            <summary>
            Processes the selection, save state and navigates to the next page if no errors
            are encountered during processing the activity.  
            </summary>
            <param name="modalAlert">The modal alert control to show if errors occur.</param>
            <param name="doNotProceedCondition">A condition that must be met after processing
            the activity in order to save state and continue to the next page.</param>
            <param name="conditionMessage">The message to display in the modal if the condition fails.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.CheckIn.CheckInBlock.GoBack">
            <summary>
            Do nothing (such as unselecting something) but simply return to previous screen.
            </summary>
        </member>
        <member name="M:Rock.CheckIn.CheckInBlock.CancelCheckin">
            <summary>
            Cancels the check-in.
            </summary>
        </member>
        <member name="M:Rock.CheckIn.CheckInBlock.NavigateToHomePage">
            <summary>
            Navigates to the check-in home page.
            </summary>
        </member>
        <member name="M:Rock.CheckIn.CheckInBlock.NavigateToNextPage">
            <summary>
            Navigates to next page.
            </summary>
        </member>
        <member name="M:Rock.CheckIn.CheckInBlock.NavigateToPreviousPage">
            <summary>
            Navigates to previous page.
            </summary>
        </member>
        <member name="P:Rock.CheckIn.CheckInBlock.CurrentKioskId">
            <summary>
            The current kiosk id
            </summary>
        </member>
        <member name="P:Rock.CheckIn.CheckInBlock.KioskCurrentlyActive">
            <summary>
            Gets a value indicating whether the kiosk has active group types and locations that 
            are open for check-in.
            </summary>
            <value>
            <c>true</c> if kiosk is active; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.CheckIn.CheckInBlock.UserBackedUp">
            <summary>
            Gets a value indicating whether page was navigated to by user selecting Back.
            </summary>
            <value>
              <c>true</c> if [backing up]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Rock.CheckIn.CheckInBlock.CheckInCookie">
            <summary>
            Holds cookie names shared across certain check-in blocks.
            </summary>
        </member>
        <member name="F:Rock.CheckIn.CheckInBlock.CheckInCookie.DEVICEID">
            <summary>
            The name of the cookie that holds the DeviceId. Setters of this cookie should
            be sure to set the expiration to a time when the device is no longer valid.
            </summary>
        </member>
        <member name="F:Rock.CheckIn.CheckInBlock.CheckInCookie.ISMOBILE">
            <summary>
            The name of the cookie that holds whether or not the device was a mobile device.
            </summary>
        </member>
        <member name="T:Rock.CheckIn.CheckInFamily">
            <summary>
            A family option for the current check-in
            </summary>
        </member>
        <member name="M:Rock.CheckIn.CheckInFamily.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.CheckIn.CheckInFamily"/> class.
            </summary>
        </member>
        <member name="M:Rock.CheckIn.CheckInFamily.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Rock.CheckIn.CheckInFamily.Group">
            <summary>
            Gets or sets the group.
            </summary>
            <value>
            The group.
            </value>
        </member>
        <member name="P:Rock.CheckIn.CheckInFamily.Selected">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Rock.CheckIn.CheckInFamily"/> is selected for check-in
            </summary>
            <value>
              <c>true</c> if selected; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.CheckIn.CheckInFamily.People">
            <summary>
            Gets or sets the people that this family can check-in
            </summary>
            <value>
            The people.
            </value>
        </member>
        <member name="P:Rock.CheckIn.CheckInFamily.Caption">
            <summary>
            An optional value that can be set to display family name.  If not set, the Group name will be used
            </summary>
        </member>
        <member name="P:Rock.CheckIn.CheckInFamily.SubCaption">
            <summary>
            Gets or sets the sub caption.
            </summary>
            <value>
            The sub caption.
            </value>
        </member>
        <member name="T:Rock.CheckIn.CheckInGroup">
            <summary>
            A group option for the current check-in
            </summary>
        </member>
        <member name="M:Rock.CheckIn.CheckInGroup.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.CheckIn.CheckInGroup"/> class.
            </summary>
        </member>
        <member name="M:Rock.CheckIn.CheckInGroup.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Rock.CheckIn.CheckInGroup.ToLiquid">
            <summary>
            To the liquid.
            </summary>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="P:Rock.CheckIn.CheckInGroup.Group">
            <summary>
            Gets or sets the group.
            </summary>
            <value>
            The group.
            </value>
        </member>
        <member name="P:Rock.CheckIn.CheckInGroup.PreSelected">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Rock.CheckIn.CheckInPerson"/> was pre-selected by a check-in action.
            </summary>
            <value>
              <c>true</c> if preselected; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.CheckIn.CheckInGroup.Selected">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Rock.CheckIn.CheckInGroup"/> is selected for check-in
            </summary>
            <value>
              <c>true</c> if selected; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.CheckIn.CheckInGroup.LastCheckIn">
            <summary>
            Gets or sets the last time person checked into this group for any of the schedules
            </summary>
            <value>
            The last check-in.
            </value>
        </member>
        <member name="P:Rock.CheckIn.CheckInGroup.Locations">
            <summary>
            Gets or sets the locations that are available for the current group
            </summary>
            <value>
            The locations.
            </value>
        </member>
        <member name="T:Rock.CheckIn.CheckInGroupType">
            <summary>
            A group type option for the current check-in
            </summary>
        </member>
        <member name="M:Rock.CheckIn.CheckInGroupType.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.CheckIn.CheckInGroupType"/> class.
            </summary>
        </member>
        <member name="M:Rock.CheckIn.CheckInGroupType.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Rock.CheckIn.CheckInGroupType.ToLiquid">
            <summary>
            To the liquid.
            </summary>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="P:Rock.CheckIn.CheckInGroupType.GroupType">
            <summary>
            Gets or sets the type of the group.
            </summary>
            <value>
            The type of the group.
            </value>
        </member>
        <member name="P:Rock.CheckIn.CheckInGroupType.PreSelected">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Rock.CheckIn.CheckInPerson"/> was pre-selected by a check-in action.
            </summary>
            <value>
              <c>true</c> if preselected; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.CheckIn.CheckInGroupType.Selected">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Rock.CheckIn.CheckInGroupType"/> is selected for check-in
            </summary>
            <value>
              <c>true</c> if selected; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.CheckIn.CheckInGroupType.LastCheckIn">
            <summary>
            Gets or sets the last time person checked in to any of the Locations for this group type
            </summary>
            <value>
            The last check-in.
            </value>
        </member>
        <member name="P:Rock.CheckIn.CheckInGroupType.Groups">
            <summary>
            Gets or sets the groups that are of the current group type
            </summary>
            <value>
            The locations.
            </value>
        </member>
        <member name="P:Rock.CheckIn.CheckInGroupType.Labels">
            <summary>
            Gets or sets the labels to be printed after succesful check-in
            </summary>
            <value>
            The labels.
            </value>
        </member>
        <member name="T:Rock.CheckIn.CheckInLocation">
            <summary>
            A location option for the current check-in
            </summary>
        </member>
        <member name="M:Rock.CheckIn.CheckInLocation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.CheckIn.CheckInLocation"/> class.
            </summary>
        </member>
        <member name="M:Rock.CheckIn.CheckInLocation.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Rock.CheckIn.CheckInLocation.ToLiquid">
            <summary>
            To the liquid.
            </summary>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="P:Rock.CheckIn.CheckInLocation.Location">
            <summary>
            Gets or sets the location.
            </summary>
            <value>
            The location.
            </value>
        </member>
        <member name="P:Rock.CheckIn.CheckInLocation.CurrentCount">
            <summary>
            Gets or sets the current count.
            </summary>
            <value>
            The current count.
            </value>
        </member>
        <member name="P:Rock.CheckIn.CheckInLocation.PreSelected">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Rock.CheckIn.CheckInPerson"/> was pre-selected by a check-in action.
            </summary>
            <value>
              <c>true</c> if preselected; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.CheckIn.CheckInLocation.Selected">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Rock.CheckIn.CheckInLocation"/> is selected for check-in
            </summary>
            <value>
              <c>true</c> if selected; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.CheckIn.CheckInLocation.LastCheckIn">
            <summary>
            Gets or sets the last time person checked into any of the groups for this location and group type
            </summary>
            <value>
            The last check-in.
            </value>
        </member>
        <member name="P:Rock.CheckIn.CheckInLocation.Schedules">
            <summary>
            Gets or sets the schedules that are available for the current group location
            </summary>
            <value>
            The schedules.
            </value>
        </member>
        <member name="T:Rock.CheckIn.CheckInPerson">
            <summary>
            A person option for the current check-in
            </summary>
        </member>
        <member name="M:Rock.CheckIn.CheckInPerson.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.CheckIn.CheckInPerson"/> class.
            </summary>
        </member>
        <member name="M:Rock.CheckIn.CheckInPerson.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Rock.CheckIn.CheckInPerson.ToLiquid">
            <summary>
            To the liquid.
            </summary>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="P:Rock.CheckIn.CheckInPerson.Person">
            <summary>
            Gets or sets the person.
            </summary>
            <value>
            The person.
            </value>
        </member>
        <member name="P:Rock.CheckIn.CheckInPerson.FamilyMember">
            <summary>
            Gets or sets a value indicating whether this person is a part of the family (vs. from a relationship).
            </summary>
            <value>
              <c>true</c> if family member; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.CheckIn.CheckInPerson.PreSelected">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Rock.CheckIn.CheckInPerson"/> was pre-selected by a check-in action.
            </summary>
            <value>
              <c>true</c> if preselected; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.CheckIn.CheckInPerson.Selected">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Rock.CheckIn.CheckInPerson"/> was selected for check-in.
            </summary>
            <value>
              <c>true</c> if selected; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.CheckIn.CheckInPerson.LastCheckIn">
            <summary>
            Gets or sets the last time person checked in to any of the GroupTypes
            </summary>
            <value>
            The last check-in.
            </value>
        </member>
        <member name="P:Rock.CheckIn.CheckInPerson.SecurityCode">
            <summary>
            Gets or sets the the unique code for check-in labels
            </summary>
            <value>
            The security code.
            </value>
        </member>
        <member name="P:Rock.CheckIn.CheckInPerson.GroupTypes">
            <summary>
            Gets or sets the group types available for the current person.
            </summary>
            <value>
            The group types.
            </value>
        </member>
        <member name="T:Rock.CheckIn.CheckInSchedule">
            <summary>
            A schedule options for the current check-in
            </summary>
        </member>
        <member name="M:Rock.CheckIn.CheckInSchedule.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Rock.CheckIn.CheckInSchedule.ToLiquid">
            <summary>
            To the liquid.
            </summary>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="P:Rock.CheckIn.CheckInSchedule.Schedule">
            <summary>
            Gets or sets the schedule.
            </summary>
            <value>
            The schedule.
            </value>
        </member>
        <member name="P:Rock.CheckIn.CheckInSchedule.StartTime">
            <summary>
            Gets the start time.
            </summary>
            <value>
            The start time.
            </value>
        </member>
        <member name="P:Rock.CheckIn.CheckInSchedule.LastCheckIn">
            <summary>
            Gets or sets the last time person checked into this schedule for the selected group type, location and group 
            </summary>
            <value>
            The last check-in.
            </value>
        </member>
        <member name="P:Rock.CheckIn.CheckInSchedule.PreSelected">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Rock.CheckIn.CheckInPerson"/> was pre-selected by a check-in action.
            </summary>
            <value>
              <c>true</c> if preselected; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.CheckIn.CheckInSchedule.Selected">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Rock.CheckIn.CheckInSchedule"/> is selected for check-in
            </summary>
            <value>
              <c>true</c> if selected; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Rock.CheckIn.CheckInState">
            <summary>
            Object for maintaining the state of a check-in kiosk and workflow
            </summary>
        </member>
        <member name="M:Rock.CheckIn.CheckInState.#ctor(System.Int32,System.Collections.Generic.List{System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.CheckIn.CheckInState"/> class.
            </summary>
            <param name="deviceId">The device id.</param>
            <param name="configuredGroupTypes">The configured group types.</param>
        </member>
        <member name="M:Rock.CheckIn.CheckInState.FromJson(System.String)">
            <summary>
            Creates a new CheckInState object Froms a json string.
            </summary>
            <param name="json">The json.</param>
            <returns></returns>
        </member>
        <member name="P:Rock.CheckIn.CheckInState.DeviceId">
            <summary>
            Gets or sets the device id
            </summary>
            <value>
            The device id.
            </value>
        </member>
        <member name="P:Rock.CheckIn.CheckInState.ConfiguredGroupTypes">
            <summary>
            Gets or sets the configured group types.
            </summary>
            <value>
            The configured group types.
            </value>
        </member>
        <member name="P:Rock.CheckIn.CheckInState.Kiosk">
            <summary>
            Gets the kiosk.
            </summary>
            <value>
            The kiosk.
            </value>
        </member>
        <member name="P:Rock.CheckIn.CheckInState.CheckIn">
            <summary>
            Gets or sets the check-in status
            </summary>
            <value>
            The check-in.
            </value>
        </member>
        <member name="T:Rock.CheckIn.CheckInStatus">
            <summary>
            The status of the currently active check-in.  Contains all the available options
            and the values selected for check-in
            </summary>
        </member>
        <member name="M:Rock.CheckIn.CheckInStatus.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.CheckIn.CheckInStatus"/> class.
            </summary>
        </member>
        <member name="P:Rock.CheckIn.CheckInStatus.UserEnteredSearch">
            <summary>
            Gets or sets a value indicating whether the search value was entered by a user (vs. scanned)
            </summary>
            <value>
              <c>true</c> if user entered search; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.CheckIn.CheckInStatus.ConfirmSingleFamily">
            <summary>
            Gets or sets a value indicating if a single family result should be confirmed 
            by user.  Usually the user entered values will need to be confirmed, while the 
            scanned values are more unique and will not need to be confirmed
            </summary>
            <value>
              <c>true</c> if confirm single family; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.CheckIn.CheckInStatus.SearchType">
            <summary>
            Gets or sets the type of value that was scanned or entered (i.e. "Barcode",  
            "Phone Number", etc)
            </summary>
            <value>
            The type of the search.
            </value>
        </member>
        <member name="P:Rock.CheckIn.CheckInStatus.SearchValue">
            <summary>
            Gets or sets the search value that was scanned or entered by user
            </summary>
            <value>
            The search value.
            </value>
        </member>
        <member name="P:Rock.CheckIn.CheckInStatus.Families">
            <summary>
            Gets or sets the families that match the search value
            </summary>
            <value>
            The families.
            </value>
        </member>
        <member name="T:Rock.CheckIn.CheckInLabel">
            <summary>
            The label details
            </summary>
        </member>
        <member name="M:Rock.CheckIn.CheckInLabel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.CheckIn.CheckInLabel"/> class.
            </summary>
        </member>
        <member name="M:Rock.CheckIn.CheckInLabel.#ctor(Rock.CheckIn.KioskLabel,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.CheckIn.CheckInLabel"/> class.
            </summary>
            <param name="kioskLabel">The label.</param>
            <param name="mergeObjects">The merge objects.</param>
        </member>
        <member name="P:Rock.CheckIn.CheckInLabel.PrinterDeviceId">
            <summary>
            Gets or sets the printer device id.
            </summary>
            <value>
            The printer address.
            </value>
        </member>
        <member name="P:Rock.CheckIn.CheckInLabel.PrinterAddress">
            <summary>
            Gets or sets the printer address.
            </summary>
            <value>
            The printer address.
            </value>
        </member>
        <member name="P:Rock.CheckIn.CheckInLabel.PrintFrom">
            <summary>
            Gets or sets the print from.
            </summary>
            <value>
            The print from.
            </value>
        </member>
        <member name="P:Rock.CheckIn.CheckInLabel.PrintTo">
            <summary>
            Gets or sets the print to.
            </summary>
            <value>
            The print to.
            </value>
        </member>
        <member name="P:Rock.CheckIn.CheckInLabel.FileId">
            <summary>
            Gets or sets the file id.
            </summary>
            <value>
            The file id.
            </value>
        </member>
        <member name="P:Rock.CheckIn.CheckInLabel.LabelFile">
            <summary>
            Gets or sets the label file.
            </summary>
            <value>
            The label file.
            </value>
        </member>
        <member name="P:Rock.CheckIn.CheckInLabel.LabelKey">
            <summary>
            Gets or sets the label key.
            </summary>
            <value>
            The label key.
            </value>
        </member>
        <member name="P:Rock.CheckIn.CheckInLabel.MergeFields">
            <summary>
            Gets or sets the merge fields.
            </summary>
            <value>
            The merge fields.
            </value>
        </member>
        <member name="T:Rock.CheckIn.KioskLabel">
            <summary>
            Cached Check-in Label
            </summary>
        </member>
        <member name="M:Rock.CheckIn.KioskLabel.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:Rock.CheckIn.KioskLabel"/> class from being created.
            </summary>
        </member>
        <member name="M:Rock.CheckIn.KioskLabel.CacheKey(System.Int32)">
            <summary>
            Caches the key.
            </summary>
            <param name="id">The id.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.CheckIn.KioskLabel.Read(System.Int32)">
            <summary>
            Reads the specified label by id.
            </summary>
            <param name="id">The id.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.CheckIn.KioskLabel.Flush(System.Int32)">
            <summary>
            Flushes the specified id.
            </summary>
            <param name="id">The id.</param>
        </member>
        <member name="P:Rock.CheckIn.KioskLabel.Guid">
            <summary>
            Gets or sets the GUID.
            </summary>
            <value>
            The GUID.
            </value>
        </member>
        <member name="P:Rock.CheckIn.KioskLabel.Url">
            <summary>
            Gets or sets the URL.
            </summary>
            <value>
            The URL.
            </value>
        </member>
        <member name="P:Rock.CheckIn.KioskLabel.FileContent">
            <summary>
            Gets or sets the content of the file.
            </summary>
            <value>
            The content of the file.
            </value>
        </member>
        <member name="P:Rock.CheckIn.KioskLabel.MergeFields">
            <summary>
            Gets or sets the merge fields.
            </summary>
            <value>
            The merge fields.
            </value>
        </member>
        <member name="T:Rock.CheckIn.KioskLocationAttendance">
            <summary>
            Helper class for storing the current attendance for a given kiosk location
            </summary>
        </member>
        <member name="M:Rock.CheckIn.KioskLocationAttendance.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:Rock.CheckIn.KioskLocationAttendance"/> class from being created.
            </summary>
        </member>
        <member name="M:Rock.CheckIn.KioskLocationAttendance.CacheKey(System.Int32)">
            <summary>
            Caches the key.
            </summary>
            <param name="id">The id.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.CheckIn.KioskLocationAttendance.Read(System.Int32)">
            <summary>
            Reads the specified id.
            </summary>
            <param name="id">The id.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.CheckIn.KioskLocationAttendance.Flush(System.Int32)">
            <summary>
            Flushes the specified id.
            </summary>
            <param name="id">The id.</param>
        </member>
        <member name="M:Rock.CheckIn.KioskLocationAttendance.AddAttendance(Rock.Model.Attendance)">
            <summary>
            Adds the attendance.
            </summary>
            <param name="attendance">The attendance.</param>
        </member>
        <member name="M:Rock.CheckIn.KioskLocationAttendance.AddAttendanceRecord(Rock.CheckIn.KioskLocationAttendance,Rock.Model.Attendance)">
            <summary>
            Adds the attendance record.
            </summary>
            <param name="kioskLocationAttendance">The kiosk location attendance.</param>
            <param name="attendance">The attendance.</param>
        </member>
        <member name="P:Rock.CheckIn.KioskLocationAttendance.LocationId">
            <summary>
            Gets or sets the location id.
            </summary>
            <value>
            The location id.
            </value>
        </member>
        <member name="P:Rock.CheckIn.KioskLocationAttendance.LocationName">
            <summary>
            Gets or sets the name of the location.
            </summary>
            <value>
            The name of the location.
            </value>
        </member>
        <member name="P:Rock.CheckIn.KioskLocationAttendance.Groups">
            <summary>
            Gets or sets the groups.
            </summary>
            <value>
            The groups.
            </value>
        </member>
        <member name="P:Rock.CheckIn.KioskLocationAttendance.DistinctPersonIds">
            <summary>
            Gets the distinct person ids.
            </summary>
            <value>
            The distinct person ids.
            </value>
        </member>
        <member name="P:Rock.CheckIn.KioskLocationAttendance.CurrentCount">
            <summary>
            Gets the current count.
            </summary>
            <value>
            The current count.
            </value>
        </member>
        <member name="T:Rock.CheckIn.KioskGroupAttendance">
            <summary>
            Helper class for storing the current attendance for a given kiosk group
            </summary>
        </member>
        <member name="P:Rock.CheckIn.KioskGroupAttendance.GroupId">
            <summary>
            Gets or sets the group id.
            </summary>
            <value>
            The group id.
            </value>
        </member>
        <member name="P:Rock.CheckIn.KioskGroupAttendance.GroupName">
            <summary>
            Gets or sets the name of the group.
            </summary>
            <value>
            The name of the group.
            </value>
        </member>
        <member name="P:Rock.CheckIn.KioskGroupAttendance.Schedules">
            <summary>
            Gets or sets the schedules.
            </summary>
            <value>
            The schedules.
            </value>
        </member>
        <member name="P:Rock.CheckIn.KioskGroupAttendance.DistinctPersonIds">
            <summary>
            Gets the distinct person ids.
            </summary>
            <value>
            The distinct person ids.
            </value>
        </member>
        <member name="P:Rock.CheckIn.KioskGroupAttendance.CurrentCount">
            <summary>
            Gets the current count.
            </summary>
            <value>
            The current count.
            </value>
        </member>
        <member name="T:Rock.CheckIn.KioskScheduleAttendance">
            <summary>
            Helper class for storing the current attendance for a given kiosk schedule
            </summary>
        </member>
        <member name="P:Rock.CheckIn.KioskScheduleAttendance.ScheduleId">
            <summary>
            Gets or sets the schedule id.
            </summary>
            <value>
            The schedule id.
            </value>
        </member>
        <member name="P:Rock.CheckIn.KioskScheduleAttendance.ScheduleName">
            <summary>
            Gets or sets the name of the schedule.
            </summary>
            <value>
            The name of the schedule.
            </value>
        </member>
        <member name="P:Rock.CheckIn.KioskScheduleAttendance.PersonIds">
            <summary>
            Gets or sets the person ids.
            </summary>
            <value>
            The person ids.
            </value>
        </member>
        <member name="P:Rock.CheckIn.KioskScheduleAttendance.DistinctPersonIds">
            <summary>
            Gets the distinct person ids.
            </summary>
            <value>
            The distinct person ids.
            </value>
        </member>
        <member name="P:Rock.CheckIn.KioskScheduleAttendance.CurrentCount">
            <summary>
            Gets the current count.
            </summary>
            <value>
            The current count.
            </value>
        </member>
        <member name="T:Rock.CheckIn.KioskGroup">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.CheckIn.KioskGroup.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.CheckIn.KioskGroup"/> class.
            </summary>
        </member>
        <member name="M:Rock.CheckIn.KioskGroup.#ctor(Rock.Model.Group)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.CheckIn.KioskGroup"/> class.
            </summary>
            <param name="group">The group.</param>
        </member>
        <member name="M:Rock.CheckIn.KioskGroup.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Rock.CheckIn.KioskGroup.Group">
            <summary>
            Gets or sets the group.
            </summary>
            <value>
            The group.
            </value>
        </member>
        <member name="P:Rock.CheckIn.KioskGroup.KioskLocations">
            <summary>
            All locations with active schedules.  Note: the location itself 
            may not be active (i.e. room is closed)
            </summary>
            <value>
            The locations.
            </value>
        </member>
        <member name="T:Rock.CheckIn.KioskGroupType">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.CheckIn.KioskGroupType.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.CheckIn.KioskGroupType"/> class.
            </summary>
        </member>
        <member name="M:Rock.CheckIn.KioskGroupType.#ctor(Rock.Model.GroupType)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.CheckIn.KioskGroupType"/> class.
            </summary>
            <param name="groupType">Type of the group.</param>
        </member>
        <member name="M:Rock.CheckIn.KioskGroupType.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Rock.CheckIn.KioskGroupType.GroupType">
            <summary>
            Gets or sets the type of the group.
            </summary>
            <value>
            The type of the group.
            </value>
        </member>
        <member name="P:Rock.CheckIn.KioskGroupType.NextActiveTime">
            <summary>
            Next time that a location/group/schedule will be active for
            this group type.  If the group type has locations, this time
            will be in the past, if there are no locations, this time would
            be in the future
            </summary>
            <value>
            The next active time.
            </value>
        </member>
        <member name="P:Rock.CheckIn.KioskGroupType.KioskGroups">
            <summary>
            All groups with active schedules
            </summary>
            <value>
            The groups.
            </value>
        </member>
        <member name="T:Rock.CheckIn.KioskLocation">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.CheckIn.KioskLocation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.CheckIn.KioskLocation"/> class.
            </summary>
        </member>
        <member name="M:Rock.CheckIn.KioskLocation.#ctor(Rock.Model.Location)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.CheckIn.KioskLocation"/> class.
            </summary>
            <param name="location">The location.</param>
        </member>
        <member name="M:Rock.CheckIn.KioskLocation.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Rock.CheckIn.KioskLocation.Location">
            <summary>
            Gets or sets the location.
            </summary>
            <value>
            The location.
            </value>
        </member>
        <member name="P:Rock.CheckIn.KioskLocation.KioskSchedules">
            <summary>
            The schedules that are currently active
            </summary>
            <value>
            The schedules.
            </value>
        </member>
        <member name="T:Rock.CheckIn.KioskSchedule">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.CheckIn.KioskSchedule.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.CheckIn.KioskSchedule"/> class.
            </summary>
        </member>
        <member name="M:Rock.CheckIn.KioskSchedule.#ctor(Rock.Model.Schedule)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.CheckIn.KioskSchedule"/> class.
            </summary>
            <param name="schedule">The schedule.</param>
        </member>
        <member name="M:Rock.CheckIn.KioskSchedule.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Rock.CheckIn.KioskSchedule.Schedule">
            <summary>
            Gets or sets the schedule.
            </summary>
            <value>
            The schedule.
            </value>
        </member>
        <member name="P:Rock.CheckIn.KioskSchedule.StartTime">
            <summary>
            Gets the start time.
            </summary>
            <value>
            The start time.
            </value>
        </member>
        <member name="T:Rock.CheckIn.KioskDevice">
            <summary>
            The status of a check-in device.  
            </summary>
        </member>
        <member name="M:Rock.CheckIn.KioskDevice.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:Rock.CheckIn.KioskDevice"/> class from being created.
            </summary>
        </member>
        <member name="M:Rock.CheckIn.KioskDevice.#ctor(Rock.Model.Device)">
            <summary>
            Prevents a default instance of the <see cref="T:Rock.CheckIn.KioskDevice"/> class from being created.
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="M:Rock.CheckIn.KioskDevice.FilteredGroupTypes(System.Collections.Generic.List{System.Int32})">
            <summary>
            Subset of the KioskGroupTypes
            </summary>
            <param name="configuredGroupTypes">The current group types.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.CheckIn.KioskDevice.HasLocations(System.Collections.Generic.List{System.Int32})">
            <summary>
            Gets a value indicating whether this instance has active locations.
            </summary>
            <value>
            <c>true</c> if this instance has active locations; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Rock.CheckIn.KioskDevice.HasActiveLocations(System.Collections.Generic.List{System.Int32})">
            <summary>
            Gets a value indicating whether this instance has active locations.
            </summary>
            <value>
            <c>true</c> if this instance has active locations; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Rock.CheckIn.KioskDevice.CacheKey(System.Int32)">
            <summary>
            Caches the key.
            </summary>
            <param name="id">The id.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.CheckIn.KioskDevice.Read(System.Int32,System.Collections.Generic.List{System.Int32})">
            <summary>
            Reads the device by id.
            </summary>
            <param name="id">The id.</param>
            <param name="configuredGroupTypes">The configured group types.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.CheckIn.KioskDevice.Flush(System.Int32)">
            <summary>
            Flushes the specified id.
            </summary>
            <param name="id">The id.</param>
        </member>
        <member name="M:Rock.CheckIn.KioskDevice.LoadKioskLocations(Rock.CheckIn.KioskDevice,Rock.Model.Location)">
            <summary>
            Loads the kiosk locations.
            </summary>
            <param name="kioskDevice">The kiosk device.</param>
            <param name="location">The location.</param>
        </member>
        <member name="P:Rock.CheckIn.KioskDevice.Device">
            <summary>
            Gets or sets the device.
            </summary>
            <value>
            The device.
            </value>
        </member>
        <member name="P:Rock.CheckIn.KioskDevice.KioskGroupTypes">
            <summary>
            The group types associated with this kiosk
            </summary>
            <value>
            The group types.
            </value>
        </member>
        <member name="T:Rock.Communication.ChannelComponent">
            <summary>
            Base class for components communication channels (i.e. email, sms, twitter, etc) 
            </summary>
        </member>
        <member name="M:Rock.Communication.ChannelComponent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Communication.ChannelComponent"/> class.
            </summary>
        </member>
        <member name="M:Rock.Communication.ChannelComponent.GetHtmlPreview(Rock.Model.Communication,Rock.Model.Person)">
            <summary>
            Gets the HTML preview.
            </summary>
            <param name="communication">The communication.</param>
            <param name="person">The person.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Communication.ChannelComponent.GetMessageDetails(Rock.Model.Communication)">
            <summary>
            Gets the read-only message details.
            </summary>
            <param name="communication">The communication.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Communication.ChannelComponent.Send(Rock.Model.Communication)">
            <summary>
            Sends the specified communication.
            </summary>
            <param name="communication">The communication.</param>
        </member>
        <member name="P:Rock.Communication.ChannelComponent.Control">
            <summary>
            Gets the control path.
            </summary>
            <value>
            The control path.
            </value>
        </member>
        <member name="P:Rock.Communication.ChannelComponent.Transport">
            <summary>
            Gets the transport.
            </summary>
            <value>
            The transport.
            </value>
        </member>
        <member name="T:Rock.Communication.Channel.Sms">
            <summary>
            An SMS communication
            </summary>
        </member>
        <member name="M:Rock.Communication.Channel.Sms.GetHtmlPreview(Rock.Model.Communication,Rock.Model.Person)">
            <summary>
            Gets the HTML preview.
            </summary>
            <param name="communication">The communication.</param>
            <param name="person">The person.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Communication.Channel.Sms.GetMessageDetails(Rock.Model.Communication)">
            <summary>
            Gets the read-only message details.
            </summary>
            <param name="communication">The communication.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Communication.Channel.Sms.ProcessResponse(System.String,System.String,System.String)">
            <summary>
            Process inbound messages that are sent to a SMS number.
            </summary>
            <param name="toPhone">The phone number a message is sent to.</param>
            <param name="fromPhone">The phone number a message is sent from.</param>
            <param name="message">The message that was sent.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Communication.Channel.Sms.CreateCommunication(System.Int32,System.String,System.Int32,System.String,System.String,System.String,Rock.Data.RockContext)">
            <summary>
            Creates a new communication.
            </summary>
            <param name="fromPersonId">Person ID of the sender.</param>
            <param name="fromPersonName">Name of from person.</param>
            <param name="toPersonId">The Person ID of the recipient.</param>
            <param name="message">The message to send.</param>
            <param name="transportPhone">The transport phone.</param>
            <param name="responseCode">The reponseCode to use for tracking the conversation.</param>
            <param name="rockContext">A context to use for database calls.</param>
        </member>
        <member name="M:Rock.Communication.Channel.Sms.GenerateResponseCode(Rock.Data.RockContext)">
            <summary>
            Creates a recipient token to help track conversations.
            </summary>
            <param name="rockContext">A context to use for database calls.</param>
            <returns>String token</returns>
        </member>
        <member name="P:Rock.Communication.Channel.Sms.Control">
            <summary>
            Gets the control path.
            </summary>
            <value>
            The control path.
            </value>
        </member>
        <member name="T:Rock.Communication.Channel.Email">
            <summary>
            An email communication
            </summary>
        </member>
        <member name="M:Rock.Communication.Channel.Email.GetHtmlPreview(Rock.Model.Communication,Rock.Model.Person)">
            <summary>
            Gets the HTML preview.
            </summary>
            <param name="communication">The communication.</param>
            <param name="person">The person.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Communication.Channel.Email.GetMessageDetails(Rock.Model.Communication)">
            <summary>
            Gets the read-only message details.
            </summary>
            <param name="communication">The communication.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Communication.Channel.Email.Send(Rock.Model.Communication)">
            <summary>
            Sends the specified communication.
            </summary>
            <param name="communication">The communication.</param>
        </member>
        <member name="M:Rock.Communication.Channel.Email.ProcessHtmlBody(Rock.Model.Communication,Rock.Web.Cache.GlobalAttributesCache,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Processes the HTML body.
            </summary>
            <param name="communication">The communication.</param>
            <param name="globalAttributes">The global attributes.</param>
            <param name="mergeObjects">The merge objects.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Communication.Channel.Email.ProcessTextBody(Rock.Model.Communication,Rock.Web.Cache.GlobalAttributesCache,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Processes the text body.
            </summary>
            <param name="communication">The communication.</param>
            <param name="globalAttributes">The global attributes.</param>
            <param name="mergeObjects">The merge objects.</param>
            <returns></returns>
        </member>
        <member name="P:Rock.Communication.Channel.Email.Control">
            <summary>
            Gets the control path.
            </summary>
            <value>
            The control path.
            </value>
        </member>
        <member name="T:Rock.Communication.ChannelContainer">
            <summary>
            MEF Container class for Communication Channel Componenets
            </summary>
        </member>
        <member name="M:Rock.Communication.ChannelContainer.GetComponent(System.String)">
            <summary>
            Gets the component with the matching Entity Type Name
            </summary>
            <param name="entityTypeName">Name of the entity type.</param>
            <returns></returns>
        </member>
        <member name="P:Rock.Communication.ChannelContainer.Instance">
            <summary>
            Gets the instance.
            </summary>
        </member>
        <member name="T:Rock.Communication.TransportContainer">
            <summary>
            MEF Container class for Communication Transport Componenets
            </summary>
        </member>
        <member name="M:Rock.Communication.TransportContainer.GetComponent(System.String)">
            <summary>
            Gets the component with the matching Entity Type Name
            </summary>
            <param name="entityTypeName">Name of the entity type.</param>
            <returns></returns>
        </member>
        <member name="P:Rock.Communication.TransportContainer.Instance">
            <summary>
            Gets the instance.
            </summary>
        </member>
        <member name="T:Rock.Communication.Transport.SMTP">
            <summary>
            Sends a communication through SMTP protocol
            </summary>
        </member>
        <member name="M:Rock.Communication.Transport.SMTP.Send(Rock.Model.Communication)">
            <summary>
            Sends the specified communication.
            </summary>
            <param name="communication">The communication.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Rock.Communication.Transport.SMTP.Send(Rock.Model.SystemEmail,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.Dictionary{System.String,System.Object}},System.String,System.String)">
            <summary>
            Sends the specified template.
            </summary>
            <param name="template">The template.</param>
            <param name="recipients">The recipients.</param>
            <param name="appRoot"></param>
            <param name="themeRoot"></param>
        </member>
        <member name="T:Rock.Field.Types.ComponentFieldType">
            <summary>
            Field Type used to display a dropdown list of MEF Components of a specific type
            </summary>
        </member>
        <member name="M:Rock.Field.Types.ComponentFieldType.FormatValue(System.Web.UI.Control,System.String,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.Boolean)">
            <summary>
            Returns the field's current value(s)
            </summary>
            <param name="parentControl">The parent control.</param>
            <param name="value">Information about the value</param>
            <param name="configurationValues">The configuration values.</param>
            <param name="condensed">Flag indicating if the value should be condensed (i.e. for use in a grid column)</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.ComponentFieldType.ConfigurationKeys">
            <summary>
            Returns a list of the configuration keys
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.ComponentFieldType.ConfigurationControls">
            <summary>
            Creates the HTML controls required to configure this type of field
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.ComponentFieldType.ConfigurationValues(System.Collections.Generic.List{System.Web.UI.Control})">
            <summary>
            Gets the configuration value.
            </summary>
            <param name="controls">The controls.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.ComponentFieldType.SetConfigurationValues(System.Collections.Generic.List{System.Web.UI.Control},System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue})">
            <summary>
            Sets the configuration value.
            </summary>
            <param name="controls"></param>
            <param name="configurationValues"></param>
        </member>
        <member name="M:Rock.Field.Types.ComponentFieldType.EditControl(System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.String)">
            <summary>
            Creates the control(s) neccessary for prompting user for a new value
            </summary>
            <param name="configurationValues">The configuration values.</param>
            <param name="id"></param>
            <returns>
            The control
            </returns>
        </member>
        <member name="M:Rock.Field.Types.ComponentFieldType.GetEditValue(System.Web.UI.Control,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue})">
            <summary>
            Reads new values entered by the user for the field
            </summary>
            <param name="control">Parent control that controls were added to in the CreateEditControl() method</param>
            <param name="configurationValues"></param>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.ComponentFieldType.SetEditValue(System.Web.UI.Control,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.String)">
            <summary>
            Sets the value.
            </summary>
            <param name="control">The control.</param>
            <param name="configurationValues"></param>
            <param name="value">The value.</param>
        </member>
        <member name="T:Rock.Model.FinancialTransactionRefund">
            <summary>
            Represents a transaction where a giver/purchaser was refunded a full or partial amount 
            on a <see cref="T:Rock.Model.FinancialTransaction"/>.
            </summary>
        </member>
        <member name="P:Rock.Model.FinancialTransactionRefund.RefundReasonValueId">
            <summary>
            Gets or sets the DefinedValueId of the return reason <see cref="T:Rock.Model.DefinedValue"/> indicating
            the reason why a refund was issued for the the original transaction.
            </summary>
            <value>
            A <see cref="T:System.Int32"/> representing the DefinedValueId of the refund reason <see cref="T:Rock.Model.DefinedValue"/> 
            indicating the reason for the refund.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialTransactionRefund.RefundReasonSummary">
            <summary>
            Gets or sets a detailed summary of the circumstances surrounding why a refund was issued.
            </summary>
            <value>
            A <see cref="T:System.String"/> representing a summary of why the refund was issued.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialTransactionRefund.RefundReasonValue">
            <summary>
            Gets or sets the refund reason <see cref="T:Rock.Model.DefinedValue"/> indicating the reason 
            for the refund.
            </summary>
            <value>
            The refund reason <see cref="T:Rock.Model.DefinedValue"/>.
            </value>
        </member>
        <member name="T:Rock.Model.FinancialTransactionRefundConfiguration">
            <summary>
            Refund Transaction Configuration class.
            </summary>
        </member>
        <member name="M:Rock.Model.FinancialTransactionRefundConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.FinancialTransactionRefundConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Rock.Model.FinancialPersonSavedAccount">
            <summary>
            Represents an bank or debit/credit card that a <see cref="T:Rock.Model.Person"/> has saved to Rock for future reuse. Please
            note that account number is not actually stored here. The reference/profile number is stored here as well as a masked 
            version of the account number.
            </summary>
        </member>
        <member name="M:Rock.Model.FinancialPersonSavedAccount.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this FinancialPersonSavedAccount.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this FinancialPersonSavedAccount.
            </returns>
        </member>
        <member name="P:Rock.Model.FinancialPersonSavedAccount.PersonId">
            <summary>
            Gets or sets the PersonId of the <see cref="T:Rock.Model.Person"/> who is the account owner.
            </summary>
            <value>
            A <see cref="T:System.Int32"/> representing the PersonId of the <see cref="T:Rock.Model.Person"/> who is the account holder.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialPersonSavedAccount.ReferenceNumber">
            <summary>
            Gets or sets a reference identifier needed by the payment provider to initiate a future transaction
            </summary>
            <value>
            A <see cref="T:System.String"/> representing the reference identifier to initiate a future transaction.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialPersonSavedAccount.Name">
            <summary>
            Gets or sets the name of the saved account. This property is required.
            </summary>
            <value>
            A <see cref="T:System.String"/> representing the name of the account.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialPersonSavedAccount.MaskedAccountNumber">
            <summary>
            Gets or sets a masked version of the account number. This is a value with "*" and a partial account number (usually the last 4 digits).
            </summary>
            <value>
            A <see cref="T:System.String"/> representing the masked account number.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialPersonSavedAccount.TransactionCode">
            <summary>
            Gets or sets the transaction code for the transaction.
            </summary>
            <value>
            A <see cref="T:System.String"/> representing the transaction code of the transaction.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialPersonSavedAccount.GatewayEntityTypeId">
            <summary>
            Gets or sets EntityTypeId of the <see cref="T:Rock.Model.EntityType"/> for the financial gateway (service) that processed this transaction.
            </summary>
            <value>
            A <see cref="T:System.Int32"/> representing the EntityTypeId of the <see cref="T:Rock.Model.EntityType"/> for the financial gateway (service) that processed this transaction.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialPersonSavedAccount.CurrencyTypeValueId">
            <summary>
            Gets or sets the DefinedValueId of the currency type <see cref="T:Rock.Model.DefinedValue"/> indicating the currency that the
            transaction was made in.
            </summary>
            <value>
            A <see cref="T:System.Int32"/> representing the DefinedValueId of the CurrencyType <see cref="T:Rock.Model.DefinedValue"/> for this transaction.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialPersonSavedAccount.CreditCardTypeValueId">
            <summary>
            Gets or sets the DefinedValueId of the credit card type <see cref="T:Rock.Model.DefinedValue"/> indicating the credit card brand/type that was used 
            to make this transaction. This value will be null for transactions that were not made by credit card.
            </summary>
            <value>
            A <see cref="T:System.Int32"/> representing the DefinedValueId of the credit card type <see cref="T:Rock.Model.DefinedValue"/> that was used to make this transaction.
            This value value will be null for transactions that were not made by credit card.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialPersonSavedAccount.Person">
            <summary>
            Gets or sets the <see cref="T:Rock.Model.Person"/> who is the account owner.
            </summary>
            <value>
            The Account Owner's <see cref="T:Rock.Model.Person"/> entity.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialPersonSavedAccount.GatewayEntityType">
            <summary>
            Gets or sets the <see cref="T:Rock.Model.EntityType"/> of the Payment Gateway service that was used to process this transaction.
            </summary>
            <value>
            The <see cref="T:Rock.Model.EntityType"/> of the payment gateway service that was used.  If this was not an electronic transaction, this value will be null.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialPersonSavedAccount.CurrencyTypeValue">
            <summary>
            Gets or sets the currency type <see cref="T:Rock.Model.DefinedValue"/> indicating the type of currency that was used for this 
            transaction.
            </summary>
            <value>
            A <see cref="T:Rock.Model.DefinedValue"/> indicating the type of currency that was used for the transaction.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialPersonSavedAccount.CreditCardTypeValue">
            <summary>
            Gets or sets the credit card type <see cref="T:Rock.Model.DefinedValue"/> indicating the type of credit card that was used for this transaction.
            If this was not a credit card based transaction, this value will be null.
            </summary>
            <value>
            A <see cref="T:Rock.Model.DefinedValue"/> indicating the type of credit card that was used for this transaction. This value is null
            for transactions that were not made by credit card.
            </value>
        </member>
        <member name="T:Rock.Model.FinancialPersonSavedAccountConfiguration">
            <summary>
            FinancialPersonSavedAccount Configuration class.
            </summary>
        </member>
        <member name="M:Rock.Model.FinancialPersonSavedAccountConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.FinancialPersonSavedAccountConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Rock.Model.FinancialPersonBankAccount">
            <summary>
            Represents a relationship between a person and a bank account in Rock. A person can be related to multiple bank accounts
            but a bank account can only be related to an individual person in Rock.
            </summary>
        </member>
        <member name="M:Rock.Model.FinancialPersonBankAccount.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Rock.Model.FinancialPersonBankAccount.EncodeAccountNumber(System.String,System.String)">
            <summary>
            Encodes the account number.
            </summary>
            <param name="routingNumber">The routing number.</param>
            <param name="accountNumber">The account number.</param>
            <returns></returns>
            <exception cref="T:System.Configuration.ConfigurationErrorsException">Account encoding requires a 'PasswordKey' app setting</exception>
        </member>
        <member name="P:Rock.Model.FinancialPersonBankAccount.PersonId">
            <summary>
            Gets or sets the PersonId of the <see cref="T:Rock.Model.Person"/> who owns the account.
            </summary>
            <value>
            A <see cref="T:System.Int32"/> representing the PersonId of the <see cref="T:Rock.Model.Person"/> who owns the account.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialPersonBankAccount.AccountNumberSecured">
            <summary>
            Gets or sets hash of the Checking Account AccountNumber.  Stored as a SHA1 hash so that it can be matched without being known
            Enables a match of a Check Account to Person ( or Persons if multiple persons share a checking account) can be made
            </summary>
            <value>
            AccountNumberSecured.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialPersonBankAccount.Person">
            <summary>
            Gets or sets the <see cref="T:Rock.Model.Person"/> who owns the account.
            </summary>
            <value>
            The <see cref="T:Rock.Model.Person"/> who owns the account.
            </value>
        </member>
        <member name="T:Rock.Model.FinancialPersonBankAccountConfiguration">
            <summary>
            FinancialPersonBankAccount Configuration class.
            </summary>
        </member>
        <member name="M:Rock.Model.FinancialPersonBankAccountConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.FinancialPersonBankAccountConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Rock.Model.FinancialScheduledTransactionDetail">
            <summary>
            Represents a detail item of a <see cref="T:Rock.Model.FinancialScheduledTransaction"/>.  It represents a gift/payment to be made to an <see cref="T:Rock.Model.FinancialAccount"/>/fund
            as part of the scheduled transaction. This allows multiple payments/gifts to be consolidated into one scheduled transaction.
            </summary>
        </member>
        <member name="M:Rock.Model.FinancialScheduledTransactionDetail.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Rock.Model.FinancialScheduledTransactionDetail.ScheduledTransactionId">
            <summary>
            Gets or sets the ScheduledTransactionId of the <see cref="T:Rock.Model.FinancialScheduledTransaction"/> that this detail item belongs to.
            </summary>
            <value>
            A <see cref="T:System.Int32"/> representing the ScheudledTransactionId of the <see cref="T:Rock.Model.FinancialScheduledTransaction"/> that this detail item belongs to.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialScheduledTransactionDetail.AccountId">
            <summary>
            Gets or sets the AccountId of the <see cref="T:Rock.Model.FinancialAccount"/>/fund that that the transaction detail <see cref="P:Rock.Model.FinancialScheduledTransactionDetail.Amount"/> should be directed toward.
            </summary>
            <value>
            A <see cref="T:System.Int32"/> representing the AccountId of the <see cref="T:Rock.Model.FinancialAccount"/>/fund that this transaction detail is directed toward.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialScheduledTransactionDetail.Amount">
            <summary>
            Gets or sets the purchase/gift amount.
            </summary>
            <value>
            A <see cref="T:System.Decimal"/> representing the purchase/gift amount.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialScheduledTransactionDetail.Summary">
            <summary>
            Gets or sets the summary of this scheduled transaction detail.
            </summary>
            <value>
            A <see cref="T:System.String"/> representing the summary of this scheduled transaction detail.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialScheduledTransactionDetail.EntityTypeId">
            <summary>
            Gets or sets the entity.
            </summary>
            <value>
            The entity.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialScheduledTransactionDetail.EntityId">
            <summary>
            Gets or sets the entity id.
            </summary>
            <value>
            The entity id.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialScheduledTransactionDetail.ScheduledTransaction">
            <summary>
            Gets or sets the <see cref="T:Rock.Model.FinancialScheduledTransaction"/> that this transaction detail belongs to.
            </summary>
            <value>
            The <see cref="T:Rock.Model.FinancialScheduledTransaction"/> that the transaction detail belongs to.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialScheduledTransactionDetail.Account">
            <summary>
            Gets or sets the <see cref="T:Rock.Model.FinancialAccount"/>/fund that the <see cref="P:Rock.Model.FinancialScheduledTransactionDetail.Amount"/> of this transaction detail will be credited toward.
            </summary>
            <value>
            Tehe <see cref="T:Rock.Model.FinancialAccount"/>/fund that the <see cref="P:Rock.Model.FinancialScheduledTransactionDetail.Amount"/> of this transaction detail will be credited toward.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialScheduledTransactionDetail.EntityType">
            <summary>
            Gets or sets the type of the entity.
            </summary>
            <value>
            The type of the entity.
            </value>
        </member>
        <member name="T:Rock.Model.FinancialScheduledTransactionDetailConfiguration">
            <summary>
            TransactionDetail Configuration class
            </summary>
        </member>
        <member name="M:Rock.Model.FinancialScheduledTransactionDetailConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.FinancialScheduledTransactionDetailConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Rock.Reporting.DataTransformComponent">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Reporting.DataTransformComponent.GetExpression(Rock.Data.IService,System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression)">
            <summary>
            Gets the expression.
            </summary>
            <param name="service">The service.</param>
            <param name="parameterExpression">The parameter expression.</param>
            <param name="whereExpression">The where expression.</param>
            <returns></returns>
        </member>
        <member name="P:Rock.Reporting.DataTransformComponent.Title">
            <summary>
            Gets the title.
            </summary>
            <value>
            The title.
            </value>
        </member>
        <member name="P:Rock.Reporting.DataTransformComponent.TransformedEntityTypeName">
            <summary>
            Gets the name of the transformed entity type.
            </summary>
            <value>
            The name of the filtered entity type.
            </value>
        </member>
        <member name="P:Rock.Reporting.DataTransformComponent.AttributeValueDefaults">
            <summary>
            Gets the attribute value defaults.
            </summary>
            <value>
            The attribute defaults.
            </value>
        </member>
        <member name="T:Rock.Reporting.DataTransformComponent`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Rock.Reporting.DataTransformComponent`1.GetExpression(Rock.Data.IService,System.Linq.IQueryable{`0},System.Linq.Expressions.ParameterExpression)">
            <summary>
            Gets the expression.
            </summary>
            <param name="serviceInstance">The service instance.</param>
            <param name="query">The query.</param>
            <param name="parameterExpression">The parameter expression.</param>
            <returns></returns>
        </member>
        <member name="T:Rock.Reporting.DataTransformContainer">
            <summary>
            MEF Container class for data filters
            </summary>
        </member>
        <member name="M:Rock.Reporting.DataTransformContainer.GetAvailableTransformedEntityTypeNames">
            <summary>
            Gets a list of entity type names that have Data Transform components
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rock.Reporting.DataTransformContainer.GetComponent(System.String)">
            <summary>
            Gets the component with the matching Entity Type Name
            </summary>
            <param name="entityTypeName">Name of the entity type.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Reporting.DataTransformContainer.GetComponentsByTransformedEntityName(System.String)">
            <summary>
            Gets the components that are for transformed a given entity type name
            </summary>
            <param name="entityTypeName">Name of the entity type.</param>
            <returns></returns>
        </member>
        <member name="P:Rock.Reporting.DataTransformContainer.Instance">
            <summary>
            Gets the instance.
            </summary>
        </member>
        <member name="T:Rock.Reporting.DataTransform.Person.ParentTransform">
            <summary>
            Person Parent Transformation
            </summary>
        </member>
        <member name="M:Rock.Reporting.DataTransform.Person.ParentTransform.GetExpression(Rock.Data.IService,System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression)">
            <summary>
            Gets the expression.
            </summary>
            <param name="serviceInstance">The service instance.</param>
            <param name="parameterExpression">The parameter expression.</param>
            <param name="whereExpression">The where expression.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Reporting.DataTransform.Person.ParentTransform.GetExpression(Rock.Data.IService,System.Linq.IQueryable{Rock.Model.Person},System.Linq.Expressions.ParameterExpression)">
            <summary>
            Gets the expression.
            </summary>
            <param name="serviceInstance">The service instance.</param>
            <param name="personQueryable">The person queryable.</param>
            <param name="parameterExpression">The parameter expression.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Reporting.DataTransform.Person.ParentTransform.BuildExpression(Rock.Data.IService,System.Linq.IQueryable{System.Int32},System.Linq.Expressions.ParameterExpression)">
            <summary>
            Builds the expression.
            </summary>
            <param name="serviceInstance">The service instance.</param>
            <param name="idQuery">The id query.</param>
            <param name="parameterExpression">The parameter expression.</param>
            <returns></returns>
        </member>
        <member name="P:Rock.Reporting.DataTransform.Person.ParentTransform.Title">
            <summary>
            Gets the title.
            </summary>
            <value>
            The title.
            </value>
        </member>
        <member name="P:Rock.Reporting.DataTransform.Person.ParentTransform.TransformedEntityTypeName">
            <summary>
            Gets the name of the transformed entity type.
            </summary>
            <value>
            The name of the transformed entity type.
            </value>
        </member>
        <member name="T:Rock.Reporting.DataFilter.PropertyFilter">
            <summary>
            Filter entities on any of it's property or attribute values
            </summary>
        </member>
        <member name="M:Rock.Reporting.DataFilter.PropertyFilter.GetTitle(System.Type)">
            <summary>
            Gets the title.
            </summary>
            <param name="entityType">Type of the entity.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Reporting.DataFilter.PropertyFilter.GetClientFormatSelection(System.Type)">
            <summary>
            Formats the selection on the client-side.  When the filter is collapsed by the user, the Filterfield control
            will set the description of the filter to whatever is returned by this property.  If including script, the
            controls parent container can be referenced through a '$content' variable that is set by the control before 
            referencing this property.
            </summary>
            <value>
            The client format script.
            </value>
        </member>
        <member name="M:Rock.Reporting.DataFilter.PropertyFilter.FormatSelection(System.Type,System.String)">
            <summary>
            Formats the selection.
            </summary>
            <param name="entityType"></param>
            <param name="selection">The selection.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Reporting.DataFilter.PropertyFilter.CreateChildControls(System.Type,Rock.Web.UI.Controls.FilterField)">
            <summary>
            Creates the child controls.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rock.Reporting.DataFilter.PropertyFilter.RenderControls(System.Type,Rock.Web.UI.Controls.FilterField,System.Web.UI.HtmlTextWriter,System.Web.UI.Control[])">
            <summary>
            Renders the controls.
            </summary>
            <param name="entityType">Type of the entity.</param>
            <param name="filterControl">The filter control.</param>
            <param name="writer">The writer.</param>
            <param name="controls">The controls.</param>
        </member>
        <member name="M:Rock.Reporting.DataFilter.PropertyFilter.GetSelection(System.Type,System.Web.UI.Control[])">
            <summary>
            Gets the selection.
            </summary>
            <param name="entityType"></param>
            <param name="controls">The controls.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Reporting.DataFilter.PropertyFilter.SetSelection(System.Type,System.Web.UI.Control[],System.String)">
            <summary>
            Sets the selection.
            </summary>
            <param name="entityType"></param>
            <param name="controls">The controls.</param>
            <param name="selection">The selection.</param>
        </member>
        <member name="M:Rock.Reporting.DataFilter.PropertyFilter.GetExpression(System.Type,Rock.Data.IService,System.Linq.Expressions.ParameterExpression,System.String)">
            <summary>
            Gets the expression.
            </summary>
            <param name="entityType"></param>
            <param name="serviceInstance">The service instance.</param>
            <param name="parameterExpression">The parameter expression.</param>
            <param name="selection">The selection.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Reporting.DataFilter.PropertyFilter.GetEntityFields(System.Type)">
            <summary>
            Gets the properties and attributes for the entity
            </summary>
            <param name="entityType">Type of the entity.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Reporting.DataFilter.PropertyFilter.GetPropertyExpression(Rock.Data.IService,System.Linq.Expressions.ParameterExpression,Rock.Reporting.EntityField,System.Collections.Generic.List{System.String})">
            <summary>
            Builds an expression for a property field
            </summary>
            <param name="serviceInstance">The service instance.</param>
            <param name="parameterExpression">The parameter expression.</param>
            <param name="entityField">The property.</param>
            <param name="values">The values.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Reporting.DataFilter.PropertyFilter.GroupControls(System.Type,System.Web.UI.Control[])">
            <summary>
            Groups all the controls for each field
            </summary>
            <param name="entityType">Type of the entity.</param>
            <param name="controls">The controls.</param>
            <returns></returns>
        </member>
        <member name="P:Rock.Reporting.DataFilter.PropertyFilter.AppliesToEntityType">
            <summary>
            Gets the entity type that filter applies to.
            </summary>
            <value>
            The entity that filter applies to.
            </value>
        </member>
        <member name="P:Rock.Reporting.DataFilter.PropertyFilter.Section">
            <summary>
            Gets the section.
            </summary>
            <value>
            The section.
            </value>
        </member>
        <member name="P:Rock.Reporting.DataFilter.PropertyFilter.Order">
            <summary>
            Gets the order.
            </summary>
            <value>
            The order.
            </value>
        </member>
        <member name="T:Rock.Reporting.DataFilter.OtherDataViewFilter">
            <summary>
            Filter entities using another dataview
            </summary>
        </member>
        <member name="M:Rock.Reporting.DataFilter.OtherDataViewFilter.GetTitle(System.Type)">
            <summary>
            Gets the title.
            </summary>
            <param name="entityType"></param>
            <returns></returns>
        </member>
        <member name="M:Rock.Reporting.DataFilter.OtherDataViewFilter.GetClientFormatSelection(System.Type)">
            <summary>
            Formats the selection on the client-side.  When the filter is collapsed by the user, the Filterfield control
            will set the description of the filter to whatever is returned by this property.  If including script, the
            controls parent container can be referenced through a '$content' variable that is set by the control before 
            referencing this property.
            </summary>
            <value>
            The client format script.
            </value>
        </member>
        <member name="M:Rock.Reporting.DataFilter.OtherDataViewFilter.FormatSelection(System.Type,System.String)">
            <summary>
            Formats the selection.
            </summary>
            <param name="entityType"></param>
            <param name="selection">The selection.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Reporting.DataFilter.OtherDataViewFilter.CreateChildControls(System.Type,Rock.Web.UI.Controls.FilterField)">
            <summary>
            Creates the child controls.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rock.Reporting.DataFilter.OtherDataViewFilter.RenderControls(System.Type,Rock.Web.UI.Controls.FilterField,System.Web.UI.HtmlTextWriter,System.Web.UI.Control[])">
            <summary>
            Renders the controls.
            </summary>
            <param name="entityType">Type of the entity.</param>
            <param name="filterControl">The filter control.</param>
            <param name="writer">The writer.</param>
            <param name="controls">The controls.</param>
        </member>
        <member name="M:Rock.Reporting.DataFilter.OtherDataViewFilter.GetSelection(System.Type,System.Web.UI.Control[])">
            <summary>
            Gets the selection.
            </summary>
            <param name="entityType"></param>
            <param name="controls">The controls.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Reporting.DataFilter.OtherDataViewFilter.SetSelection(System.Type,System.Web.UI.Control[],System.String)">
            <summary>
            Sets the selection.
            </summary>
            <param name="entityType"></param>
            <param name="controls">The controls.</param>
            <param name="selection">The selection.</param>
        </member>
        <member name="M:Rock.Reporting.DataFilter.OtherDataViewFilter.GetExpression(System.Type,Rock.Data.IService,System.Linq.Expressions.ParameterExpression,System.String)">
            <summary>
            Gets the expression.
            </summary>
            <param name="entityType"></param>
            <param name="serviceInstance">The service instance.</param>
            <param name="parameterExpression">The parameter expression.</param>
            <param name="selection">The selection.</param>
            <returns></returns>
            <exception cref="T:System.Exception">Filter issue(s):  + errorMessages.AsDelimited( ;  )</exception>
        </member>
        <member name="M:Rock.Reporting.DataFilter.OtherDataViewFilter.IsViewInFilter(System.Int32,Rock.Model.DataViewFilter)">
            <summary>
            Determines whether [is view in filter] [the specified data view id].
            </summary>
            <param name="dataViewId">The data view id.</param>
            <param name="filter">The filter.</param>
            <returns>
              <c>true</c> if [is view in filter] [the specified data view id]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Rock.Reporting.DataFilter.OtherDataViewFilter.AppliesToEntityType">
            <summary>
            Gets the entity type that filter applies to.
            </summary>
            <value>
            The entity that filter applies to.
            </value>
        </member>
        <member name="P:Rock.Reporting.DataFilter.OtherDataViewFilter.Section">
            <summary>
            Gets the section.
            </summary>
            <value>
            The section.
            </value>
        </member>
        <member name="P:Rock.Reporting.DataFilter.OtherDataViewFilter.Order">
            <summary>
            Gets the order.
            </summary>
            <value>
            The order.
            </value>
        </member>
        <member name="T:Rock.Data.DefinedValueAttribute">
            <summary>
            Custom attribute used to decorate model properties that are defined values from a system defined type
            </summary>
        </member>
        <member name="M:Rock.Data.DefinedValueAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Data.DefinedValueAttribute"/> class.
            </summary>
            <param name="definedTypeGuid">The defined type GUID.</param>
        </member>
        <member name="P:Rock.Data.DefinedValueAttribute.DefinedTypeGuid">
            <summary>
            Gets or sets the defined type GUID.
            </summary>
            <value>
            The defined type GUID.
            </value>
        </member>
        <member name="T:Rock.Data.PreviewableAttribute">
            <summary>
            Custom attribute used to decorate model properties that should be included when previewing a sample list of entities (ex DataView)
            </summary>
        </member>
        <member name="T:Rock.Data.NotExportable">
            <summary>
            Attribute to decorate class properties that should not be exported.
            </summary>
        </member>
        <member name="T:SafeDirectoryCatalog">
            <summary>
            MEF Directory Catalog that will handle outdated MEF Components
            </summary>
        </member>
        <member name="M:SafeDirectoryCatalog.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SafeDirectoryCatalog"/> class.
            </summary>
            <param name="directory">The directory.</param>
        </member>
        <member name="P:SafeDirectoryCatalog.Parts">
            <summary>
            Gets the part definitions that are contained in the catalog.
            </summary>
            <returns>The <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" /> contained in the <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" />.</returns>
        </member>
        <member name="T:Rock.Field.Types.AccountsFieldType">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Field.Types.AccountsFieldType.FormatValue(System.Web.UI.Control,System.String,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.Boolean)">
            <summary>
            Returns the field's current value(s)
            </summary>
            <param name="parentControl">The parent control.</param>
            <param name="value">Information about the value</param>
            <param name="configurationValues">The configuration values.</param>
            <param name="condensed">Flag indicating if the value should be condensed (i.e. for use in a grid column)</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.AccountsFieldType.EditControl(System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.String)">
            <summary>
            Creates the control(s) neccessary for prompting user for a new value
            </summary>
            <param name="configurationValues">The configuration values.</param>
            <param name="id"></param>
            <returns>
            The control
            </returns>
        </member>
        <member name="M:Rock.Field.Types.AccountsFieldType.GetEditValue(System.Web.UI.Control,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue})">
            <summary>
            Reads new values entered by the user for the field
            </summary>
            <param name="control">Parent control that controls were added to in the CreateEditControl() method</param>
            <param name="configurationValues">The configuration values.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.AccountsFieldType.SetEditValue(System.Web.UI.Control,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.String)">
            <summary>
            Sets the value.
            </summary>
            <param name="control">The control.</param>
            <param name="configurationValues">The configuration values.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:Rock.Field.Types.BinaryFileFieldType">
            <summary>
            Field Type used to display a dropdown list of binary files of a specific type
            </summary>
        </member>
        <member name="M:Rock.Field.Types.BinaryFileFieldType.FormatValue(System.Web.UI.Control,System.String,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.Boolean)">
            <summary>
            Returns the field's current value(s)
            </summary>
            <param name="parentControl">The parent control.</param>
            <param name="value">Information about the value</param>
            <param name="configurationValues">The configuration values.</param>
            <param name="condensed">Flag indicating if the value should be condensed (i.e. for use in a grid column)</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.BinaryFileFieldType.ConfigurationKeys">
            <summary>
            Returns a list of the configuration keys
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.BinaryFileFieldType.ConfigurationControls">
            <summary>
            Creates the HTML controls required to configure this type of field
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.BinaryFileFieldType.ConfigurationValues(System.Collections.Generic.List{System.Web.UI.Control})">
            <summary>
            Gets the configuration value.
            </summary>
            <param name="controls">The controls.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.BinaryFileFieldType.SetConfigurationValues(System.Collections.Generic.List{System.Web.UI.Control},System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue})">
            <summary>
            Sets the configuration value.
            </summary>
            <param name="controls"></param>
            <param name="configurationValues"></param>
        </member>
        <member name="M:Rock.Field.Types.BinaryFileFieldType.EditControl(System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.String)">
            <summary>
            Creates the control(s) neccessary for prompting user for a new value
            </summary>
            <param name="configurationValues">The configuration values.</param>
            <param name="id"></param>
            <returns>
            The control
            </returns>
        </member>
        <member name="M:Rock.Field.Types.BinaryFileFieldType.GetEditValue(System.Web.UI.Control,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue})">
            <summary>
            Reads new values entered by the user for the field
            </summary>
            <param name="control">Parent control that controls were added to in the CreateEditControl() method</param>
            <param name="configurationValues"></param>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.BinaryFileFieldType.SetEditValue(System.Web.UI.Control,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.String)">
            <summary>
            Sets the value.
            </summary>
            <param name="control">The control.</param>
            <param name="configurationValues"></param>
            <param name="value">The value.</param>
        </member>
        <member name="T:Rock.Field.Types.CampusesFieldType">
            <summary>
            
            </summary>
        </member>
        <member name="P:Rock.Field.Types.CampusesFieldType.ListSource">
            <summary>
            Gets the list source.
            </summary>
            <value>
            The list source.
            </value>
        </member>
        <member name="T:Rock.Field.Types.CampusFieldType">
            <summary>
            Field Type to select a single (or null) CampusFieldType
            </summary>
        </member>
        <member name="M:Rock.Field.Types.CampusFieldType.EditControl(System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.String)">
            <summary>
            Creates the control(s) neccessary for prompting user for a new value
            </summary>
            <param name="configurationValues">The configuration values.</param>
            <param name="id"></param>
            <returns>
            The control
            </returns>
        </member>
        <member name="M:Rock.Field.Types.CampusFieldType.GetEditValue(System.Web.UI.Control,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue})">
            <summary>
            Reads new values entered by the user for the field
            returns Campus.Id as string
            </summary>
            <param name="control">Parent control that controls were added to in the CreateEditControl() method</param>
            <param name="configurationValues">The configuration values.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.CampusFieldType.SetEditValue(System.Web.UI.Control,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.String)">
            <summary>
            Sets the value.
            Expects value as a Campus.Id as string
            </summary>
            <param name="control">The control.</param>
            <param name="configurationValues">The configuration values.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Rock.Field.Types.CampusFieldType.GetEditValueAsEntityId(System.Web.UI.Control,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue})">
            <summary>
            Gets the edit value as the IEntity.Id
            </summary>
            <param name="control">The control.</param>
            <param name="configurationValues">The configuration values.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.CampusFieldType.SetEditValueFromEntityId(System.Web.UI.Control,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.Nullable{System.Int32})">
            <summary>
            Sets the edit value from IEntity.Id value
            </summary>
            <param name="control">The control.</param>
            <param name="configurationValues">The configuration values.</param>
            <param name="id">The identifier.</param>
        </member>
        <member name="T:Rock.Field.Types.BinaryFileTypeFieldType">
            <summary>
            Field Type used to display a dropdown list of binary file types
            </summary>
        </member>
        <member name="M:Rock.Field.Types.BinaryFileTypeFieldType.FormatValue(System.Web.UI.Control,System.String,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.Boolean)">
            <summary>
            Returns the field's current value(s)
            </summary>
            <param name="parentControl">The parent control.</param>
            <param name="value">Information about the value</param>
            <param name="configurationValues">The configuration values.</param>
            <param name="condensed">Flag indicating if the value should be condensed (i.e. for use in a grid column)</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.BinaryFileTypeFieldType.EditControl(System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.String)">
            <summary>
            Creates the control(s) neccessary for prompting user for a new value
            </summary>
            <param name="configurationValues">The configuration values.</param>
            <param name="id"></param>
            <returns>
            The control
            </returns>
        </member>
        <member name="M:Rock.Field.Types.BinaryFileTypeFieldType.GetEditValue(System.Web.UI.Control,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue})">
            <summary>
            Reads new values entered by the user for the field
            </summary>
            <param name="control">Parent control that controls were added to in the CreateEditControl() method</param>
            <param name="configurationValues"></param>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.BinaryFileTypeFieldType.SetEditValue(System.Web.UI.Control,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.String)">
            <summary>
            Sets the value.
            </summary>
            <param name="control">The control.</param>
            <param name="configurationValues"></param>
            <param name="value">The value.</param>
        </member>
        <member name="T:Rock.Field.Types.AccountFieldType">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Field.Types.AccountFieldType.FormatValue(System.Web.UI.Control,System.String,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.Boolean)">
            <summary>
            Returns the field's current value(s)
            </summary>
            <param name="parentControl">The parent control.</param>
            <param name="value">Information about the value</param>
            <param name="configurationValues">The configuration values.</param>
            <param name="condensed">Flag indicating if the value should be condensed (i.e. for use in a grid column)</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.AccountFieldType.EditControl(System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.String)">
            <summary>
            Creates the control(s) neccessary for prompting user for a new value
            </summary>
            <param name="configurationValues">The configuration values.</param>
            <param name="id"></param>
            <returns>
            The control
            </returns>
        </member>
        <member name="M:Rock.Field.Types.AccountFieldType.GetEditValue(System.Web.UI.Control,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue})">
            <summary>
            Reads new values entered by the user for the field
            returns Account.Guid
            </summary>
            <param name="control">Parent control that controls were added to in the CreateEditControl() method</param>
            <param name="configurationValues">The configuration values.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.AccountFieldType.SetEditValue(System.Web.UI.Control,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.String)">
            <summary>
            Sets the value.
            value is an Account.Guid
            </summary>
            <param name="control">The control.</param>
            <param name="configurationValues">The configuration values.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Rock.Field.Types.AccountFieldType.GetEditValueAsEntityId(System.Web.UI.Control,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue})">
            <summary>
            Gets the edit value as the IEntity.Id
            </summary>
            <param name="control">The control.</param>
            <param name="configurationValues">The configuration values.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.AccountFieldType.SetEditValueFromEntityId(System.Web.UI.Control,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.Nullable{System.Int32})">
            <summary>
            Sets the edit value from IEntity.Id value
            </summary>
            <param name="control">The control.</param>
            <param name="configurationValues">The configuration values.</param>
            <param name="id">The identifier.</param>
        </member>
        <member name="T:Rock.Field.Types.WorkflowTypeFieldType">
            <summary>
            Field Type used to display a dropdown list of workflow types
            </summary>
        </member>
        <member name="M:Rock.Field.Types.WorkflowTypeFieldType.FormatValue(System.Web.UI.Control,System.String,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.Boolean)">
            <summary>
            Returns the field's current value(s)
            </summary>
            <param name="parentControl">The parent control.</param>
            <param name="value">Information about the value</param>
            <param name="configurationValues">The configuration values.</param>
            <param name="condensed">Flag indicating if the value should be condensed (i.e. for use in a grid column)</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.WorkflowTypeFieldType.EditControl(System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.String)">
            <summary>
            Creates the control(s) neccessary for prompting user for a new value
            </summary>
            <param name="configurationValues">The configuration values.</param>
            <param name="id"></param>
            <returns>
            The control
            </returns>
        </member>
        <member name="M:Rock.Field.Types.WorkflowTypeFieldType.GetEditValue(System.Web.UI.Control,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue})">
            <summary>
            Reads new values entered by the user for the field ( as Guid )
            </summary>
            <param name="control">Parent control that controls were added to in the CreateEditControl() method</param>
            <param name="configurationValues"></param>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.WorkflowTypeFieldType.SetEditValue(System.Web.UI.Control,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.String)">
            <summary>
            Sets the value. ( as Guid )
            </summary>
            <param name="control">The control.</param>
            <param name="configurationValues"></param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Rock.Field.Types.WorkflowTypeFieldType.GetEditValueAsEntityId(System.Web.UI.Control,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue})">
            <summary>
            Gets the edit value as the IEntity.Id
            </summary>
            <param name="control">The control.</param>
            <param name="configurationValues">The configuration values.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.WorkflowTypeFieldType.SetEditValueFromEntityId(System.Web.UI.Control,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.Nullable{System.Int32})">
            <summary>
            Sets the edit value from IEntity.Id value
            </summary>
            <param name="control">The control.</param>
            <param name="configurationValues">The configuration values.</param>
            <param name="id">The identifier.</param>
        </member>
        <member name="T:Rock.Field.Types.GroupTypeFieldType">
            <summary>
            Field Type to select a single (or null) GroupType
            </summary>
        </member>
        <member name="M:Rock.Field.Types.GroupTypeFieldType.FormatValue(System.Web.UI.Control,System.String,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.Boolean)">
            <summary>
            Returns the field's current value(s)
            </summary>
            <param name="parentControl">The parent control.</param>
            <param name="value">Information about the value</param>
            <param name="configurationValues">The configuration values.</param>
            <param name="condensed">Flag indicating if the value should be condensed (i.e. for use in a grid column)</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.GroupTypeFieldType.EditControl(System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.String)">
            <summary>
            Creates the control(s) neccessary for prompting user for a new value
            </summary>
            <param name="configurationValues">The configuration values.</param>
            <param name="id"></param>
            <returns>
            The control
            </returns>
        </member>
        <member name="M:Rock.Field.Types.GroupTypeFieldType.GetEditValue(System.Web.UI.Control,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue})">
            <summary>
            Reads new values entered by the user for the field ( as Guid )
            </summary>
            <param name="control">Parent control that controls were added to in the CreateEditControl() method</param>
            <param name="configurationValues">The configuration values.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.GroupTypeFieldType.SetEditValue(System.Web.UI.Control,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.String)">
            <summary>
            Sets the value. ( as Guid )
            </summary>
            <param name="control">The control.</param>
            <param name="configurationValues">The configuration values.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Rock.Field.Types.GroupTypeFieldType.GetEditValueAsEntityId(System.Web.UI.Control,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue})">
            <summary>
            Gets the edit value as the IEntity.Id
            </summary>
            <param name="control">The control.</param>
            <param name="configurationValues">The configuration values.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.GroupTypeFieldType.SetEditValueFromEntityId(System.Web.UI.Control,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.Nullable{System.Int32})">
            <summary>
            Sets the edit value from IEntity.Id value
            </summary>
            <param name="control">The control.</param>
            <param name="configurationValues">The configuration values.</param>
            <param name="id">The identifier.</param>
        </member>
        <member name="T:Rock.Field.Types.FileFieldType">
            <summary>
            Field used to display or upload a new binary file of a specific type
            </summary>
        </member>
        <member name="M:Rock.Field.Types.FileFieldType.EditControl(System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.String)">
            <summary>
            Creates the control(s) neccessary for prompting user for a new value
            </summary>
            <param name="configurationValues">The configuration values.</param>
            <param name="id"></param>
            <returns>
            The control
            </returns>
        </member>
        <member name="M:Rock.Field.Types.FileFieldType.GetEditValue(System.Web.UI.Control,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue})">
            <summary>
            Reads new values entered by the user for the field
            </summary>
            <param name="control">Parent control that controls were added to in the CreateEditControl() method</param>
            <param name="configurationValues"></param>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.FileFieldType.SetEditValue(System.Web.UI.Control,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.String)">
            <summary>
            Sets the value.
            </summary>
            <param name="control">The control.</param>
            <param name="configurationValues"></param>
            <param name="value">The value.</param>
        </member>
        <member name="T:Rock.Field.Types.KeyValueListFieldType">
            <summary>
            Field used to save and display a key/value list
            </summary>
        </member>
        <member name="M:Rock.Field.Types.KeyValueListFieldType.FormatValue(System.Web.UI.Control,System.String,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.Boolean)">
            <summary>
            Returns the field's current value(s)
            </summary>
            <param name="parentControl">The parent control.</param>
            <param name="value">Information about the value</param>
            <param name="configurationValues"></param>
            <param name="condensed">Flag indicating if the value should be condensed (i.e. for use in a grid column)</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.KeyValueListFieldType.ConfigurationKeys">
            <summary>
            Returns a list of the configuration keys
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.KeyValueListFieldType.ConfigurationControls">
            <summary>
            Creates the HTML controls required to configure this type of field
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.KeyValueListFieldType.ConfigurationValues(System.Collections.Generic.List{System.Web.UI.Control})">
            <summary>
            Gets the configuration value.
            </summary>
            <param name="controls">The controls.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.KeyValueListFieldType.SetConfigurationValues(System.Collections.Generic.List{System.Web.UI.Control},System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue})">
            <summary>
            Sets the configuration value.
            </summary>
            <param name="controls"></param>
            <param name="configurationValues"></param>
        </member>
        <member name="M:Rock.Field.Types.KeyValueListFieldType.EditControl(System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.String)">
            <summary>
            Creates the control(s) neccessary for prompting user for a new value
            </summary>
            <param name="configurationValues">The configuration values.</param>
            <param name="id"></param>
            <returns>
            The control
            </returns>
        </member>
        <member name="M:Rock.Field.Types.KeyValueListFieldType.GetEditValue(System.Web.UI.Control,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue})">
            <summary>
            Reads new values entered by the user for the field
            </summary>
            <param name="control">Parent control that controls were added to in the CreateEditControl() method</param>
            <param name="configurationValues"></param>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.KeyValueListFieldType.SetEditValue(System.Web.UI.Control,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.String)">
            <summary>
            Sets the value.
            </summary>
            <param name="control">The control.</param>
            <param name="configurationValues"></param>
            <param name="value">The value.</param>
        </member>
        <member name="T:Rock.Field.Types.EmailTemplateFieldType">
            <summary>
            Field Type to select 0 or more GroupTypes 
            </summary>
        </member>
        <member name="M:Rock.Field.Types.EmailTemplateFieldType.EditControl(System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.String)">
            <summary>
            Creates the control(s) neccessary for prompting user for a new value
            </summary>
            <param name="configurationValues">The configuration values.</param>
            <param name="id"></param>
            <returns>
            The control
            </returns>
        </member>
        <member name="M:Rock.Field.Types.EmailTemplateFieldType.GetEditValue(System.Web.UI.Control,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue})">
            <summary>
            Reads new values entered by the user for the field
            </summary>
            <param name="control">Parent control that controls were added to in the CreateEditControl() method</param>
            <param name="configurationValues"></param>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.EmailTemplateFieldType.SetEditValue(System.Web.UI.Control,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.String)">
            <summary>
            Sets the value.
            </summary>
            <param name="control">The control.</param>
            <param name="configurationValues"></param>
            <param name="value">The value.</param>
        </member>
        <member name="T:Rock.Field.Types.EntityTypeFieldType">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Field.Types.EntityTypeFieldType.FormatValue(System.Web.UI.Control,System.String,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.Boolean)">
            <summary>
            Returns the field's current value(s)
            </summary>
            <param name="parentControl">The parent control.</param>
            <param name="value">Information about the value</param>
            <param name="configurationValues">The configuration values.</param>
            <param name="condensed">Flag indicating if the value should be condensed (i.e. for use in a grid column)</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.EntityTypeFieldType.ConfigurationKeys">
            <summary>
            Returns a list of the configuration keys
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.EntityTypeFieldType.ConfigurationControls">
            <summary>
            Creates the HTML controls required to configure this type of field
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.EntityTypeFieldType.ConfigurationValues(System.Collections.Generic.List{System.Web.UI.Control})">
            <summary>
            Gets the configuration value.
            </summary>
            <param name="controls">The controls.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.EntityTypeFieldType.SetConfigurationValues(System.Collections.Generic.List{System.Web.UI.Control},System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue})">
            <summary>
            Sets the configuration value.
            </summary>
            <param name="controls"></param>
            <param name="configurationValues"></param>
        </member>
        <member name="M:Rock.Field.Types.EntityTypeFieldType.EditControl(System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.String)">
            <summary>
            Creates the control(s) neccessary for prompting user for a new value
            </summary>
            <param name="configurationValues">The configuration values.</param>
            <param name="id"></param>
            <returns>
            The control
            </returns>
        </member>
        <member name="M:Rock.Field.Types.EntityTypeFieldType.GetEditValue(System.Web.UI.Control,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue})">
            <summary>
            Reads new values entered by the user for the field ( as Guid) 
            </summary>
            <param name="control">Parent control that controls were added to in the CreateEditControl() method</param>
            <param name="configurationValues">The configuration values.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.EntityTypeFieldType.SetEditValue(System.Web.UI.Control,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.String)">
            <summary>
            Sets the value ( as Guid )
            </summary>
            <param name="control">The control.</param>
            <param name="configurationValues">The configuration values.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Rock.Field.Types.EntityTypeFieldType.GetEditValueAsEntityId(System.Web.UI.Control,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue})">
            <summary>
            Gets the edit value as the IEntity.Id
            </summary>
            <param name="control">The control.</param>
            <param name="configurationValues">The configuration values.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.EntityTypeFieldType.SetEditValueFromEntityId(System.Web.UI.Control,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.Nullable{System.Int32})">
            <summary>
            Sets the edit value from IEntity.Id value
            </summary>
            <param name="control">The control.</param>
            <param name="configurationValues">The configuration values.</param>
            <param name="id">The identifier.</param>
        </member>
        <member name="T:Rock.Field.Types.GroupFieldType">
            <summary>
            Field Type to select a single (or null) Group
            </summary>
        </member>
        <member name="M:Rock.Field.Types.GroupFieldType.EditControl(System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.String)">
            <summary>
            Creates the control(s) neccessary for prompting user for a new value
            </summary>
            <param name="configurationValues">The configuration values.</param>
            <param name="id"></param>
            <returns>
            The control
            </returns>
        </member>
        <member name="M:Rock.Field.Types.GroupFieldType.GetEditValue(System.Web.UI.Control,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue})">
            <summary>
            Reads new values entered by the user for the field (as id)
            </summary>
            <param name="control">Parent control that controls were added to in the CreateEditControl() method</param>
            <param name="configurationValues">The configuration values.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.GroupFieldType.SetEditValue(System.Web.UI.Control,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.String)">
            <summary>
            Sets the value (as id)
            </summary>
            <param name="control">The control.</param>
            <param name="configurationValues">The configuration values.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Rock.Field.Types.GroupFieldType.GetEditValueAsEntityId(System.Web.UI.Control,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue})">
            <summary>
            Gets the edit value as the IEntity.Id
            </summary>
            <param name="control">The control.</param>
            <param name="configurationValues">The configuration values.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.GroupFieldType.SetEditValueFromEntityId(System.Web.UI.Control,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.Nullable{System.Int32})">
            <summary>
            Sets the edit value from IEntity.Id value
            </summary>
            <param name="control">The control.</param>
            <param name="configurationValues">The configuration values.</param>
            <param name="id">The identifier.</param>
        </member>
        <member name="T:Rock.Field.Types.GroupTypesFieldType">
            <summary>
            Field Type to select 0 or more GroupTypes 
            </summary>
        </member>
        <member name="P:Rock.Field.Types.GroupTypesFieldType.ListSource">
            <summary>
            Gets the list source.
            </summary>
            <value>
            The list source.
            </value>
        </member>
        <member name="T:Rock.Financial.ACHPaymentInfo">
            <summary>
            Information about a bank payment to be processed by a financial gateway
            </summary>
        </member>
        <member name="M:Rock.Financial.ACHPaymentInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Financial.ACHPaymentInfo"/> class.
            </summary>
        </member>
        <member name="M:Rock.Financial.ACHPaymentInfo.#ctor(System.String,System.String,Rock.Financial.BankAccountType)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Financial.ACHPaymentInfo"/> class.
            </summary>
            <param name="bankAccountNumber">The account number.</param>
            <param name="bankRoutingNumber">The routing number.</param>
            <param name="accountType">Type of the account.</param>
        </member>
        <member name="P:Rock.Financial.ACHPaymentInfo.BankName">
            <summary>
            Gets or sets the name of the bank.
            </summary>
        </member>
        <member name="P:Rock.Financial.ACHPaymentInfo.BankAccountNumber">
            <summary>
            The account number
            </summary>
        </member>
        <member name="P:Rock.Financial.ACHPaymentInfo.BankRoutingNumber">
            <summary>
            The routing number
            </summary>
        </member>
        <member name="P:Rock.Financial.ACHPaymentInfo.AccountType">
            <summary>
            The account type
            </summary>
        </member>
        <member name="P:Rock.Financial.ACHPaymentInfo.MaskedNumber">
            <summary>
            Gets the account number.
            </summary>
        </member>
        <member name="P:Rock.Financial.ACHPaymentInfo.CurrencyTypeValue">
            <summary>
            Gets the currency type value.
            </summary>
        </member>
        <member name="T:Rock.Financial.BankAccountType">
            <summary>
            Type of bank account
            </summary>
        </member>
        <member name="F:Rock.Financial.BankAccountType.Checking">
            <summary>
            Checking Account
            </summary>
        </member>
        <member name="F:Rock.Financial.BankAccountType.Savings">
            <summary>
            Savings Account
            </summary>
        </member>
        <member name="T:Rock.Financial.CreditCardPaymentInfo">
            <summary>
            Information about a credit card payment to be processed by a financial gateway
            </summary>
        </member>
        <member name="M:Rock.Financial.CreditCardPaymentInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Financial.CreditCardPaymentInfo"/> class.
            </summary>
        </member>
        <member name="M:Rock.Financial.CreditCardPaymentInfo.#ctor(System.String,System.String,System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Financial.CreditCardPaymentInfo"/> class.
            </summary>
            <param name="number">The number.</param>
            <param name="code">The code.</param>
            <param name="expirationDate">The expiration date.</param>
        </member>
        <member name="P:Rock.Financial.CreditCardPaymentInfo.NameOnCard">
            <summary>
            The name on card
            </summary>
        </member>
        <member name="P:Rock.Financial.CreditCardPaymentInfo.LastNameOnCard">
            <summary>
            The last name on card (Only used if gateway provider requires split first name and last name fields
            </summary>
        </member>
        <member name="P:Rock.Financial.CreditCardPaymentInfo.BillingStreet">
            <summary>
            The billing street
            </summary>
        </member>
        <member name="P:Rock.Financial.CreditCardPaymentInfo.BillingCity">
            <summary>
            The billing city
            </summary>
        </member>
        <member name="P:Rock.Financial.CreditCardPaymentInfo.BillingState">
            <summary>
            The billing state
            </summary>
        </member>
        <member name="P:Rock.Financial.CreditCardPaymentInfo.BillingZip">
            <summary>
            The billing zip
            </summary>
        </member>
        <member name="P:Rock.Financial.CreditCardPaymentInfo.Number">
            <summary>
            The credit card number
            </summary>
        </member>
        <member name="P:Rock.Financial.CreditCardPaymentInfo.Code">
            <summary>
            The card SVN number
            </summary>
        </member>
        <member name="P:Rock.Financial.CreditCardPaymentInfo.ExpirationDate">
            <summary>
            The credit card expiration date
            </summary>
        </member>
        <member name="P:Rock.Financial.CreditCardPaymentInfo.MaskedNumber">
            <summary>
            Gets the account number.
            </summary>
        </member>
        <member name="P:Rock.Financial.CreditCardPaymentInfo.CurrencyTypeValue">
            <summary>
            Gets the currency type value.
            </summary>
        </member>
        <member name="P:Rock.Financial.CreditCardPaymentInfo.CreditCardTypeValue">
            <summary>
            Gets the credit card type value id.
            </summary>
        </member>
        <member name="T:Rock.Model.AuthService">
            <summary>
            Data access/service class for <see cref="T:Rock.Model.Auth"/> entity type objects.
            </summary>
            <summary>
            Auth Service class
            </summary>
        </member>
        <member name="M:Rock.Model.AuthService.Get(System.Int32,System.Nullable{System.Int32})">
            <summary>
            Returns an enumerable collection of <see cref="T:Rock.Model.Auth"/> entities by <see cref="T:Rock.Model.EntityType"/> and entity Id.
            </summary>
            <param name="entityTypeId">A <see cref="T:System.Int32"/> representing the EntityId of the <see cref="T:Rock.Model.EntityType"/> that this Auth entity applies to. </param>
            <param name="entityId">A <see cref="T:System.Int32"/> represent the EntityId of the entity that is being secured.</param>
            <returns>
            An enumerable list of <see cref="T:Rock.Model.Auth"/> entities that secure a specific entity.
            </returns>
        </member>
        <member name="M:Rock.Model.AuthService.GetByGroupId(System.Nullable{System.Int32})">
            <summary>
            Returns an enumerable collection of <see cref="T:Rock.Model.Auth"/> entities by <see cref="T:Rock.Model.Group"/>.
            </summary>
            <param name="groupId">A <see cref="T:System.Int32"/> representing the GroupId of the Security Role <see cref="T:Rock.Model.Group"/> to search by.</param>
            <returns>
            An enumerable collection of <see cref="T:Rock.Model.Auth"/> entities that apply to the specified <see cref="T:Rock.Model.Group"/>.
            </returns>
        </member>
        <member name="M:Rock.Model.AuthService.GetByPersonId(System.Nullable{System.Int32})">
            <summary>
            Returns an enumerable collection of <see cref="T:Rock.Model.Auth"/> entities by <see cref="T:Rock.Model.Person"/>.
            </summary>
            <param name="personId">A <see cref="T:System.Int32"/> representing the PersonId of the <see cref="T:Rock.Model.Person"/> to search by </param>
            <returns>
            An enumerable collection of <see cref="T:Rock.Model.Auth"/> entities that apply to the specified <see cref="T:Rock.Model.Person"/>.
            </returns>
        </member>
        <member name="M:Rock.Model.AuthService.GetAuths(System.Int32,System.Nullable{System.Int32},System.String)">
            <summary>
            Returns a queryable collection of <see cref="T:Rock.Model.Auth"/> entities (Authorizations) by entity and action.
            </summary>
            <param name="entityTypeId">A <see cref="T:System.Int32"/> representing the EntityTypeId of the <see cref="T:Rock.Model.EntityType"/> to search by.</param>
            <param name="entityId">A <see cref="T:System.Int32"/> representing the EntityId of the entity to search by.</param>
            <param name="action">A <see cref="T:System.String"/> representing the name of the action to search by.</param>
            <returns>A queryable collection of <see cref="T:Rock.Model.Auth"/> entities (Authorizations) for the specified entity and action.</returns>
        </member>
        <member name="M:Rock.Model.AuthService.#ctor(Rock.Data.RockContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.AuthService"/> class
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Rock.Model.AuthService.CanDelete(Rock.Model.Auth,System.String@)">
            <summary>
            Determines whether this instance can delete the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="errorMessage">The error message.</param>
            <returns>
              <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Rock.Model.BlockService">
            <summary>
            Data access/service class for <see cref="T:Rock.Model.Block"/> objects.
            </summary>
            <summary>
            Block Service class
            </summary>
        </member>
        <member name="M:Rock.Model.BlockService.GetByBlockTypeId(System.Int32)">
            <summary>
            Returns an enumerable collection of <see cref="T:Rock.Model.Block">Blocks</see> that implement a specific <see cref="T:Rock.Model.BlockType"/>.
            </summary>
            <param name="blockTypeId">The Id of the <see cref="T:Rock.Model.BlockType"/> to search for.</param>
            <returns>An enumerable collection of <see cref="T:Rock.Model.Block"/> entity objects that implemented the referenced <see cref="T:Rock.Model.BlockType"/>.</returns>
        </member>
        <member name="M:Rock.Model.BlockService.GetByLayout(System.Int32)">
            <summary>
            Returns an enumerable collection of <see cref="T:Rock.Model.Block">Blocks</see> that are implemented as part of a <see cref="T:Rock.Model.Site"/> layout.
            </summary>
            <param name="layoutId">An <see cref="T:System.Int32"/> representing the Id of the <see cref="T:Rock.Model.Layout"/> that the block belongs to.</param>
            <returns>
            An enumerable collection of <see cref="T:Rock.Model.Block">Blocks</see> that are implemented as part of the provided site layout.
            </returns>
        </member>
        <member name="M:Rock.Model.BlockService.GetByLayoutAndZone(System.Int32,System.String)">
            <summary>
            Returns an enumerable collection of <see cref="T:Rock.Model.Block">Blocks</see> that are implemented in a specific zone on a Site Layout template.
            </summary>
            <param name="layoutId">An <see cref="T:System.Int32"/> representing the Id of the <see cref="T:Rock.Model.Layout"/> that the block belongs to.</param>
            <param name="zone">A <see cref="T:System.String"/> representing the name of the Zone to search by.</param>
            <returns>
            An enumerable collection of <see cref="T:Rock.Model.Block">Blocks</see> that are implemented in a Zone of a <see cref="T:Rock.Model.Site"/> Layout.
            </returns>
        </member>
        <member name="M:Rock.Model.BlockService.GetByPage(System.Int32)">
            <summary>
            Returns a collection of <see cref="T:Rock.Model.Block">Blocks</see> that are implemented on a specific page.
            </summary>
            <param name="pageId">An <see cref="T:System.Int32"/> representing the Id of a <see cref="T:Rock.Model.Page"/> that a <see cref="T:Rock.Model.Block"/> may be implemented on.</param>
            <returns>An enumerable collection of <see cref="T:Rock.Model.Block">Blocks</see> that are implemented on the <see cref="T:Rock.Model.Page"/>.</returns>
        </member>
        <member name="M:Rock.Model.BlockService.GetByPageAndZone(System.Int32,System.String)">
            <summary>
            Returns a collection of <see cref="T:Rock.Model.Block">Blocks</see> that are implemented in a Zone on a specific page.
            </summary>
            <param name="pageId">An <see cref="T:System.Int32"/> that represents the Id of <see cref="T:Rock.Model.Page"/> that a <see cref="T:Rock.Model.Block"/> may be implemented on.</param>
            <param name="zone">A <see cref="T:System.String"/> that represents the name of a page/layout zone that a <see cref="T:Rock.Model.Block"/> may be implemented on.</param>
            <returns>An enumerable collection of <see cref="T:Rock.Model.Block">Blocks</see> that are implemented in a specific Zone of a <see cref="T:Rock.Model.Page"/>.</returns>
        </member>
        <member name="M:Rock.Model.BlockService.GetMaxOrder(Rock.Model.Block)">
            <summary>
            Returns the next available position for a <see cref="T:Rock.Model.Block"/> in a given Zone.
            </summary>
            <param name="block">A <see cref="T:Rock.Model.Block"/> entity object.</param>
            <returns>An <see cref="T:System.Int32"/> that contains the next available position for a <see cref="T:Rock.Model.Block"/> in a Zone</returns>
        </member>
        <member name="M:Rock.Model.BlockService.#ctor(Rock.Data.RockContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.BlockService"/> class
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Rock.Model.BlockService.CanDelete(Rock.Model.Block,System.String@)">
            <summary>
            Determines whether this instance can delete the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="errorMessage">The error message.</param>
            <returns>
              <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Rock.Model.BlockTypeService">
            <summary>
            Data access/service class for <see cref="T:Rock.Model.BlockType"/> objects.
            </summary>
            <summary>
            BlockType Service class
            </summary>
        </member>
        <member name="M:Rock.Model.BlockTypeService.GetByGuid(System.Guid)">
            <summary>
            Gets a <see cref="T:Rock.Model.BlockType"/> by it's Guid.
            </summary>
            <param name="guid"><see cref="T:System.Guid"/> identifier  filter to search by.</param>
            <returns>The <see cref="T:Rock.Model.BlockType"/> that has a Guid that matches the provided value, if none are found returns null. </returns>
        </member>
        <member name="M:Rock.Model.BlockTypeService.GetByName(System.String)">
            <summary>
            Gets a collection of <see cref="T:Rock.Model.BlockType"/> entities by Name
            </summary>
            <param name="name">A <see cref="T:System.String"/> containing the Name filter to search for. </param>
            <returns>An enumerable collection of <see cref="T:Rock.Model.BlockType"/> entities who's Name property matches the search criteria.</returns>
        </member>
        <member name="M:Rock.Model.BlockTypeService.GetByPath(System.String)">
            <summary>
            Gets a collection of <see cref="T:Rock.Model.BlockType"/> entities by path.
            </summary>
            <param name="path">A <see cref="T:System.String"/> containing the path to search for.</param>
            <returns>A collection of <see cref="T:Rock.Model.BlockType"/> entities who's Path property matches the search criteria.</returns>
        </member>
        <member name="M:Rock.Model.BlockTypeService.RegisterBlockTypes(System.String,System.Web.UI.Page,System.Boolean)">
            <summary>
            Registers any block types that are not currently registered in Rock.
            </summary>
            <param name="physWebAppPath">A <see cref="T:System.String"/> containing the physical path to Rock on the server.</param>
            <param name="page">The <see cref="T:System.Web.UI.Page"/>.</param>
            <param name="refreshAll">if set to <c>true</c> will refresh name, category, and description for all block types (not just the new ones)</param>
        </member>
        <member name="M:Rock.Model.BlockTypeService.FindAllBlocksInPath(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.String)">
            <summary>
            Finds all the <see cref="T:Rock.Model.BlockType">BlockTypes</see> within a given path.
            </summary>
            <param name="physWebAppPath">The physical web application path.</param>
            <param name="list">A <see cref="T:System.Collections.Generic.Dictionary`2"/> containing all the <see cref="T:Rock.Model.BlockType">BlockTypes</see> that have been found.</param>
            <param name="folder">A <see cref="T:System.String"/> containing the subdirectory to to search through.</param>
        </member>
        <member name="M:Rock.Model.BlockTypeService.#ctor(Rock.Data.RockContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.BlockTypeService"/> class
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Rock.Model.BlockTypeService.CanDelete(Rock.Model.BlockType,System.String@)">
            <summary>
            Determines whether this instance can delete the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="errorMessage">The error message.</param>
            <returns>
              <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Rock.Model.AttendanceCode">
            <summary>
            Represents the security code that is issued for an individual when they check in to an group occurrence/event. An AttendanceCode can cover
            multiple <see cref="T:Rock.Model.Attendance"/> incidents for an individual.
            </summary>
        </member>
        <member name="M:Rock.Model.AttendanceCode.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> containing the Code that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> containing the Code that represents this instance.
            </returns>
        </member>
        <member name="P:Rock.Model.AttendanceCode.IssueDateTime">
            <summary>
            Gets or sets the date and time that the Attendance Code was issued.
            </summary>
            <value>
            A <see cref="T:System.DateTime"/> representing the date and time that the Attendance Code was issued.
            </value>
        </member>
        <member name="P:Rock.Model.AttendanceCode.Code">
            <summary>
            Gets or sets the attendance/security code.
            </summary>
            <value>
            A <see cref="T:System.String"/> representing the attendance/security code.
            </value>
        </member>
        <member name="P:Rock.Model.AttendanceCode.Attendances">
            <summary>
            Gets or sets a collection of <see cref="T:Rock.Model.Attendance"/> entities that are associated with this AttendanceCode.
            </summary>
            <value>
            The set of <see cref="T:Rock.Model.Attendance"/> entities that are associated with this AttendanceCode.
            </value>
        </member>
        <member name="T:Rock.Model.AttendanceCodeConfiguration">
            <summary>
            File Configuration class.
            </summary>
        </member>
        <member name="M:Rock.Model.AttendanceCodeConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.AttendanceCodeConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Rock.Model.CategoryService">
            <summary>
            Data access/service class for <see cref="T:Rock.Model.Category"/> objects.
            </summary>
            <summary>
            Category Service class
            </summary>
        </member>
        <member name="M:Rock.Model.CategoryService.Get(System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Returns a queryable collection of <see cref="T:Rock.Model.Category">Categories</see> by parent <see cref="T:Rock.Model.Category"/> and <see cref="T:Rock.Model.EntityType"/>.
            </summary>
            <param name="ParentId">A <see cref="T:System.Int32"/> representing the CategoryID of the parent <see cref="T:Rock.Model.Category"/> to search by. To find <see cref="T:Rock.Model.Category">Categories</see>
            that do not inherit from a parent category, this value will be null.</param>
            <param name="entityTypeId">A <see cref="T:System.Int32"/> representing the EntityTypeId of the <see cref="T:Rock.Model.EntityType"/> to search by.</param>
            <returns>A queryable collection of <see cref="T:Rock.Model.Category">Categories</see> that meet the specified criteria. </returns>
        </member>
        <member name="M:Rock.Model.CategoryService.Get(System.String,System.Nullable{System.Int32},System.String,System.String)">
            <summary>
            Returns a queryable collection of <see cref="T:Rock.Model.Category">Categories</see> by Name, <see cref="T:Rock.Model.EntityType"/>, Qualifier Column and Qualifier Value.
            </summary>
            <param name="name">A <see cref="T:System.String"/> representing the name to search by.</param>
            <param name="entityTypeId">A <see cref="T:System.Int32"/> representing the EntityType of the <see cref="T:Rock.Model.EntityType"/> to search by.</param>
            <param name="entityTypeQualifierColumn">A <see cref="T:System.String"/> representing the name of the Qualifier Column to search by.</param>
            <param name="entityTypeQualifierValue">A <see cref="T:System.String"/> representing the name of the Qualifier Value to search by.</param>
            <returns>A queryable collection of <see cref="T:Rock.Model.Category">Categories</see> that meet the search criteria.</returns>
        </member>
        <member name="M:Rock.Model.CategoryService.GetByEntityTypeId(System.Nullable{System.Int32})">
            <summary>
            Returns a enumerable collection of <see cref="T:Rock.Model.Category">Categories</see> by <see cref="T:Rock.Model.EntityType"/>
            </summary>
            <param name="entityTypeId">A <see cref="T:System.Int32"/> representing the EntityTypeId of the <see cref="T:Rock.Model.EntityType"/> to search by.</param>
            <returns>An enumerable collection of <see cref="T:Rock.Model.Category">Categories</see> are used for the specified <see cref="T:Rock.Model.Category"/>.</returns>
        </member>
        <member name="M:Rock.Model.CategoryService.#ctor(Rock.Data.RockContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.CategoryService"/> class
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Rock.Model.CategoryService.CanDelete(Rock.Model.Category,System.String@)">
            <summary>
            Determines whether this instance can delete the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="errorMessage">The error message.</param>
            <returns>
              <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Rock.Model.AttendanceCodeService">
            <summary>
            AttendanceCode Service class
            </summary>
            <summary>
            Data Access/Service class for <see cref="T:Rock.Model.AttendanceCode"/> entity types
            </summary>
        </member>
        <member name="M:Rock.Model.AttendanceCodeService.#ctor(Rock.Data.RockContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.AttendanceCodeService"/> class
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Rock.Model.AttendanceCodeService.CanDelete(Rock.Model.AttendanceCode,System.String@)">
            <summary>
            Determines whether this instance can delete the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="errorMessage">The error message.</param>
            <returns>
              <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="F:Rock.Model.AttendanceCodeService.codeCharacters">
            <summary>
            An array of characters that can be used as a part of  <see cref="T:Rock.Model.AttendanceCode">AttendanceCodes</see>
            </summary>
        </member>
        <member name="F:Rock.Model.AttendanceCodeService.noGood">
            <summary>
            A list of <see cref="T:System.String"/> values that are not allowable as attendance codes.
            </summary>
        </member>
        <member name="M:Rock.Model.AttendanceCodeService.Get(System.DateTime,System.String)">
            <summary>
            Returns a queryable collection of <see cref="T:Rock.Model.AttendanceCode"/> entities that used a specified code on a specified date.
            </summary>
            <param name="day">A <see cref="T:System.DateTime"/> representing the date to search by.</param>
            <param name="code">A <see cref="T:System.String"/> representing the code to search for.</param>
            <returns>A queryable collection of <see cref="T:Rock.Model.AttendanceCode"/> entities that contain a specific code on a specified day. </returns>
        </member>
        <member name="M:Rock.Model.AttendanceCodeService.GetNew(System.Int32)">
            <summary>
            Returns a new <see cref="T:Rock.Model.AttendanceCode"/>
            </summary>
            <param name="codeLength">A <see cref="T:System.Int32"/> representing the length of the (security) code.</param>
            <returns>A new <see cref="T:Rock.Model.AttendanceCode"/></returns>
        </member>
        <member name="M:Rock.Model.AttendanceCodeService.GenerateRandomCode(System.Int32)">
            <summary>
            Generates a random (security) code.
            </summary>
            <param name="length">A <see cref="T:System.Int32"/> representing the length that the code needs to be.</param>
            <returns>A <see cref="T:System.String"/> representing the (security) code.</returns>
        </member>
        <member name="T:Rock.Model.AttendanceCodeExtensionMethods">
            <summary>
            Generated Extension Methods
            </summary>
        </member>
        <member name="M:Rock.Model.AttendanceCodeExtensionMethods.Clone(Rock.Model.AttendanceCode,System.Boolean)">
            <summary>
            Clones this AttendanceCode object to a new AttendanceCode object
            </summary>
            <param name="source">The source.</param>
            <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.AttendanceCodeExtensionMethods.CopyPropertiesFrom(Rock.Model.AttendanceCode,Rock.Model.AttendanceCode)">
            <summary>
            Copies the properties from another AttendanceCode object to this AttendanceCode object
            </summary>
            <param name="target">The target.</param>
            <param name="source">The source.</param>
        </member>
        <member name="T:Rock.Model.AttendanceService">
            <summary>
            Attendance Service class
            </summary>
            <summary>
            Data Access/Service class for <see cref="T:Rock.Model.Attendance"/> entity objects
            </summary>
        </member>
        <member name="M:Rock.Model.AttendanceService.#ctor(Rock.Data.RockContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.AttendanceService"/> class
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Rock.Model.AttendanceService.CanDelete(Rock.Model.Attendance,System.String@)">
            <summary>
            Determines whether this instance can delete the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="errorMessage">The error message.</param>
            <returns>
              <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Rock.Model.AttendanceService.Get(System.DateTime,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns a specific <see cref="T:Rock.Model.Attendance"/> record.
            </summary>
            <param name="date">A <see cref="T:System.DateTime"/> representing the the date attended.</param>
            <param name="locationId">A <see cref="T:System.Int32"/> representing the Id of the <see cref="T:Rock.Model.Location"/> </param>
            <param name="scheduleId">A <see cref="T:System.Int32"/> representing the Id of the <see cref="T:Rock.Model.Schedule"/></param>
            <param name="groupId">A <see cref="T:System.Int32"/> representing the Id of the <see cref="T:Rock.Model.Group"/>.</param>
            <param name="personId">A <see cref="T:System.Int32"/> representing the Id of the <see cref="T:Rock.Model.Person"/></param>
            <returns>The first <see cref="T:Rock.Model.Attendance"/> entity that matches the provided values.</returns>
        </member>
        <member name="M:Rock.Model.AttendanceService.GetByDateAndLocation(System.DateTime,System.Int32)">
            <summary>
            Returns a queryable collection of <see cref="T:Rock.Model.Attendance"/> for a <see cref="T:Rock.Model.Location"/> on a specified date.
            </summary>
            <param name="locationId">A <see cref="T:System.Int32"/> representing the Id of the <see cref="T:Rock.Model.Location"/></param>
            <param name="date">A <see cref="T:System.DateTime"/> representing the date attended.</param>
            <returns>A queryable collection of <see cref="T:Rock.Model.Attendance"/> entities for a specific date and location.</returns>
        </member>
        <member name="T:Rock.Model.AttendanceExtensionMethods">
            <summary>
            Generated Extension Methods
            </summary>
        </member>
        <member name="M:Rock.Model.AttendanceExtensionMethods.Clone(Rock.Model.Attendance,System.Boolean)">
            <summary>
            Clones this Attendance object to a new Attendance object
            </summary>
            <param name="source">The source.</param>
            <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.AttendanceExtensionMethods.CopyPropertiesFrom(Rock.Model.Attendance,Rock.Model.Attendance)">
            <summary>
            Copies the properties from another Attendance object to this Attendance object
            </summary>
            <param name="target">The target.</param>
            <param name="source">The source.</param>
        </member>
        <member name="T:Rock.Model.AuthExtensionMethods">
            <summary>
            Generated Extension Methods
            </summary>
        </member>
        <member name="M:Rock.Model.AuthExtensionMethods.Clone(Rock.Model.Auth,System.Boolean)">
            <summary>
            Clones this Auth object to a new Auth object
            </summary>
            <param name="source">The source.</param>
            <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.AuthExtensionMethods.CopyPropertiesFrom(Rock.Model.Auth,Rock.Model.Auth)">
            <summary>
            Copies the properties from another Auth object to this Auth object
            </summary>
            <param name="target">The target.</param>
            <param name="source">The source.</param>
        </member>
        <member name="T:Rock.Model.BinaryFileService">
            <summary>
            BinaryFile Service class
            </summary>
            <summary>
            Data Access Service class for <see cref="T:Rock.Model.BinaryFile"/> objects.
            </summary>
        </member>
        <member name="M:Rock.Model.BinaryFileService.#ctor(Rock.Data.RockContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.BinaryFileService"/> class
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Rock.Model.BinaryFileService.CanDelete(Rock.Model.BinaryFile,System.String@)">
            <summary>
            Determines whether this instance can delete the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="errorMessage">The error message.</param>
            <returns>
              <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Rock.Model.BinaryFileService.Get(System.Guid)">
            <summary>
            Gets the specified unique identifier.
            </summary>
            <param name="guid">The unique identifier.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.BinaryFileService.Get(System.Int32)">
            <summary>
            Gets the specified identifier.
            </summary>
            <param name="id">The identifier.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.BinaryFileService.GetFileContentFromStorageProvider(Rock.Model.BinaryFile)">
            <summary>
            Gets the file content from storage provider.
            </summary>
            <param name="binaryFile">The binary file.</param>
        </member>
        <member name="M:Rock.Model.BinaryFileService.DetermineBinaryFileStorageProvider(Rock.Data.RockContext,Rock.Model.BinaryFile)">
            <summary>
            Determines the storage provider that was used the last time the file was saved
            </summary>
            <param name="dbContext">The database context.</param>
            <param name="item">The item.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.BinaryFileService.BeginGet(System.AsyncCallback,System.Web.HttpContext,System.Guid)">
            <summary>
            Initiates an asynchronous get of the binary file specified by fileGuid
            </summary>
            <param name="callback">The callback.</param>
            <param name="context">The context.</param>
            <param name="fileGuid">The file unique identifier.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.BinaryFileService.BeginGet(System.AsyncCallback,System.Web.HttpContext,System.Int32)">
            <summary>
            Initiates an asynchronous get of the binary file specified by fileId
            </summary>
            <param name="callback">The callback.</param>
            <param name="context">The context.</param>
            <param name="fileId">The file identifier.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.BinaryFileService.BeginGet(System.AsyncCallback,System.Web.HttpContext,System.Guid,System.Nullable{System.Int32})">
            <summary>
            Initiates an asynchronous get of the binary file specified by fileId or fileGuid
            Intended to be used by an IHttpAsyncHandler
            </summary>
            <param name="callback">The callback.</param>
            <param name="context">The context.</param>
            <param name="fileGuid">The file unique identifier.</param>
            <param name="fileId">The file identifier.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.BinaryFileService.EndGet(System.IAsyncResult,System.Web.HttpContext)">
            <summary>
            Ends the get.
            </summary>
            <param name="asyncResult">The asynchronous result.</param>
            <param name="context">The context.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.BinaryFileService.EndGet(System.IAsyncResult,System.Web.HttpContext,System.Boolean@)">
            <summary>
            Ends the get.
            </summary>
            <param name="asyncResult">The asynchronous result.</param>
            <param name="context">The context.</param>
            <param name="requiresSecurity">if set to <c>true</c> [requires security].</param>
            <returns></returns>
        </member>
        <member name="T:Rock.Model.BinaryFileExtensionMethods">
            <summary>
            Generated Extension Methods
            </summary>
        </member>
        <member name="M:Rock.Model.BinaryFileExtensionMethods.Clone(Rock.Model.BinaryFile,System.Boolean)">
            <summary>
            Clones this BinaryFile object to a new BinaryFile object
            </summary>
            <param name="source">The source.</param>
            <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.BinaryFileExtensionMethods.CopyPropertiesFrom(Rock.Model.BinaryFile,Rock.Model.BinaryFile)">
            <summary>
            Copies the properties from another BinaryFile object to this BinaryFile object
            </summary>
            <param name="target">The target.</param>
            <param name="source">The source.</param>
        </member>
        <member name="T:Rock.Model.BinaryFileTypeService">
            <summary>
            BinaryFileType Service class
            </summary>
        </member>
        <member name="M:Rock.Model.BinaryFileTypeService.#ctor(Rock.Data.RockContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.BinaryFileTypeService"/> class
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Rock.Model.BinaryFileTypeService.CanDelete(Rock.Model.BinaryFileType,System.String@)">
            <summary>
            Determines whether this instance can delete the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="errorMessage">The error message.</param>
            <returns>
              <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Rock.Model.BinaryFileTypeExtensionMethods">
            <summary>
            Generated Extension Methods
            </summary>
        </member>
        <member name="M:Rock.Model.BinaryFileTypeExtensionMethods.Clone(Rock.Model.BinaryFileType,System.Boolean)">
            <summary>
            Clones this BinaryFileType object to a new BinaryFileType object
            </summary>
            <param name="source">The source.</param>
            <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.BinaryFileTypeExtensionMethods.CopyPropertiesFrom(Rock.Model.BinaryFileType,Rock.Model.BinaryFileType)">
            <summary>
            Copies the properties from another BinaryFileType object to this BinaryFileType object
            </summary>
            <param name="target">The target.</param>
            <param name="source">The source.</param>
        </member>
        <member name="T:Rock.Model.BlockExtensionMethods">
            <summary>
            Generated Extension Methods
            </summary>
        </member>
        <member name="M:Rock.Model.BlockExtensionMethods.Clone(Rock.Model.Block,System.Boolean)">
            <summary>
            Clones this Block object to a new Block object
            </summary>
            <param name="source">The source.</param>
            <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.BlockExtensionMethods.CopyPropertiesFrom(Rock.Model.Block,Rock.Model.Block)">
            <summary>
            Copies the properties from another Block object to this Block object
            </summary>
            <param name="target">The target.</param>
            <param name="source">The source.</param>
        </member>
        <member name="T:Rock.Model.BlockTypeExtensionMethods">
            <summary>
            Generated Extension Methods
            </summary>
        </member>
        <member name="M:Rock.Model.BlockTypeExtensionMethods.Clone(Rock.Model.BlockType,System.Boolean)">
            <summary>
            Clones this BlockType object to a new BlockType object
            </summary>
            <param name="source">The source.</param>
            <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.BlockTypeExtensionMethods.CopyPropertiesFrom(Rock.Model.BlockType,Rock.Model.BlockType)">
            <summary>
            Copies the properties from another BlockType object to this BlockType object
            </summary>
            <param name="target">The target.</param>
            <param name="source">The source.</param>
        </member>
        <member name="T:Rock.Model.CommunicationRecipientExtensionMethods">
            <summary>
            Generated Extension Methods
            </summary>
        </member>
        <member name="M:Rock.Model.CommunicationRecipientExtensionMethods.Clone(Rock.Model.CommunicationRecipient,System.Boolean)">
            <summary>
            Clones this CommunicationRecipient object to a new CommunicationRecipient object
            </summary>
            <param name="source">The source.</param>
            <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.CommunicationRecipientExtensionMethods.CopyPropertiesFrom(Rock.Model.CommunicationRecipient,Rock.Model.CommunicationRecipient)">
            <summary>
            Copies the properties from another CommunicationRecipient object to this CommunicationRecipient object
            </summary>
            <param name="target">The target.</param>
            <param name="source">The source.</param>
        </member>
        <member name="T:Rock.Model.CommunicationService">
            <summary>
            Communication Service class
            </summary>
        </member>
        <member name="M:Rock.Model.CommunicationService.#ctor(Rock.Data.RockContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.CommunicationService"/> class
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Rock.Model.CommunicationService.CanDelete(Rock.Model.Communication,System.String@)">
            <summary>
            Determines whether this instance can delete the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="errorMessage">The error message.</param>
            <returns>
              <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Rock.Model.CommunicationExtensionMethods">
            <summary>
            Generated Extension Methods
            </summary>
        </member>
        <member name="M:Rock.Model.CommunicationExtensionMethods.Clone(Rock.Model.Communication,System.Boolean)">
            <summary>
            Clones this Communication object to a new Communication object
            </summary>
            <param name="source">The source.</param>
            <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.CommunicationExtensionMethods.CopyPropertiesFrom(Rock.Model.Communication,Rock.Model.Communication)">
            <summary>
            Copies the properties from another Communication object to this Communication object
            </summary>
            <param name="target">The target.</param>
            <param name="source">The source.</param>
        </member>
        <member name="T:Rock.Model.DataViewFilterService">
            <summary>
            DataViewFilter Service class
            </summary>
        </member>
        <member name="M:Rock.Model.DataViewFilterService.#ctor(Rock.Data.RockContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.DataViewFilterService"/> class
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Rock.Model.DataViewFilterService.CanDelete(Rock.Model.DataViewFilter,System.String@)">
            <summary>
            Determines whether this instance can delete the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="errorMessage">The error message.</param>
            <returns>
              <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Rock.Model.DataViewFilterExtensionMethods">
            <summary>
            Generated Extension Methods
            </summary>
        </member>
        <member name="M:Rock.Model.DataViewFilterExtensionMethods.Clone(Rock.Model.DataViewFilter,System.Boolean)">
            <summary>
            Clones this DataViewFilter object to a new DataViewFilter object
            </summary>
            <param name="source">The source.</param>
            <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.DataViewFilterExtensionMethods.CopyPropertiesFrom(Rock.Model.DataViewFilter,Rock.Model.DataViewFilter)">
            <summary>
            Copies the properties from another DataViewFilter object to this DataViewFilter object
            </summary>
            <param name="target">The target.</param>
            <param name="source">The source.</param>
        </member>
        <member name="T:Rock.Model.DataViewService">
            <summary>
            DataView Service class
            </summary>
            <summary>
            DataView Service and Data access class
            </summary>
        </member>
        <member name="M:Rock.Model.DataViewService.#ctor(Rock.Data.RockContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.DataViewService"/> class
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Rock.Model.DataViewService.CanDelete(Rock.Model.DataView,System.String@)">
            <summary>
            Determines whether this instance can delete the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="errorMessage">The error message.</param>
            <returns>
              <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Rock.Model.DataViewService.GetAvailableEntityTypes">
            <summary>
            Returns an enumerable collection of <see cref="T:Rock.Model.EntityType">EntityTypes</see> that have a DataView associated with them.
            </summary>
            <returns>An enumerable collection of <see cref="T:Rock.Model.EntityType">EntityTypes</see> that have a <see cref="T:Rock.Model.DataView"/> associated with them.</returns>
        </member>
        <member name="M:Rock.Model.DataViewService.GetByEntityTypeId(System.Int32)">
            <summary>
            Returns an enumerable collection of <see cref="T:Rock.Model.DataView">DataViews</see> that are associated with a specified <see cref="T:Rock.Model.EntityType"/>.
            </summary>
            <param name="entityTypeId">A <see cref="T:System.Int32"/> representing the EntityTypeId of the <see cref="T:Rock.Model.EntityType"/> to search by.</param>
            <returns>An enumerable collection of <see cref="T:Rock.Model.DataView">DataViews</see> that are associated with the specified <see cref="T:Rock.Model.EntityType"/>.</returns>
        </member>
        <member name="T:Rock.Model.DataViewExtensionMethods">
            <summary>
            Generated Extension Methods
            </summary>
        </member>
        <member name="M:Rock.Model.DataViewExtensionMethods.Clone(Rock.Model.DataView,System.Boolean)">
            <summary>
            Clones this DataView object to a new DataView object
            </summary>
            <param name="source">The source.</param>
            <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.DataViewExtensionMethods.CopyPropertiesFrom(Rock.Model.DataView,Rock.Model.DataView)">
            <summary>
            Copies the properties from another DataView object to this DataView object
            </summary>
            <param name="target">The target.</param>
            <param name="source">The source.</param>
        </member>
        <member name="T:Rock.Model.DeviceService">
            <summary>
            Device Service class
            </summary>
            <summary>
            Data access/service class for the <see cref="T:Rock.Model.Device"/> entity objects
            </summary>
        </member>
        <member name="M:Rock.Model.DeviceService.#ctor(Rock.Data.RockContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.DeviceService"/> class
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Rock.Model.DeviceService.CanDelete(Rock.Model.Device,System.String@)">
            <summary>
            Determines whether this instance can delete the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="errorMessage">The error message.</param>
            <returns>
              <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Rock.Model.DeviceService.GetByDeviceTypeGuid(System.Guid)">
            <summary>
            Returns a queryable collection of <see cref="T:Rock.Model.Device">Devices</see> by the Guid of their Device Type <see cref="T:Rock.Model.DefinedValue"/>.
            </summary>
            <param name="guid">A <see cref="T:System.Guid"/> representing the unique identifier of the <see cref="T:Rock.Model.Device">Device's</see> Device Type <see cref="T:Rock.Model.DefinedValue"/></param>
            <returns>A queryable co</returns>
        </member>
        <member name="M:Rock.Model.DeviceService.GetByGeocode(System.Double,System.Double,System.Int32)">
            <summary>
            Finds the matching device for the given lat/long coordinates. The given coordinates
            must intersect one of the stored GeoFence values to be a match.  Use the deviceTypeValueId
            to constrain matching to only certain device types.
            </summary>
            <param name="latitude">Latitude of the mobile phone/kiosk.</param>
            <param name="longitude">Longitude of the mobile phone/kiosk.</param>
            <param name="deviceTypeValueId">Longitude of the mobile phone/kiosk.</param>
            <returns>a single matching Device kiosk or null if nothing was matched</returns>
        </member>
        <member name="M:Rock.Model.DeviceService.GetByIPAddress(System.String,System.Int32,System.Boolean)">
            <summary>
            Gets the device by IP address.
            </summary>
            <param name="ipAddress">A <see cref="T:System.String"/> representing the ip address.</param>
            <param name="deviceTypeValueId">A <see cref="T:System.Int32"/> representing the DeviceType <see cref="T:Rock.Model.DefinedValue"/> of the device that you are searching for.</param>
            <param name="skipReverseLookup">A <see cref="T:System.Boolean"/> indicating if a reverse lookup will be skipped. If <c>true</c> a DNS reverse lookup for the name of the system
            that belongs to the provided IP address will not be performed, otherwise <c>false</c> and a DNS reverse lookup will be performed.</param>
            <returns>
            A <see cref="T:Rock.Model.Device"/> that is associated with the provided IP address.
            </returns>
        </member>
        <member name="T:Rock.Model.DeviceExtensionMethods">
            <summary>
            Generated Extension Methods
            </summary>
        </member>
        <member name="M:Rock.Model.DeviceExtensionMethods.Clone(Rock.Model.Device,System.Boolean)">
            <summary>
            Clones this Device object to a new Device object
            </summary>
            <param name="source">The source.</param>
            <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.DeviceExtensionMethods.CopyPropertiesFrom(Rock.Model.Device,Rock.Model.Device)">
            <summary>
            Copies the properties from another Device object to this Device object
            </summary>
            <param name="target">The target.</param>
            <param name="source">The source.</param>
        </member>
        <member name="T:Rock.Model.FinancialAccountService">
            <summary>
            FinancialAccount Service class
            </summary>
        </member>
        <member name="M:Rock.Model.FinancialAccountService.#ctor(Rock.Data.RockContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.FinancialAccountService"/> class
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Rock.Model.FinancialAccountService.CanDelete(Rock.Model.FinancialAccount,System.String@)">
            <summary>
            Determines whether this instance can delete the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="errorMessage">The error message.</param>
            <returns>
              <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Rock.Model.FinancialAccountExtensionMethods">
            <summary>
            Generated Extension Methods
            </summary>
        </member>
        <member name="M:Rock.Model.FinancialAccountExtensionMethods.Clone(Rock.Model.FinancialAccount,System.Boolean)">
            <summary>
            Clones this FinancialAccount object to a new FinancialAccount object
            </summary>
            <param name="source">The source.</param>
            <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.FinancialAccountExtensionMethods.CopyPropertiesFrom(Rock.Model.FinancialAccount,Rock.Model.FinancialAccount)">
            <summary>
            Copies the properties from another FinancialAccount object to this FinancialAccount object
            </summary>
            <param name="target">The target.</param>
            <param name="source">The source.</param>
        </member>
        <member name="T:Rock.Model.FinancialBatchService">
            <summary>
            FinancialBatch Service class
            </summary>
        </member>
        <member name="M:Rock.Model.FinancialBatchService.#ctor(Rock.Data.RockContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.FinancialBatchService"/> class
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Rock.Model.FinancialBatchService.CanDelete(Rock.Model.FinancialBatch,System.String@)">
            <summary>
            Determines whether this instance can delete the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="errorMessage">The error message.</param>
            <returns>
              <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Rock.Model.FinancialBatchExtensionMethods">
            <summary>
            Generated Extension Methods
            </summary>
        </member>
        <member name="M:Rock.Model.FinancialBatchExtensionMethods.Clone(Rock.Model.FinancialBatch,System.Boolean)">
            <summary>
            Clones this FinancialBatch object to a new FinancialBatch object
            </summary>
            <param name="source">The source.</param>
            <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.FinancialBatchExtensionMethods.CopyPropertiesFrom(Rock.Model.FinancialBatch,Rock.Model.FinancialBatch)">
            <summary>
            Copies the properties from another FinancialBatch object to this FinancialBatch object
            </summary>
            <param name="target">The target.</param>
            <param name="source">The source.</param>
        </member>
        <member name="T:Rock.Model.FinancialPledgeService">
            <summary>
            FinancialPledge Service class
            </summary>
        </member>
        <member name="M:Rock.Model.FinancialPledgeService.#ctor(Rock.Data.RockContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.FinancialPledgeService"/> class
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Rock.Model.FinancialPledgeService.CanDelete(Rock.Model.FinancialPledge,System.String@)">
            <summary>
            Determines whether this instance can delete the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="errorMessage">The error message.</param>
            <returns>
              <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Rock.Model.FinancialPledgeExtensionMethods">
            <summary>
            Generated Extension Methods
            </summary>
        </member>
        <member name="M:Rock.Model.FinancialPledgeExtensionMethods.Clone(Rock.Model.FinancialPledge,System.Boolean)">
            <summary>
            Clones this FinancialPledge object to a new FinancialPledge object
            </summary>
            <param name="source">The source.</param>
            <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.FinancialPledgeExtensionMethods.CopyPropertiesFrom(Rock.Model.FinancialPledge,Rock.Model.FinancialPledge)">
            <summary>
            Copies the properties from another FinancialPledge object to this FinancialPledge object
            </summary>
            <param name="target">The target.</param>
            <param name="source">The source.</param>
        </member>
        <member name="T:Rock.Model.FinancialScheduledTransactionDetailService">
            <summary>
            FinancialScheduledTransactionDetail Service class
            </summary>
        </member>
        <member name="M:Rock.Model.FinancialScheduledTransactionDetailService.#ctor(Rock.Data.RockContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.FinancialScheduledTransactionDetailService"/> class
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Rock.Model.FinancialScheduledTransactionDetailService.CanDelete(Rock.Model.FinancialScheduledTransactionDetail,System.String@)">
            <summary>
            Determines whether this instance can delete the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="errorMessage">The error message.</param>
            <returns>
              <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Rock.Model.FinancialScheduledTransactionDetailExtensionMethods">
            <summary>
            Generated Extension Methods
            </summary>
        </member>
        <member name="M:Rock.Model.FinancialScheduledTransactionDetailExtensionMethods.Clone(Rock.Model.FinancialScheduledTransactionDetail,System.Boolean)">
            <summary>
            Clones this FinancialScheduledTransactionDetail object to a new FinancialScheduledTransactionDetail object
            </summary>
            <param name="source">The source.</param>
            <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.FinancialScheduledTransactionDetailExtensionMethods.CopyPropertiesFrom(Rock.Model.FinancialScheduledTransactionDetail,Rock.Model.FinancialScheduledTransactionDetail)">
            <summary>
            Copies the properties from another FinancialScheduledTransactionDetail object to this FinancialScheduledTransactionDetail object
            </summary>
            <param name="target">The target.</param>
            <param name="source">The source.</param>
        </member>
        <member name="T:Rock.Model.FinancialScheduledTransactionExtensionMethods">
            <summary>
            Generated Extension Methods
            </summary>
        </member>
        <member name="M:Rock.Model.FinancialScheduledTransactionExtensionMethods.Clone(Rock.Model.FinancialScheduledTransaction,System.Boolean)">
            <summary>
            Clones this FinancialScheduledTransaction object to a new FinancialScheduledTransaction object
            </summary>
            <param name="source">The source.</param>
            <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.FinancialScheduledTransactionExtensionMethods.CopyPropertiesFrom(Rock.Model.FinancialScheduledTransaction,Rock.Model.FinancialScheduledTransaction)">
            <summary>
            Copies the properties from another FinancialScheduledTransaction object to this FinancialScheduledTransaction object
            </summary>
            <param name="target">The target.</param>
            <param name="source">The source.</param>
        </member>
        <member name="T:Rock.Model.FinancialTransactionDetailService">
            <summary>
            FinancialTransactionDetail Service class
            </summary>
        </member>
        <member name="M:Rock.Model.FinancialTransactionDetailService.#ctor(Rock.Data.RockContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.FinancialTransactionDetailService"/> class
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Rock.Model.FinancialTransactionDetailService.CanDelete(Rock.Model.FinancialTransactionDetail,System.String@)">
            <summary>
            Determines whether this instance can delete the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="errorMessage">The error message.</param>
            <returns>
              <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Rock.Model.FinancialTransactionDetailExtensionMethods">
            <summary>
            Generated Extension Methods
            </summary>
        </member>
        <member name="M:Rock.Model.FinancialTransactionDetailExtensionMethods.Clone(Rock.Model.FinancialTransactionDetail,System.Boolean)">
            <summary>
            Clones this FinancialTransactionDetail object to a new FinancialTransactionDetail object
            </summary>
            <param name="source">The source.</param>
            <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.FinancialTransactionDetailExtensionMethods.CopyPropertiesFrom(Rock.Model.FinancialTransactionDetail,Rock.Model.FinancialTransactionDetail)">
            <summary>
            Copies the properties from another FinancialTransactionDetail object to this FinancialTransactionDetail object
            </summary>
            <param name="target">The target.</param>
            <param name="source">The source.</param>
        </member>
        <member name="T:Rock.Model.FinancialTransactionImageService">
            <summary>
            FinancialTransactionImage Service class
            </summary>
        </member>
        <member name="M:Rock.Model.FinancialTransactionImageService.#ctor(Rock.Data.RockContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.FinancialTransactionImageService"/> class
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Rock.Model.FinancialTransactionImageService.CanDelete(Rock.Model.FinancialTransactionImage,System.String@)">
            <summary>
            Determines whether this instance can delete the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="errorMessage">The error message.</param>
            <returns>
              <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Rock.Model.FinancialTransactionImageExtensionMethods">
            <summary>
            Generated Extension Methods
            </summary>
        </member>
        <member name="M:Rock.Model.FinancialTransactionImageExtensionMethods.Clone(Rock.Model.FinancialTransactionImage,System.Boolean)">
            <summary>
            Clones this FinancialTransactionImage object to a new FinancialTransactionImage object
            </summary>
            <param name="source">The source.</param>
            <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.FinancialTransactionImageExtensionMethods.CopyPropertiesFrom(Rock.Model.FinancialTransactionImage,Rock.Model.FinancialTransactionImage)">
            <summary>
            Copies the properties from another FinancialTransactionImage object to this FinancialTransactionImage object
            </summary>
            <param name="target">The target.</param>
            <param name="source">The source.</param>
        </member>
        <member name="T:Rock.Model.FinancialTransactionService">
            <summary>
            FinancialTransaction Service class
            </summary>
            <summary>
            Service/Data access class for <see cref="T:Rock.Model.FinancialTransaction"/> entity objects.
            </summary>
        </member>
        <member name="M:Rock.Model.FinancialTransactionService.#ctor(Rock.Data.RockContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.FinancialTransactionService"/> class
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Rock.Model.FinancialTransactionService.CanDelete(Rock.Model.FinancialTransaction,System.String@)">
            <summary>
            Determines whether this instance can delete the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="errorMessage">The error message.</param>
            <returns>
              <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Rock.Model.FinancialTransactionService.GetByTransactionCode(System.String)">
            <summary>
            Gets a transaction by it's transaction code.
            </summary>
            <param name="transactionCode">A <see cref="T:System.String"/> representing the transaction code for the transaction</param>
            <returns>The <see cref="T:Rock.Model.FinancialTransaction"/> that matches the transaction code, this value will be null if a match is not found.</returns>
        </member>
        <member name="T:Rock.Model.FinancialTransactionExtensionMethods">
            <summary>
            Generated Extension Methods
            </summary>
        </member>
        <member name="M:Rock.Model.FinancialTransactionExtensionMethods.Clone(Rock.Model.FinancialTransaction,System.Boolean)">
            <summary>
            Clones this FinancialTransaction object to a new FinancialTransaction object
            </summary>
            <param name="source">The source.</param>
            <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.FinancialTransactionExtensionMethods.CopyPropertiesFrom(Rock.Model.FinancialTransaction,Rock.Model.FinancialTransaction)">
            <summary>
            Copies the properties from another FinancialTransaction object to this FinancialTransaction object
            </summary>
            <param name="target">The target.</param>
            <param name="source">The source.</param>
        </member>
        <member name="T:Rock.Model.GroupLocationService">
            <summary>
            GroupLocation Service class
            </summary>
            <summary>
            Data access/service class for <see cref="T:Rock.Model.GroupLocation"/> objects.
            </summary>
        </member>
        <member name="M:Rock.Model.GroupLocationService.#ctor(Rock.Data.RockContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.GroupLocationService"/> class
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Rock.Model.GroupLocationService.CanDelete(Rock.Model.GroupLocation,System.String@)">
            <summary>
            Determines whether this instance can delete the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="errorMessage">The error message.</param>
            <returns>
              <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Rock.Model.GroupLocationService.GetByLocation(System.Int32)">
            <summary>
            Returns an enumerable collection of <see cref="T:Rock.Model.GroupLocation">GroupLocations</see> by their LocationId.
            </summary>
            <param name="locationId">A <see cref="T:System.Int32"/> representing the Id of a <see cref="T:Rock.Model.Location"/> to search by.</param>
            <returns>An enumerable collection of <see cref="T:Rock.Model.GroupLocation"/> which are associated with the provided <see cref="T:Rock.Model.Location"/> </returns>
        </member>
        <member name="M:Rock.Model.GroupLocationService.GetActiveByLocation(System.Int32)">
            <summary>
            Returns an enumerable collection of  active <see cref="T:Rock.Model.GroupLocation">GroupLocations</see> by their <see cref="T:Rock.Model.Location"/> Id
            </summary>
            <param name="locationId">A <see cref="T:System.Int32"/> representing the Id of the <see cref="T:Rock.Model.Location"/> to search by.</param>
            <returns></returns>
        </member>
        <member name="T:Rock.Model.GroupLocationExtensionMethods">
            <summary>
            Generated Extension Methods
            </summary>
        </member>
        <member name="M:Rock.Model.GroupLocationExtensionMethods.Clone(Rock.Model.GroupLocation,System.Boolean)">
            <summary>
            Clones this GroupLocation object to a new GroupLocation object
            </summary>
            <param name="source">The source.</param>
            <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.GroupLocationExtensionMethods.CopyPropertiesFrom(Rock.Model.GroupLocation,Rock.Model.GroupLocation)">
            <summary>
            Copies the properties from another GroupLocation object to this GroupLocation object
            </summary>
            <param name="target">The target.</param>
            <param name="source">The source.</param>
        </member>
        <member name="T:Rock.Model.HtmlContentService">
            <summary>
            HtmlContent Service class
            </summary>
            <summary>
            Data access and service class for <see cref="T:Rock.Model.HtmlContent"/> entity objects.
            </summary>
        </member>
        <member name="M:Rock.Model.HtmlContentService.#ctor(Rock.Data.RockContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.HtmlContentService"/> class
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Rock.Model.HtmlContentService.CanDelete(Rock.Model.HtmlContent,System.String@)">
            <summary>
            Determines whether this instance can delete the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="errorMessage">The error message.</param>
            <returns>
              <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Rock.Model.HtmlContentService.GetByApprovedByPersonId(System.Nullable{System.Int32})">
            <summary>
            Returns an enumerable collection of <see cref="T:Rock.Model.HtmlContent"/> entity objects by their Approver <see cref="T:Rock.Model.Person"/>
            </summary>
            <param name="approvedByPersonId">A <see cref="T:System.Int32"/> representing the Id of the <see cref="T:Rock.Model.Person"/> who approved the <see cref="T:Rock.Model.HtmlContent"/>. This 
            value can be null </param>
            <returns>An enumerable collection of <see cref="T:Rock.Model.HtmlContent"/> entity objects that were approved by the specified <see cref="T:Rock.Model.Person"/>.</returns>
        </member>
        <member name="M:Rock.Model.HtmlContentService.GetByBlockId(System.Int32)">
            <summary>
            Returns an enumerable collection of <see cref="T:Rock.Model.HtmlContent"/> entities by <see cref="T:Rock.Model.Block"/> (instance).
            </summary>
            <param name="blockId">A <see cref="T:System.Int32"/> representing the Id of the <see cref="T:Rock.Model.Block"/>.</param>
            <returns>An enumerable collection of <see cref="T:Rock.Model.HtmlContent">HTMLContents</see> for the specified <see cref="T:Rock.Model.Block"/>.</returns>
        </member>
        <member name="M:Rock.Model.HtmlContentService.GetByBlockIdAndEntityValueAndVersion(System.Int32,System.String,System.Int32)">
            <summary>
            Returns a specific <see cref="T:Rock.Model.HtmlContent"/> by Block, entity value and version
            </summary>
            <param name="blockId">A <see cref="T:System.Int32"/> the Id of the <see cref="T:Rock.Model.Block"/> that the <see cref="T:Rock.Model.HtmlContent"/> is used on. </param>
            <param name="entityValue">A <see cref="T:System.String"/> representing the EntityValue (qualifier) used to customize the <see cref="T:Rock.Model.HtmlContent"/> for a specific entity. 
            This value is nullable. </param>
            <param name="version">A <see cref="T:System.Int32"/> representing the <see cref="T:Rock.Model.HtmlContent">HTMLContent's</see> version number.</param>
            <returns>The first <see cref="T:Rock.Model.HtmlContent"/> that matches the provided criteria. If no match is found, this value will be null. </returns>
        </member>
        <member name="M:Rock.Model.HtmlContentService.GetActiveContent(System.Int32,System.String)">
            <summary>
            Returns the active <see cref="T:Rock.Model.HtmlContent"/> for a specific <see cref="T:Rock.Model.Block"/> and/or EntityContext.
            </summary>
            <param name="blockId">A <see cref="T:System.Int32"/> that represents the Id of the <see cref="T:Rock.Model.Block"/>.</param>
            <param name="entityValue">A <see cref="T:System.String"/> representing the entityValue.</param>
            <returns>The active <see cref="T:Rock.Model.HtmlContent"/> for the specified <see cref="T:Rock.Model.Block"/> and/or EntityContext.</returns>
        </member>
        <member name="M:Rock.Model.HtmlContentService.GetContent(System.Int32,System.String)">
            <summary>
            Returns an enumerable collection containing all versions of <see cref="T:Rock.Model.HtmlContent"/> for a specific <see cref="T:Rock.Model.Block"/> and/or EntityContext.
            </summary>
            <param name="blockId">A <see cref="T:System.Int32"/> representing the Id of a <see cref="T:Rock.Model.Block"/>.</param>
            <param name="entityValue">A <see cref="T:System.String"/> representing the EntityValue. This value is nullable.</param>
            <returns>An enumerable collection of <see cref="T:Rock.Model.HtmlContent"/> for all versions of the specified <see cref="T:Rock.Model.Block"/> and/or EntityContext. </returns>
        </member>
        <member name="T:Rock.Model.HtmlContentExtensionMethods">
            <summary>
            Generated Extension Methods
            </summary>
        </member>
        <member name="M:Rock.Model.HtmlContentExtensionMethods.Clone(Rock.Model.HtmlContent,System.Boolean)">
            <summary>
            Clones this HtmlContent object to a new HtmlContent object
            </summary>
            <param name="source">The source.</param>
            <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.HtmlContentExtensionMethods.CopyPropertiesFrom(Rock.Model.HtmlContent,Rock.Model.HtmlContent)">
            <summary>
            Copies the properties from another HtmlContent object to this HtmlContent object
            </summary>
            <param name="target">The target.</param>
            <param name="source">The source.</param>
        </member>
        <member name="T:Rock.Model.MarketingCampaignAdService">
            <summary>
            MarketingCampaignAd Service class
            </summary>
        </member>
        <member name="M:Rock.Model.MarketingCampaignAdService.#ctor(Rock.Data.RockContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.MarketingCampaignAdService"/> class
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Rock.Model.MarketingCampaignAdService.CanDelete(Rock.Model.MarketingCampaignAd,System.String@)">
            <summary>
            Determines whether this instance can delete the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="errorMessage">The error message.</param>
            <returns>
              <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Rock.Model.MarketingCampaignAdExtensionMethods">
            <summary>
            Generated Extension Methods
            </summary>
        </member>
        <member name="M:Rock.Model.MarketingCampaignAdExtensionMethods.Clone(Rock.Model.MarketingCampaignAd,System.Boolean)">
            <summary>
            Clones this MarketingCampaignAd object to a new MarketingCampaignAd object
            </summary>
            <param name="source">The source.</param>
            <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.MarketingCampaignAdExtensionMethods.CopyPropertiesFrom(Rock.Model.MarketingCampaignAd,Rock.Model.MarketingCampaignAd)">
            <summary>
            Copies the properties from another MarketingCampaignAd object to this MarketingCampaignAd object
            </summary>
            <param name="target">The target.</param>
            <param name="source">The source.</param>
        </member>
        <member name="T:Rock.Model.MarketingCampaignAdTypeService">
            <summary>
            MarketingCampaignAdType Service class
            </summary>
            <summary>
            Service/data access class for <see cref="T:Rock.Model.MarketingCampaignAdType"/> entity objects
            </summary>
        </member>
        <member name="M:Rock.Model.MarketingCampaignAdTypeService.#ctor(Rock.Data.RockContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.MarketingCampaignAdTypeService"/> class
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Rock.Model.MarketingCampaignAdTypeService.CanDelete(Rock.Model.MarketingCampaignAdType,System.String@)">
            <summary>
            Determines whether this instance can delete the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="errorMessage">The error message.</param>
            <returns>
              <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Rock.Model.MarketingCampaignAdTypeService.Delete(Rock.Model.MarketingCampaignAdType)">
            <summary>
            Deletes a specified <see cref="T:Rock.Model.MarketingCampaignAdType"/>.
            </summary>
            <param name="item">The <see cref="T:Rock.Model.MarketingCampaignAdType"/> to delete</param>
            <returns>
            A <see cref="T:System.Boolean"/> flag that indicates if the deletion was completed successfully.
            </returns>
        </member>
        <member name="T:Rock.Model.MarketingCampaignAdTypeExtensionMethods">
            <summary>
            Generated Extension Methods
            </summary>
        </member>
        <member name="M:Rock.Model.MarketingCampaignAdTypeExtensionMethods.Clone(Rock.Model.MarketingCampaignAdType,System.Boolean)">
            <summary>
            Clones this MarketingCampaignAdType object to a new MarketingCampaignAdType object
            </summary>
            <param name="source">The source.</param>
            <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.MarketingCampaignAdTypeExtensionMethods.CopyPropertiesFrom(Rock.Model.MarketingCampaignAdType,Rock.Model.MarketingCampaignAdType)">
            <summary>
            Copies the properties from another MarketingCampaignAdType object to this MarketingCampaignAdType object
            </summary>
            <param name="target">The target.</param>
            <param name="source">The source.</param>
        </member>
        <member name="T:Rock.Model.MarketingCampaignAudienceService">
            <summary>
            MarketingCampaignAudience Service class
            </summary>
        </member>
        <member name="M:Rock.Model.MarketingCampaignAudienceService.#ctor(Rock.Data.RockContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.MarketingCampaignAudienceService"/> class
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Rock.Model.MarketingCampaignAudienceService.CanDelete(Rock.Model.MarketingCampaignAudience,System.String@)">
            <summary>
            Determines whether this instance can delete the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="errorMessage">The error message.</param>
            <returns>
              <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Rock.Model.MarketingCampaignAudienceExtensionMethods">
            <summary>
            Generated Extension Methods
            </summary>
        </member>
        <member name="M:Rock.Model.MarketingCampaignAudienceExtensionMethods.Clone(Rock.Model.MarketingCampaignAudience,System.Boolean)">
            <summary>
            Clones this MarketingCampaignAudience object to a new MarketingCampaignAudience object
            </summary>
            <param name="source">The source.</param>
            <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.MarketingCampaignAudienceExtensionMethods.CopyPropertiesFrom(Rock.Model.MarketingCampaignAudience,Rock.Model.MarketingCampaignAudience)">
            <summary>
            Copies the properties from another MarketingCampaignAudience object to this MarketingCampaignAudience object
            </summary>
            <param name="target">The target.</param>
            <param name="source">The source.</param>
        </member>
        <member name="T:Rock.Model.MarketingCampaignCampusService">
            <summary>
            MarketingCampaignCampus Service class
            </summary>
        </member>
        <member name="M:Rock.Model.MarketingCampaignCampusService.#ctor(Rock.Data.RockContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.MarketingCampaignCampusService"/> class
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Rock.Model.MarketingCampaignCampusService.CanDelete(Rock.Model.MarketingCampaignCampus,System.String@)">
            <summary>
            Determines whether this instance can delete the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="errorMessage">The error message.</param>
            <returns>
              <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Rock.Model.MarketingCampaignCampusExtensionMethods">
            <summary>
            Generated Extension Methods
            </summary>
        </member>
        <member name="M:Rock.Model.MarketingCampaignCampusExtensionMethods.Clone(Rock.Model.MarketingCampaignCampus,System.Boolean)">
            <summary>
            Clones this MarketingCampaignCampus object to a new MarketingCampaignCampus object
            </summary>
            <param name="source">The source.</param>
            <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.MarketingCampaignCampusExtensionMethods.CopyPropertiesFrom(Rock.Model.MarketingCampaignCampus,Rock.Model.MarketingCampaignCampus)">
            <summary>
            Copies the properties from another MarketingCampaignCampus object to this MarketingCampaignCampus object
            </summary>
            <param name="target">The target.</param>
            <param name="source">The source.</param>
        </member>
        <member name="T:Rock.Model.MarketingCampaignService">
            <summary>
            MarketingCampaign Service class
            </summary>
        </member>
        <member name="M:Rock.Model.MarketingCampaignService.#ctor(Rock.Data.RockContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.MarketingCampaignService"/> class
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Rock.Model.MarketingCampaignService.CanDelete(Rock.Model.MarketingCampaign,System.String@)">
            <summary>
            Determines whether this instance can delete the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="errorMessage">The error message.</param>
            <returns>
              <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Rock.Model.MarketingCampaignExtensionMethods">
            <summary>
            Generated Extension Methods
            </summary>
        </member>
        <member name="M:Rock.Model.MarketingCampaignExtensionMethods.Clone(Rock.Model.MarketingCampaign,System.Boolean)">
            <summary>
            Clones this MarketingCampaign object to a new MarketingCampaign object
            </summary>
            <param name="source">The source.</param>
            <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.MarketingCampaignExtensionMethods.CopyPropertiesFrom(Rock.Model.MarketingCampaign,Rock.Model.MarketingCampaign)">
            <summary>
            Copies the properties from another MarketingCampaign object to this MarketingCampaign object
            </summary>
            <param name="target">The target.</param>
            <param name="source">The source.</param>
        </member>
        <member name="T:Rock.Model.NoteService">
            <summary>
            Note Service class
            </summary>
            <summary>
            Data access/service class for <see cref="T:Rock.Model.Note"/> entity objects.
            </summary>
        </member>
        <member name="M:Rock.Model.NoteService.#ctor(Rock.Data.RockContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.NoteService"/> class
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Rock.Model.NoteService.CanDelete(Rock.Model.Note,System.String@)">
            <summary>
            Determines whether this instance can delete the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="errorMessage">The error message.</param>
            <returns>
              <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Rock.Model.NoteService.Get(System.Int32,System.Int32)">
            <summary>
            Returns a queryable collection of <see cref="T:Rock.Model.Note">Notes</see> for the specified <see cref="T:Rock.Model.NoteType"/> and entity.
            </summary>
            <param name="noteTypeId">A <see cref="T:System.Int32"/> representing the Id of the <see cref="T:Rock.Model.NoteType"/>.</param>
            <param name="entityId">TA <see cref="T:System.Int32"/> representing the Id of the entity that the note belongs to.</param>
            <returns>A queryable collection of <see cref="T:Rock.Model.Note">Notes</see> for the specified <see cref="T:Rock.Model.NoteType"/> and entity. </returns>
        </member>
        <member name="M:Rock.Model.NoteService.GetByNoteTypeId(System.Int32)">
            <summary>
            Returns all of the <see cref="T:Rock.Model.Note">Notes</see> for the specified note type.
            </summary>
            <param name="noteTypeId">A <see cref="T:System.Int32"/> representing the Id of the <see cref="T:Rock.Model.NoteType"/>.</param>
            <returns>A queryable collection of <see cref="T:Rock.Model.Note">Notes</see> by <see cref="T:Rock.Model.NoteType"/>.</returns>
        </member>
        <member name="T:Rock.Model.NoteExtensionMethods">
            <summary>
            Generated Extension Methods
            </summary>
        </member>
        <member name="M:Rock.Model.NoteExtensionMethods.Clone(Rock.Model.Note,System.Boolean)">
            <summary>
            Clones this Note object to a new Note object
            </summary>
            <param name="source">The source.</param>
            <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.NoteExtensionMethods.CopyPropertiesFrom(Rock.Model.Note,Rock.Model.Note)">
            <summary>
            Copies the properties from another Note object to this Note object
            </summary>
            <param name="target">The target.</param>
            <param name="source">The source.</param>
        </member>
        <member name="T:Rock.Model.NoteTypeService">
            <summary>
            NoteType Service class
            </summary>
            <summary>
            Data access/Service class for entities of the <see cref="T:Rock.Model.NoteType"/>
            </summary>
        </member>
        <member name="M:Rock.Model.NoteTypeService.#ctor(Rock.Data.RockContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.NoteTypeService"/> class
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Rock.Model.NoteTypeService.CanDelete(Rock.Model.NoteType,System.String@)">
            <summary>
            Determines whether this instance can delete the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="errorMessage">The error message.</param>
            <returns>
              <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Rock.Model.NoteTypeService.Get(System.Int32,System.String)">
            <summary>
            Gets the first <see cref="T:Rock.Model.NoteType"/> by Name and EntityType
            </summary>
            <param name="entityTypeId">A <see cref="T:System.Int32"/> representing the Id of the <see cref="T:Rock.Model.EntityType"/> to search for.</param>
            <param name="name">A <see cref="T:System.String"/> representing the Name of the </param>
            <returns>The first <see cref="T:Rock.Model.NoteType"/> matching the provided values. If a match is not found, this value will be null.</returns>
        </member>
        <member name="T:Rock.Model.NoteTypeExtensionMethods">
            <summary>
            Generated Extension Methods
            </summary>
        </member>
        <member name="M:Rock.Model.NoteTypeExtensionMethods.Clone(Rock.Model.NoteType,System.Boolean)">
            <summary>
            Clones this NoteType object to a new NoteType object
            </summary>
            <param name="source">The source.</param>
            <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.NoteTypeExtensionMethods.CopyPropertiesFrom(Rock.Model.NoteType,Rock.Model.NoteType)">
            <summary>
            Copies the properties from another NoteType object to this NoteType object
            </summary>
            <param name="target">The target.</param>
            <param name="source">The source.</param>
        </member>
        <member name="T:Rock.Model.PageContextService">
            <summary>
            PageContext Service class
            </summary>
            <summary>
            Data access and service class for the <see cref="T:Rock.Model.PageContext"/> model object. This class inherits from the Service class.
            </summary>
        </member>
        <member name="M:Rock.Model.PageContextService.#ctor(Rock.Data.RockContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.PageContextService"/> class
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Rock.Model.PageContextService.CanDelete(Rock.Model.PageContext,System.String@)">
            <summary>
            Determines whether this instance can delete the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="errorMessage">The error message.</param>
            <returns>
              <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Rock.Model.PageContextService.GetByPageId(System.Int32)">
            <summary>
            Returns an enumerable collection of <see cref="T:Rock.Model.PageContext"/> entities that are used on a page.
            </summary>
            <param name="pageId">An <see cref="T:System.Int32"/> that contains the Id of the <see cref="T:Rock.Model.Page"/> to search by.</param>
            <returns>An enumerable list of <see cref="T:Rock.Model.PageContext">PageContexts</see> that are referenced on the page.</returns>
        </member>
        <member name="T:Rock.Model.PageContextExtensionMethods">
            <summary>
            Generated Extension Methods
            </summary>
        </member>
        <member name="M:Rock.Model.PageContextExtensionMethods.Clone(Rock.Model.PageContext,System.Boolean)">
            <summary>
            Clones this PageContext object to a new PageContext object
            </summary>
            <param name="source">The source.</param>
            <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.PageContextExtensionMethods.CopyPropertiesFrom(Rock.Model.PageContext,Rock.Model.PageContext)">
            <summary>
            Copies the properties from another PageContext object to this PageContext object
            </summary>
            <param name="target">The target.</param>
            <param name="source">The source.</param>
        </member>
        <member name="T:Rock.Model.PageRouteService">
            <summary>
            PageRoute Service class
            </summary>
            <summary>
            The data access/service class for the <see cref="T:Rock.Model.PageRoute"/> class.
            </summary>
        </member>
        <member name="M:Rock.Model.PageRouteService.#ctor(Rock.Data.RockContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.PageRouteService"/> class
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Rock.Model.PageRouteService.CanDelete(Rock.Model.PageRoute,System.String@)">
            <summary>
            Determines whether this instance can delete the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="errorMessage">The error message.</param>
            <returns>
              <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Rock.Model.PageRouteService.GetByPageId(System.Int32)">
            <summary>
            Gets an enumerable list of <see cref="T:Rock.Model.PageRoute"/> entities that are linked to a <see cref="T:Rock.Model.Page"/> by the 
            by the <see cref="T:Rock.Model.Page">Page's</see> Id.
            </summary>
            <param name="pageId">An <see cref="T:System.Int32"/> value containing the Id of the <see cref="T:Rock.Model.Page"/> .</param>
            <returns>An enumerable collection of <see cref="T:Rock.Model.PageRoute"/> entities that reference the supplied PageId.</returns>
        </member>
        <member name="T:Rock.Model.PageRouteExtensionMethods">
            <summary>
            Generated Extension Methods
            </summary>
        </member>
        <member name="M:Rock.Model.PageRouteExtensionMethods.Clone(Rock.Model.PageRoute,System.Boolean)">
            <summary>
            Clones this PageRoute object to a new PageRoute object
            </summary>
            <param name="source">The source.</param>
            <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.PageRouteExtensionMethods.CopyPropertiesFrom(Rock.Model.PageRoute,Rock.Model.PageRoute)">
            <summary>
            Copies the properties from another PageRoute object to this PageRoute object
            </summary>
            <param name="target">The target.</param>
            <param name="source">The source.</param>
        </member>
        <member name="T:Rock.Model.PageService">
            <summary>
            Page Service class
            </summary>
            <summary>
            Data access and service class for the <see cref="T:Rock.Model.Page"/> model object. This class inherits from the Service class.
            </summary>
        </member>
        <member name="M:Rock.Model.PageService.#ctor(Rock.Data.RockContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.PageService"/> class
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Rock.Model.PageService.CanDelete(Rock.Model.Page,System.String@)">
            <summary>
            Determines whether this instance can delete the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="errorMessage">The error message.</param>
            <returns>
              <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Rock.Model.PageService.GetByParentPageId(System.Nullable{System.Int32})">
            <summary>
            Gets an enumerable collection of <see cref="T:Rock.Model.Page"/> entities by the parent <see cref="T:Rock.Model.Page">Page's</see> Id.
            </summary>
            <param name="parentPageId">The Id of the Parent <see cref="T:Rock.Model.Page"/> to search by. </param>
            <returns>An enumerable list of <see cref="T:Rock.Model.Page"/> entities who's ParentPageId matches the provided value.</returns>
        </member>
        <member name="M:Rock.Model.PageService.GetByLayoutId(System.Nullable{System.Int32})">
            <summary>
            Gets an enumerable collection of <see cref="T:Rock.Model.Page"/> entities associated with a <see cref="T:Rock.Model.Layout"/>.
            </summary>
            <param name="layoutId">The layout id.</param>
            <returns>
            An enumerable collection of <see cref="T:Rock.Model.Page">Pages</see> that use the provided layout.
            </returns>
        </member>
        <member name="M:Rock.Model.PageService.GetBySiteId(System.Nullable{System.Int32})">
            <summary>
            Gets an enumerable collection of <see cref="T:Rock.Model.Page"/> entities associated with a <see cref="T:Rock.Model.Site"/>.
            </summary>
            <param name="siteId">The site id.</param>
            <returns>
            An enumerable collection of <see cref="T:Rock.Model.Page">Pages</see> that use the given site.
            </returns>
        </member>
        <member name="M:Rock.Model.PageService.GetAllDescendents(System.Int32)">
            <summary>
            Returns an enumerable collection of <see cref="T:Rock.Model.Page">Pages</see> that are descendants of a <see cref="T:Rock.Model.Page"/>
            </summary>
            <param name="parentPageId">A <see cref="T:System.Int32"/> representing the Id of the <see cref="T:Rock.Model.Page"/></param>
            <returns>A collection of <see cref="T:Rock.Model.Page"/> entities that are descendants of the provided parent <see cref="T:Rock.Model.Page"/>.</returns>
        </member>
        <member name="M:Rock.Model.PageService.CanDelete(Rock.Model.Page,System.String@,System.Boolean)">
            <summary>
            Determines whether the specified page can be deleted.
            Performs some additional checks that are missing from the
            auto-generated PageService.CanDelete().
            </summary>
            <param name="item">The item.</param>
            <param name="errorMessage">The error message.</param>
            <param name="includeSecondLvl">If set to true, verifies that the item is not referenced by any second level relationships.</param>
            <returns>
              <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Rock.Model.PageExtensionMethods">
            <summary>
            Generated Extension Methods
            </summary>
        </member>
        <member name="M:Rock.Model.PageExtensionMethods.Clone(Rock.Model.Page,System.Boolean)">
            <summary>
            Clones this Page object to a new Page object
            </summary>
            <param name="source">The source.</param>
            <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.PageExtensionMethods.CopyPropertiesFrom(Rock.Model.Page,Rock.Model.Page)">
            <summary>
            Copies the properties from another Page object to this Page object
            </summary>
            <param name="target">The target.</param>
            <param name="source">The source.</param>
        </member>
        <member name="T:Rock.Model.PrayerRequestService">
            <summary>
            PrayerRequest Service class
            </summary>
            <summary>
            Data access/service class for <see cref="T:Rock.Model.PrayerRequest"/> entity objects.
            </summary>
        </member>
        <member name="M:Rock.Model.PrayerRequestService.#ctor(Rock.Data.RockContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.PrayerRequestService"/> class
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Rock.Model.PrayerRequestService.CanDelete(Rock.Model.PrayerRequest,System.String@)">
            <summary>
            Determines whether this instance can delete the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="errorMessage">The error message.</param>
            <returns>
              <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Rock.Model.PrayerRequestService.GetByCategoryIds(System.Collections.Generic.List{System.Int32},System.Boolean,System.Boolean)">
            <summary>
            Returns a collection of active <see cref="T:Rock.Model.PrayerRequest">PrayerRequests</see> that
            are in a specified <see cref="T:Rock.Model.Category"/> or any of it's subcategories.
            </summary>
            <param name="categoryIds">A <see cref="T:System.Collections.Generic.List`1"/> of
            the <see cref="T:Rock.Model.Category"/> IDs to retrieve PrayerRequests for.</param>
            <param name="onlyApproved">set false to include un-approved requests.</param>
            <param name="onlyUnexpired">set false to include expired requests.</param>
            <returns>An enumerable collection of <see cref="T:Rock.Model.PrayerRequest"/> that
            are in the specified <see cref="T:Rock.Model.Category"/> or any of it's subcategories.</returns>
        </member>
        <member name="M:Rock.Model.PrayerRequestService.GetActiveApprovedUnexpired">
            <summary>
            Returns a active, approved, unexpired <see cref="T:Rock.Model.PrayerRequest">PrayerRequests</see>
            order by urgency and then by total prayer count.
            </summary>
            <returns>A queryable collection of <see cref="T:Rock.Model.PrayerRequest">PrayerRequest</see>.</returns>
        </member>
        <member name="T:Rock.Model.PrayerRequestExtensionMethods">
            <summary>
            Generated Extension Methods
            </summary>
        </member>
        <member name="M:Rock.Model.PrayerRequestExtensionMethods.Clone(Rock.Model.PrayerRequest,System.Boolean)">
            <summary>
            Clones this PrayerRequest object to a new PrayerRequest object
            </summary>
            <param name="source">The source.</param>
            <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.PrayerRequestExtensionMethods.CopyPropertiesFrom(Rock.Model.PrayerRequest,Rock.Model.PrayerRequest)">
            <summary>
            Copies the properties from another PrayerRequest object to this PrayerRequest object
            </summary>
            <param name="target">The target.</param>
            <param name="source">The source.</param>
        </member>
        <member name="T:Rock.Model.ReportService">
            <summary>
            Report Service class
            </summary>
        </member>
        <member name="M:Rock.Model.ReportService.#ctor(Rock.Data.RockContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.ReportService"/> class
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Rock.Model.ReportService.CanDelete(Rock.Model.Report,System.String@)">
            <summary>
            Determines whether this instance can delete the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="errorMessage">The error message.</param>
            <returns>
              <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Rock.Model.ReportExtensionMethods">
            <summary>
            Generated Extension Methods
            </summary>
        </member>
        <member name="M:Rock.Model.ReportExtensionMethods.Clone(Rock.Model.Report,System.Boolean)">
            <summary>
            Clones this Report object to a new Report object
            </summary>
            <param name="source">The source.</param>
            <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.ReportExtensionMethods.CopyPropertiesFrom(Rock.Model.Report,Rock.Model.Report)">
            <summary>
            Copies the properties from another Report object to this Report object
            </summary>
            <param name="target">The target.</param>
            <param name="source">The source.</param>
        </member>
        <member name="T:Rock.Model.ScheduleService">
            <summary>
            Schedule Service class
            </summary>
        </member>
        <member name="M:Rock.Model.ScheduleService.#ctor(Rock.Data.RockContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.ScheduleService"/> class
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Rock.Model.ScheduleService.CanDelete(Rock.Model.Schedule,System.String@)">
            <summary>
            Determines whether this instance can delete the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="errorMessage">The error message.</param>
            <returns>
              <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Rock.Model.ScheduleExtensionMethods">
            <summary>
            Generated Extension Methods
            </summary>
        </member>
        <member name="M:Rock.Model.ScheduleExtensionMethods.Clone(Rock.Model.Schedule,System.Boolean)">
            <summary>
            Clones this Schedule object to a new Schedule object
            </summary>
            <param name="source">The source.</param>
            <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.ScheduleExtensionMethods.CopyPropertiesFrom(Rock.Model.Schedule,Rock.Model.Schedule)">
            <summary>
            Copies the properties from another Schedule object to this Schedule object
            </summary>
            <param name="target">The target.</param>
            <param name="source">The source.</param>
        </member>
        <member name="T:Rock.Model.SiteDomainService">
            <summary>
            SiteDomain Service class
            </summary>
            <summary>
            SiteDomain data access/service class. 
            </summary>
        </member>
        <member name="M:Rock.Model.SiteDomainService.#ctor(Rock.Data.RockContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.SiteDomainService"/> class
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Rock.Model.SiteDomainService.CanDelete(Rock.Model.SiteDomain,System.String@)">
            <summary>
            Determines whether this instance can delete the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="errorMessage">The error message.</param>
            <returns>
              <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Rock.Model.SiteDomainService.GetByDomain(System.String)">
            <summary>
            Returns a  <see cref="T:Rock.Model.SiteDomain"/> by Domain.
            </summary>
            <param name="domain">A <see cref="T:System.String"/> containing a domain/URL to search by.</param>
            <returns>A <see cref="T:Rock.Model.SiteDomain"/> where the Domain matches the provided value. If not results found, will return null.</returns>
        </member>
        <member name="M:Rock.Model.SiteDomainService.GetBySiteId(System.Int32)">
            <summary>
            Returns an enumerable collection of <see cref="T:Rock.Model.SiteDomain">SiteDomains</see> the Id of the <see cref="T:Rock.Model.Site"/> that they reference.
            </summary>
            <param name="siteId">An <see cref="T:System.Int32"/> that contains the Id a <see cref="T:Rock.Model.Site"/> to search by.</param>
            <returns>An enumerable collection of <see cref="T:Rock.Model.SiteDomain">SiteDomains</see> that reference the provided SiteId.</returns>
        </member>
        <member name="M:Rock.Model.SiteDomainService.GetBySiteIdAndDomain(System.Int32,System.String)">
            <summary>
            Returns an enumerable list of <see cref="T:Rock.Model.SiteDomain"/> entities by the Id of the <see cref="T:Rock.Model.Site"/> and domain name.
            </summary>
            <param name="siteId">An <see cref="T:System.Int32"/> containing the Id of the <see cref="T:Rock.Model.Site"/> to search by.</param>
            <param name="domain">A <see cref="T:System.String"/> containing the domain to search by.</param>
            <returns>An enumerable collection of <see cref="T:Rock.Model.SiteDomain">SiteDomains</see> that match the SiteId and Domain that was provided..</returns>
        </member>
        <member name="M:Rock.Model.SiteDomainService.GetByDomainContained(System.String)">
            <summary>
            Returns the first matching of <see cref="T:Rock.Model.SiteDomain">SiteDomains</see> where the domain property contains the provided string.
            </summary>
            <param name="domain">A <see cref="T:System.String"/> containing a partial domain name to search by.</param>
            <returns>The first matching <see cref="T:Rock.Model.SiteDomain"/> where the domain partially/fully matches the provided value. </returns>
        </member>
        <member name="T:Rock.Model.SiteDomainExtensionMethods">
            <summary>
            Generated Extension Methods
            </summary>
        </member>
        <member name="M:Rock.Model.SiteDomainExtensionMethods.Clone(Rock.Model.SiteDomain,System.Boolean)">
            <summary>
            Clones this SiteDomain object to a new SiteDomain object
            </summary>
            <param name="source">The source.</param>
            <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.SiteDomainExtensionMethods.CopyPropertiesFrom(Rock.Model.SiteDomain,Rock.Model.SiteDomain)">
            <summary>
            Copies the properties from another SiteDomain object to this SiteDomain object
            </summary>
            <param name="target">The target.</param>
            <param name="source">The source.</param>
        </member>
        <member name="T:Rock.Model.SiteService">
            <summary>
            Site Service class
            </summary>
            <summary>
            The data access/service class for the <see cref="T:Rock.Model.Site"/> entity. This inherits from the Service class
            </summary>
        </member>
        <member name="M:Rock.Model.SiteService.#ctor(Rock.Data.RockContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.SiteService"/> class
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Rock.Model.SiteService.CanDelete(Rock.Model.Site,System.String@)">
            <summary>
            Determines whether this instance can delete the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="errorMessage">The error message.</param>
            <returns>
              <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Rock.Model.SiteService.GetByDefaultPageId(System.Nullable{System.Int32})">
            <summary>
            Returns a collection of <see cref="T:Rock.Model.Site"/> entities that by their Default <see cref="T:Rock.Model.Page">Page's</see> PageId.
            </summary>
            <param name="defaultPageId">An <see cref="T:System.Int32"/> containing the Id of the default <see cref="T:Rock.Model.Page"/> to search by. This
            value is nullable.</param>
            <returns>An enumerable collection of <see cref="T:Rock.Model.Site"/> entities that use reference the provided PageId.</returns>
        </member>
        <member name="M:Rock.Model.SiteService.CanDelete(Rock.Model.Site,System.String@,System.Boolean)">
            <summary>
            Determines whether the specified site can be deleted.
            Performs some additional checks that are missing from the
            auto-generated SiteService.CanDelete().
            TODO This should move into the SiteService CanDelete at some point
            once the generator tool is adjusted.
            </summary>
            <param name="item">The item.</param>
            <param name="errorMessage">The error message.</param>
            <param name="includeSecondLvl">If set to true, verifies that there are no site layouts with any existing pages.</param>
            <returns>
              <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Rock.Model.SiteExtensionMethods">
            <summary>
            Generated Extension Methods
            </summary>
        </member>
        <member name="M:Rock.Model.SiteExtensionMethods.Clone(Rock.Model.Site,System.Boolean)">
            <summary>
            Clones this Site object to a new Site object
            </summary>
            <param name="source">The source.</param>
            <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.SiteExtensionMethods.CopyPropertiesFrom(Rock.Model.Site,Rock.Model.Site)">
            <summary>
            Copies the properties from another Site object to this Site object
            </summary>
            <param name="target">The target.</param>
            <param name="source">The source.</param>
        </member>
        <member name="T:Rock.Model.UserLoginService">
            <summary>
            UserLogin Service class
            </summary>
            <summary>
            Data Access/Service class for <see cref="T:Rock.Model.UserLogin"/> entities.
            </summary>
        </member>
        <member name="M:Rock.Model.UserLoginService.#ctor(Rock.Data.RockContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.UserLoginService"/> class
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Rock.Model.UserLoginService.CanDelete(Rock.Model.UserLogin,System.String@)">
            <summary>
            Determines whether this instance can delete the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="errorMessage">The error message.</param>
            <returns>
              <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Rock.Model.UserLoginService.GetByApiKey(System.String)">
            <summary>
            Returns an enumerable collection of <see cref="T:Rock.Model.UserLogin"/> entities by their API Key.
            </summary>
            <param name="apiKey">A <see cref="T:System.String"/> representing the API key to search by.</param>
            <returns>An enumerable collection of <see cref="T:Rock.Model.UserLogin"/> entities where the API key matches the provided value..</returns>
        </member>
        <member name="M:Rock.Model.UserLoginService.GetByPersonId(System.Nullable{System.Int32})">
            <summary>
            Gets an enumerable collection of <see cref="T:Rock.Model.UserLogin"/> entities by a <see cref="T:Rock.Model.Person">Person's</see> PersonId.
            </summary>
            <param name="personId">A <see cref="T:System.Int32"/> representing the Id of the <see cref="T:Rock.Model.Person"/> to search by. This property is nullable
            to find <see cref="T:Rock.Model.UserLogin"/> entities that are not associated with a Person.</param>
            <returns>An enumerable collection of <see cref="T:Rock.Model.UserLogin"/> entities that are associated with the provided PersonId.</returns>
        </member>
        <member name="M:Rock.Model.UserLoginService.GetByUserName(System.String)">
            <summary>
            Gets<see cref="T:Rock.Model.UserLogin"/> by User Name
            </summary>
            <param name="userName">A <see cref="T:System.String"/> representing the UserName to search for.</param>
            <returns>A <see cref="T:Rock.Model.UserLogin"/> entity where the UserName matches the provided value.</returns>
        </member>
        <member name="M:Rock.Model.UserLoginService.SetPassword(Rock.Model.UserLogin,System.String)">
            <summary>
            Sets the a <see cref="T:Rock.Model.UserLogin">UserLogin's</see> password.
            </summary>
            <param name="user">The <see cref="T:Rock.Model.UserLogin"/> to change the password for.</param>
            <param name="password">A <see cref="T:System.String"/> representing the new password.</param>
        </member>
        <member name="M:Rock.Model.UserLoginService.UpdateFailureCount(Rock.Model.UserLogin)">
            <summary>
            Updates the <see cref="T:Rock.Model.UserLogin"/> failed password attempt count.
            </summary>
            <param name="user">The <see cref="T:Rock.Model.UserLogin"/> to update the failure count on.</param>
        </member>
        <member name="M:Rock.Model.UserLoginService.GetByConfirmationCode(System.String)">
            <summary>
            Returns a <see cref="T:Rock.Model.UserLogin"/> by an encrypted confirmation code.
            </summary>
            <param name="code">A <see cref="T:System.String"/> containing the encrypted confirmation code to search for.</param>
            <returns>The <see cref="T:Rock.Model.UserLogin"/> associated with the encrypted confirmation code.</returns>
        </member>
        <member name="M:Rock.Model.UserLoginService.GetCurrentUser">
            <summary>
            Returns the <see cref="T:Rock.Model.UserLogin"/> of the user who is currently logged in.
            </summary>
            <returns>The <see cref="T:Rock.Model.UserLogin"/> of the user who is currently logged in</returns>
        </member>
        <member name="M:Rock.Model.UserLoginService.GetCurrentUser(System.Boolean)">
            <summary>
            Returns the <see cref="T:Rock.Model.UserLogin"/>
            </summary>
            <param name="userIsOnline">A <see cref="T:System.Boolean"/> value that returns the logged in user if <c>true</c>; otherwise can return the impersonated user</param>
            <returns>The current <see cref="T:Rock.Model.UserLogin"/></returns>
        </member>
        <member name="M:Rock.Model.UserLoginService.IsPasswordValid(System.String)">
            <summary>
            Checks to see if the given password is valid according to the PasswordRegex (if defined).
            </summary>
            <param name="password">A password to verify.</param>
            <returns>A <see cref="T:System.Boolean"/> value that indicates if the password is valid. <c>true</c> if valid; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Rock.Model.UserLoginService.FriendlyPasswordRules">
            <summary>
            Returns a user friendly description of the password rules.
            </summary>
            <returns>A user friendly description of the password rules.</returns>
        </member>
        <member name="M:Rock.Model.UserLoginService.Create(Rock.Data.RockContext,Rock.Model.Person,Rock.Model.AuthenticationServiceType,System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            Creates a new <see cref="T:Rock.Model.UserLogin"/>
            </summary>
            <param name="rockContext">The rock context.</param>
            <param name="person">The <see cref="T:Rock.Model.Person"/> that this <see cref="T:Rock.Model.UserLogin"/> will be associated with.</param>
            <param name="serviceType">The <see cref="T:Rock.Model.AuthenticationServiceType"/> type of Login</param>
            <param name="entityTypeId">The entity type identifier.</param>
            <param name="username">A <see cref="T:System.String"/> containing the UserName.</param>
            <param name="password">A <see cref="T:System.String"/> containing the unhashed/unencrypted password.</param>
            <param name="isConfirmed">A <see cref="T:System.Boolean"/> flag indicating if the user has been confirmed.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the Username already exists.</exception>
            <exception cref="T:System.ArgumentException">Thrown when the service does not exist or is not active.</exception>
        </member>
        <member name="M:Rock.Model.UserLoginService.UpdateLastLogin(System.String)">
            <summary>
            Updates the last login.
            </summary>
            <param name="userName">Name of the user.</param>
        </member>
        <member name="T:Rock.Model.UserLoginExtensionMethods">
            <summary>
            Generated Extension Methods
            </summary>
        </member>
        <member name="M:Rock.Model.UserLoginExtensionMethods.Clone(Rock.Model.UserLogin,System.Boolean)">
            <summary>
            Clones this UserLogin object to a new UserLogin object
            </summary>
            <param name="source">The source.</param>
            <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.UserLoginExtensionMethods.CopyPropertiesFrom(Rock.Model.UserLogin,Rock.Model.UserLogin)">
            <summary>
            Copies the properties from another UserLogin object to this UserLogin object
            </summary>
            <param name="target">The target.</param>
            <param name="source">The source.</param>
        </member>
        <member name="T:Rock.Model.WorkflowActionTypeService">
            <summary>
            WorkflowActionType Service class
            </summary>
        </member>
        <member name="M:Rock.Model.WorkflowActionTypeService.#ctor(Rock.Data.RockContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.WorkflowActionTypeService"/> class
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Rock.Model.WorkflowActionTypeService.CanDelete(Rock.Model.WorkflowActionType,System.String@)">
            <summary>
            Determines whether this instance can delete the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="errorMessage">The error message.</param>
            <returns>
              <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Rock.Model.WorkflowActionTypeExtensionMethods">
            <summary>
            Generated Extension Methods
            </summary>
        </member>
        <member name="M:Rock.Model.WorkflowActionTypeExtensionMethods.Clone(Rock.Model.WorkflowActionType,System.Boolean)">
            <summary>
            Clones this WorkflowActionType object to a new WorkflowActionType object
            </summary>
            <param name="source">The source.</param>
            <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.WorkflowActionTypeExtensionMethods.CopyPropertiesFrom(Rock.Model.WorkflowActionType,Rock.Model.WorkflowActionType)">
            <summary>
            Copies the properties from another WorkflowActionType object to this WorkflowActionType object
            </summary>
            <param name="target">The target.</param>
            <param name="source">The source.</param>
        </member>
        <member name="T:Rock.Model.WorkflowActivityService">
            <summary>
            WorkflowActivity Service class
            </summary>
        </member>
        <member name="M:Rock.Model.WorkflowActivityService.#ctor(Rock.Data.RockContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.WorkflowActivityService"/> class
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Rock.Model.WorkflowActivityService.CanDelete(Rock.Model.WorkflowActivity,System.String@)">
            <summary>
            Determines whether this instance can delete the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="errorMessage">The error message.</param>
            <returns>
              <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Rock.Model.WorkflowActivityExtensionMethods">
            <summary>
            Generated Extension Methods
            </summary>
        </member>
        <member name="M:Rock.Model.WorkflowActivityExtensionMethods.Clone(Rock.Model.WorkflowActivity,System.Boolean)">
            <summary>
            Clones this WorkflowActivity object to a new WorkflowActivity object
            </summary>
            <param name="source">The source.</param>
            <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.WorkflowActivityExtensionMethods.CopyPropertiesFrom(Rock.Model.WorkflowActivity,Rock.Model.WorkflowActivity)">
            <summary>
            Copies the properties from another WorkflowActivity object to this WorkflowActivity object
            </summary>
            <param name="target">The target.</param>
            <param name="source">The source.</param>
        </member>
        <member name="T:Rock.Model.WorkflowActivityTypeService">
            <summary>
            WorkflowActivityType Service class
            </summary>
        </member>
        <member name="M:Rock.Model.WorkflowActivityTypeService.#ctor(Rock.Data.RockContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.WorkflowActivityTypeService"/> class
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Rock.Model.WorkflowActivityTypeService.CanDelete(Rock.Model.WorkflowActivityType,System.String@)">
            <summary>
            Determines whether this instance can delete the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="errorMessage">The error message.</param>
            <returns>
              <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Rock.Model.WorkflowActivityTypeExtensionMethods">
            <summary>
            Generated Extension Methods
            </summary>
        </member>
        <member name="M:Rock.Model.WorkflowActivityTypeExtensionMethods.Clone(Rock.Model.WorkflowActivityType,System.Boolean)">
            <summary>
            Clones this WorkflowActivityType object to a new WorkflowActivityType object
            </summary>
            <param name="source">The source.</param>
            <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.WorkflowActivityTypeExtensionMethods.CopyPropertiesFrom(Rock.Model.WorkflowActivityType,Rock.Model.WorkflowActivityType)">
            <summary>
            Copies the properties from another WorkflowActivityType object to this WorkflowActivityType object
            </summary>
            <param name="target">The target.</param>
            <param name="source">The source.</param>
        </member>
        <member name="T:Rock.Model.BinaryFileType">
            <summary>
            Represents a type or category of binary files in Rock, and configures how binary files of this type are stored and accessed.
            </summary>
        </member>
        <member name="M:Rock.Model.BinaryFileType.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Rock.Model.BinaryFileType.IsSystem">
            <summary>
            Gets or sets a flag indicating if this BinaryFileType is part of the Rock core system/framework. This property is required.
            </summary>
            <value>
            A <see cref="T:System.Boolean"/> value that is <c>true</c> if this is part of the core system/framework; otherwise <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Model.BinaryFileType.Name">
            <summary>
            Gets or sets the given Name of the BinaryFileType. This value is an alternate key and is required.
            </summary>
            <value>
            A <see cref="T:System.String"/> representing the given Name of the BinaryFileType. 
            </value>
        </member>
        <member name="P:Rock.Model.BinaryFileType.Description">
            <summary>
            Gets or sets a description of the BinaryFileType.
            </summary>
            <value>
            A <see cref="T:System.String"/> representing the description of the BinaryFileType.
            </value>
        </member>
        <member name="P:Rock.Model.BinaryFileType.IconCssClass">
            <summary>
            Gets or sets the CSS class that is used for a vector/CSS icon.
            </summary>
            <value>
            A <see cref="T:System.String"/> representing the CSS class that is used for a vector/CSS based icon.
            </value>
        </member>
        <member name="P:Rock.Model.BinaryFileType.StorageEntityTypeId">
            <summary>
            Gets or sets the Id of the storage service <see cref="T:Rock.Model.EntityType"/> that is used to store files of this type.
            </summary>
            <value>
            An <see cref="T:System.Int32"/> representing the Id of the storage service <see cref="T:Rock.Model.EntityType"/>.
            </value>
        </member>
        <member name="P:Rock.Model.BinaryFileType.AllowCaching">
            <summary>
            Gets or sets a flag indicating whether to allow caching on any <see cref="T:Rock.Model.BinaryFile"/> child entities.
            </summary>
            <value>
             A <see cref="T:System.Boolean"/> value that is <c>true</c> if caching is allowed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Model.BinaryFileType.RequiresSecurity">
            <summary>
            Gets or sets a value indicating whether [requires security].
            </summary>
            <value>
              <c>true</c> if [requires security]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Model.BinaryFileType.FileCount">
            <summary>
            Gets the count of <see cref="T:Rock.Model.BinaryFile"/> entities that are children of this <see cref="T:Rock.Model.BinaryFileType"/>.
            </summary>
            <value>
            A <see cref="T:System.Int32"/> representing the count of <see cref="T:Rock.Model.BinaryFile"/> entities that are children of this <see cref="T:Rock.Model.BinaryFileType"/>.
            </value>
        </member>
        <member name="P:Rock.Model.BinaryFileType.FileQuery">
            <summary>
            Gets a queryable collection of <see cref="T:Rock.Model.BinaryFile"/> entities that are children of this <see cref="T:Rock.Model.BinaryFileType"/>.
            </summary>
            <value>
            A queryable collection of <see cref="T:Rock.Model.BinaryFile"/> entities that are children of this<see cref="T:Rock.Model.BinaryFileType"/>.
            </value>
        </member>
        <member name="P:Rock.Model.BinaryFileType.StorageEntityType">
            <summary>
            Gets or sets the storage mode <see cref="T:Rock.Model.EntityType"/>.
            </summary>
            <value>
            The storage mode <see cref="T:Rock.Model.EntityType"/>.
            </value>
        </member>
        <member name="T:Rock.Model.BinaryFileTypeConfiguration">
            <summary>
            File Configuration class.
            </summary>
        </member>
        <member name="M:Rock.Model.BinaryFileTypeConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.BinaryFileTypeConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Rock.Model.Communication">
            <summary>
            Represents a communication in Rock (i.e. email, SMS message, etc.).
            </summary>
        </member>
        <member name="M:Rock.Model.Communication.GetChannelDataValue(System.String)">
            <summary>
            Returns a channel data value.
            </summary>
            <param name="key">A <see cref="T:System.String"/> containing the key associated with the value to retrieve. </param>
            <returns>A <see cref="T:System.String"/> representing the value that is linked with the specified key.</returns>
        </member>
        <member name="M:Rock.Model.Communication.SetChannelDataValue(System.String,System.String)">
            <summary>
            Sets a channel data value. If the key exists, the value will be replaced with the new value, otherwise a new key value pair will be added to dictionary.
            </summary>
            <param name="key">A <see cref="T:System.String"/> representing the key.</param>
            <param name="value">A <see cref="T:System.String"/> representing the value.</param>
        </member>
        <member name="M:Rock.Model.Communication.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Rock.Model.Communication.SenderPersonId">
            <summary>
            Gets or sets the PersonId of the <see cref="T:Rock.Model.Person"/> who is the sender of the Communication
            </summary>
            <value>
            A <see cref="T:System.Int32"/> representing the PersonId of the <see cref="T:Rock.Model.Person"/> who is the sender of the Communication.
            </value>
        </member>
        <member name="P:Rock.Model.Communication.Subject">
            <summary>
            Gets or sets the Subject of the Communication
            </summary>
            <value>
            A <see cref="T:System.String"/> that represents the Subject of the communication.
            </value>
        </member>
        <member name="P:Rock.Model.Communication.IsBulkCommunication">
            <summary>
            Gets or sets the is bulk communication.
            </summary>
            <value>
            The is bulk communication.
            </value>
        </member>
        <member name="P:Rock.Model.Communication.FutureSendDateTime">
            <summary>
            Gets or sets the future send date for the communication. This allows a user to schedule when a communication is sent 
            and the communication will not be sent until that date and time.
            </summary>
            <value>
            A <see cref="T:System.DateTime"/> value that represents the FutureSendDate for the communication.  If no future send date is provided, this value will be null.
            </value>
        </member>
        <member name="P:Rock.Model.Communication.Status">
            <summary>
            Gets or sets the status of the Communication.
            </summary>
            <value>
            A <see cref="T:Rock.Model.CommunicationStatus"/> enum value that represents the status of the Communication.
            </value>
        </member>
        <member name="P:Rock.Model.Communication.ReviewerPersonId">
            <summary>
            Gets or sets the PersonId of the <see cref="T:Rock.Model.Person"/> who is the reviewer of the Communication.
            </summary>
            <value>
            A <see cref="T:System.Int32"/> representing the PersonId of the <see cref="T:Rock.Model.Person"/> who is the reviewer of the Communication. If there is not reviewer
            on this communication, this property will be null.
            </value>
        </member>
        <member name="P:Rock.Model.Communication.ReviewedDateTime">
            <summary>
            Gets or sets the date and time stamp of when the Communication was reviewed.
            </summary>
            <value>
            A <see cref="T:System.DateTime"/> representing the date and time that the Communication was reviewed.
            </value>
        </member>
        <member name="P:Rock.Model.Communication.ReviewerNote">
            <summary>
            Gets or sets the note that was entered by the reviewer.
            </summary>
            <value>
            A <see cref="T:System.String"/> representing a note that was entered by the reviewer.
            </value>
        </member>
        <member name="P:Rock.Model.Communication.ChannelEntityTypeId">
            <summary>
            Gets or sets the EntityTypeId of the <see cref="T:Rock.Model.EntityType"/> for the Communication Channel that is being used for this Communication.
            </summary>
            <value>
            A <see cref="T:System.Int32"/> representing the EntityTypeId of the <see cref="T:Rock.Model.EntityType"/> for the Communication Channel that is being used for this Communication. 
            </value>
        </member>
        <member name="P:Rock.Model.Communication.ChannelDataJson">
            <summary>
            Gets or sets a Json formatted string containing the Channel specific data.
            </summary>
            <value>
            A Json formatted <see cref="T:System.String"/> that contains any Channel specific data.
            </value>
        </member>
        <member name="P:Rock.Model.Communication.AdditionalMergeFieldsJson">
            <summary>
            Gets or sets a Json string containing any additional merge fields for the Communication.
            </summary>
            <value>
            A Json formatted <see cref="T:System.String"/> that contains any additional merge fields for the Communication.
            </value>
        </member>
        <member name="P:Rock.Model.Communication.Sender">
            <summary>
            Gets or sets the <see cref="T:Rock.Model.Person"/> of the Communication's sender.
            </summary>
            <value>
            A <see cref="T:Rock.Model.Person"/> that represents the Communication's sender.
            </value>
        </member>
        <member name="P:Rock.Model.Communication.Reviewer">
            <summary>
            Gets or sets the <see cref="T:Rock.Model.Person"/> of the Communication's reviewer.
            </summary>
            <value>
            The reviewer.
            </value>
        </member>
        <member name="P:Rock.Model.Communication.Recipients">
            <summary>
            Gets or sets a collection containing the <see cref="T:Rock.Model.CommunicationRecipient">CommunicationRecipients</see> for the Communication.
            </summary>
            <value>
            The <see cref="T:Rock.Model.CommunicationRecipient">CommunicationRecipients</see> of the Communication.
            </value>
        </member>
        <member name="P:Rock.Model.Communication.ChannelEntityType">
            <summary>
            Gets or sets the <see cref="T:Rock.Model.EntityType"/> of the communications Channel that is being used by this Communication.
            </summary>
            <value>
            The <see cref="T:Rock.Model.EntityType"/> of the communications Channel that is being used by this Communication.
            </value>
        </member>
        <member name="P:Rock.Model.Communication.Channel">
            <summary>
            Gets the <see cref="T:Rock.Communication.ChannelComponent"/> for the communication channel that is being used.
            </summary>
            <value>
            The <see cref="T:Rock.Communication.ChannelComponent"/> for the communication channel that is being used.
            </value>
        </member>
        <member name="P:Rock.Model.Communication.ChannelData">
            <summary>
            Gets or sets the data used by the selected communication channel.
            </summary>
            <value>
            A <see cref="T:System.Collections.Generic.Dictionary`2"/> of key value pairs that contain channel specific data.
            </value>
        </member>
        <member name="P:Rock.Model.Communication.AdditionalMergeFields">
            <summary>
            Gets or sets the additional merge field list. When a communication is created
            from a grid, the grid may add additional merge fields that will be available
            for the communication.
            </summary>
            <value>
            A <see cref="T:System.Collections.Generic.List`1"/> of values containing the additional merge field list.
            </value>
        </member>
        <member name="T:Rock.Model.CommunicationConfiguration">
            <summary>
            Communication Configuration class.
            </summary>
        </member>
        <member name="M:Rock.Model.CommunicationConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.CommunicationConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Rock.Model.CommunicationStatus">
            <summary>
            The status of a communication
            </summary>
        </member>
        <member name="F:Rock.Model.CommunicationStatus.Transient">
            <summary>
            Communication was created, but not yet edited by a user. (i.e. from data grid or report)
            Transient communications more than a few hours old may be deleted by clean-up job.
            </summary>
        </member>
        <member name="F:Rock.Model.CommunicationStatus.Draft">
            <summary>
            Communication is currently being drafted
            </summary>
        </member>
        <member name="F:Rock.Model.CommunicationStatus.PendingApproval">
            <summary>
            Communication has been submitted but not yet approved or denied
            </summary>
        </member>
        <member name="F:Rock.Model.CommunicationStatus.Approved">
            <summary>
            Communication has been approved for sending
            </summary>
        </member>
        <member name="F:Rock.Model.CommunicationStatus.Denied">
            <summary>
            Communication has been denied
            </summary>
        </member>
        <member name="T:Rock.Model.CommunicationRecipient">
            <summary>
            Communication Recipient POCO Entity.
            </summary>
        </member>
        <member name="M:Rock.Model.CommunicationRecipient.CommunicationMergeValues(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Helper method to get recipient merge values for sending communication.
            </summary>
            <param name="globalConfigValues">The global configuration values.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.CommunicationRecipient.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Rock.Model.CommunicationRecipient.PersonId">
            <summary>
            Gets or sets the PersonId of the <see cref="T:Rock.Model.Person"/> who is being sent the <see cref="T:Rock.Model.Communication"/>.
            </summary>
            <value>
            A <see cref="T:System.Int32"/> representing the PersonId of the <see cref="T:Rock.Model.Person"/> who is being sent the <see cref="T:Rock.Model.Communication"/>.
            </value>
        </member>
        <member name="P:Rock.Model.CommunicationRecipient.CommunicationId">
            <summary>
            Gets or sets the the CommunicationId of the <see cref="T:Rock.Model.Communication"/>.
            </summary>
            <value>
            A <see cref="T:System.Int32"/> representing the CommunicationId of the <see cref="T:Rock.Model.Communication"/>.
            </value>
        </member>
        <member name="P:Rock.Model.CommunicationRecipient.Status">
            <summary>
            Gets or sets the status of the Communication submission to the recipient.
            </summary>
            <value>
            A <see cref="T:Rock.Model.CommunicationRecipientStatus"/> Enum representing the status of <see cref="T:Rock.Model.Communication"/> submission to the recipient.
            This property will be  <c>CommunicationRecipientStatus.Pending</c> when Rock is waiting to send the <see cref="T:Rock.Model.Communication"/> to the recipient;
            <c>CommunicationRecipientStatus.Success</c> when Rock has successfully sent the <see cref="T:Rock.Model.Communication"/> to the recipient;
            <c>CommunicationRecipientStatus.Failed</c> when the attempt to send the <see cref="T:Rock.Model.Communication"/> failed.
            <c>CommunicaitonRecipientStatus.Cancelled</c> when the attempt to send the <see cref="T:Rock.Model.Communication"/> was canceled.
            </value>
        </member>
        <member name="P:Rock.Model.CommunicationRecipient.StatusNote">
            <summary>
            Gets or sets the status note.
            </summary>
            <value>
            A <see cref="T:System.String"/> representing the status note.
            </value>
        </member>
        <member name="P:Rock.Model.CommunicationRecipient.OpenedDateTime">
            <summary>
            Gets or sets the datetime that communication was opened by recipient.
            </summary>
            <value>
            The opened date time.
            </value>
        </member>
        <member name="P:Rock.Model.CommunicationRecipient.OpenedClient">
            <summary>
            Gets or sets type of client that the recipient used to open the communication.
            </summary>
            <value>
            The client.
            </value>
        </member>
        <member name="P:Rock.Model.CommunicationRecipient.TransportEntityTypeName">
            <summary>
            Gets or sets the transport entity type identifier.
            </summary>
            <value>
            The transport identifier.
            </value>
        </member>
        <member name="P:Rock.Model.CommunicationRecipient.UniqueMessageId">
            <summary>
            Gets or sets the unique message identifier.
            </summary>
            <value>
            The unique message identifier.
            </value>
        </member>
        <member name="P:Rock.Model.CommunicationRecipient.ResponseCode">
            <summary>
            Gets or sets the response code.
            </summary>
            <value>
            A <see cref="T:System.String"/> representing the response code.
            </value>
        </member>
        <member name="P:Rock.Model.CommunicationRecipient.AdditionalMergeValuesJson">
            <summary>
            Gets or sets the AdditionalMergeValues as a Json string.
            </summary>
            <value>
            A Json formatted <see cref="T:System.String"/> containing the AdditionalMergeValues for the communication recipient. 
            </value>
        </member>
        <member name="P:Rock.Model.CommunicationRecipient.Person">
            <summary>
            Gets or sets the <see cref="T:Rock.Model.Person"/> who is receiving the <see cref="T:Rock.Model.Communication"/>.
            </summary>
            <value>
            The <see cref="T:Rock.Model.Person"/> who is receiving the <see cref="T:Rock.Model.Communication"/>.
            </value>
        </member>
        <member name="P:Rock.Model.CommunicationRecipient.Communication">
            <summary>
            Gets or sets the <see cref="T:Rock.Model.Communication"/>.
            </summary>
            <value>
            The <see cref="T:Rock.Model.Communication"/>
            </value>
        </member>
        <member name="P:Rock.Model.CommunicationRecipient.Activities">
            <summary>
            Gets or sets a collection containing the <see cref="T:Rock.Model.CommunicationRecipient">CommunicationRecipients</see> for the Communication.
            </summary>
            <value>
            The <see cref="T:Rock.Model.CommunicationRecipient">CommunicationRecipients</see> of the Communication.
            </value>
        </member>
        <member name="P:Rock.Model.CommunicationRecipient.AdditionalMergeValues">
            <summary>
            Gets or sets a dictionary containing the Additional Merge values for this communication
            </summary>
            <value>
             A <see cref="T:System.Collections.Generic.Dictionary`2"/> of <see cref="T:System.String"/> objects containing additional merge values for the <see cref="T:Rock.Model.Communication"/>
            </value>
        </member>
        <member name="P:Rock.Model.CommunicationRecipient.ActivityList">
            <summary>
            Gets a list of activities.
            </summary>
            <value>
            The activity list.
            </value>
        </member>
        <member name="T:Rock.Model.CommunicationRecipientConfiguration">
            <summary>
            Communication Recipient Configuration class.
            </summary>
        </member>
        <member name="M:Rock.Model.CommunicationRecipientConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.CommunicationRecipientConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Rock.Model.CommunicationRecipientStatus">
            <summary>
            The status of communication being sent to recipient
            </summary>
        </member>
        <member name="F:Rock.Model.CommunicationRecipientStatus.Pending">
            <summary>
            Communication has not yet been sent to recipient
            </summary>
        </member>
        <member name="F:Rock.Model.CommunicationRecipientStatus.Delivered">
            <summary>
            Communication was successfully delivered to recipient's mail server
            </summary>
        </member>
        <member name="F:Rock.Model.CommunicationRecipientStatus.Failed">
            <summary>
            Communication failed to be sent to recipient
            </summary>
        </member>
        <member name="F:Rock.Model.CommunicationRecipientStatus.Cancelled">
            <summary>
            Communication was cancelled prior to sending to the recipient
            </summary>
        </member>
        <member name="F:Rock.Model.CommunicationRecipientStatus.Opened">
            <summary>
            Communication was sent and opened (viewed) by the recipient
            </summary>
        </member>
        <member name="T:Rock.Model.FinancialScheduledTransaction">
            <summary>
            Represents a financial transaction schedule in Rock. A user can schedule transactions for varying frequencies, number of transactions and 
            and time period. A scheduled transaction can include multiple <see cref="T:Rock.Model.FinancialScheduledTransactionDetail"/> items so that a single 
            scheduled transaction can include payments/gifts for multiple <see cref="T:Rock.Model.FinancialAccount">Financial Accounts</see>/funds.
            </summary>
            <remarks>
            Several examples include - A one time transaction to occur on 1/1/2014; an ongoing weekly transaction; a weekly transaction for 10 weeks; a monthly transaction from 1/1/2014 - 12/31/2014.
            </remarks>
        </member>
        <member name="P:Rock.Model.FinancialScheduledTransaction.AuthorizedPersonId">
            <summary>
            Gets or sets the PersonId of the <see cref="T:Rock.Model.Person"/> who authorized the scheduled transaction.
            </summary>
            <value>
            A <see cref="T:System.Int32"/> representing the PersonId of the <see cref="T:Rock.Model.Person"/> who authorized the scheduled transaction.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialScheduledTransaction.TransactionFrequencyValueId">
            <summary>
            Gets or sets the DefinedValueId of the transaction frequency <see cref="T:Rock.Model.DefinedValue"/> that represents the frequency that this 
            transaction will occur.
            </summary>
            <value>
            A <see cref="T:System.Int32"/> representing the DefinedValueId of this transaction's frequency <see cref="T:Rock.Model.DefinedValue"/>.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialScheduledTransaction.StartDate">
            <summary>
            Gets or sets the start date for this schedule. The first transaction will occur on or after this date.
            </summary>
            <value>
            A <see cref="T:System.DateTime"/> representing the start date for this schedule.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialScheduledTransaction.EndDate">
            <summary>
            Gets or sets the end date for this transaction schedule. Transactions will cease to occur on or before this date.  This property is nullable for ongoing 
            schedules or for schedules that will end after a specified number of payments/transaction occur (in the <see cref="P:Rock.Model.FinancialScheduledTransaction.NumberOfPayments"/> property).
            </summary>
            <value>
            A <see cref="T:System.DateTime"/> representing the end date for this transaction schedule. If there isn't an end date for this transaction schedule
            this value will be null.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialScheduledTransaction.NumberOfPayments">
            <summary>
            Gets or sets the the maximum number of times that this payment should repeat in this schedule.  If there is not a set number of payments, this value will be null. 
            This property is overridden by the schedule's <see cref="P:Rock.Model.FinancialScheduledTransaction.EndDate"/>.
            </summary>
            <value>
            A <see cref="T:System.Int32"/> representing the maximum number of times that this payment should repeat.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialScheduledTransaction.NextPaymentDate">
            <summary>
            Gets or sets the date of the next payment in this schedule.
            </summary>
            <value>
            A <see cref="T:System.DateTime"/> representing the date of the next payment in this schedule.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialScheduledTransaction.LastStatusUpdateDateTime">
            <summary>
            Gets or sets the date and time of the last status update.
            </summary>
            <value>
            A <see cref="T:System.DateTime"/> representing the date and time of the last status update.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialScheduledTransaction.IsActive">
            <summary>
            Gets or sets a flag indicating if this scheduled transaction is active.
            </summary>
            <value>
            A <see cref="T:System.Boolean"/> that is <c>true</c> if this scheduled transaction is active; otherwise <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialScheduledTransaction.GatewayEntityTypeId">
            <summary>
            Gets or sets the EntityTypeId of the Financial Gateway's service <see cref="T:Rock.Model.EntityType"/>. Represents the
            financial gateway that will be used for this transaction.
            </summary>
            <value>
            A <see cref="T:System.Int32"/> representing the EntityTypeId of the Financial Gateway's service <see cref="T:Rock.Model.EntityType"/>
            </value>
        </member>
        <member name="P:Rock.Model.FinancialScheduledTransaction.TransactionCode">
            <summary>
            Gets or sets the transaction code used for this scheduled transaction.
            </summary>
            <value>
            A <see cref="T:System.String"/> representing the transaction code for this scheduled transaction.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialScheduledTransaction.GatewayScheduleId">
            <summary>
            Gets or sets the payment gateway's payment schedule key/identifier.  This is the value that uniquely identifies the payment schedule on 
            with the payment gateway.
            </summary>
            <value>
            A <see cref="T:System.String"/> representing the financial gateway's unique identifier for the payment schedule.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialScheduledTransaction.CardReminderDate">
            <summary>
            Gets or sets the date to remind user to update scheduled transaction.
            </summary>
            <value>
            A <see cref="T:System.DateTime"/> representing the date to remind the user to update the scheduled transaction.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialScheduledTransaction.LastRemindedDate">
            <summary>
            Gets or sets the date that user was last reminded to update scheduled transaction.
            </summary>
            <value>
            A <see cref="T:System.DateTime"/> representing the date that the user was last reminded to update the scheduled transaction.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialScheduledTransaction.AuthorizedPerson">
            <summary>
            Gets or sets the <see cref="T:Rock.Model.Person"/> that authorized the scheduled transaction.
            </summary>
            <value>
            The <see cref="T:Rock.Model.Person"/> that authorized the scheduled transaction.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialScheduledTransaction.GatewayEntityType">
            <summary>
            Gets or sets the <see cref="T:Rock.Model.EntityType"/> for the financial gateway.
            </summary>
            <value>
            The <see cref="T:Rock.Model.EntityType"/> for the financial gateway.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialScheduledTransaction.TransactionFrequencyValue">
            <summary>
            Gets or sets the <see cref="T:Rock.Model.DefinedValue"/> representing the payment frequency associated with this 
            scheduled transaction.
            </summary>
            <value>
            A <see cref="T:Rock.Model.DefinedValue"/> representing the payment frequency associated with this scheduled transaction.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialScheduledTransaction.ScheduledTransactionDetails">
            <summary>
            Gets or sets the <see cref="T:Rock.Model.FinancialScheduledTransactionDetail">transaction details</see> for this scheduled transaction.
            </summary>
            <value>
            A collection containing the <see cref="T:Rock.Model.FinancialScheduledTransactionDetail">FinancialScheduleTransactionDetails</see> for this scheduled transaction.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialScheduledTransaction.Transactions">
            <summary>
            Gets or sets <see cref="T:Rock.Model.FinancialTransaction">FinancialTransactions</see> that have been processed and have have cleared for this scheduled transaction profile. 
            </summary>
            <value>
            A collection of the processed and cleared <see cref="T:Rock.Model.FinancialTransaction">FinancialTransactions</see> for this scheduled transaction profile.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialScheduledTransaction.TotalAmount">
            <summary>
            Gets the total amount.
            </summary>
            <value>
            The total amount.
            </value>
        </member>
        <member name="T:Rock.Model.FinancialScheduledTransactionConfiguration">
            <summary>
            Scheduled Transaction Configuration class.
            </summary>
        </member>
        <member name="M:Rock.Model.FinancialScheduledTransactionConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.FinancialScheduledTransactionConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Rock.Model.DataView">
            <summary>
            Represents a filterable dataview in Rock.
            </summary>
        </member>
        <member name="M:Rock.Model.DataView.GetQuery(Rock.Web.UI.Controls.SortProperty,System.Collections.Generic.List{System.String}@)">
            <summary>
            Gets the query.
            </summary>
            <param name="sortProperty">The sort property.</param>
            <param name="errorMessages">The error messages.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.DataView.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Rock.Model.DataView.GetExpression(Rock.Data.IService,System.Linq.Expressions.ParameterExpression,System.Collections.Generic.List{System.String}@)">
            <summary>
            Gets the expression.
            </summary>
            <param name="serviceInstance">The service instance.</param>
            <param name="paramExpression">The param expression.</param>
            <param name="errorMessages">The error messages.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.DataView.GetTransformExpression(Rock.Data.IService,System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Collections.Generic.List{System.String})">
            <summary>
            Gets the transform expression.
            </summary>
            <param name="service">The service.</param>
            <param name="parameterExpression">The parameter expression.</param>
            <param name="whereExpression">The where expression.</param>
            <param name="errorMessages">The error messages.</param>
            <returns></returns>
        </member>
        <member name="P:Rock.Model.DataView.IsSystem">
            <summary>
            Gets or sets a flag indicating if this DataView is part of the Rock core system/framework.
            </summary>
            <value>
            A <see cref="T:System.Boolean"/> value that is <c>true</c> if it is part of the Rock core system/framework; otherwise <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Model.DataView.Name">
            <summary>
            Gets or sets the Name of the DataView.
            </summary>
            <value>
            A <see cref="T:System.String"/> representing the Name of the DataView.
            </value>
        </member>
        <member name="P:Rock.Model.DataView.Description">
            <summary>
            Gets or sets the user defined description of the DataView
            </summary>
            <value>
            A <see cref="T:System.String"/> representing the description of the DataView.
            </value>
        </member>
        <member name="P:Rock.Model.DataView.CategoryId">
            <summary>
            Gets or sets the CategoryId of the <see cref="T:Rock.Model.Category"/> that this DataView belongs to. If there is no Category, this value will be null.
            </summary>
            <value>
            A <see cref="T:System.Int32"/> representing the CategoryId of the <see cref="T:Rock.Model.Category"/> that this DataView belongs to. If it is not part of a Category this value will be null.
            </value>
        </member>
        <member name="P:Rock.Model.DataView.EntityTypeId">
            <summary>
            Gets or sets the EntityTypeId of the <see cref="T:Rock.Model.EntityType"/> that this DataView reports on.
            </summary>
            <value>
            A <see cref="T:System.Int32"/> representing the EntityTypeId of the <see cref="T:Rock.Model.EntityType"/> that this DataView reports on.
            </value>
        </member>
        <member name="P:Rock.Model.DataView.DataViewFilterId">
            <summary>
            Gets or sets the DataViewFilterId of the root/base <see cref="T:Rock.Model.DataViewFilter"/> that is used to generate this DataView. 
            </summary>
            <value>
            A <see cref="T:System.Int32"/> that represents the DataViewFilterId of the root/base <see cref="T:Rock.Model.DataViewFilter"/> that is used to generate this DataView. If there is 
            not a filter on this DataView, this value will be null.
            </value>
        </member>
        <member name="P:Rock.Model.DataView.TransformEntityTypeId">
            <summary>
            Gets or sets the EntityTypeId of the <see cref="T:Rock.Model.EntityType"/> that is used for an optional transformation on this DataView.
            </summary>
            <value>
            A <see cref="T:System.Int32"/> representing the EntityTypeId of the <see cref="T:Rock.Model.EntityType"/> that is used for an optional transformation on this DataView. If there
            is not a transformation on this DataView, this value will be null.
            </value>
        </member>
        <member name="P:Rock.Model.DataView.Category">
            <summary>
            Gets or sets the <see cref="T:Rock.Model.Category"/> that this DataView belongs to
            </summary>
            <value>
            The <see cref="T:Rock.Model.Category"/> that this DataView belongs to.
            </value>
        </member>
        <member name="P:Rock.Model.DataView.EntityType">
            <summary>
            Gets or sets the <see cref="T:Rock.Model.EntityType"/> that this DataView reports on.
            </summary>
            <value>
            The <see cref="T:Rock.Model.EntityType"/> that this DataView reports on.
            </value>
        </member>
        <member name="P:Rock.Model.DataView.DataViewFilter">
            <summary>
            Gets or sets the base <see cref="T:Rock.Model.DataViewFilter"/> that is used to generate this DataView.
            </summary>
            <value>
            The base <see cref="T:Rock.Model.DataViewFilter"/>.
            </value>
        </member>
        <member name="P:Rock.Model.DataView.TransformEntityType">
            <summary>
            Gets or sets the type of the entity used for an optional transformation
            </summary>
            <value>
            The transformation type of entity.
            </value>
        </member>
        <member name="P:Rock.Model.DataView.ParentAuthority">
            <summary>
            Gets the parent security authority for the DataView
            </summary>
            <value>
            The parent authority of the DataView.
            </value>
        </member>
        <member name="T:Rock.Model.DataViewConfiguration">
            <summary>
            Campus Configuration class.
            </summary>
        </member>
        <member name="M:Rock.Model.DataViewConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.ReportConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Rock.Model.DataViewFilter">
            <summary>
            Represents a filter on a <see cref="T:Rock.Model.DataView"/> in Rock.
            </summary>
        </member>
        <member name="M:Rock.Model.DataViewFilter.IsAuthorized(System.String,Rock.Model.Person)">
            <summary>
            Determines whether the specified action is authorized.
            </summary>
            <param name="action">A <see cref="T:System.String"/> containing the action that is being performed.</param>
            <param name="person">the <see cref="T:Rock.Model.Person"/> who is trying to perform the action.</param>
            <returns>
              <c>true</c> if the specified action is authorized; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Rock.Model.DataViewFilter.GetExpression(System.Type,Rock.Data.IService,System.Linq.Expressions.ParameterExpression,System.Collections.Generic.List{System.String})">
            <summary>
            Gets the Linq expression for the DataViewFilter.
            </summary>
            <param name="filteredEntityType">The object type of the filtered entity.</param>
            <param name="serviceInstance">A <see cref="T:System.Object"/> that contains the service reference.</param>
            <param name="parameter">A <see cref="T:System.Linq.Expressions.ParameterExpression"/> containing the parameter for the expression.</param>
            <param name="errorMessages">A <see cref="T:System.Collections.Generic.List`1"/> that contains any error/exception messages that are returned.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.DataViewFilter.ToString(System.Type)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Rock.Model.DataViewFilter.ExpressionType">
            <summary>
            Gets or sets the expression type of this DataViewFilter.
            </summary>
            <value>
            A <see cref="T:Rock.Model.FilterExpressionType"/> that represents the expression type for the filter.  When <c>FilterExpressionType.Filter</c> it represents a filter expression, when <c>FilterExpressionType.GroupAll</c> it means that 
            all conditions found in child expressions must be met, when <c>FilterExpressionType.GroupOr</c> it means that at least one condition found in the child filter expressions must be met.
            </value>
        </member>
        <member name="P:Rock.Model.DataViewFilter.ParentId">
            <summary>
            Gets or sets the DataViewFilterId of the parent DataViewFilter.
            </summary>
            <value>
            A <see cref="T:System.Int32"/> representing the DataViewFilterId of the parent DataViewFilter. If this DataViewFilter does not have a parent, this value will be null.
            </value>
        </member>
        <member name="P:Rock.Model.DataViewFilter.EntityTypeId">
            <summary>
            Gets or sets the EntityTypeId of the <see cref="T:Rock.Model.EntityType"/> that either is being filtered by or contains the property that the DataView is being filtered by.
            </summary>
            <value>
            A <see cref="T:System.Int32"/> representing the EntityTypeId of the <see cref="T:Rock.Model.EntityType"/> that is being used in the filter.
            </value>
        </member>
        <member name="P:Rock.Model.DataViewFilter.Selection">
            <summary>
            Gets or sets the value that the DataViewFitler is filtering by.
            </summary>
            <value>
            A <see cref="T:System.String"/> containing the value to be used as a filter.
            </value>
        </member>
        <member name="P:Rock.Model.DataViewFilter.Parent">
            <summary>
            Gets or sets sets the parent DataViewFilter.
            </summary>
            <value>
            The parent DataViewFilter.
            </value>
        </member>
        <member name="P:Rock.Model.DataViewFilter.EntityType">
            <summary>
            Gets or sets the <see cref="T:Rock.Model.EntityType"/> that the DataView is being filtered by or that contains the property/properties that the DataView is being filtered by.
            </summary>
            <value>
            The <see cref="T:Rock.Model.EntityType"/> that the DataView is being filtered by.
            </value>
        </member>
        <member name="P:Rock.Model.DataViewFilter.Expanded">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Rock.Model.DataViewFilter"/> 
            is currently expanded.  This property is only used by the DataView ui to 
            track which filters are currently expanded
            </summary>
            <value>
              <c>true</c> if expanded; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Model.DataViewFilter.ChildFilters">
            <summary>
            Gets or sets the child DataViewFilters.
            </summary>
            <value>
            The child DataViewFilters.
            </value>
        </member>
        <member name="T:Rock.Model.DataViewFilterConfiguration">
            <summary>
            Campus Configuration class.
            </summary>
        </member>
        <member name="M:Rock.Model.DataViewFilterConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.DataViewFilterConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Rock.Model.FilterExpressionType">
            <summary>
            Type of Filter entry
            </summary>
        </member>
        <member name="F:Rock.Model.FilterExpressionType.Filter">
            <summary>
            Expression filter
            </summary>
        </member>
        <member name="F:Rock.Model.FilterExpressionType.GroupAll">
            <summary>
            A collection of expressions/conditions that must match and should be "and'd" together.
            </summary>
        </member>
        <member name="F:Rock.Model.FilterExpressionType.GroupAny">
            <summary>
            A collection of expressions/conditions where at least one condition/expression must match.  Expressions are "or'd" together.
            </summary>
        </member>
        <member name="T:Rock.Model.ComparisonType">
            <summary>
            Reporting Field Comparison Types
            </summary>
        </member>
        <member name="F:Rock.Model.ComparisonType.EqualTo">
            <summary>
            Equal
            </summary>
        </member>
        <member name="F:Rock.Model.ComparisonType.NotEqualTo">
            <summary>
            Not equal
            </summary>
        </member>
        <member name="F:Rock.Model.ComparisonType.StartsWith">
            <summary>
            Starts with
            </summary>
        </member>
        <member name="F:Rock.Model.ComparisonType.Contains">
            <summary>
            Contains
            </summary>
        </member>
        <member name="F:Rock.Model.ComparisonType.DoesNotContain">
            <summary>
            Does not contain
            </summary>
        </member>
        <member name="F:Rock.Model.ComparisonType.IsBlank">
            <summary>
            Is blank
            </summary>
        </member>
        <member name="F:Rock.Model.ComparisonType.IsNotBlank">
            <summary>
            Is not blank
            </summary>
        </member>
        <member name="F:Rock.Model.ComparisonType.GreaterThan">
            <summary>
            Greater than
            </summary>
        </member>
        <member name="F:Rock.Model.ComparisonType.GreaterThanOrEqualTo">
            <summary>
            Greater than or equal
            </summary>
        </member>
        <member name="F:Rock.Model.ComparisonType.LessThan">
            <summary>
            Less than
            </summary>
        </member>
        <member name="F:Rock.Model.ComparisonType.LessThanOrEqualTo">
            <summary>
            Less than or equal
            </summary>
        </member>
        <member name="F:Rock.Model.ComparisonType.EndsWith">
            <summary>
            Ends with
            </summary>
        </member>
        <member name="T:Rock.Model.Report">
            <summary>
            Represents a Report (based off of a <see cref="T:Rock.Model.DataView"/> in Rock.
            </summary>
        </member>
        <member name="M:Rock.Model.Report.GetDataSource(Rock.Data.RockContext,System.Type,System.Collections.Generic.Dictionary{System.Int32,Rock.Reporting.EntityField},System.Collections.Generic.Dictionary{System.Int32,Rock.Web.Cache.AttributeCache},System.Collections.Generic.Dictionary{System.Int32,Rock.Model.ReportField},Rock.Web.UI.Controls.SortProperty,System.Collections.Generic.List{System.String}@)">
            <summary>
            Gets the data source.
            </summary>
            <param name="context">The context.</param>
            <param name="entityType">Type of the entity.</param>
            <param name="entityFields">The entity fields.</param>
            <param name="attributes">The attributes.</param>
            <param name="selectComponents">The select components.</param>
            <param name="sortProperty">The sort property.</param>
            <param name="errorMessages">The error messages.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.Report.GetAttributeValueExpression(System.Linq.IQueryable{Rock.Model.AttributeValue},System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Int32)">
            <summary>
            Gets the attribute value expression.
            </summary>
            <param name="attributeValues">The attribute values.</param>
            <param name="attributeValueParameter">The attribute value parameter.</param>
            <param name="parentIdProperty">The parent identifier property.</param>
            <param name="attributeId">The attribute identifier.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.Report.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Rock.Model.Report.IsSystem">
            <summary>
            Gets or sets a flag indicating if this Report is part of the Rock core system/framework. This property is required.
            </summary>
            <value>
             A <see cref="T:System.Boolean"/> that is <c>true</c> if the Report is part of the Rock core system/framework; otherwise <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Model.Report.Name">
            <summary>
            Gets or sets the Name of the Report. This property is required.
            </summary>
            <value>
            A <see cref="T:System.String"/> that represents the Name of the Report.
            </value>
        </member>
        <member name="P:Rock.Model.Report.Description">
            <summary>
            Gets or sets the Report's Description.
            </summary>
            <value>
            A <see cref="T:System.String"/> representing the Report's Description.
            </value>
        </member>
        <member name="P:Rock.Model.Report.CategoryId">
            <summary>
            Gets or sets the CategoryId of the <see cref="T:Rock.Model.Category"/> that the Report belongs to.
            </summary>
            <value>
            A <see cref="T:System.Int32"/> representing the CateogryId of the <see cref="T:Rock.Model.Category"/> that the report belongs to. If the Report does not belong to
            a <see cref="T:Rock.Model.Category"/> this value will be null.
            </value>
        </member>
        <member name="P:Rock.Model.Report.EntityTypeId">
            <summary>
            Gets or sets the EntityTypeId of the <see cref="T:Rock.Model.EntityType"/> that is being reported on.
            </summary>
            <value>
            A <see cref="T:System.Int32"/> representing the EntityTypeId of the <see cref="T:Rock.Model.EntityType"/> that is being reported on.
            </value>
        </member>
        <member name="P:Rock.Model.Report.DataViewId">
            <summary>
            Gets or the DataViewId of the root <see cref="T:Rock.Model.DataView"/> that this Report is based on.
            </summary>
            <value>
            A <see cref="T:System.Int32"/> representing the DataViewId of the root <see cref="T:Rock.Model.DataView"/> that this Report is based on.
            </value>
        </member>
        <member name="P:Rock.Model.Report.FetchTop">
            <summary>
            Gets or sets the number of records to fetch in the report.  Null means all records.
            </summary>
            <value>
            The fetch top.
            </value>
        </member>
        <member name="P:Rock.Model.Report.Category">
            <summary>
            Gets or sets the <see cref="T:Rock.Model.Category"/> that this Report belongs to.
            </summary>
            <value>
            The <see cref="T:Rock.Model.Category"/> that this Report belongs to. If the Report does not belong to a <see cref="T:Rock.Model.Category"/> this value will be null.
            </value>
        </member>
        <member name="P:Rock.Model.Report.EntityType">
            <summary>
            Gets or sets the <see cref="T:Rock.Model.EntityType"/> that is being reported on. 
            </summary>
            <value>
            The <see cref="T:Rock.Model.EntityType"/> that is being reported on.
            </value>
        </member>
        <member name="P:Rock.Model.Report.DataView">
            <summary>
            Gets or sets the base/root <see cref="T:Rock.Model.DataView"/> that this Report is based on.
            </summary>
            <value>
            The <see cref="T:Rock.Model.DataView"/> that this Report is based on.
            </value>
        </member>
        <member name="P:Rock.Model.Report.ReportFields">
            <summary>
            Gets or sets the report fields.
            </summary>
            <value>
            The report fields.
            </value>
        </member>
        <member name="T:Rock.Model.ReportConfiguration">
            <summary>
            Campus Configuration class.
            </summary>
        </member>
        <member name="M:Rock.Model.ReportConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.ReportConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Rock.Model.MarketingCampaign">
            <summary>
            Represents a marketing campaign in Rock
            </summary>
        </member>
        <member name="M:Rock.Model.MarketingCampaign.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this Marketing Campaign
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this marketing campaign.
            </returns>
        </member>
        <member name="P:Rock.Model.MarketingCampaign.Title">
            <summary>
            Gets or sets the title of the marketing campaign. This property is required.
            </summary>
            <value>
            A <see cref="T:System.String"/> that represents the title of the Marketing Campaign.
            </value>
        </member>
        <member name="P:Rock.Model.MarketingCampaign.ContactPersonId">
            <summary>
            Gets or sets PersonId of the <see cref="T:Rock.Model.Person"/> who is the contact for the marketing campaign.
            </summary>
            <value>
            A <see cref="T:System.Int32"/> representing the PersonId of the Contact <see cref="T:Rock.Model.Person"/> for the marketing campaign. If the contact is external
            or is not in the database, this value can be null.
            </value>
        </member>
        <member name="P:Rock.Model.MarketingCampaign.ContactEmail">
            <summary>
            Gets or sets the email address of the contact. 
            </summary>
            <value>
            A <see cref="T:System.String"/> that represents the email address of the contact. If the contact does not have an email address, this value will be null.
            </value>
        </member>
        <member name="P:Rock.Model.MarketingCampaign.ContactPhoneNumber">
            <summary>
            Gets or sets the contact phone number.
            </summary>
            <value>
            A <see cref="T:System.String"/> containing the contact phone number.
            </value>
        </member>
        <member name="P:Rock.Model.MarketingCampaign.ContactFullName">
            <summary>
            Gets or sets the full name of the contact.
            </summary>
            <value>
            A <see cref="T:System.String"/> representing the full name of the contact.
            </value>
        </member>
        <member name="P:Rock.Model.MarketingCampaign.EventGroupId">
            <summary>
            Gets or sets the GroupId of the Event <see cref="T:Rock.Model.Group"/> that is associated with this Marketing Campaign. If an event group is not associated with this campaign, 
            this value will be null. 
            </summary>
            <value>
            A <see cref="T:System.Int32"/> representing the GroupId of the Event <see cref="T:Rock.Model.Group"/> that is associated with this Marketing Campaign. 
            </value>
        </member>
        <member name="P:Rock.Model.MarketingCampaign.ContactPerson">
            <summary>
            Gets or sets the contact <see cref="T:Rock.Model.Person"/> if the contact is external or not in Rock, this value will be null.
            </summary>
            <value>
            The contact <see cref="T:Rock.Model.Person"/> for the marketing Campaign.
            </value>
        </member>
        <member name="P:Rock.Model.MarketingCampaign.EventGroup">
            <summary>
            Gets or sets the event <see cref="T:Rock.Model.Group"/> that is associated with this Marketing Campaign. 
            </summary>
            <value>
            The event <see cref="T:Rock.Model.Group"/> that is associated with this Marketing Campaign. If a group is not associated with this Marketing Campaign this value will be null.
            </value>
        </member>
        <member name="P:Rock.Model.MarketingCampaign.MarketingCampaignAds">
            <summary>
            Gets or sets a collection of <see cref="T:Rock.Model.MarketingCampaignAd">MarketingCampaignAds</see> that belong to this Marketing Campaign.
            </summary>
            <value>
            A collection of <see cref="T:Rock.Model.MarketingCampaignAd">MarketingCampaignAds</see> that belong to this Marketing Campaign.
            </value>
        </member>
        <member name="P:Rock.Model.MarketingCampaign.MarketingCampaignAudiences">
            <summary>
            Gets or sets a collection containing the <see cref="T:Rock.Model.MarketingCampaignAudience">MarketingCampaignAudiences</see> that this marketing campaign is targeted toward.
            </summary>
            <value>
            A collection of <see cref="T:Rock.Model.MarketingCampaignAudience">MarketingCampaignAudiences</see> that this marketing campaign is targeted toward.
            </value>
        </member>
        <member name="P:Rock.Model.MarketingCampaign.MarketingCampaignCampuses">
            <summary>
            Gets or sets a collection of <see cref="T:Rock.Model.MarketingCampaignCampus">MarketingCampaignCampuses</see> (campuses) that this marketing campaign will be used at/targeted to.
            </summary>
            <value>
            A collection of <see cref="T:Rock.Model.MarketingCampaignCampus">MarketingCampaignCampus</see> (campuses) that this marketing campaign will be used at/targeted to.
            </value>
        </member>
        <member name="T:Rock.Model.MarketingCampaignConfiguration">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Model.MarketingCampaignConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.MarketingCampaignConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Rock.Model.MarketingCampaignAd">
            <summary>
            
            </summary>
        </member>
        <member name="P:Rock.Model.MarketingCampaignAd.MarketingCampaignId">
            <summary>
            Gets or sets the MarketingCampaignId of the <see cref="T:Rock.Model.MarketingCampaign"/> that this MarketingCampaignAd belongs to.
            </summary>
            <value>
            A <see cref="T:System.Int32"/> representing the MarketignCampaignId of the <see cref="T:Rock.Model.MarketingCampaign"/> that this MarketingCampaignAd belongs to.
            </value>
        </member>
        <member name="P:Rock.Model.MarketingCampaignAd.MarketingCampaignAdTypeId">
            <summary>
            Gets or sets the MarketingCampaignAdTypeId of the <see cref="T:Rock.Model.MarketingCampaignAdType"/> of this MarketingCampaignAd.
            </summary>
            <value>
            A <see cref="T:System.Int32"/> that represents the MarketingTypeAdTypeId of the <see cref="T:Rock.Model.MarketingCampaignAdType"/> of this MarketingCampaignAd.
            </value>
        </member>
        <member name="P:Rock.Model.MarketingCampaignAd.Priority">
            <summary>
            Gets or sets the priority of this MarketingCampaignAd. The lower the number, the higher the priority.
            </summary>
            <value>
            A <see cref="T:System.Int32"/> representing the priority of this MarketingCampaignAd. The lower the number, the higher the priority of the Ad.
            </value>
        </member>
        <member name="P:Rock.Model.MarketingCampaignAd.MarketingCampaignAdStatus">
            <summary>
            Gets or sets the <see cref="T:Rock.Model.MarketingCampaignAdStatus"/> (status) of this MarketingCampaignAd.
            </summary>
            <value>
            A <see cref="T:Rock.Model.MarketingCampaignAdStatus"/> enumeration value that represents the status of this MarketingCampaignAd. When <c>MarketingCampaignAdStatus.PendingApproval</c> the ad is 
            awaiting approval; when <c>MarketingCampaignAdStatus.Approved</c> the ad has been approved by the approver, when <c>MarketingCampaignAdStatus.Denied</c> the ad has been denied by the approver.
            </value>
        </member>
        <member name="P:Rock.Model.MarketingCampaignAd.MarketingCampaignStatusPersonId">
            <summary>
            Gets or sets the PersonId of the <see cref="T:Rock.Model.Person"/> who either approved or declined the MarketingCampaignAd. If no approval action has been performed on this Ad, this value will be null.
            </summary>
            <value>
            A <see cref="T:System.Int32"/> representing the PersonId of hte <see cref="T:Rock.Model.Person"/> who either approved or declined the MarketingCampaignAd. This value will be null if no approval action has been
            performed on this add.
            </value>
        </member>
        <member name="P:Rock.Model.MarketingCampaignAd.StartDate">
            <summary>
            Gets or sets the StartDate that the MarketingCampaignAd will begin running.
            </summary>
            <value>
            A <see cref="T:System.DateTime"/> representing the StartDate of the MarketingCampaignAd will run.
            </value>
        </member>
        <member name="P:Rock.Model.MarketingCampaignAd.EndDate">
            <summary>
            Gets or sets the EndDate that the MarketingCampaignAd will stop running.
            </summary>
            <value>
            A <see cref="T:System.DateTime"/> representing the EndDate of when the MarketingCampaignAd will run.
            </value>
        </member>
        <member name="P:Rock.Model.MarketingCampaignAd.Url">
            <summary>
            Gets or sets the URL that this MarketingCampaignAd should direct people to.
            </summary>
            <value>
            A <see cref="T:System.String"/> representing the URL that this MarketingCampaingnAdd should direct people to.
            </value>
        </member>
        <member name="P:Rock.Model.MarketingCampaignAd.MarketingCampaign">
            <summary>
            Gets or sets the <see cref="T:Rock.Model.MarketingCampaign"/> that this ad belongs to.
            </summary>
            <value>
            The <see cref="T:Rock.Model.MarketingCampaign"/> that this ad belongs to.
            </value>
        </member>
        <member name="P:Rock.Model.MarketingCampaignAd.MarketingCampaignAdType">
            <summary>
            Gets or sets the the <see cref="T:Rock.Model.MarketingCampaignAdType"/> of this ad.
            </summary>
            <value>
            The <see cref="T:Rock.Model.MarketingCampaignAdType"/> of this Ad.
            </value>
        </member>
        <member name="T:Rock.Model.MarketingCampaignAdConfiguration">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Model.MarketingCampaignAdConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.MarketingCampaignAdConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Rock.Model.MarketingCampaignAdStatus">
            <summary>
            Represents the status of a Marketing Campaign Card
            </summary>
        </member>
        <member name="F:Rock.Model.MarketingCampaignAdStatus.PendingApproval">
            <summary>
            The <see cref="T:Rock.Model.MarketingCampaignAd"/> is pending approval.
            </summary>
        </member>
        <member name="F:Rock.Model.MarketingCampaignAdStatus.Approved">
            <summary>
            The <see cref="T:Rock.Model.MarketingCampaignAd"/> has been approved.
            </summary>
        </member>
        <member name="F:Rock.Model.MarketingCampaignAdStatus.Denied">
            <summary>
            The <see cref="T:Rock.Model.MarketingCampaignAd"/> was denied.
            </summary>
        </member>
        <member name="T:Rock.Model.MarketingCampaignAdType">
            <summary>
            Represents a Type of <see cref="T:Rock.Model.MarketingCampaignAd"/>.
            </summary>
        </member>
        <member name="M:Rock.Model.MarketingCampaignAdType.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Rock.Model.MarketingCampaignAdType.IsSystem">
            <summary>
            Gets or sets a flag indicating if this MarketingCampaignAdType is part of the Rock core system/framework. 
            </summary>
            <value>
              A <see cref="T:System.Boolean"/> flag that is <c>true</c> if this MarketingCAmpaignAdType is part of the Rock core system/framework; otherwise <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Model.MarketingCampaignAdType.Name">
            <summary>
            Gets or sets the name of the MarketingCampaignAdType. This property is required.
            </summary>
            <value>
            A <see cref="T:System.String"/> representing the name of the MarketingCampaignAdType.
            </value>
        </member>
        <member name="P:Rock.Model.MarketingCampaignAdType.DateRangeType">
            <summary>
            Gets or sets an <see cref="T:Rock.Model.DateRangeTypeEnum"/> enumeration that represents the type of date range that this DateRangeTypeEnum supports.
            </summary>
            <value>
            A <see cref="T:Rock.Model.DateRangeTypeEnum"/> that represents the type of DateRangeTypeEnum is supported. When <c>DateRangeTypeEnum.SingleDate</c> a single date 
            will be supported; when <c>DateRangeTypeEnum.DateRange</c> a date range will be supported.
            </value>
        </member>
        <member name="T:Rock.Model.MarketingCampaignAdTypeConfiguration">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Model.MarketingCampaignAdTypeConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.MarketingCampaignAdTypeConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Rock.Model.DateRangeTypeEnum">
            <summary>
            Represents the type of DateRange that is supported.
            </summary>
        </member>
        <member name="F:Rock.Model.DateRangeTypeEnum.SingleDate">
            <summary>
            Allows a single date.
            </summary>
        </member>
        <member name="F:Rock.Model.DateRangeTypeEnum.DateRange">
            <summary>
            Allows a date range (start - end date)
            </summary>
        </member>
        <member name="T:Rock.Model.MarketingCampaignAudience">
            <summary>
            Represents an audience that a <see cref="T:Rock.Model.MarketingCampaign"/> is targeted towards. A <see cref="T:Rock.Model.MarketingCampaign"/> can be promoted/targeted towards one or more
            primary or secondary audiences.
            </summary>
        </member>
        <member name="P:Rock.Model.MarketingCampaignAudience.MarketingCampaignId">
            <summary>
            Gets or sets the MarketingCampaignId of the <see cref="T:Rock.Model.MarketingCampaign"/> that is being promoted to the Audience.
            </summary>
            <value>
            A <see cref="T:System.Int32"/> representing the MarketingCampaignId of the <see cref="T:Rock.Model.MarketingCampaign"/>.
            </value>
        </member>
        <member name="P:Rock.Model.MarketingCampaignAudience.AudienceTypeValueId">
            <summary>
            Gets or sets the DefinedValueId of an AudienceType <see cref="T:Rock.Model.DefinedValue"/> that that this <see cref="T:Rock.Model.MarketingCampaign"/> is promoted/targeted to.
            </summary>
            <value>
            A <see cref="T:System.Int32"/> representing the DefinedValueId of the AudienceType that is being promoted to.
            </value>
        </member>
        <member name="P:Rock.Model.MarketingCampaignAudience.IsPrimary">
            <summary>
            Gets or sets a flag indicating if this audience is a primary audience for the <see cref="T:Rock.Model.MarketingCampaign"/>.
            </summary>
            <value>
            A <see cref="T:System.Boolean"/> that is <c>true</c> if this Audience is a primary audience for the <see cref="T:Rock.Model.MarketingCampaign"/>; otherwise <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Model.MarketingCampaignAudience.Name">
            <summary>
            Gets the Name of this MarketingCampaignAudience.
            </summary>
            <value>
            A <see cref="T:System.String"/> that represents the name of the MarketingCampaignAudience.
            </value>
        </member>
        <member name="P:Rock.Model.MarketingCampaignAudience.MarketingCampaign">
            <summary>
            Gets or sets the <see cref="T:Rock.Model.MarketingCampaign"/> that this being promoted to this Audience.
            </summary>
            <value>
            The <see cref="T:Rock.Model.MarketingCampaign"/> that is being promoted to this Audience.
            </value>
        </member>
        <member name="P:Rock.Model.MarketingCampaignAudience.AudienceTypeValue">
            <summary>
            Gets or sets the <see cref="T:Rock.Model.DefinedValue"/> representing the AudienceType.
            </summary>
            <value>
            The <see cref="T:Rock.Model.DefinedValue"/> representing the AudienceType.
            </value>
        </member>
        <member name="T:Rock.Model.MarketingCampaignAudienceConfiguration">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Model.MarketingCampaignAudienceConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.MarketingCampaignAudienceConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Rock.Model.MarketingCampaignCampus">
            <summary>
            Represents a <see cref="T:Rock.Model.Campus"/> in Rock where a <see cref="T:Rock.Model.MarketingCampaign"/> is being promoted at and/or being promoted for.  A <see cref="T:Rock.Model.MarketingCampaign"/> can be promoted 
            at one or more <see cref="T:Rock.Model.Campus"/>.
            </summary>
        </member>
        <member name="P:Rock.Model.MarketingCampaignCampus.MarketingCampaignId">
            <summary>
            Gets or sets the MarketingCampaignId of the <see cref="T:Rock.Model.MarketingCampaign"/> that is being promoted at this <see cref="T:Rock.Model.Campus"/>.
            </summary>
            <value>
            A <see cref="T:System.Int32"/> representing the MarketingCampaignId of the <see cref="T:Rock.Model.MarketingCampaign"/> that is being promoted.
            </value>
        </member>
        <member name="P:Rock.Model.MarketingCampaignCampus.CampusId">
            <summary>
            Gets or sets the CampusId of the <see cref="T:Rock.Model.Campus"/> where the <see cref="T:Rock.Model.MarketingCampaign"/> is being promoted for.
            </summary>
            <value>
            A <see cref="T:System.Int32"/> representing the CampusID of the <see cref="T:Rock.Model.Campus"/> that the <see cref="T:Rock.Model.MarketingCampaign"/> is being promoted for/targeted to.
            </value>
        </member>
        <member name="P:Rock.Model.MarketingCampaignCampus.MarketingCampaign">
            <summary>
            Gets or sets the <see cref="T:Rock.Model.MarketingCampaign"/> that is being promoted.
            </summary>
            <value>
            The <see cref="T:Rock.Model.MarketingCampaign"/> that is being promoted.
            </value>
        </member>
        <member name="P:Rock.Model.MarketingCampaignCampus.Campus">
            <summary>
            Gets or sets the <see cref="T:Rock.Model.Campus"/> where the <see cref="T:Rock.Model.MarketingCampaign"/> is being promoted at.
            </summary>
            <value>
            The <see cref="T:Rock.Model.Campus"/> where the <see cref="T:Rock.Model.MarketingCampaign"/> is being promoted at.
            </value>
        </member>
        <member name="T:Rock.Model.MarketingCampaignCampusConfiguration">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Model.MarketingCampaignCampusConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.MarketingCampaignCampusConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Rock.Model.Note">
            <summary>
            Represents a note that is entered in Rock and is associated with a specific entity. For example, a note could be entered on a person, GroupMember, a device, etc or for a specific subset of an entity type.
            </summary>
        </member>
        <member name="M:Rock.Model.Note.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Rock.Model.Note.IsSystem">
            <summary>
            Gets or sets a flag indicating if this note is part of the Rock core system/framework. This property is required.
            </summary>
            <value>
            A <see cref="T:System.Boolean"/> value that is <c>true</c> if this note is part of the Rock core system/framework; otherwise <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Model.Note.NoteTypeId">
            <summary>
            Gets or sets the Id of the <see cref="T:Rock.Model.NoteType"/>. This property is required.
            </summary>
            <value>
            A <see cref="T:System.Int32"/> representing the Id of the <see cref="T:Rock.Model.NoteType"/>
            </value>
        </member>
        <member name="P:Rock.Model.Note.EntityId">
            <summary>
            Gets or sets the Id of the entity that this note is related to.
            </summary>
            <value>
            A <see cref="T:System.Int32"/> representing the Id of the entity (object) that this note is related to.
            </value>
        </member>
        <member name="P:Rock.Model.Note.SourceTypeValueId">
            <summary>
            Gets or sets the Id of the SourceType <see cref="T:Rock.Model.DefinedValue"/>. This shows how/where the note was created.
            </summary>
            <value>
            A <see cref="T:System.Int32"/> representing the Source Type <see cref="T:Rock.Model.DefinedValue"/>.
            </value>
        </member>
        <member name="P:Rock.Model.Note.Caption">
            <summary>
            Gets or sets the caption
            </summary>
            <value>
            A <see cref="T:System.String"/> representing the caption of the Note.
            </value>
        </member>
        <member name="P:Rock.Model.Note.IsAlert">
            <summary>
            Gets or sets a flag indicating if this note is an alert.
            </summary>
            <value>
            A <see cref="T:System.Boolean"/> value that is <c>true</c> if this note is an alert; otherwise <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Model.Note.Text">
            <summary>
            Gets or sets the text/body of the note.
            </summary>
            <value>
            A <see cref="T:System.String"/> representing the text/body of the note.
            </value>
        </member>
        <member name="P:Rock.Model.Note.NoteType">
            <summary>
            Gets or sets the Note Type
            </summary>
            <value>
            The <see cref="T:Rock.Model.NoteType"/> of this note.
            </value>
        </member>
        <member name="P:Rock.Model.Note.SourceType">
            <summary>
            Gets or sets the source of the note.
            </summary>
            <value>
            A <see cref="T:Rock.Model.DefinedValue"/> representing the source of the note.
            </value>
        </member>
        <member name="P:Rock.Model.Note.ParentAuthority">
            <summary>
            Gets the parent security authority of this Note. Where security is inherited from.
            </summary>
            <value>
            The parent authority.
            </value>
        </member>
        <member name="T:Rock.Model.NoteConfiguration">
            <summary>
            Note Configuration class.
            </summary>
        </member>
        <member name="M:Rock.Model.NoteConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.NoteConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Rock.Model.NoteType">
            <summary>
            Represents a type or category of <see cref="T:Rock.Model.Note">Notes</see> in Rock, and configures the type of entities that notes of this type apply to other settings
            specific to the type of note.
            </summary>
        </member>
        <member name="M:Rock.Model.NoteType.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Rock.Model.NoteType.IsSystem">
            <summary>
            Gets or sets a flag indicating that this NoteType is part of the Rock core system/framework. This property is required.
            </summary>
            <value>
            A <see cref="T:System.Boolean"/> value that is <c>true</c> if this NoteType is part of the core system/framework, otherwise <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Model.NoteType.EntityTypeId">
            <summary>
            Gets or sets the Id of the <see cref="T:Rock.Model.EntityType"/> that this NoteType is used for.  A NoteType can only be associated with a single <see cref="T:Rock.Model.EntityType"/> and will 
            only contain notes for entities of this type. This property is required.
            </summary>
            <value>
            A <see cref="T:System.Int32"/> representing the Id of the <see cref="T:Rock.Model.EntityType"/>
            </value>
        </member>
        <member name="P:Rock.Model.NoteType.Name">
            <summary>
            Gets or sets the Name of the NoteType. This property is required.
            </summary>
            <value>
            A <see cref="T:System.String"/> representing the Name of the NoteType.
            </value>
        </member>
        <member name="P:Rock.Model.NoteType.SourcesTypeId">
            <summary>
            Gets or sets the Id of the Sources Type <see cref="T:Rock.Model.DefinedType"/> that defines the sources that can be used
            for <see cref="T:Rock.Model.Note">Notes</see> of this NoteType.
            </summary>
            <value>
            The sources defined type id.
            </value>
        </member>
        <member name="P:Rock.Model.NoteType.EntityTypeQualifierColumn">
            <summary>
            Gets or sets the name of the qualifier column/property on the <see cref="T:Rock.Model.EntityType"/> that this NoteType applies to. If this is not 
            provided, the note type can be used on all entities of the provided <see cref="T:Rock.Model.EntityType"/>.
            </summary>
            <value>
            A <see cref="T:System.String"/> representing the name of the qualifier column that this NoteType applies to.
            </value>
        </member>
        <member name="P:Rock.Model.NoteType.EntityTypeQualifierValue">
            <summary>
            Gets or sets the qualifier value in the qualifier column that this note type applies to.  For instance this note type and related notes will only be applicable to entity 
            if the value in the EntityTypeQualiferColumn matches this value. This property should not be populated without also populating the EntityTypeQualifierColumn property.
            </summary>
            <value>
            Entity Type Qualifier Value.
            </value>
        </member>
        <member name="P:Rock.Model.NoteType.Sources">
            <summary>
            Gets or sets the Sources <see cref="T:Rock.Model.DefinedType"/> that contain the sources that are applicable to this NoteType.
            </summary>
            <value>
            A <see cref="T:Rock.Model.DefinedValue"/> that contains the sources that are applicable to this NoteType.
            </value>
        </member>
        <member name="P:Rock.Model.NoteType.EntityType">
            <summary>
            Gets or sets the <see cref="T:Rock.Model.EntityType"/> of the entities that <see cref="T:Rock.Model.Note">Notes</see> of this NoteType 
            </summary>
            <value>
            The <see cref="T:Rock.Model.EntityType"/> that this NoteType is associated with.
            </value>
        </member>
        <member name="T:Rock.Model.NoteTypeConfiguration">
            <summary>
            Note Type Configuration class.
            </summary>
        </member>
        <member name="M:Rock.Model.NoteTypeConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.NoteTypeConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Rock.Model.PageContext">
            <summary>
            Represents a PageContext object in Rock.  A PageContext entity is an entity object that can be shared amongst all of the <see cref="T:Rock.Model.Block">Blocks</see> on a page.
            </summary>
            <remarks>
            A good example of this is a <see cref="T:Rock.Model.Person"/> that is shared amongst all of the <see cref="T:Rock.Model.Block">Blocks</see> on the Person Detail Page.
            </remarks>
        </member>
        <member name="M:Rock.Model.PageContext.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> containing the Entity (type name) and IdParamenter that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/>  containing the Entity (type name) and IdParamenter that represents this instance.
            </returns>
        </member>
        <member name="P:Rock.Model.PageContext.IsSystem">
            <summary>
            Gets or sets a flag indicating if this PageContext is a part of the Rock core system/framework. This property is required.
            </summary>
            <value>
            A <see cref="T:System.Boolean"/> that is <c>true</c> if the PageContext is part of the core system/framework, otherwise <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Model.PageContext.PageId">
            <summary>
            Gets or sets the Id of the <see cref="T:Rock.Model.Page"/> that this PageContext is used on. This property is required.
            </summary>
            <value>
            A <see cref="T:System.Int32"/> that represents the Id of the <see cref="T:Rock.Model.Page"/> that this PageContext is used on.
            </value>
        </member>
        <member name="P:Rock.Model.PageContext.Entity">
            <summary>
            Gets or sets the object type name of the entity object that is being shared through this PageContext. This property is required.
            </summary>
            <value>
            A <see cref="T:System.String"/> representing the object type name of the entity object that is being shared through the PageContext.
            </value>
        </member>
        <member name="P:Rock.Model.PageContext.IdParameter">
            <summary>
            Gets or sets the name of the Page Attribute/Parameter that stores the Id of the shared entity object. This property is required.
            </summary>
            <value>
            A <see cref="T:System.String"/> containing the name of the Page Attribute/Parameter storing the Id of the entity object. 
            </value>
        </member>
        <member name="P:Rock.Model.PageContext.Page">
            <summary>
            Gets or sets the <see cref="T:Rock.Model.Page"/> that this PageContext is used on.
            </summary>
            <value>
            The <see cref="T:Rock.Model.Page"/> that uses this PageContext.
            </value>
        </member>
        <member name="T:Rock.Model.PageContextConfiguration">
            <summary>
            Page Route Configuration class.
            </summary>
        </member>
        <member name="M:Rock.Model.PageContextConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.PageContextConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Rock.Model.PrayerRequest">
            <summary>
            Represents a prayer request that a person has submitted. The PrayerRequest entity implements ICategorized which means that a prayer request can belong to a category.
            </summary>
        </member>
        <member name="M:Rock.Model.PrayerRequest.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> containing the text of the request that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> containing the text of the request that represents this instance.
            </returns>
        </member>
        <member name="P:Rock.Model.PrayerRequest.FirstName">
            <summary>
            Gets or sets the First Name of the person that this prayer request is about. This property is required.
            </summary>
            <value>
            A <see cref="T:System.String"/> containing the first name of the person that this prayer request is about.
            </value>
        </member>
        <member name="P:Rock.Model.PrayerRequest.LastName">
            <summary>
            Gets or sets the Last Name of the person that this prayer request is about. This property is required.
            </summary>
            <value>
            A <see cref="T:System.String"/> containing the last name of the person that this prayer request is about.  
            </value>
        </member>
        <member name="P:Rock.Model.PrayerRequest.Email">
            <summary>
            Gets or sets the email address of the person requesting prayer.
            </summary>
            <value>
            A <see cref="T:System.String"/> containing the email address of the person requesting prayer.
            </value>
        </member>
        <member name="P:Rock.Model.PrayerRequest.RequestedByPersonId">
            <summary>
            Gets or sets the PersonId of the <see cref="T:Rock.Model.Person"/> who is submitting the PrayerRequest
            </summary>
            <value>
            A <see cref="T:System.Int32"/> representing the PersonId of <see cref="T:Rock.Model.Person"/> submitting the PrayerRequest.
            </value>
        </member>
        <member name="P:Rock.Model.PrayerRequest.CategoryId">
            <summary>
            Gets or sets the CategoryId of the <see cref="T:Rock.Model.Category"/> that the PrayerRequest belongs to.
            </summary>
            <value>
            A <see cref="T:System.Int32"/> representing the CategoryId of the <see cref="T:Rock.Model.Category"/> that the PrayerRequest belongs to.
            </value>
        </member>
        <member name="P:Rock.Model.PrayerRequest.Text">
            <summary>
            Gets or sets the text/content of the request.
            </summary>
            <value>
            A <see cref="T:System.String"/> representing the text/content of the request.
            </value>
        </member>
        <member name="P:Rock.Model.PrayerRequest.Answer">
            <summary>
            Gets or sets a description of the way that God has answered the prayer.
            </summary>
            <value>
            A <see cref="T:System.String"/> that contains a description of how God answered the prayer request.
            </value>
        </member>
        <member name="P:Rock.Model.PrayerRequest.EnteredDateTime">
            <summary>
            Gets or sets the date that this prayer request was entered.
            </summary>
            <value>
            A <see cref="T:System.DateTime"/> representing the date that this prayer request was entered.
            </value>
        </member>
        <member name="P:Rock.Model.PrayerRequest.ExpirationDate">
            <summary>
            Gets or sets the date that the prayer request expires. 
            </summary>
            <value>
            A <see cref="T:System.DateTime"/> representing the date that the prayer request expires.
            </value>
        </member>
        <member name="P:Rock.Model.PrayerRequest.GroupId">
            <summary>
            TODO: GET CLARIFICATION AND DOCUMENT
            Gets or sets the group id.
            </summary>
            <value>
            A <see cref="T:System.Int32"/> representing a <see cref="T:Rock.Model.Group">Group's</see> GroupId.
            </value>
        </member>
        <member name="P:Rock.Model.PrayerRequest.AllowComments">
            <summary>
            Gets or sets a flag indicating  whether or not comments can be made against the request.
            </summary>
            <value>
            A <see cref="T:System.Boolean"/> value that is <c>true</c> if comments are allowed; otherwise <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Model.PrayerRequest.IsUrgent">
            <summary>
            Gets or sets a flag indicating if this is an urgent prayer request.
            </summary>
            <value>
            A <see cref="T:System.Boolean"/> value that is <c>true</c> if this prayer request is urgent; otherwise <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Model.PrayerRequest.IsPublic">
            <summary>
            Gets or sets the flag indicating whether or not the request is public.
            </summary>
            <value>
            A <see cref="T:System.Boolean"/> value that is <c>true</c> if the prayer request is public; otherwise <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Model.PrayerRequest.IsActive">
            <summary>
            Gets or sets a flag indicating if this prayer request is active.
            </summary>
            <value>
            A <see cref="T:System.Boolean"/> value that is <c>true</c> if the prayer request is active; otherwise <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Model.PrayerRequest.IsApproved">
            <summary>
            Gets or sets a flag indicating if the prayer request has been approved. 
            </summary>
            <value>
            A <see cref="T:System.Boolean"/> value that is <c>true</c> if this prayer request has been approved; otherwise <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Model.PrayerRequest.FlagCount">
            <summary>
            Gets or sets the number of times this request has been flagged.
            </summary>
            <value>
            A <see cref="T:System.Int32"/> representing the number of times that this prayer request has been flagged.
            </value>
        </member>
        <member name="P:Rock.Model.PrayerRequest.PrayerCount">
            <summary>
            Gets or sets the number of times that this prayer request has been prayed for.
            </summary>
            <value>
            A <see cref="T:System.Int32"/> representing the number of times that this prayer request has been prayed for.
            </value>
        </member>
        <member name="P:Rock.Model.PrayerRequest.ApprovedByPersonId">
            <summary>
            Gets or sets the PersonId of the <see cref="T:Rock.Model.Person"/> who approved this prayer request.
            </summary>
            <value>
            A <see cref="T:System.Int32"/> representing the PersonId of the <see cref="T:Rock.Model.Person"/> who approved this prayer request.
            </value>
        </member>
        <member name="P:Rock.Model.PrayerRequest.ApprovedOnDateTime">
            <summary>
            Gets or sets the date this prayer request was approved.
            </summary>
            <value>
            A <see cref="T:System.DateTime"/> representing the date that this prayer request was approved.
            </value>
        </member>
        <member name="P:Rock.Model.PrayerRequest.RequestedByPerson">
            <summary>
            Gets or sets the <see cref="T:Rock.Model.Person"/> who made the prayer request.
            </summary>
            <value>
            The <see cref="T:Rock.Model.Person"/> who made the prayer request.
            </value>
        </member>
        <member name="P:Rock.Model.PrayerRequest.Category">
            <summary>
            Gets or sets the <see cref="T:Rock.Model.Category"/> that this prayer request belongs to.
            </summary>
            <value>
            The <see cref="T:Rock.Model.Category"/> that this prayer request belongs to.
            </value>
        </member>
        <member name="P:Rock.Model.PrayerRequest.Group">
            <summary>
            TODO: GET CONFIRMATION AND DOCUMENT -CSF
            Gets or sets the group.
            </summary>
            <value>
            The request's group.
            </value>
        </member>
        <member name="P:Rock.Model.PrayerRequest.ApprovedByPerson">
            <summary>
            Gets or sets the <see cref="T:Rock.Model.Person"/> who approved the prayer request.
            </summary>
            <value>
            The <see cref="T:Rock.Model.Person"/> who approved the prayer request.
            </value>
        </member>
        <member name="P:Rock.Model.PrayerRequest.FullName">
            <summary>
            Gets  full name of the person for who the prayer request is about.
            </summary>
            <value>
            A <see cref="T:System.String"/> containing the full name of the person who this prayer request is about.
            </value>
        </member>
        <member name="P:Rock.Model.PrayerRequest.FullNameReversed">
            <summary>
            Gets the full name of the person who this prayer request is about in Last Name, First Name format.
            </summary>
            <value>
            A <see cref="T:System.String"/> containing the full name of the person who this prayer request is about in last name first name format.
            </value>
        </member>
        <member name="P:Rock.Model.PrayerRequest.Name">
            <summary>
            Gets the name of the prayer request. The format for this is the EnteredDate - FullName. This is required to implement ICategorized
            </summary>
            <value>
            A <see cref="T:System.String"/> representing the Name of prayer request. 
            </value>
        </member>
        <member name="T:Rock.Model.PrayerRequestConfiguration">
            <summary>
            PrayerRequest Configuration class.
            </summary>
        </member>
        <member name="M:Rock.Model.PrayerRequestConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.PrayerRequestConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Rock.Communication.BouncedEmail">
            <summary>
            
            </summary>
        </member>
        <member name="P:Rock.Communication.BouncedEmail.Status">
            <summary>
            Gets or sets the status.
            </summary>
            <value>
            The status.
            </value>
        </member>
        <member name="P:Rock.Communication.BouncedEmail.Created">
            <summary>
            Gets or sets the created.
            </summary>
            <value>
            The created.
            </value>
        </member>
        <member name="P:Rock.Communication.BouncedEmail.Reason">
            <summary>
            Gets or sets the reason.
            </summary>
            <value>
            The reason.
            </value>
        </member>
        <member name="P:Rock.Communication.BouncedEmail.Email">
            <summary>
            Gets or sets the email.
            </summary>
            <value>
            The email.
            </value>
        </member>
        <member name="M:Rock.Communication.IEmailProvider.BouncedEmails(System.Boolean)">
            <summary>
            Returns a list of bounced emails.  Paramenter tells whether soft bounces should also be returned.
            </summary>
        </member>
        <member name="M:Rock.Communication.IEmailProvider.DeleteBouncedEmail(System.String)">
            <summary>
            Deletes bounced email from the email system
            </summary>
        </member>
        <member name="T:Rock.Constants.WarningMessage">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Constants.WarningMessage.NotAuthorizedToEdit(System.String)">
            <summary>
            Returns a message in the format: "You are not authorized to edit {0}."
            </summary>
            <param name="itemFieldName">Name of the item field.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Constants.WarningMessage.DateTimeFormatInvalid(System.String)">
            <summary>
            Returns a message in the format: Invalid format for {0}."
            </summary>
            <param name="itemFieldName">Name of the item field.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Constants.WarningMessage.DateRangeEndDateBeforeStartDate">
            <summary>
            Returns a message: "End Date cannot be earlier than Start Date"
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rock.Constants.WarningMessage.CannotBeBlank(System.String)">
            <summary>
            Returns a message in the format: "Value required for {0}."
            </summary>
            <param name="itemFieldName">Name of the item field.</param>
            <returns></returns>
        </member>
        <member name="T:Rock.Constants.None">
            <summary>
            
            </summary>
        </member>
        <member name="F:Rock.Constants.None.Id">
            <summary>
            returns 0
            </summary>
        </member>
        <member name="F:Rock.Constants.None.IdValue">
            <summary>
            returns "0"
            </summary>
        </member>
        <member name="F:Rock.Constants.None.Text">
            <summary>
            returns ""
            </summary>
        </member>
        <member name="F:Rock.Constants.None.TextHtml">
            <summary>
            &lt;none&gt;
            </summary>
        </member>
        <member name="P:Rock.Constants.None.ListItem">
            <summary>
            Return a ListItem with Text: "", Value: "0"
            </summary>
            <value>
            The list item.
            </value>
        </member>
        <member name="T:Rock.Constants.All">
            <summary>
            
            </summary>
        </member>
        <member name="F:Rock.Constants.All.Id">
            <summary>
            Returns -1
            </summary>
        </member>
        <member name="F:Rock.Constants.All.IdValue">
            <summary>
            Returns "-1"
            </summary>
        </member>
        <member name="F:Rock.Constants.All.Text">
            <summary>
            returns "All"
            </summary>
        </member>
        <member name="P:Rock.Constants.All.ListItem">
            <summary>
            Gets the list item with Text "All", Value: -1
            </summary>
            <value>
            The list item.
            </value>
        </member>
        <member name="T:Rock.Constants.ActionTitle">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Constants.ActionTitle.Add(System.String)">
            <summary>
            Returns a message in the format: "Add {0}"
            </summary>
            <param name="itemFriendlyName">Name of the item field.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Constants.ActionTitle.Edit(System.String)">
            <summary>
            Returns a message in the format: "Edit {0}"
            </summary>
            <param name="itemFriendlyName">Name of the item field.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Constants.ActionTitle.View(System.String)">
            <summary>
            Returns a message in the format: "View {0}"
            </summary>
            <param name="itemFriendlyName">Name of the item field.</param>
            <returns></returns>
        </member>
        <member name="T:Rock.Constants.EditModeMessage">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Constants.EditModeMessage.ReadOnlySystem(System.String)">
            <summary>
            Returns a message in the format: "<h4> Note</h4>Because this {0} is used by Rock, editing is not enabled."
            </summary>
            <param name="itemFriendlyName">Name of the item friendly.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Constants.EditModeMessage.System(System.String)">
            <summary>
            Returns a message in the format: "<h4> Note</h4>Because this {0} is used by Rock, editing is restricted."
            </summary>
            <param name="itemFriendlyName">Name of the item friendly.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Constants.EditModeMessage.ReadOnlyEditActionNotAllowed(System.String)">
            <summary>
            Returns a message in the format: ""
            </summary>
            <param name="itemFriendlyName">Name of the item field.</param>
            <returns></returns>
        </member>
        <member name="T:Rock.Model.AttributeQualifierService">
            <summary>
            AttributeQualifier Service class
            </summary>
            <summary>
            Data access/service class for <see cref="T:Rock.Model.AttributeQualifier"/> entity objects.
            </summary>
        </member>
        <member name="M:Rock.Model.AttributeQualifierService.#ctor(Rock.Data.RockContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.AttributeQualifierService"/> class
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Rock.Model.AttributeQualifierService.CanDelete(Rock.Model.AttributeQualifier,System.String@)">
            <summary>
            Determines whether this instance can delete the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="errorMessage">The error message.</param>
            <returns>
              <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Rock.Model.AttributeQualifierService.GetByAttributeId(System.Int32)">
            <summary>
            Returns an enumerable collection containing the <see cref="T:Rock.Model.AttributeQualifier">AttributeQualifiers</see> by <see cref="T:Rock.Model.Attribute"/>.
            </summary>
            <param name="attributeId">A <see cref="T:System.Int32"/> that represents the Id of the <see cref="T:Rock.Model.Attribute"/> to retrieve <see cref="T:Rock.Model.AttributeQualifier"/>.</param>
            <returns>An enumerable collection containing the <see cref="T:Rock.Model.AttributeQualifier">AttributeQualifiers</see> that the specified <see cref="T:Rock.Model.Attribute"/> uses.</returns>
        </member>
        <member name="T:Rock.Model.AttributeQualifierExtensionMethods">
            <summary>
            Generated Extension Methods
            </summary>
        </member>
        <member name="M:Rock.Model.AttributeQualifierExtensionMethods.Clone(Rock.Model.AttributeQualifier,System.Boolean)">
            <summary>
            Clones this AttributeQualifier object to a new AttributeQualifier object
            </summary>
            <param name="source">The source.</param>
            <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.AttributeQualifierExtensionMethods.CopyPropertiesFrom(Rock.Model.AttributeQualifier,Rock.Model.AttributeQualifier)">
            <summary>
            Copies the properties from another AttributeQualifier object to this AttributeQualifier object
            </summary>
            <param name="target">The target.</param>
            <param name="source">The source.</param>
        </member>
        <member name="T:Rock.Model.AttributeService">
            <summary>
            Attribute Service class
            </summary>
            <summary>
            Data access/service class for <see cref="T:Rock.Model.Attribute"/> entities.
            </summary>
        </member>
        <member name="M:Rock.Model.AttributeService.#ctor(Rock.Data.RockContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.AttributeService"/> class
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Rock.Model.AttributeService.CanDelete(Rock.Model.Attribute,System.String@)">
            <summary>
            Determines whether this instance can delete the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="errorMessage">The error message.</param>
            <returns>
              <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Rock.Model.AttributeService.GetByEntityTypeId(System.Nullable{System.Int32})">
            <summary>
            Returns a queryable collection of <see cref="T:Rock.Model.Attribute">Attributes</see> by <see cref="T:Rock.Model.EntityType"/>.
            </summary>
            <param name="entityTypeId">A <see cref="T:System.Int32"/> representing the EntityTypeId of the <see cref="T:Rock.Model.EntityType"/> to search by.</param>
            <returns>
            A queryable collection of <see cref="T:Rock.Model.Attribute">Attributes</see> that are related to the specified <see cref="T:Rock.Model.EntityType"/>.
            </returns>
        </member>
        <member name="M:Rock.Model.AttributeService.GetByCategoryId(System.Int32)">
            <summary>
            Returns a queryable collection of <see cref="T:Rock.Model.Attribute">Attributes</see> by <see cref="T:Rock.Model.Category"/>.
            </summary>
            <param name="categoryId">A <see cref="T:System.Int32"/> representing the CategoryId of the <see cref="T:Rock.Model.Category"/> to search by.</param>
            <returns>A queryable collection of <see cref="T:Rock.Model.Attribute">Attributes</see> that are part of the specified <see cref="T:Rock.Model.Category"/></returns>
        </member>
        <member name="M:Rock.Model.AttributeService.Get(System.Nullable{System.Int32},System.String,System.String)">
            <summary>
            Gets a queryable collection of <see cref="T:Rock.Model.Attribute">Attributes</see> by <see cref="T:Rock.Model.EntityType"/>, EntityQualifierColumn and EntityQualifierValue.
            </summary>
            <param name="entityTypeId">A <see cref="T:System.Int32"/> representing the EntityTypeId of a <see cref="T:Rock.Model.EntityType"/> to search by.</param>
            <param name="entityQualifierColumn">A <see cref="T:System.String"/> represents the name of the EntityQualifierColumn to search by.</param>
            <param name="entityQualifierValue">A <see cref="T:System.String"/> that represents the qualifier value to search by.</param>
            <returns>A queryable collection of <see cref="T:Rock.Model.Attribute">Attributes</see> that matches the specified value.</returns>
        </member>
        <member name="M:Rock.Model.AttributeService.Get(System.Nullable{System.Int32},System.String,System.String,System.String)">
            <summary>
            Returns an <see cref="T:Rock.Model.Attribute"/> by <see cref="T:Rock.Model.EntityType"/>, EntityQualifierColumn, EntityQualiferValue and Key name.
            </summary>
            <param name="entityTypeId">A <see cref="T:System.Int32"/> that represents the EntityTypeId of the <see cref="T:Rock.Model.EntityType"/> to search by.</param>
            <param name="entityQualifierColumn">A <see cref="T:System.String"/> that represents the name of the EntityQualifierColumn to search by.</param>
            <param name="entityQualifierValue">A <see cref="T:System.String"/> that represents the EntityQualifierValue to search by.</param>
            <param name="key">A <see cref="T:System.String"/> representing the key name of the attribute to search by.</param>
            <returns>
            The <see cref="T:Rock.Model.Attribute"/> that matches the specified values. If a match is not found, a null value will be returned.
            </returns>
        </member>
        <member name="M:Rock.Model.AttributeService.GetByFieldTypeId(System.Int32)">
            <summary>
            Returns an enumerable collection of <see cref="T:Rock.Model.Attribute">Attributes</see> that uses the provided <see cref="T:Rock.Model.BinaryFileType"/>.
            </summary>
            <param name="fieldTypeId">A <see cref="T:System.Int32"/> that represents the FileTypeId of the <see cref="T:Rock.Model.BinaryFileType"/> to search by.</param>
            <returns>An enumerable collection of <see cref="T:Rock.Model.Attribute">Attributes</see> that uses the specified <see cref="T:Rock.Model.BinaryFileType"/>.</returns>
        </member>
        <member name="M:Rock.Model.AttributeService.GetGlobalAttributes">
            <summary>
            Returns a queryable collection containing the Global <see cref="T:Rock.Model.Attribute">Attributes</see>.
            </summary>
            <returns>A queryable collection containing the Global <see cref="T:Rock.Model.Attribute">Attributes</see>.</returns>
        </member>
        <member name="M:Rock.Model.AttributeService.GetGlobalAttribute(System.String)">
            <summary>
            Returns a global <see cref="T:Rock.Model.Attribute"/> by it's Key.
            </summary>
            <param name="key">A <see cref="T:System.String"/> representing the name of the Attribute key.</param>
            <returns>A global <see cref="T:Rock.Model.Attribute"/> by it's key.</returns>
        </member>
        <member name="M:Rock.Model.AttributeService.GetSystemSettings">
            <summary>
            Returns a queryable collection containing the Global <see cref="T:Rock.Model.Attribute">Attributes</see>.
            </summary>
            <returns>A queryable collection containing the Global <see cref="T:Rock.Model.Attribute">Attributes</see>.</returns>
        </member>
        <member name="M:Rock.Model.AttributeService.GetSystemSetting(System.String)">
            <summary>
            Returns a global <see cref="T:Rock.Model.Attribute"/> by it's Key.
            </summary>
            <param name="key">A <see cref="T:System.String"/> representing the name of the Attribute key.</param>
            <returns>A global <see cref="T:Rock.Model.Attribute"/> by it's key.</returns>
        </member>
        <member name="T:Rock.Model.AttributeExtensionMethods">
            <summary>
            Generated Extension Methods
            </summary>
        </member>
        <member name="M:Rock.Model.AttributeExtensionMethods.Clone(Rock.Model.Attribute,System.Boolean)">
            <summary>
            Clones this Attribute object to a new Attribute object
            </summary>
            <param name="source">The source.</param>
            <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.AttributeExtensionMethods.CopyPropertiesFrom(Rock.Model.Attribute,Rock.Model.Attribute)">
            <summary>
            Copies the properties from another Attribute object to this Attribute object
            </summary>
            <param name="target">The target.</param>
            <param name="source">The source.</param>
        </member>
        <member name="T:Rock.Model.AttributeValueService">
            <summary>
            AttributeValue Service class
            </summary>
            <summary>
            Data access/service for <see cref="T:Rock.Model.AttributeValue"/> entity objects.
            </summary>
        </member>
        <member name="M:Rock.Model.AttributeValueService.#ctor(Rock.Data.RockContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.AttributeValueService"/> class
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Rock.Model.AttributeValueService.CanDelete(Rock.Model.AttributeValue,System.String@)">
            <summary>
            Determines whether this instance can delete the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="errorMessage">The error message.</param>
            <returns>
              <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Rock.Model.AttributeValueService.GetByAttributeId(System.Int32)">
            <summary>
            Returns an enumerable collection of <see cref="T:Rock.Model.AttributeValue">AttributeValues</see> by <see cref="T:Rock.Model.Attribute"/>.
            </summary>
            <param name="attributeId">A <see cref="T:System.Int32"/> that represents the AttributeId of the <see cref="T:Rock.Model.Attribute"/> to search by.</param>
            <returns>An enumerable collection of <see cref="T:Rock.Model.AttributeValue">AttributeValues</see> by the specified <see cref="T:Rock.Model.Attribute"/>.</returns>
        </member>
        <member name="M:Rock.Model.AttributeValueService.GetByAttributeIdAndEntityId(System.Int32,System.Nullable{System.Int32})">
            <summary>
            Gets Attribute Values by Attribute Id And Entity Id
            </summary>
            <param name="attributeId">Attribute Id.</param>
            <param name="entityId">Entity Id.</param>
            <returns>An enumerable list of AttributeValue objects.</returns>
        </member>
        <member name="M:Rock.Model.AttributeValueService.GetByEntityId(System.Nullable{System.Int32})">
            <summary>
            Returns an enumerable collection of <see cref="T:Rock.Model.AttributeValue">AttributeValues</see> by EntityId.
            </summary>
            <param name="entityId">A <see cref="T:System.Int32"/> representing the EntityId to search by.</param>
            <returns>An enumerable collection of <see cref="T:Rock.Model.AttributeValue">AttributeValues</see> by EntityId.</returns>
        </member>
        <member name="M:Rock.Model.AttributeValueService.GetGlobalAttributeValue(System.String)">
            <summary>
            Returns a <see cref="T:Rock.Model.AttributeValue"/> for a <see cref="T:Rock.Model.Attribute"/> by Key.
            </summary>
            <param name="key">A <see cref="T:System.String"/> representing the name of the Global <see cref="T:Rock.Model.Attribute">Attribute's</see> key value.</param>
            <returns>The <see cref="T:Rock.Model.AttributeValue"/> of the global <see cref="T:Rock.Model.Attribute"/>.</returns>
        </member>
        <member name="T:Rock.Model.AttributeValueExtensionMethods">
            <summary>
            Generated Extension Methods
            </summary>
        </member>
        <member name="M:Rock.Model.AttributeValueExtensionMethods.Clone(Rock.Model.AttributeValue,System.Boolean)">
            <summary>
            Clones this AttributeValue object to a new AttributeValue object
            </summary>
            <param name="source">The source.</param>
            <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.AttributeValueExtensionMethods.CopyPropertiesFrom(Rock.Model.AttributeValue,Rock.Model.AttributeValue)">
            <summary>
            Copies the properties from another AttributeValue object to this AttributeValue object
            </summary>
            <param name="target">The target.</param>
            <param name="source">The source.</param>
        </member>
        <member name="T:Rock.Model.Audit">
            <summary>
            Represents an Audit Log entry that is created when an add/update/delete is performed against an <see cref="T:Rock.Data.IEntity"/> of an
            auditable <see cref="T:Rock.Model.EntityType"/>.
            </summary>
        </member>
        <member name="M:Rock.Model.Audit.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.Audit"/> class.
            </summary>
        </member>
        <member name="M:Rock.Model.Audit.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Rock.Model.Audit.EntityTypeId">
            <summary>
            Gets or sets the EntityTypeId for the <see cref="T:Rock.Model.EntityType"/> of entity that was modified. This property is required.
            </summary>
            <value>
            A <see cref="T:System.Int32"/> representing the EntityTypeId for the <see cref="T:Rock.Model.EntityType"/> of the entity that was modified.
            </value>
        </member>
        <member name="P:Rock.Model.Audit.EntityId">
            <summary>
            Gets or sets the Id of the specific entity that was modified. This property is required.
            </summary>
            <value>
            A <see cref="T:System.Int32"/> representing the Id of the entity that was modified.
            </value>
        </member>
        <member name="P:Rock.Model.Audit.Title">
            <summary>
            Gets or sets the Name/Title of the specific entity that was updated. This is usually the value that is return when the entity's ToString() function is called. This property is required.
            </summary>
            <value>
            A <see cref="T:System.String"/> that represents the Entity's Name.
            </value>
        </member>
        <member name="P:Rock.Model.Audit.AuditType">
            <summary>
            Gets or sets the type of change that was made to the entity. This property is required.
            </summary>
            <value>
            The type of the audit.
            A <see cref="T:Rock.Model.AuditType"/> enumeration that indicates the type of change that was made. 
                <c>AuditType.Add</c> (0) indicates that a new entity was added; 
                <c>AuditType.Modify</c> (1) indicates that the entity was modified; 
                <c>AuditType.Delete</c> (2) indicates that the entity was deleted.
            </value>
        </member>
        <member name="P:Rock.Model.Audit.DateTime">
            <summary>
            Gets or sets the date and time that the entity was modified and the audit entry was created.
            </summary>
            <value>
            A <see cref="T:System.DateTime"/> that represents the date and time that the entity was modified.
            </value>
        </member>
        <member name="P:Rock.Model.Audit.PersonAliasId">
            <summary>
            Gets or sets the person alias identifier.
            </summary>
            <value>
            The person alias identifier.
            </value>
        </member>
        <member name="P:Rock.Model.Audit.EntityType">
            <summary>
            Gets or sets the <see cref="T:Rock.Model.EntityType"/> of the entity that was modified.
            </summary>
            <value>
            The <see cref="T:Rock.Model.EntityType"/> of the entity that was modified.
            </value>
        </member>
        <member name="P:Rock.Model.Audit.PersonAlias">
            <summary>
            Gets or sets the person alias.
            </summary>
            <value>
            The person alias.
            </value>
        </member>
        <member name="P:Rock.Model.Audit.Details">
            <summary>
            Gets or sets the details.
            </summary>
            <value>
            The details.
            </value>
        </member>
        <member name="T:Rock.Model.AuditConfiguration">
            <summary>
            Entity Change Configuration class.
            </summary>
        </member>
        <member name="M:Rock.Model.AuditConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.EntityTypeConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Rock.Model.AuditType">
            <summary>
            Type of audit done to an entity
            </summary>
        </member>
        <member name="F:Rock.Model.AuditType.Add">
            <summary>
            Add
            </summary>
        </member>
        <member name="F:Rock.Model.AuditType.Modify">
            <summary>
            Modify
            </summary>
        </member>
        <member name="F:Rock.Model.AuditType.Delete">
            <summary>
            Delete
            </summary>
        </member>
        <member name="T:Rock.Model.AuditService">
            <summary>
            Audit Service class
            </summary>
        </member>
        <member name="M:Rock.Model.AuditService.#ctor(Rock.Data.RockContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.AuditService"/> class
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Rock.Model.AuditService.CanDelete(Rock.Model.Audit,System.String@)">
            <summary>
            Determines whether this instance can delete the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="errorMessage">The error message.</param>
            <returns>
              <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Rock.Model.AuditExtensionMethods">
            <summary>
            Generated Extension Methods
            </summary>
        </member>
        <member name="M:Rock.Model.AuditExtensionMethods.Clone(Rock.Model.Audit,System.Boolean)">
            <summary>
            Clones this Audit object to a new Audit object
            </summary>
            <param name="source">The source.</param>
            <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.AuditExtensionMethods.CopyPropertiesFrom(Rock.Model.Audit,Rock.Model.Audit)">
            <summary>
            Copies the properties from another Audit object to this Audit object
            </summary>
            <param name="target">The target.</param>
            <param name="source">The source.</param>
        </member>
        <member name="T:Rock.Model.CategoryExtensionMethods">
            <summary>
            Generated Extension Methods
            </summary>
        </member>
        <member name="M:Rock.Model.CategoryExtensionMethods.Clone(Rock.Model.Category,System.Boolean)">
            <summary>
            Clones this Category object to a new Category object
            </summary>
            <param name="source">The source.</param>
            <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.CategoryExtensionMethods.CopyPropertiesFrom(Rock.Model.Category,Rock.Model.Category)">
            <summary>
            Copies the properties from another Category object to this Category object
            </summary>
            <param name="target">The target.</param>
            <param name="source">The source.</param>
        </member>
        <member name="T:Rock.Model.EntityTypeService">
            <summary>
            EntityType Service class
            </summary>
            <summary>
            EntityType POCO Service class
            </summary>
        </member>
        <member name="M:Rock.Model.EntityTypeService.#ctor(Rock.Data.RockContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.EntityTypeService"/> class
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Rock.Model.EntityTypeService.CanDelete(Rock.Model.EntityType,System.String@)">
            <summary>
            Determines whether this instance can delete the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="errorMessage">The error message.</param>
            <returns>
              <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Rock.Model.EntityTypeService.Get(System.String)">
            <summary>
            Gets an <see cref="T:Rock.Model.EntityType"/> by it's name / type name.
            </summary>
            <param name="entityName">A <see cref="T:System.String"/> representing the name of the EntityType to search for.</param>
            <returns>The first <see cref="T:Rock.Model.EntityType"/> with a name that matches the provided value.</returns>
        </member>
        <member name="M:Rock.Model.EntityTypeService.Get(System.Type,System.Boolean,Rock.Model.PersonAlias)">
            <summary>
            Gets the specified <see cref="T:Rock.Model.EntityType"/> by the object type. If a match is not found, it can optionally create a new <see cref="T:Rock.Model.EntityType"/> for the object.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> to search for.</param>
            <param name="createIfNotFound">A <see cref="T:System.Boolean"/> value that indicates if a new <see cref="T:Rock.Model.EntityType"/> should be created if a match is not found. This value
            will be <c>true</c> if a new <see cref="T:Rock.Model.EntityType"/> should be created if there is not a match; otherwise <c>false</c>/</param>
            <param name="personAlias">A <see cref="T:Rock.Model.PersonAlias"/> representing the alias of the <see cref="T:Rock.Model.Person"/> who is searching for and possibly creating a new EntityType.  This value can be
            null if the logged in person is not known (i.e. an anonymous user).</param>
            <returns>A <see cref="T:Rock.Model.EntityType"/> matching the provided type. If a match is not found and createIfNotFound is false this value will be null.</returns>
        </member>
        <member name="M:Rock.Model.EntityTypeService.Get(System.String,System.Boolean)">
            <summary>
            Gets an <see cref="T:Rock.Model.EntityType"/> by it's name. If a match is not found, a new <see cref="T:Rock.Model.EntityType"/> can optionally be created.
            </summary>
            <param name="name">A <see cref="T:System.String"/> representing the name of the object/entity type to search for.</param>
            <param name="createIfNotFound">A <see cref="T:System.Boolean"/> value that indicates if a new <see cref="T:Rock.Model.EntityType"/> should be created if a match is not found. This value
            will be <c>true</c> if a new <see cref="T:Rock.Model.EntityType"/> should be created if there is not a match; otherwise <c>false</c>/</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.EntityTypeService.GetEntities">
            <summary>
            Gets an enumerable collection of <see cref="T:Rock.Model.EntityType">EntityTypes</see> where the IsEntity flag is set to true.
            </summary>
            <returns>An enumerable collection of <see cref="T:Rock.Model.EntityType"/> where the IsEntity flag is set tot true.</returns>
        </member>
        <member name="M:Rock.Model.EntityTypeService.GetEntityListItems">
            <summary>
            Returns the <see cref="T:Rock.Model.EntityType">EntityTypes</see> as a grouped collection of <see cref="T:System.Web.UI.WebControls.ListItem">ListItems</see> with the 
            "Common" flag set to true.
            </summary>
            <returns>A list of <see cref="T:Rock.Model.EntityType"/> <see cref="T:System.Web.UI.WebControls.ListItem">ListItems</see> ordered by their "Common" flag and FriendlyName</returns>
        </member>
        <member name="M:Rock.Model.EntityTypeService.RegisterEntityTypes(System.String)">
            <summary>
            Gets a list of ISecured and IEntity entities (all models) that have not yet been registered and adds them
            as an <see cref="T:Rock.Model.EntityType"/>.
            </summary>
            <param name="physWebAppPath">A <see cref="T:System.String"/> that represents the physical path of the web application</param>
        </member>
        <member name="T:Rock.Model.EntityTypeExtensionMethods">
            <summary>
            Generated Extension Methods
            </summary>
        </member>
        <member name="M:Rock.Model.EntityTypeExtensionMethods.Clone(Rock.Model.EntityType,System.Boolean)">
            <summary>
            Clones this EntityType object to a new EntityType object
            </summary>
            <param name="source">The source.</param>
            <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.EntityTypeExtensionMethods.CopyPropertiesFrom(Rock.Model.EntityType,Rock.Model.EntityType)">
            <summary>
            Copies the properties from another EntityType object to this EntityType object
            </summary>
            <param name="target">The target.</param>
            <param name="source">The source.</param>
        </member>
        <member name="T:Rock.Field.Types.HtmlFieldType">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Field.Types.HtmlFieldType.EditControl(System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.String)">
            <summary>
            Creates the control(s) neccessary for prompting user for a new value
            </summary>
            <param name="configurationValues">The configuration values.</param>
            <param name="id"></param>
            <returns>
            The control
            </returns>
        </member>
        <member name="T:Rock.Field.Types.MemoFieldType">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Field.Types.MemoFieldType.EditControl(System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.String)">
            <summary>
            Creates the control(s) neccessary for prompting user for a new value
            </summary>
            <param name="configurationValues">The configuration values.</param>
            <param name="id"></param>
            <returns>
            The control
            </returns>
        </member>
        <member name="T:Rock.Model.Attendance">
            <summary>
            Represents an instance where a <see cref="T:Rock.Model.Person"/> who attended or was scheduled to attend a group or event.
            This can be used for attendee/volunteer check-in, group attendance, etc.
            </summary>
        </member>
        <member name="M:Rock.Model.Attendance.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Rock.Model.Attendance.LocationId">
            <summary>
            Gets or sets the Id of the <see cref="T:Rock.Model.Location"/> that the individual attended/checked in to. 
            </summary>
            <value>
            A <see cref="T:System.Int32"/> representing the Id of the <see cref="T:Rock.Model.Location"/> that was checked in to.
            </value>
        </member>
        <member name="P:Rock.Model.Attendance.ScheduleId">
            <summary>
            Gets or sets the Id of the schedule that the <see cref="T:Rock.Model.Person"/> checked in to.
            </summary>
            <value>
            An <see cref="T:System.Int32"/> representing the schedule that was checked in to.
            </value>
        </member>
        <member name="P:Rock.Model.Attendance.GroupId">
            <summary>
            Gets or sets the Id of the <see cref="T:Rock.Model.Group"/> that the <see cref="T:Rock.Model.Person"/> checked in to.
            </summary>
            <value>
            A <see cref="T:System.Int32"/> representing the Id of the <see cref="T:Rock.Model.Group"/> that was checked in to.
            </value>
        </member>
        <member name="P:Rock.Model.Attendance.PersonId">
            <summary>
            Gets or sets the Id of the <see cref="T:Rock.Model.Person"/> that attended/checked in to the <see cref="T:Rock.Model.Group"/>
            </summary>
            <value>
            A <see cref="T:System.Int32"/> representing the Id of the <see cref="T:Rock.Model.Person"/> who attended/checked in.
            </value>
        </member>
        <member name="P:Rock.Model.Attendance.DeviceId">
            <summary>
            Gets or sets the Id of the <see cref="T:Rock.Model.Device"/> that was used (the device where the person checked in from).
            </summary>
            <value>
            A <see cref="T:System.Int32"/> representing the Id of the <see cref="T:Rock.Model.Device"/> that was used.
            </value>
        </member>
        <member name="P:Rock.Model.Attendance.SearchTypeValueId">
            <summary>
            Gets or sets the Id of the Check-in Search Type <see cref="T:Rock.Model.DefinedValue"/> that was used to search for the person/family.
            </summary>
            <value>
            A <see cref="T:System.Int32"/> representing the Id of the Check-in Search Type <see cref="T:Rock.Model.DefinedValue"/> that was used to search for the person/family.
            </value>
        </member>
        <member name="P:Rock.Model.Attendance.AttendanceCodeId">
            <summary>
            Gets or sets the Id of the <see cref="T:Rock.Model.AttendanceCode"/> that is associated with this <see cref="T:Rock.Model.Attendance"/> entity.
            </summary>
            <value>
            A <see cref="T:System.Int32"/> representing the Id of the <see cref="T:Rock.Model.AttendanceCode"/> that is associated with this <see cref="T:Rock.Model.Attendance"/> entity.
            </value>
        </member>
        <member name="P:Rock.Model.Attendance.QualifierValueId">
            <summary>
            Gets or sets the qualifier value id.  Qualifier can be used to 
            "qualify" attendance records.  There are not any system values
            for this particular defined type
            </summary>
            <value>
            The qualifier value id.
            </value>
        </member>
        <member name="P:Rock.Model.Attendance.StartDateTime">
            <summary>
            Gets or sets the start date and time/check in time
            </summary>
            <value>
            A <see cref="T:System.DateTime"/> representing the start date and time/check in date and time.
            </value>
        </member>
        <member name="P:Rock.Model.Attendance.EndDateTime">
            <summary>
            Gets or sets the end date and time/check out date and time.
            </summary>
            <value>
            A <see cref="T:System.DateTime"/> representing the end date and time/check out time.
            </value>
        </member>
        <member name="P:Rock.Model.Attendance.DidAttend">
            <summary>
            Gets or sets a flag indicating if the person attended.
            </summary>
            <value>
            A <see cref="T:System.Boolean"/> indicating if the person attended. This value will be <c>true</c> if they did attend, otherwise <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Model.Attendance.Note">
            <summary>
            Gets or sets the note.
            </summary>
            <value>
            A <see cref="T:System.String"/> representing the note.
            </value>
        </member>
        <member name="P:Rock.Model.Attendance.Location">
            <summary>
            Gets or sets the <see cref="T:Rock.Model.Location"/> where the <see cref="T:Rock.Model.Person"/> attended.
            </summary>
            <value>
            The <see cref="T:Rock.Model.Location"/> where the <see cref="T:Rock.Model.Person"/> attended.
            </value>
        </member>
        <member name="P:Rock.Model.Attendance.Schedule">
            <summary>
            Gets or sets the schedule.
            </summary>
            <value>
            The schedule.
            </value>
        </member>
        <member name="P:Rock.Model.Attendance.Group">
            <summary>
            Gets or sets the <see cref="T:Rock.Model.Group"/> that was attended.
            </summary>
            <value>
            The <see cref="T:Rock.Model.Group"/> that was attended.
            </value>
        </member>
        <member name="P:Rock.Model.Attendance.Person">
            <summary>
            Gets or sets the <see cref="T:Rock.Model.Person"/> who was the attendee.
            </summary>
            <value>
            The <see cref="T:Rock.Model.Person"/> who was the attendee.
            </value>
        </member>
        <member name="P:Rock.Model.Attendance.Device">
            <summary>
            Gets or sets the <see cref="T:Rock.Model.Device"/> that was used to check in
            </summary>
            <value>
            The <see cref="T:Rock.Model.Device"/> that was used to check in 
            </value>
        </member>
        <member name="P:Rock.Model.Attendance.SearchTypeValue">
            <summary>
            Gets or sets the <see cref="T:Rock.Model.DefinedValue"/> representing the type of search used during check-in
            </summary>
            <value>
            The <see cref="T:Rock.Model.DefinedValue"/>  representing the search type value.
            </value>
        </member>
        <member name="P:Rock.Model.Attendance.AttendanceCode">
            <summary>
            Gets or sets the <see cref="T:Rock.Model.AttendanceCode"/> associated with this Attendance.
            </summary>
            <value>
            The <see cref="T:Rock.Model.AttendanceCode"/> associated with this Attendance.
            </value>
        </member>
        <member name="P:Rock.Model.Attendance.Qualifier">
            <summary>
            Gets or sets the qualifier.
            </summary>
            <value>
            The qualifier.
            </value>
        </member>
        <member name="T:Rock.Model.AttendanceConfiguration">
            <summary>
            File Configuration class.
            </summary>
        </member>
        <member name="M:Rock.Model.AttendanceConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.AttendanceConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Rock.Model.Schedule">
            <summary>
            Represents a Scheduled event in Rock.  Several places where this has been used includes Check-in scheduling and Kiosk scheduling.
            </summary>
        </member>
        <member name="M:Rock.Model.Schedule.GetCalenderEvent">
            <summary>
            Gets the Schedule's iCalender Event.
            </summary>
            <value>
            A <see cref="T:DDay.iCal.Event"/> representing the iCalendar event for this Schedule.
            </value>
        </member>
        <member name="M:Rock.Model.Schedule.GetNextCheckInStartTime(System.DateTimeOffset)">
            <summary>
            Gets the next Check-in start date for this Schedule.  
            </summary>
            <param name="beginDateTime">A <see cref="T:System.DateTimeOffset"/> representing the base date.</param>
            <returns>A <see cref="T:System.DateTime"/> containing the next time that Check-in begins for this schedule.</returns>
        </member>
        <member name="M:Rock.Model.Schedule.ToFriendlyScheduleText">
            <summary>
            Gets the Friendly Text of the Calendar Event.
            For example, "Every 3 days at 10:30am", "Monday, Wednesday, Friday at 5:00pm", "Saturday at 4:30pm"
            </summary>
            <returns>A <see cref="T:System.String"/> containing a friendly description of the Schedule.</returns>
        </member>
        <member name="M:Rock.Model.Schedule.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="F:Rock.Model.Schedule.NthNames">
            <summary>
            The "nth" names for DayName of Month (First, Secord, Third, Forth, Last)
            </summary>
        </member>
        <member name="P:Rock.Model.Schedule.Name">
            <summary>
            Gets or sets the Name of the Schedule. This property is required.
            </summary>
            <value>
            A <see cref="T:System.String"/> that represents the Name of the Schedule.
            </value>
        </member>
        <member name="P:Rock.Model.Schedule.Description">
            <summary>
            Gets or sets a user defined Description of the Schedule.
            </summary>
            <value>
            A <see cref="T:System.String"/> representing the Description of the Schedule.
            </value>
        </member>
        <member name="P:Rock.Model.Schedule.iCalendarContent">
            <summary>
            Gets or sets the content lines of the iCalendar
            </summary>
            <value>
            A <see cref="T:System.String"/>representing the  content of the iCalendar.
            </value>
        </member>
        <member name="P:Rock.Model.Schedule.CheckInStartOffsetMinutes">
            <summary>
            Gets or sets the number of minutes prior to the Schedule's start time  that Check-in should be active. 0 represents that Check-in 
            will not be available to the beginning of the event.
            </summary>
            <value>
            A <see cref="T:System.Int32"/> representing how many minutes prior the Schedule's start time that Check-in should be active. 
            0 means that Check-in will not be available to the Schedule's start time. This schedule will not be available if this value is <c>Null</c>.
            </value>
        </member>
        <member name="P:Rock.Model.Schedule.CheckInEndOffsetMinutes">
            <summary>
            Gets or sets the number of minutes following schedule start that Check-in should be active. 0 represents that Check-in will only be available
            until the Schedule's start time.
            </summary>
            <value>
            A <see cref="T:System.Int32"/> representing how many minutes following the Schedule's end time that Check-in should be active. 0 represents that Check-in
            will only be available until the Schedule's start time.
            </value>
        </member>
        <member name="P:Rock.Model.Schedule.EffectiveStartDate">
            <summary>
            Gets or sets the Date that the Schedule becomes effective/active. This property is inclusive, and the schedule will be inactive before this date. 
            </summary>
            <value>
            A <see cref="T:System.DateTime"/> value that represents the date that this Schedule becomes active.
            </value>
        </member>
        <member name="P:Rock.Model.Schedule.EffectiveEndDate">
            <summary>
            Gets or sets that date that this Schedule expires and becomes inactive. This value is inclusive and the schedule will be inactive after this date.
            </summary>
            <value>
            A <see cref="T:System.DateTime"/> value that represents the date that this Schedule ends and becomes inactive.
            </value>
        </member>
        <member name="P:Rock.Model.Schedule.CategoryId">
            <summary>
            Gets or sets the CategoryId of the <see cref="T:Rock.Model.Category"/> that this Schedule belongs to.
            </summary>
            <value>
            A <see cref="T:System.Int32"/> representing the CategoryId of the <see cref="T:Rock.Model.Category"/> that this Schedule belongs to. This property will be null
            if the Schedule does not belong to a Category.
            </value>
        </member>
        <member name="P:Rock.Model.Schedule.IsCheckInEnabled">
            <summary>
            Gets a value indicating whether Check-in is enabled for this Schedule.
            </summary>
            <value>
            A <see cref="T:System.Boolean"/> that is <c>true</c> if this instance is check in enabled; otherwise, <c>false</c>.
            <remarks>
            The <c>CheckInStartOffsetMinutes</c> is used to determine if Check-in is enabled. If the value is <c>null</c>, it is determined that Check-in is not 
            enabled for this Schedule.
            </remarks>
            </value>
        </member>
        <member name="P:Rock.Model.Schedule.IsCheckInActive">
            <summary>
            Gets a value indicating whether check-in is currently active for this Schedule.
            </summary>
            <value>
             A <see cref="T:System.Boolean"/> that is  <c>true</c> if Check-in is currently active for this Schedule ; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Model.Schedule.Category">
            <summary>
            Gets or sets the <see cref="T:Rock.Model.Category"/> that this Schedule belongs to.
            </summary>
            <value>
            The <see cref="T:Rock.Model.Category"/> that this Schedule belongs to.  If it does not belong to a <see cref="T:Rock.Model.Category"/> this value will be null.
            </value>
        </member>
        <member name="T:Rock.Model.ScheduleConfiguration">
            <summary>
            File Configuration class.
            </summary>
        </member>
        <member name="M:Rock.Model.ScheduleConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.ScheduleConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Rock.Model.Device">
            <summary>
            Represents a device or component that interacts with and is manageable through Rock.  Examples of these can be check-in kiosks, giving kiosks, label printers, badge printers,
            displays, etc.
            </summary>
        </member>
        <member name="M:Rock.Model.Device.GetLocationGroupTypes">
            <summary>
            Returns an enumerable collection of <see cref="T:Rock.Model.GroupType">GroupTypes</see> that use the <see cref="T:Rock.Model.Location">Locations</see> that this
            device is configured for.
            </summary>
            <returns>A enumerable collection of <see cref="T:Rock.Model.GroupType"/> entities that use the <see cref="T:Rock.Model.Location"/>Locations that this device is configured for.</returns>
        </member>
        <member name="M:Rock.Model.Device.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Rock.Model.Device.Name">
            <summary>
            Gets or sets the device name. This property is required.
            </summary>
            <value>
            A <see cref="T:System.String"/> representing the Name of the device.
            </value>
        </member>
        <member name="P:Rock.Model.Device.Description">
            <summary>
            Gets or sets a description of the device.
            </summary>
            <value>
            A <see cref="T:System.String"/> representing the description of the device.
            </value>
        </member>
        <member name="P:Rock.Model.Device.DeviceTypeValueId">
            <summary>
            Gets or sets the Id of the DeviceType <see cref="T:Rock.Model.DefinedValue"/> that identifies
            what type of device this is.
            </summary>
            <value>
            A <see cref="T:System.Int32"/> representing the Id of the Device Type <see cref="T:Rock.Model.DefinedValue"/>
            </value>
        </member>
        <member name="P:Rock.Model.Device.LocationId">
            <summary>
            Gets or sets the Id of the <see cref="T:Rock.Model.Location"/> where this device is located at.
            </summary>
            <value>
            A <see cref="T:System.Int32"/> representing the Id of the <see cref="T:Rock.Model.Location"/> where this device is located at.
            </value>
        </member>
        <member name="P:Rock.Model.Device.IPAddress">
            <summary>
            Gets or sets the IP address of the device.
            </summary>
            <value>
            A <see cref="T:System.String"/> representing the IP address of the device.
            </value>
        </member>
        <member name="P:Rock.Model.Device.PrinterDeviceId">
            <summary>
            Gets or sets the DeviceId of the printer that is associated with this device. This is mostly used if this device is a kiosk.
            </summary>
            <value>
            A <see cref="T:System.Int32"/> representing the DeviceId of the printer that is associated with this device. If there is not a printer 
            associated with this Device, this value will be null.
            </value>
        </member>
        <member name="P:Rock.Model.Device.PrintFrom">
            <summary>
            Gets or sets where print jobs for this device originates from.
            </summary>
            <value>
            A <see cref="T:Rock.Model.PrintFrom"/> to indicate how print jobs should be handled from this device. If <c>PrintFrom.Client</c> the print job will
            be handled from the client, otherwise <c>PrintFrom.Server</c> and the print job will be handled from the server.
            </value>
        </member>
        <member name="P:Rock.Model.Device.PrintToOverride">
            <summary>
            Gets or sets a flag that overrides which printer the print job is set to.
            </summary>
            <value>
            A <see cref="T:Rock.Model.PrintTo"/> that indicates overrides where the print job is set to.  If <c>PrintTo.Default</c> the print job will be sent to the default
            printer, if <c>PrintTo.Kiosk</c> the print job will be sent to the printer associated with the kiosk, if <c>PrintTo.Location</c> the print job will be sent to the 
            printer at the check in location.
            </value>
        </member>
        <member name="P:Rock.Model.Device.Location">
            <summary>
            Gets or sets the physical location or geographic fence for the device.
            </summary>
            <value>
            A <see cref="T:Rock.Model.Location"/> entity that represents the physical location of or the geographic fence for the device.
            </value>
            <remarks>
            A physical location would signify where the device is at. A situation where a geographic fence could be used would be for mobile check in, 
            where if the device is within the fence, a user would be able to check in from their mobile device.
            </remarks>
        </member>
        <member name="P:Rock.Model.Device.Locations">
            <summary>
            Gets or sets a collection containing the <see cref="T:Rock.Model.Location">Locations</see> that use this device.
            </summary>
            <value>
            A collection of <see cref="T:Rock.Model.Location">Locations</see> that use this device.
            </value>
        </member>
        <member name="P:Rock.Model.Device.PrinterDevice">
            <summary>
            Gets or sets the printer that is associated with this device. 
            </summary>
            <value>
            The printer that is associated with the device.
            </value>
        </member>
        <member name="P:Rock.Model.Device.DeviceType">
            <summary>
            Gets or sets the <see cref="T:Rock.Model.DefinedValue"/> that represents the type of the device.
            </summary>
            <value>
            A <see cref="T:Rock.Model.DefinedValue"/> that represents the type of the device.
            </value>
        </member>
        <member name="T:Rock.Model.DeviceConfiguration">
            <summary>
            File Configuration class.
            </summary>
        </member>
        <member name="M:Rock.Model.DeviceConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.DeviceConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Rock.Model.PrintTo">
            <summary>
            Where a label should be printed
            </summary>
        </member>
        <member name="F:Rock.Model.PrintTo.Default">
            <summary>
            Print to the default printer
            </summary>
        </member>
        <member name="F:Rock.Model.PrintTo.Kiosk">
            <summary>
            Print to the printer associated with the selected kiosk
            </summary>
        </member>
        <member name="F:Rock.Model.PrintTo.Location">
            <summary>
            Print to the printer associated with the selected location
            </summary>
        </member>
        <member name="T:Rock.Model.PrintFrom">
            <summary>
            The application responsible for printing a label
            </summary>
        </member>
        <member name="F:Rock.Model.PrintFrom.Client">
            <summary>
            The label will be printed by the kiosk
            </summary>
        </member>
        <member name="F:Rock.Model.PrintFrom.Server">
            <summary>
            The label will be printed by the server.
            </summary>
        </member>
        <member name="T:Rock.Model.ServiceJobService">
            <summary>
            ServiceJob Service class
            </summary>
            <summary>
            Service/Data access class for <see cref="T:Rock.Model.ServiceJob"/> entity objects.
            </summary>
        </member>
        <member name="M:Rock.Model.ServiceJobService.#ctor(Rock.Data.RockContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.ServiceJobService"/> class
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Rock.Model.ServiceJobService.CanDelete(Rock.Model.ServiceJob,System.String@)">
            <summary>
            Determines whether this instance can delete the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="errorMessage">The error message.</param>
            <returns>
              <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Rock.Model.ServiceJobService.GetActiveJobs">
            <summary>
            Returns a queryable collection of active <see cref="T:Rock.Model.ServiceJob">Jobs</see>
            </summary>
            <returns>A queryable collection that contains all active <see cref="T:Rock.Model.ServiceJob">Jobs</see></returns>
        </member>
        <member name="M:Rock.Model.ServiceJobService.GetAllJobs">
            <summary>
            Returns a queryable collection of all <see cref="T:Rock.Model.ServiceJob">Jobs</see>
            </summary>
            <returns>A queryable collection of all <see cref="T:Rock.Model.ServiceJob"/>Jobs</returns>
        </member>
        <member name="M:Rock.Model.ServiceJobService.BuildQuartzJob(Rock.Model.ServiceJob)">
            <summary>
            Builds a Quartz Job for a specified <see cref="T:Rock.Model.ServiceJob">Job</see>
            </summary>
            <param name="job">The <see cref="T:Rock.Model.ServiceJob"/> to create a Quarts Job for.</param>
            <returns>A object that implements the <see cref="T:Quartz.IJobDetail"/> interface</returns>
        </member>
        <member name="M:Rock.Model.ServiceJobService.BuildQuartzTrigger(Rock.Model.ServiceJob)">
            <summary>
            Builds a Quartz schedule trigger
            </summary>
            <param name="job">The <see cref="T:Rock.Model.ServiceJob">Job</see> to create a <see cref="T:Quartz.ITrigger"/> compatible Trigger.</param>
            <returns>A Quartz trigger that implements <see cref="T:Quartz.ITrigger"/> for the specified job.</returns>
        </member>
        <member name="T:Rock.Model.ServiceJobExtensionMethods">
            <summary>
            Generated Extension Methods
            </summary>
        </member>
        <member name="M:Rock.Model.ServiceJobExtensionMethods.Clone(Rock.Model.ServiceJob,System.Boolean)">
            <summary>
            Clones this ServiceJob object to a new ServiceJob object
            </summary>
            <param name="source">The source.</param>
            <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.ServiceJobExtensionMethods.CopyPropertiesFrom(Rock.Model.ServiceJob,Rock.Model.ServiceJob)">
            <summary>
            Copies the properties from another ServiceJob object to this ServiceJob object
            </summary>
            <param name="target">The target.</param>
            <param name="source">The source.</param>
        </member>
        <member name="T:Rock.Model.WorkflowTriggerService">
            <summary>
            WorkflowTrigger Service class
            </summary>
            <summary>
            Service/Data access class for <see cref="T:Rock.Model.WorkflowTrigger"/> entity objects.
            </summary>
        </member>
        <member name="M:Rock.Model.WorkflowTriggerService.#ctor(Rock.Data.RockContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.WorkflowTriggerService"/> class
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Rock.Model.WorkflowTriggerService.CanDelete(Rock.Model.WorkflowTrigger,System.String@)">
            <summary>
            Determines whether this instance can delete the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="errorMessage">The error message.</param>
            <returns>
              <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Rock.Model.WorkflowTriggerService.Get(System.String,Rock.Model.WorkflowTriggerType)">
            <summary>
            Returns a queryable collection of  the <see cref="T:Rock.Model.WorkflowTrigger"/> by <see cref="T:Rock.Model.EntityType"/> name
            and <see cref="T:Rock.Model.WorkflowTriggerType"/>
            </summary>
            <param name="entityTypeName">A <see cref="T:System.String"/> representing the name of the <see cref="T:Rock.Model.EntityType"/> to filter by.</param>
            <param name="triggerType">The <see cref="T:Rock.Model.WorkflowTriggerType"/> to filter by.</param>
            <returns>A queryable collection of <see cref="T:Rock.Model.WorkflowTrigger"/> entities that meet the specified criteria.</returns>
        </member>
        <member name="T:Rock.Model.WorkflowTriggerExtensionMethods">
            <summary>
            Generated Extension Methods
            </summary>
        </member>
        <member name="M:Rock.Model.WorkflowTriggerExtensionMethods.Clone(Rock.Model.WorkflowTrigger,System.Boolean)">
            <summary>
            Clones this WorkflowTrigger object to a new WorkflowTrigger object
            </summary>
            <param name="source">The source.</param>
            <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.WorkflowTriggerExtensionMethods.CopyPropertiesFrom(Rock.Model.WorkflowTrigger,Rock.Model.WorkflowTrigger)">
            <summary>
            Copies the properties from another WorkflowTrigger object to this WorkflowTrigger object
            </summary>
            <param name="target">The target.</param>
            <param name="source">The source.</param>
        </member>
        <member name="T:Rock.Model.Category">
            <summary>
            Represents a category or group of entity objects in Rock. A category can be used to group entity instances of <see cref="T:Rock.Model.EntityType">EntityTypes</see>. 
            For an EntityType to be categorizable the EntityType will need to implement the <see cref="T:Rock.Data.ICategorized"/> interface.
            </summary>
        </member>
        <member name="M:Rock.Model.Category.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Rock.Model.Category.IsSystem">
            <summary>
            Gets or sets a flag indicating if this Category is part of the Rock core system/framework.
            </summary>
            <value>
            A <see cref="T:System.Boolean"/> value that is <c>true</c> if the Category is part of the Rock core system/framework; otherwise <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Model.Category.ParentCategoryId">
            <summary>
            Gets or sets the CategoryId of the parent Category. 
            </summary>
            <value>
            A <see cref="T:System.Int32"/> representing the CategoryId of the parent Category.
            </value>
        </member>
        <member name="P:Rock.Model.Category.EntityTypeId">
            <summary>
            Gets or sets the EntityTypeId of the <see cref="T:Rock.Model.EntityType"/> that this Category belongs to.
            </summary>
            <value>
            A <see cref="T:System.Int32"/> representing the EntityTypeId of the <see cref="T:Rock.Model.EntityType"/> that this Category belongs to.
            </value>
        </member>
        <member name="P:Rock.Model.Category.EntityTypeQualifierColumn">
            <summary>
            Gets or sets the entity type qualifier column that contains the value (see <see cref="P:Rock.Model.Category.EntityTypeQualifierValue"/>) that is used to narrow the scope of the Category.
            </summary>
            <value>
            A <see cref="T:System.String"/> representing the name of the Qualifier Column/Property that contains the <see cref="P:Rock.Model.Category.EntityTypeQualifierValue"/> that is used to 
            narrow the scope of the Category.
            </value>
        </member>
        <member name="P:Rock.Model.Category.EntityTypeQualifierValue">
            <summary>
            Gets or sets the entity type qualifier value that is used to narrow the scope of the Category to a subset or specific instance of an EntityType.
            </summary>
            <value>
            A <see cref="T:System.String"/> that represents the value that is used to narrow the scope of the Category.
            </value>
        </member>
        <member name="P:Rock.Model.Category.Order">
            <summary>
            Gets or sets the order.
            </summary>
            <value>
            The order.
            </value>
        </member>
        <member name="P:Rock.Model.Category.Name">
            <summary>
            Gets or sets the Name of the Category
            </summary>
            <value>
            A <see cref="T:System.String"/> that represents the Name of the Category.
            </value>
        </member>
        <member name="P:Rock.Model.Category.Description">
            <summary>
            Gets or sets the description.
            </summary>
            <value>
            The description.
            </value>
        </member>
        <member name="P:Rock.Model.Category.IconCssClass">
            <summary>
            Gets or sets the name of the icon CSS class. This property is only used for CSS based icons.
            </summary>
            <value>
            A <see cref="T:System.String"/> representing the name of the icon CSS class. This property will be null if a file based icon is being used.
            </value>
        </member>
        <member name="P:Rock.Model.Category.ParentCategory">
            <summary>
            Gets or sets the parent category.
            </summary>
            <value>
            The parent category
            </value>
        </member>
        <member name="P:Rock.Model.Category.ChildCategories">
            <summary>
            Gets or sets a collection of Categories that are children of the current Category.
            </summary>
            <value>
            The Categories that are children of the current Category.
            </value>
        </member>
        <member name="P:Rock.Model.Category.EntityType">
            <summary>
            Gets or sets the <see cref="T:Rock.Model.EntityType"/> that can use this Category.
            </summary>
            <value>
            The <see cref="T:Rock.Model.EntityType"/> that can use this Category.
            </value>
        </member>
        <member name="P:Rock.Model.Category.ParentAuthority">
            <summary>
            Gets the parent authority where security authorizations are being inherited from.
            </summary>
            <value>
            The parent authority.
            </value>
        </member>
        <member name="T:Rock.Model.CategoryConfiguration">
            <summary>
            Category Configuration class.
            </summary>
        </member>
        <member name="M:Rock.Model.CategoryConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.CategoryConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Rock.Services.NuGet.PackageService">
            <summary>
            Facade class to provide intaraction with NuGet internals
            </summary>
        </member>
        <member name="M:Rock.Services.NuGet.PackageService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Services.NuGet.PackageService"/> class.
            </summary>
        </member>
        <member name="M:Rock.Services.NuGet.PackageService.ExportPage(Rock.Model.Page,System.Boolean)">
            <summary>
            Exports the page.
            </summary>
            <param name="page">The page.</param>
            <param name="isRecursive">if set to <c>true</c> [should export children].</param>
            <returns>a <see cref="T:System.IO.MemoryStream"/> of the exported page package.</returns>
        </member>
        <member name="M:Rock.Services.NuGet.PackageService.ImportPage(System.Byte[],System.String,System.Int32,System.Int32)">
            <summary>
            Imports the page.
            </summary>
            <param name="uploadedPackage">Byte array of the uploaded package</param>
            <param name="fileName">File name of uploaded package</param>
            <param name="pageId">The Id of the Page to save new data underneath</param>
            <param name="siteId">The Id of the Site tha the Page is being imported into</param>
        </member>
        <member name="M:Rock.Services.NuGet.PackageService.CreatePackageDirectory(System.String,System.String)">
            <summary>
            Creates a unique directory for temporarily holding the page export package.
            </summary>
            <param name="pageName">Name of the page.</param>
            <param name="packageId">The unique package id.</param>
            <returns>a <see cref="T:System.IO.DirectoryInfo"/> of the new directory.</returns>
        </member>
        <member name="M:Rock.Services.NuGet.PackageService.GetJson(Rock.Model.Page,System.Boolean)">
            <summary>
            Gets the json for this page.
            </summary>
            <param name="page">The page.</param>
            <param name="isRecursive">if set to <c>true</c> [is recursive].</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Services.NuGet.PackageService.FindUniqueBlockTypesAndDirectories(Rock.Model.Page,System.Boolean,System.Collections.Generic.Dictionary{System.Guid,Rock.Model.BlockType},System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Finds the unique block types and directories for the given page and adds them to the <paramref name="blockTypes"/> and <paramref name="directories"/> dictionaries.
            </summary>
            <param name="page">The page.</param>
            <param name="isRecursive">if set to <c>true</c> [child pages are recursively searched too].</param>
            <param name="blockTypes">a Dictionary of BlockTypes.</param>
            <param name="directories">a Dictionary of directory names.</param>
        </member>
        <member name="M:Rock.Services.NuGet.PackageService.AddToManifest(NuGet.Manifest,System.String,System.String,System.String,System.IO.SearchOption)">
            <summary>
            Add the given directories files (matching the given file filter and search options)
            to the manifest.
            </summary>
            <param name="manifest">A NuGet Manifest</param>
            <param name="directory">the directory containing the file(s)</param>
            <param name="webRootPath">the physical path to the app's webroot</param>
            <param name="filterPattern"> A file filter pattern such as *.* or *.cs</param>
            <param name="searchOption">A <see cref="T:System.IO.SearchOption"/> search option to define the scope of the search</param>
        </member>
        <member name="M:Rock.Services.NuGet.PackageService.FindNewBlockTypes(Rock.Model.Page,System.Collections.Generic.IEnumerable{Rock.Model.BlockType})">
            <summary>
            Iterates recursively through all BlockTypes associated with a Page and its children and compares them with
            the list of BlockTypes that are currently installed.
            </summary>
            <param name="page">The page to interrogate</param>
            <param name="installedBlockTypes">The list of currently installed Blocks</param>
            <returns>A List&lt;BlockType&gt; of BlockTypes that are not currently installed.</returns>
        </member>
        <member name="M:Rock.Services.NuGet.PackageService.ValidateImportData(Rock.Model.Page,System.Collections.Generic.IEnumerable{Rock.Model.BlockType})">
            <summary>
            Validates the import data.
            </summary>
            <param name="page">The page.</param>
            <param name="newBlockTypes">Collection of newly created BlockTypes</param>
        </member>
        <member name="M:Rock.Services.NuGet.PackageService.SavePages(Rock.Data.RockContext,Rock.Model.Page,System.Collections.Generic.IEnumerable{Rock.Model.BlockType},System.Int32,System.Int32)">
            <summary>
            Recursively saves Pages and associated Blocks, PageRoutes and PageContexts.
            </summary>
            <param name="rockContext">The rock context.</param>
            <param name="page">The current Page to save</param>
            <param name="newBlockTypes">List of BlockTypes not currently installed</param>
            <param name="parentPageId">Id of the the current Page's parent</param>
            <param name="siteId">Id of the site the current Page is being imported into</param>
        </member>
        <member name="M:Rock.Services.NuGet.PackageService.ExpandFiles(System.Collections.Generic.IEnumerable{NuGet.IPackageFile})">
            <summary>
            Expands the files.
            </summary>
            <param name="packageFiles">The package files.</param>
        </member>
        <member name="P:Rock.Services.NuGet.PackageService.ErrorMessages">
            <summary>
            Gets or sets the error messages.
            </summary>
            <value>
            The error messages.
            </value>
        </member>
        <member name="P:Rock.Services.NuGet.PackageService.WarningMessages">
            <summary>
            Gets or sets the warning messages.
            </summary>
            <value>
            The warning messages.
            </value>
        </member>
        <member name="T:Rock.SystemGuid.BinaryFiletype">
            <summary>
            System file types.  
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.BinaryFiletype.DEFAULT">
            <summary>
            The Default file type guid
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.BinaryFiletype.CHECKIN_LABEL">
            <summary>
            Gets the Check-in Label File type guid
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.BinaryFiletype.CONTRIBUTION_IMAGE">
            <summary>
            Gets the Contribution-Image (scanned check, scanned envelope, etc) file type guid
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.BinaryFiletype.PERSON_IMAGE">
            <summary>
            The Person Image file type guid
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.BinaryFiletype.MARKETING_CAMPAIGN_AD_IMAGE">
            <summary>
            The Marketing Campaign Ad Image file type guid
            </summary>
        </member>
        <member name="T:Rock.Web.UI.Adapters.CheckBoxAdapter">
            <summary>
            Control adapter for checkbox
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Adapters.CheckBoxAdapter.RenderBeginTag(System.Web.UI.HtmlTextWriter)">
            <summary>
            Creates the beginning tag for the Web control in the markup that is transmitted to the target browser.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter" /> containing methods to render the target-specific output.</param>
        </member>
        <member name="M:Rock.Web.UI.Adapters.CheckBoxAdapter.RenderEndTag(System.Web.UI.HtmlTextWriter)">
            <summary>
            Creates the ending tag for the Web control in the markup that is transmitted to the target browser.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter" /> containing methods to render the target-specific output.</param>
        </member>
        <member name="M:Rock.Web.UI.Adapters.CheckBoxAdapter.RenderContents(System.Web.UI.HtmlTextWriter)">
            <summary>
            Generates the target-specific inner markup for the Web control to which the control adapter is attached.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter" /> containing methods to render the target-specific output.</param>
        </member>
        <member name="T:Rock.Web.UI.Adapters.DropDownListAdapter">
            <summary>
            Custom control adapter for rendering a dropdown list
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Adapters.DropDownListAdapter.RenderContents(System.Web.UI.HtmlTextWriter)">
            <summary>
            Generates the target-specific inner markup for the Web control to which the control adapter is attached.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter" /> containing methods to render the target-specific output.</param>
        </member>
        <member name="T:Rock.Web.UI.Adapters.RadioButtonAdapter">
            <summary>
            Control adapter for radio button
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Adapters.RadioButtonAdapter.RenderBeginTag(System.Web.UI.HtmlTextWriter)">
            <summary>
            Creates the beginning tag for the Web control in the markup that is transmitted to the target browser.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter" /> containing methods to render the target-specific output.</param>
        </member>
        <member name="M:Rock.Web.UI.Adapters.RadioButtonAdapter.RenderEndTag(System.Web.UI.HtmlTextWriter)">
            <summary>
            Creates the ending tag for the Web control in the markup that is transmitted to the target browser.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter" /> containing methods to render the target-specific output.</param>
        </member>
        <member name="M:Rock.Web.UI.Adapters.RadioButtonAdapter.RenderContents(System.Web.UI.HtmlTextWriter)">
            <summary>
            Generates the target-specific inner markup for the Web control to which the control adapter is attached.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter" /> containing methods to render the target-specific output.</param>
        </member>
        <member name="T:Rock.Web.UI.Controls.Communication.Sms">
            <summary>
            SMS Communication Channel control
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.Communication.Sms.CreateChildControls">
            <summary>
            Called by the ASP.NET page framework to notify server controls that use composition-based implementation to create any child controls they contain in preparation for posting back or rendering.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.Communication.Sms.InitializeFromSender(Rock.Model.Person)">
            <summary>
            On new communicaiton, initializes controls from sender values
            </summary>
            <param name="sender">The sender.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Rock.Web.UI.Controls.Communication.Sms.RenderControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            Outputs server control content to a provided <see cref="T:System.Web.UI.HtmlTextWriter" /> object and stores tracing information about the control if tracing is enabled.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter" /> object that receives the control content.</param>
        </member>
        <member name="P:Rock.Web.UI.Controls.Communication.Sms.ChannelData">
            <summary>
            Gets or sets the channel data.
            </summary>
            <value>
            The channel data.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.Communication.Sms.ValidationGroup">
            <summary>
            Gets or sets the validation group.
            </summary>
            <value>
            The validation group.
            </value>
        </member>
        <member name="T:Rock.Web.UI.Controls.Communication.Email">
            <summary>
            Email Communication Channel control
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.Communication.Email.CreateChildControls">
            <summary>
            Called by the ASP.NET page framework to notify server controls that use composition-based implementation to create any child controls they contain in preparation for posting back or rendering.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.Communication.Email.InitializeFromSender(Rock.Model.Person)">
            <summary>
            On new communicaiton, initializes controls from sender values
            </summary>
            <param name="sender">The sender.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Rock.Web.UI.Controls.Communication.Email.RenderControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            Outputs server control content to a provided <see cref="T:System.Web.UI.HtmlTextWriter" /> object and stores tracing information about the control if tracing is enabled.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter" /> object that receives the control content.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.Communication.Email.fuAttachments_FileUploaded(System.Object,System.EventArgs)">
            <summary>
            Handles the FileUploaded event of the fuAttachments control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.Communication.Email.RegisterClientScript">
            <summary>
            Registers the client script.
            </summary>
        </member>
        <member name="P:Rock.Web.UI.Controls.Communication.Email.ChannelData">
            <summary>
            Gets or sets the channel data.
            </summary>
            <value>
            The channel data.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.Communication.Email.Attachments">
            <summary>
            Gets or sets the attachments.
            </summary>
            <value>
            The attachments.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.Communication.Email.ValidationGroup">
            <summary>
            Gets or sets the validation group.
            </summary>
            <value>
            The validation group.
            </value>
        </member>
        <member name="T:Rock.Web.UI.Controls.Badge">
            <summary>
            Displays a bootstrap badge
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.Badge.RenderControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            Outputs server control content to a provided <see cref="T:System.Web.UI.HtmlTextWriter" /> object and stores tracing information about the control if tracing is enabled.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter" /> object that receives the control content.</param>
        </member>
        <member name="P:Rock.Web.UI.Controls.Badge.ToolTip">
            <summary>
            Gets or sets the tool tip.
            </summary>
            <value>
            The tool tip.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.Badge.BadgeType">
            <summary>
            Gets or sets the type of the badge.
            </summary>
            <value>
            The type of the badge.
            </value>
        </member>
        <member name="T:Rock.Web.UI.Controls.ConfirmPageUnload">
            <summary>
            Renders the title of a page
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.ConfirmPageUnload.OnInit(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.Init" /> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs" /> object that contains the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.ConfirmPageUnload.RenderControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            Outputs server control content to a provided <see cref="T:System.Web.UI.HtmlTextWriter" /> object and stores tracing information about the control if tracing is enabled.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter" /> object that receives the control content.</param>
        </member>
        <member name="P:Rock.Web.UI.Controls.ConfirmPageUnload.ConfirmationMessage">
            <summary>
            Gets or sets the confirmation message.
            </summary>
            <value>The confirmation message.</value>
        </member>
        <member name="P:Rock.Web.UI.Controls.ConfirmPageUnload.Enabled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Rock.Web.UI.Controls.ConfirmPageUnload"/> is enabled.
            </summary>
            <value><c>true</c> if enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Rock.Web.UI.Controls.ColumnChart">
            <summary>
            
            </summary>
        </member>
        <member name="T:Rock.Web.UI.Controls.GoogleChart">
            <summary>
            Abstract class for much of the Google Charts Logic
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.GoogleChart.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Web.UI.Controls.GoogleChart"/> class.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.GoogleChart.OnInit(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.Init" /> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs" /> object that contains the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.GoogleChart.OnLoad(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.Load" /> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs" /> object that contains the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.GoogleChart.RegisterJavaScript">
            <summary>
            Registers the java script.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.GoogleChart.CreateChildControls">
            <summary>
            Called by the ASP.NET page framework to notify server controls that use composition-based implementation to create any child controls they contain in preparation for posting back or rendering.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.GoogleChart.RenderControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            Outputs server control content to a provided <see cref="T:System.Web.UI.HtmlTextWriter" /> object and stores tracing information about the control if tracing is enabled.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter" /> object that receives the control content.</param>
        </member>
        <member name="P:Rock.Web.UI.Controls.GoogleChart.MetricId">
            <summary>
            Gets or sets the metric identifier.
            </summary>
            <value>
            The metric identifier.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.GoogleChart.MetricValueType">
            <summary>
            Gets or sets the type of the metric value.
            </summary>
            <value>
            The type of the metric value.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.GoogleChart.StartDate">
            <summary>
            Gets or sets the start date.
            </summary>
            <value>
            The start date.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.GoogleChart.EndDate">
            <summary>
            Gets or sets the end date.
            </summary>
            <value>
            The end date.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.GoogleChart.EntityId">
            <summary>
            Gets or sets the entity identifier.
            </summary>
            <value>
            The entity identifier.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.GoogleChart.ChartType">
            <summary>
            Gets or sets the type of the chart.
            </summary>
            <value>
            The type of the chart.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.GoogleChart.Options">
            <summary>
            Gets or sets the options.
            Defaults to a default set of options
            </summary>
            <value>
            The options.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.GoogleChart.ColumnDefinitions">
            <summary>
            Gets or sets the column definitions.
            Defaults to 3 columns: X (date), Y (decimal) and Tooltip
            </summary>
            <value>
            The column definitions.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.GoogleChart.DataSourceUrl">
            <summary>
            Gets or sets the data source URL.
            Defaults to "~/api/MetricValues/GetChartData/"
            </summary>
            <value>
            The data source URL.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.ColumnChart.ChartType">
            <summary>
            Gets or sets the type of the chart.
            </summary>
            <value>
            The type of the chart.
            </value>
        </member>
        <member name="T:Rock.Web.UI.Controls.LineChart">
            <summary>
            
            </summary>
        </member>
        <member name="P:Rock.Web.UI.Controls.LineChart.ChartType">
            <summary>
            Gets or sets the type of the chart.
            </summary>
            <value>
            The type of the chart.
            </value>
        </member>
        <member name="T:Rock.Web.UI.Controls.GoogleChartType">
            <summary>
            
            </summary>
        </member>
        <member name="T:Rock.Web.UI.Controls.PersonField">
            <summary>
            Control for selecting a defined value
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.PersonField.FormatDataValue(System.Object,System.Boolean)">
            <summary>
            Formats the specified field value for a cell in the <see cref="T:System.Web.UI.WebControls.BoundField" /> object.
            </summary>
            <param name="dataValue">The field value to format.</param>
            <param name="encode">true to encode the value; otherwise, false.</param>
            <returns>
            The field value converted to the format specified by <see cref="P:System.Web.UI.WebControls.BoundField.DataFormatString" />.
            </returns>
        </member>
        <member name="P:Rock.Web.UI.Controls.PersonField.UrlFormatString">
            <summary>
            Gets or sets the URL format string.
            </summary>
            <value>
            The URL format string.
            </value>
        </member>
        <member name="T:Rock.Web.UI.Controls.TimeField">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.TimeField.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Web.UI.Controls.DateField"/> class.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.TimeField.Initialize(System.Boolean,System.Web.UI.Control)">
            <summary>
            Initializes the <see cref="T:System.Web.UI.WebControls.BoundField" /> object.
            </summary>
            <param name="enableSorting">true if sorting is supported; otherwise, false.</param>
            <param name="control">The data control that owns the <see cref="T:System.Web.UI.WebControls.BoundField" />.</param>
            <returns>
            false in all cases.
            </returns>
        </member>
        <member name="M:Rock.Web.UI.Controls.TimeField.FormatDataValue(System.Object,System.Boolean)">
            <summary>
            Formats the specified field value for a cell in the <see cref="T:System.Web.UI.WebControls.BoundField" /> object.
            </summary>
            <param name="dataValue">The field value to format.</param>
            <param name="encode">true to encode the value; otherwise, false.</param>
            <returns>
            The field value converted to the format specified by <see cref="P:System.Web.UI.WebControls.BoundField.DataFormatString" />.
            </returns>
        </member>
        <member name="P:Rock.Web.UI.Controls.TimeField.FormatAsElapsedTime">
            <summary>
            Gets or sets a value indicating whether value should be displayed as an elapsed time (i.e. "3 days ago").
            </summary>
            <value>
            <c>true</c> if [format as elapsed time]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Rock.Web.UI.Controls.LiquidField">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.LiquidField.Initialize(System.Boolean,System.Web.UI.Control)">
            <summary>
            Performs basic instance initialization for a data control field.
            </summary>
            <param name="sortingEnabled">A value that indicates whether the control supports the sorting of columns of data.</param>
            <param name="control">The data control that owns the <see cref="T:System.Web.UI.WebControls.DataControlField" />.</param>
            <returns>
            Always returns false.
            </returns>
        </member>
        <member name="P:Rock.Web.UI.Controls.LiquidField.ParentGrid">
            <summary>
            Gets the parent grid.
            </summary>
            <value>
            The parent grid.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.LiquidField.LiquidTemplate">
            <summary>
            Gets or sets the liquid template.
            </summary>
            <value>
            The liquid template.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.LiquidField.LiquidKey">
            <summary>
            Gets or sets the liquid key, for example: Person
            </summary>
            <value>
            The liquid key.
            </value>
        </member>
        <member name="T:Rock.Web.UI.Controls.LiquidFieldTemplate">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.LiquidFieldTemplate.InstantiateIn(System.Web.UI.Control)">
            <summary>
            When implemented by a class, defines the <see cref="T:System.Web.UI.Control" /> object that child controls and templates belong to. These child controls are in turn defined within an inline template.
            </summary>
            <param name="container">The <see cref="T:System.Web.UI.Control" /> object to contain the instances of controls from the inline template.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.LiquidFieldTemplate.lOutputText_DataBinding(System.Object,System.EventArgs)">
            <summary>
            Handles the DataBinding event of the lOutputText control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.LiquidFieldTemplate.ToGridItemsDictionary(System.Web.UI.WebControls.GridViewRow,System.Object)">
            <summary>
            To the dictionary.
            </summary>
            <param name="gridViewRow">The grid view row.</param>
            <param name="dataItem">The data item.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.UI.Controls.LiquidFieldTemplate.PopulateDataItemPropertiesDictionary(System.Object)">
            <summary>
            Populates the data item properties dictionary.
            </summary>
            <param name="dataItem">The data item.</param>
        </member>
        <member name="P:Rock.Web.UI.Controls.LiquidFieldTemplate.LiquidField">
            <summary>
            Gets or sets the liquid field.
            </summary>
            <value>
            The liquid field.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.LiquidFieldTemplate.DataItemPropertiesDictionary">
            <summary>
            Gets or sets the data item properties.
            </summary>
            <value>
            The data item properties.
            </value>
        </member>
        <member name="T:Rock.Web.UI.Controls.ListDelimitedField">
            <summary>
            Displays a BoundField as a Delimited List when the underlying datatype is enumerable
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.ListDelimitedField.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Web.UI.Controls.ListDelimitedField"/> class.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.ListDelimitedField.FormatDataValue(System.Object,System.Boolean)">
            <summary>
            Formats the specified field value for a cell in the <see cref="T:System.Web.UI.WebControls.BoundField"/> object.
            </summary>
            <param name="dataValue">The field value to format.</param>
            <param name="encode">true to encode the value; otherwise, false.</param>
            <returns>
            The field value converted to the format specified by <see cref="P:System.Web.UI.WebControls.BoundField.DataFormatString"/>.
            </returns>
        </member>
        <member name="P:Rock.Web.UI.Controls.ListDelimitedField.Delimiter">
            <summary>
            Gets or sets the delimiter.
            </summary>
            <value>
            The delimiter.
            </value>
        </member>
        <member name="T:Rock.Web.UI.Controls.PersonMergeField">
            <summary>
            The ASP:CheckBoxField doesn't work very well for retrieving changed values, especially when the value is changed from True to False (weird)
            This CheckBoxEditableField works like the ASP:CheckBoxField except it gives the CheckBox's IDs so their changed values will consistantly persist on postbacks
            </summary>
        </member>
        <member name="T:Rock.Web.UI.Controls.SelectField">
            <summary>
            The ASP:CheckBoxField doesn't work very well for retrieving changed values, especially when the value is changed from True to False (weird)
            This CheckBoxEditableField works like the ASP:CheckBoxField except it gives the CheckBox's IDs so their changed values will consistantly persist on postbacks
            </summary>
        </member>
        <member name="T:Rock.Web.UI.Controls.INotRowSelectedField">
            <summary>
            By default all columns in the grid will fire the OnRowSelected event when a user clicks on a cell in that column. A Grid Field can implement
            this interface to prevent the OnRowSelected event from being fired when this field (column) is clicked
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.SelectField.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Web.UI.Controls.SelectField"/> class.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.SelectField.Initialize(System.Boolean,System.Web.UI.Control)">
            <summary>
            Performs basic instance initialization for a data control field.
            </summary>
            <param name="sortingEnabled">A value that indicates whether the control supports the sorting of columns of data.</param>
            <param name="control">The data control that owns the <see cref="T:System.Web.UI.WebControls.DataControlField" />.</param>
            <returns>
            Always returns false.
            </returns>
        </member>
        <member name="P:Rock.Web.UI.Controls.SelectField.SelectedKeys">
            <summary>
            Gets the parent grid.
            </summary>
            <value>
            The parent grid.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.SelectField.SelectionMode">
            <summary>
            Gets or sets the selection mode.
            </summary>
            <value>
            The selection mode.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.SelectField.DataVisibleField">
            <summary>
            Gets or sets the data visible field.
            </summary>
            <value>
            The data visible field.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.SelectField.DataSelectedField">
            <summary>
            Gets or sets the data selected field.
            </summary>
            <value>
            The data selected field.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.SelectField.DataTextField">
            <summary>
            Gets or sets the data field.
            </summary>
            <value>
            The data field.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.SelectField.ColumnIndex">
            <summary>
            Gets or sets the index of the column.
            </summary>
            <value>
            The index of the column.
            </value>
        </member>
        <member name="M:Rock.Web.UI.Controls.PersonMergeField.Initialize(System.Boolean,System.Web.UI.Control)">
            <summary>
            Performs basic instance initialization for a data control field.
            </summary>
            <param name="sortingEnabled">A value that indicates whether the control supports the sorting of columns of data.</param>
            <param name="control">The data control that owns the <see cref="T:System.Web.UI.WebControls.DataControlField" />.</param>
            <returns>
            Always returns false.
            </returns>
        </member>
        <member name="M:Rock.Web.UI.Controls.PersonMergeField.HeaderTemplate_LinkButtonClick(System.Object,System.EventArgs)">
            <summary>
            Handles the LinkButtonClick event of the HeaderTemplate control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.PersonMergeField.Delete(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Click"/> event.
            </summary>
            <param name="e">The <see cref="T:Rock.Web.UI.Controls.RowEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:Rock.Web.UI.Controls.PersonMergeField.PersonId">
            <summary>
            Gets or sets the person identifier.
            </summary>
            <value>
            The person identifier.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.PersonMergeField.PersonName">
            <summary>
            Gets or sets the name of the person.
            </summary>
            <value>
            The name of the person.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.PersonMergeField.HeaderContent">
            <summary>
            Gets or sets the family names.
            </summary>
            <value>
            The family names.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.PersonMergeField.ModifiedDateTime">
            <summary>
            Gets or sets the modified date time.
            </summary>
            <value>
            The modified date time.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.PersonMergeField.ModifiedBy">
            <summary>
            Gets or sets the modified by.
            </summary>
            <value>
            The modified by.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.PersonMergeField.IsPrimaryPerson">
            <summary>
            Gets or sets a value indicating whether [is primary person].
            </summary>
            <value>
              <c>true</c> if [is primary person]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.PersonMergeField.ParentGrid">
            <summary>
            Gets the parent grid.
            </summary>
            <value>
            The parent grid.
            </value>
        </member>
        <member name="E:Rock.Web.UI.Controls.PersonMergeField.OnDelete">
            <summary>
            Occurs when [delete].
            </summary>
        </member>
        <member name="T:Rock.Web.UI.Controls.PersonMergeFieldHeaderTemplate">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.PersonMergeFieldHeaderTemplate.InstantiateIn(System.Web.UI.Control)">
            <summary>
            When implemented by a class, defines the <see cref="T:System.Web.UI.Control" /> object that child controls and templates belong to. These child controls are in turn defined within an inline template.
            </summary>
            <param name="container">The <see cref="T:System.Web.UI.Control" /> object to contain the instances of controls from the inline template.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.PersonMergeFieldHeaderTemplate.lbDelete_Click(System.Object,System.EventArgs)">
            <summary>
            Handles the Click event of the lbDelete control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="E:Rock.Web.UI.Controls.PersonMergeFieldHeaderTemplate.LinkButtonClick">
            <summary>
            Occurs when [link button click].
            </summary>
        </member>
        <member name="T:Rock.Web.UI.Controls.TemplateFieldUnselected">
            <summary>
            A Template field with the INotRowSelectedField interface to prevent clicks on this field from selecting row
            </summary>
        </member>
        <member name="T:Rock.Web.UI.Controls.SelectFieldTemplate">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.SelectFieldTemplate.InstantiateIn(System.Web.UI.Control)">
            <summary>
            When implemented by a class, defines the <see cref="T:System.Web.UI.Control" /> object that child controls and templates belong to. These child controls are in turn defined within an inline template.
            </summary>
            <param name="container">The <see cref="T:System.Web.UI.Control" /> object to contain the instances of controls from the inline template.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.SelectFieldTemplate.cb_DataBinding(System.Object,System.EventArgs)">
            <summary>
            Handles the DataBinding event of the cb control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:Rock.Web.UI.Controls.SelectFieldTemplate.SelectionMode">
            <summary>
            Gets the selection mode.
            </summary>
            <value>
            The selection mode.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.SelectFieldTemplate.DataVisibleField">
            <summary>
            Gets the data visible field.
            </summary>
            <value>
            The data visible field.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.SelectFieldTemplate.DataSelectedField">
            <summary>
            Gets the data selected field.
            </summary>
            <value>
            The data selected field.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.SelectFieldTemplate.DataTextField">
            <summary>
            Gets the data text field.
            </summary>
            <value>
            The data text field.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.SelectFieldTemplate.ColumnIndex">
            <summary>
            Gets the index of the column.
            </summary>
            <value>
            The index of the column.
            </value>
        </member>
        <member name="T:Rock.Web.UI.Controls.SelectionMode">
            <summary>
            
            </summary>
        </member>
        <member name="F:Rock.Web.UI.Controls.SelectionMode.Multiple">
            <summary>
            Renders a checkbox
            </summary>
        </member>
        <member name="F:Rock.Web.UI.Controls.SelectionMode.Single">
            <summary>
            Renders a radio button that allows selecting one row for the column
            </summary>
        </member>
        <member name="T:Rock.Web.UI.Controls.RockBoundField">
            <summary>
            <see cref="T:Rock.Web.UI.Controls.Grid"/> Column to display a boolean value.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.RockBoundField.FormatDataValue(System.Object,System.Boolean)">
            <summary>
            Formats the specified field value for a cell in the <see cref="T:System.Web.UI.WebControls.BoundField" /> object.
            </summary>
            <param name="dataValue">The field value to format.</param>
            <param name="encode">true to encode the value; otherwise, false.</param>
            <returns>
            The field value converted to the format specified by <see cref="P:System.Web.UI.WebControls.BoundField.DataFormatString" />.
            </returns>
        </member>
        <member name="P:Rock.Web.UI.Controls.RockBoundField.TruncateLength">
            <summary>
            Gets or sets the length of the truncate.
            </summary>
            <value>
            The length of the truncate.
            </value>
        </member>
        <member name="T:Rock.Web.UI.Controls.LinkButtonField">
            <summary>
            <see cref="T:Rock.Web.UI.Controls.Grid"/> Column for showing a LinkButton in a grid
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.LinkButtonField.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Web.UI.Controls.LinkButtonField"/> class.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.LinkButtonField.Initialize(System.Boolean,System.Web.UI.Control)">
            <summary>
            Performs basic instance initialization for a data control field.
            </summary>
            <param name="sortingEnabled">A value that indicates whether the control supports the sorting of columns of data.</param>
            <param name="control">The data control that owns the <see cref="T:System.Web.UI.WebControls.DataControlField"/>.</param>
            <returns>
            Always returns false.
            </returns>
        </member>
        <member name="M:Rock.Web.UI.Controls.LinkButtonField.linkButtonFieldTemplate_LinkButtonClick(System.Object,Rock.Web.UI.Controls.RowEventArgs)">
            <summary>
            Handles the LinkButtonClick event of the linkButtonFieldTemplate control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:Rock.Web.UI.Controls.RowEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.LinkButtonField.OnClick(Rock.Web.UI.Controls.RowEventArgs)">
            <summary>
            Raises the <see cref="E:Click"/> event.
            </summary>
            <param name="e">The <see cref="T:Rock.Web.UI.Controls.RowEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:Rock.Web.UI.Controls.LinkButtonField.CssClass">
            <summary>
            Gets or sets the CSS class.
            </summary>
            <value>
            The CSS class.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.LinkButtonField.Text">
            <summary>
            Gets or sets the text.
            </summary>
            <value>
            The text.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.LinkButtonField.ParentGrid">
            <summary>
            Gets the parent grid.
            </summary>
            <value>
            The parent grid.
            </value>
        </member>
        <member name="E:Rock.Web.UI.Controls.LinkButtonField.Click">
            <summary>
            Occurs when [click].
            </summary>
        </member>
        <member name="T:Rock.Web.UI.Controls.LinkButtonFieldTemplate">
            <summary>
            Template used by the <see cref="T:Rock.Web.UI.Controls.LinkButtonField"/> control
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.LinkButtonFieldTemplate.InstantiateIn(System.Web.UI.Control)">
            <summary>
            When implemented by a class, defines the <see cref="T:System.Web.UI.Control"/> object that child controls and templates belong to. These child controls are in turn defined within an inline template.
            </summary>
            <param name="container">The <see cref="T:System.Web.UI.Control"/> object to contain the instances of controls from the inline template.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.LinkButtonFieldTemplate.linkButton_Click(System.Object,System.EventArgs)">
            <summary>
            Handles the Click event of the linkButton control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:Rock.Web.UI.Controls.LinkButtonFieldTemplate.ParentGrid">
            <summary>
            Gets or sets the parent grid.
            </summary>
            <value>
            The parent grid.
            </value>
        </member>
        <member name="E:Rock.Web.UI.Controls.LinkButtonFieldTemplate.LinkButtonClick">
            <summary>
            Occurs when [link button click].
            </summary>
        </member>
        <member name="T:Rock.Web.UI.Controls.IHasValidationGroup">
            <summary>
            This is a generic interface that most Rock UI controls implement to indicate that they support
            having a validation group.  By default the RockBlock that any of these controls are added to 
            will automatically set their validation group to be a value unique to the instance of the block
            </summary>
        </member>
        <member name="P:Rock.Web.UI.Controls.IHasValidationGroup.ValidationGroup">
            <summary>
            Gets or sets the validation group.
            </summary>
            <value>
            The validation group.
            </value>
        </member>
        <member name="T:Rock.Web.UI.Controls.ImageEditor">
            <summary>
            
            </summary>
        </member>
        <member name="T:Rock.Web.UI.Controls.IRockControl">
            <summary>
            This is the generic interface that most Rock UI controls should implement.  Use along with the
            RockControlHelper's CreateChildControls() and RenderControl() methods.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.IRockControl.RenderBaseControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            This is where you implment the simple aspects of rendering your control.  The rest
            will be handled by calling RenderControlHelper's RenderControl() method.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="P:Rock.Web.UI.Controls.IRockControl.Label">
            <summary>
            Gets or sets the label.
            </summary>
            <value>
            The label text
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.IRockControl.Help">
            <summary>
            Gets or sets the help text.
            </summary>
            <value>
            The help text.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.IRockControl.Required">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Rock.Web.UI.Controls.IRockControl"/> is required.
            </summary>
            <value>
              <c>true</c> if required; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.IRockControl.RequiredErrorMessage">
            <summary>
            Gets or sets the required error message.  If blank, the LabelName name will be used
            </summary>
            <value>
            The required error message.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.IRockControl.IsValid">
            <summary>
            Gets or sets a value indicating whether this instance is valid.
            </summary>
            <value>
              <c>true</c> if this instance is valid; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.IRockControl.ID">
            <summary>
            Gets the ID.
            </summary>
            <value>
            The ID.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.IRockControl.ClientID">
            <summary>
            Gets the client ID.
            </summary>
            <value>
            The client ID.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.IRockControl.HelpBlock">
            <summary>
            Gets the help block.
            </summary>
            <value>
            The help block.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.IRockControl.RequiredFieldValidator">
            <summary>
            Gets the required field validator.
            </summary>
            <value>
            The required field validator.
            </value>
        </member>
        <member name="M:Rock.Web.UI.Controls.ImageEditor.OnLoad(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.Load" /> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs" /> object that contains the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.ImageEditor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Web.UI.Controls.ImageEditor"/> class.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.ImageEditor.CreateChildControls">
            <summary>
            Called by the ASP.NET page framework to notify server controls that use composition-based implementation to create any child controls they contain in preparation for posting back or rendering.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.ImageEditor._mdImageDialog_SaveClick(System.Object,System.EventArgs)">
            <summary>
            Handles the SaveClick event of the _mdImageDialog control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.ImageEditor.CropImage(System.Byte[],System.String)">
            <summary>
            Crops the image.
            </summary>
            <param name="bitmapContent">Content of the bitmap.</param>
            <param name="mimeType">Type of the MIME.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.UI.Controls.ImageEditor._lbUploadImage_Click(System.Object,System.EventArgs)">
            <summary>
            Handles the Click event of the _lbUploadImage control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.ImageEditor._lbShowModal_Click(System.Object,System.EventArgs)">
            <summary>
            Handles the Click event of the _lbShowModal control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.ImageEditor.RenderControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            Outputs server control content to a provided <see cref="T:System.Web.UI.HtmlTextWriter" /> object and stores tracing information about the control if tracing is enabled.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter" /> object that receives the control content.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.ImageEditor.RenderBaseControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            This is where you implment the simple aspects of rendering your control.  The rest
            will be handled by calling RenderControlHelper's RenderControl() method.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.ImageEditor.RegisterStartupScript">
            <summary>
            Registers the startup script.
            </summary>
        </member>
        <member name="P:Rock.Web.UI.Controls.ImageEditor.Label">
            <summary>
            Gets or sets the label text.
            </summary>
            <value>
            The label text.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.ImageEditor.Help">
            <summary>
            Gets or sets the help text.
            </summary>
            <value>
            The help text.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.ImageEditor.Required">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Rock.Web.UI.Controls.RockTextBox"/> is required.
            </summary>
            <value>
              <c>true</c> if required; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.ImageEditor.RequiredErrorMessage">
            <summary>
            Gets or sets the required error message.  If blank, the LabelName name will be used
            </summary>
            <value>
            The required error message.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.ImageEditor.ValidationGroup">
            <summary>
            Gets or sets an optional validation group to use.
            </summary>
            <value>
            The validation group.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.ImageEditor.IsValid">
            <summary>
            Gets a value indicating whether this instance is valid.
            </summary>
            <value>
              <c>true</c> if this instance is valid; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.ImageEditor.HelpBlock">
            <summary>
            Gets or sets the help block.
            </summary>
            <value>
            The help block.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.ImageEditor.RequiredFieldValidator">
            <summary>
            Gets or sets the required field validator.
            </summary>
            <value>
            The required field validator.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.ImageEditor.BinaryFileId">
            <summary>
            The BinaryFileId of the image displayed on in the main image (not necessarily the one being cropped in the Modal)
            </summary>
            <value>
            The binary file identifier.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.ImageEditor.CropBinaryFileId">
            <summary>
            The BinaryFileId of the BinaryFile that in the process of being cropped (not necessarily the one shown in the base image)
            </summary>
            <value>
            The uploaded binary file identifier.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.ImageEditor.BinaryFileTypeGuid">
            <summary>
            Gets or sets the binary file type GUID.
            </summary>
            <value>
            The binary file type GUID.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.ImageEditor.MaxImageHeight">
            <summary>
            Gets or sets the maximum height of the image.
            </summary>
            <value>
            The maximum height of the image.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.ImageEditor.MaxImageWidth">
            <summary>
            Gets or sets the maximum width of the image.
            </summary>
            <value>
            The maximum width of the image.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.ImageEditor.NoPictureUrl">
            <summary>
            Gets or sets the picture URL to use when there is no image selected
            </summary>
            <value>
            The no picture URL.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.ImageEditor.Enabled">
            <summary>
            Gets or sets a value indicating whether the Web server control is enabled.
            </summary>
            <returns>true if control is enabled; otherwise, false. The default is true.</returns>
        </member>
        <member name="T:Rock.Web.UI.Controls.NoteContainer">
            <summary>
            Note Editor control
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.NoteContainer.OnInit(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.Init" /> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs" /> object that contains the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.NoteContainer.OnLoad(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.Load" /> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs" /> object that contains the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.NoteContainer.CreateChildControls">
            <summary>
            Called by the ASP.NET page framework to notify server controls that use composition-based implementation to create any child controls they contain in preparation for posting back or rendering.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.NoteContainer.RenderControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            Writes the <see cref="T:System.Web.UI.WebControls.CompositeControl" /> content to the specified <see cref="T:System.Web.UI.HtmlTextWriter" /> object, for display on the client.
            </summary>
            <param name="writer">An <see cref="T:System.Web.UI.HtmlTextWriter" /> that represents the output stream to render HTML content on the client.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.NoteContainer.note_SaveButtonClick(System.Object,Rock.Web.UI.Controls.NoteEventArgs)">
            <summary>
            Handles the Click event of the lbAddFamilyMember control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.NoteContainer.note_Updated(System.Object,Rock.Web.UI.Controls.NoteEventArgs)">
            <summary>
            Handles the Updated event of the note control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.NoteContainer._lbShowMore_Click(System.Object,System.EventArgs)">
            <summary>
            Handles the Click event of the _lbShowMore control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.NoteContainer.ClearNotes">
            <summary>
            Clears the rows.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.NoteContainer.RebuildNotes(System.Boolean)">
            <summary>
            Rebuilds the notes.
            </summary>
            <param name="setSelection">if set to <c>true</c> [set selection].</param>
        </member>
        <member name="P:Rock.Web.UI.Controls.NoteContainer.NoteTypeId">
            <summary>
            Gets or sets the note type identifier.
            </summary>
        </member>
        <member name="P:Rock.Web.UI.Controls.NoteContainer.EntityId">
            <summary>
            Gets or sets the entity identifier.
            </summary>
        </member>
        <member name="P:Rock.Web.UI.Controls.NoteContainer.ShowHeading">
            <summary>
            Gets or sets a value indicating whether to display heading
            </summary>
        </member>
        <member name="P:Rock.Web.UI.Controls.NoteContainer.TitleIconCssClass">
            <summary>
            Gets or sets the CSS Class to use for the title icon.
            </summary>
        </member>
        <member name="P:Rock.Web.UI.Controls.NoteContainer.Title">
            <summary>
            Gets or sets the title to display.
            </summary>
        </member>
        <member name="P:Rock.Web.UI.Controls.NoteContainer.AddAllowed">
            <summary>
            Gets or sets a value indicating whether adds are allowed
            </summary>
        </member>
        <member name="P:Rock.Web.UI.Controls.NoteContainer.AddAlwaysVisible">
            <summary>
            Gets or sets a value indicating whether [add always visible].
            </summary>
        </member>
        <member name="P:Rock.Web.UI.Controls.NoteContainer.AddAnchorCSSClass">
            <summary>
            Gets or sets the css for the add anchor tag
            </summary>
        </member>
        <member name="P:Rock.Web.UI.Controls.NoteContainer.AddIconCSSClass">
            <summary>
            Gets or sets the add icon CSS class.
            </summary>
        </member>
        <member name="P:Rock.Web.UI.Controls.NoteContainer.AddText">
            <summary>
            Gets or sets the add text.
            </summary>
        </member>
        <member name="P:Rock.Web.UI.Controls.NoteContainer.Term">
            <summary>
            Gets or sets the title to display.
            </summary>
        </member>
        <member name="P:Rock.Web.UI.Controls.NoteContainer.DisplayType">
            <summary>
            Gets or sets the display type.  Full or Light
            </summary>
        </member>
        <member name="P:Rock.Web.UI.Controls.NoteContainer.SortDirection">
            <summary>
            Gets or sets the sort direction.  Descending will render with entry field at top and most
            recent note at top.  Ascending will render with entry field at bottom and most recent note
            at the end.  Ascending will also disable the more option
            </summary>
        </member>
        <member name="P:Rock.Web.UI.Controls.NoteContainer.ShowAlertCheckBox">
            <summary>
            Gets or sets a value indicating whether to show the Alert checkbox
            </summary>
        </member>
        <member name="P:Rock.Web.UI.Controls.NoteContainer.ShowPrivateCheckBox">
            <summary>
            Gets or sets a value indicating whether to show the Is Private checkbox
            </summary>
        </member>
        <member name="P:Rock.Web.UI.Controls.NoteContainer.ShowSecurityButton">
            <summary>
            Gets or sets a value indicating whether to show the security button
            for existing notes
            </summary>
        </member>
        <member name="P:Rock.Web.UI.Controls.NoteContainer.AllowAnonymousEntry">
            <summary>
            Gets or sets the allow anonymous.
            </summary>
        </member>
        <member name="P:Rock.Web.UI.Controls.NoteContainer.DefaultSourceTypeValueId">
            <summary>
            Gets or sets the default source type value identifier.
            </summary>
        </member>
        <member name="P:Rock.Web.UI.Controls.NoteContainer.UsePersonIcon">
            <summary>
            Gets or sets a value indicating whether the author's photo should 
            be displayed wiht the note instead of an icon based on the source
            of the note.
            </summary>
        </member>
        <member name="P:Rock.Web.UI.Controls.NoteContainer.ShowMoreOption">
            <summary>
            Gets or sets a value indicating whether [show more option].
            </summary>
        </member>
        <member name="P:Rock.Web.UI.Controls.NoteContainer.DisplayCount">
            <summary>
            Gets or sets the current display count.  
            </summary>
        </member>
        <member name="E:Rock.Web.UI.Controls.NoteContainer.NotesUpdated">
            <summary>
            Occurs when notes are updated.
            </summary>
        </member>
        <member name="T:Rock.Web.UI.Controls.PhoneNumberBox">
            <summary>
            A <see cref="T:System.Web.UI.WebControls.TextBox"/> control for editing a phone number
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.PhoneNumberBox.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Web.UI.Controls.PhoneNumberBox"/> class.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.PhoneNumberBox.OnInit(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.Init" /> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs" /> object that contains the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.PhoneNumberBox.OnLoad(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.Load" /> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs" /> object that contains the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.PhoneNumberBox.CreateChildControls">
            <summary>
            Called by the ASP.NET page framework to notify server controls that use composition-based implementation to create any child controls they contain in preparation for posting back or rendering.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.PhoneNumberBox.RenderControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            Outputs server control content to a provided <see cref="T:System.Web.UI.HtmlTextWriter" /> object and stores tracing information about the control if tracing is enabled.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter" /> object that receives the control content.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.PhoneNumberBox.RenderBaseControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders the base control.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="P:Rock.Web.UI.Controls.PhoneNumberBox.Label">
            <summary>
            Gets or sets the label text.
            </summary>
            <value>
            The label text.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.PhoneNumberBox.Help">
            <summary>
            Gets or sets the help text.
            </summary>
            <value>
            The help text.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.PhoneNumberBox.Required">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Rock.Web.UI.Controls.RockTextBox"/> is required.
            </summary>
            <value>
              <c>true</c> if required; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.PhoneNumberBox.RequiredErrorMessage">
            <summary>
            Gets or sets the required error message.  If blank, the LabelName name will be used
            </summary>
            <value>
            The required error message.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.PhoneNumberBox.IsValid">
            <summary>
            Gets a value indicating whether this instance is valid.
            </summary>
            <value>
              <c>true</c> if this instance is valid; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.PhoneNumberBox.HelpBlock">
            <summary>
            Gets or sets the help block.
            </summary>
            <value>
            The help block.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.PhoneNumberBox.RequiredFieldValidator">
            <summary>
            Gets or sets the required field validator.
            </summary>
            <value>
            The required field validator.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.PhoneNumberBox.ValidationGroup">
            <summary>
            Gets or sets the group of controls for which the <see cref="T:System.Web.UI.WebControls.TextBox" /> control causes validation when it posts back to the server.
            </summary>
            <returns>The group of controls for which the <see cref="T:System.Web.UI.WebControls.TextBox" /> control causes validation when it posts back to the server. The default value is an empty string ("").</returns>
        </member>
        <member name="P:Rock.Web.UI.Controls.PhoneNumberBox.CountryCode">
            <summary>
            Gets or sets the country code.
            </summary>
            <value>
            The country code.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.PhoneNumberBox.Number">
            <summary>
            Gets or sets the phone number.
            </summary>
            <value>
            The phone number.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.PhoneNumberBox.Placeholder">
            <summary>
            Gets or sets the placeholder text to display inside textbox when it is empty
            </summary>
            <value>
            The placeholder text
            </value>
        </member>
        <member name="T:Rock.Web.UI.Controls.DayOfWeekPicker">
            <summary>
            
            </summary>
        </member>
        <member name="T:Rock.Web.UI.Controls.RockDropDownList">
            <summary>
            A <see cref="T:System.Web.UI.WebControls.DropDownList"/> control with an associated label.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.RockDropDownList.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Web.UI.Controls.RockDropDownList"/> class.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.RockDropDownList.CreateChildControls">
            <summary>
            Called by the ASP.NET page framework to notify server controls that use composition-based implementation to create any child controls they contain in preparation for posting back or rendering.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.RockDropDownList.RenderControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            Outputs server control content to a provided <see cref="T:System.Web.UI.HtmlTextWriter" /> object and stores tracing information about the control if tracing is enabled.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter" /> object that receives the control content.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.RockDropDownList.RenderBaseControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders the base control.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.RockDropDownList.RenderDataValidator(System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders any data validator.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.RockDropDownList.CreateControlCollection">
            <summary>
            Creates a collection to store child controls.
            </summary>
            <returns>
            Always returns an <see cref="T:System.Web.UI.EmptyControlCollection"/>.
            </returns>
        </member>
        <member name="M:Rock.Web.UI.Controls.RockDropDownList.SaveViewState">
            <summary>
            Saves the current view state of the <see cref="T:System.Web.UI.WebControls.ListControl" /> -derived control and the items it contains.
            </summary>
            <returns>
            An <see cref="T:System.Object" /> that contains the saved state of the <see cref="T:System.Web.UI.WebControls.ListControl" /> control.
            </returns>
        </member>
        <member name="M:Rock.Web.UI.Controls.RockDropDownList.LoadViewState(System.Object)">
            <summary>
            Loads the previously saved view state of the <see cref="T:System.Web.UI.WebControls.DetailsView" /> control.
            </summary>
            <param name="savedState">An <see cref="T:System.Object" /> that represents the state of the <see cref="T:System.Web.UI.WebControls.ListControl" /> -derived control.</param>
        </member>
        <member name="P:Rock.Web.UI.Controls.RockDropDownList.Label">
            <summary>
            Gets or sets the label text.
            </summary>
            <value>
            The label text.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.RockDropDownList.Help">
            <summary>
            Gets or sets the help text.
            </summary>
            <value>
            The help text.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.RockDropDownList.Required">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Rock.Web.UI.Controls.RockTextBox"/> is required.
            </summary>
            <value>
              <c>true</c> if required; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.RockDropDownList.RequiredErrorMessage">
            <summary>
            Gets or sets the required error message.  If blank, the LabelName name will be used
            </summary>
            <value>
            The required error message.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.RockDropDownList.IsValid">
            <summary>
            Gets a value indicating whether this instance is valid.
            </summary>
            <value>
              <c>true</c> if this instance is valid; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.RockDropDownList.HelpBlock">
            <summary>
            Gets or sets the help block.
            </summary>
            <value>
            The help block.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.RockDropDownList.RequiredFieldValidator">
            <summary>
            Gets or sets the required field validator.
            </summary>
            <value>
            The required field validator.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.RockDropDownList.ValidationGroup">
            <summary>
            Gets or sets the group of controls for which the control that is derived from the <see cref="T:System.Web.UI.WebControls.ListControl" /> class causes validation when it posts back to the server.
            </summary>
            <returns>The group of controls for which the derived <see cref="T:System.Web.UI.WebControls.ListControl" /> causes validation when it posts back to the server. The default is an empty string ("").</returns>
        </member>
        <member name="M:Rock.Web.UI.Controls.DayOfWeekPicker.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Web.UI.Controls.DayOfWeekPicker"/> class.
            </summary>
        </member>
        <member name="P:Rock.Web.UI.Controls.DayOfWeekPicker.SelectedDayOfWeek">
            <summary>
            Gets or sets the selected day of week.
            </summary>
            <value>
            The selected day of week.
            </value>
        </member>
        <member name="T:Rock.Web.UI.Controls.DaysOfWeekPicker">
            <summary>
            
            </summary>
        </member>
        <member name="T:Rock.Web.UI.Controls.RockCheckBoxList">
            <summary>
            A <see cref="T:System.Web.UI.WebControls.TextBox"/> control with an associated label.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.RockCheckBoxList.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Web.UI.Controls.RockCheckBoxList"/> class.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.RockCheckBoxList.CreateChildControls">
            <summary>
            Called by the ASP.NET page framework to notify server controls that use composition-based implementation to create any child controls they contain in preparation for posting back or rendering.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.RockCheckBoxList.LoadPostData(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Processes the posted data for the <see cref="T:System.Web.UI.WebControls.CheckBoxList" /> control.
            </summary>
            <param name="postDataKey">The key identifier for the control, used to index the <see cref="T:System.Collections.Specialized.NameValueCollection" /> specified in the <paramref name="postCollection" /> parameter.</param>
            <param name="postCollection">A <see cref="T:System.Collections.Specialized.NameValueCollection" /> that contains value information indexed by control identifiers.</param>
            <returns>
            true if the state of the <see cref="T:System.Web.UI.WebControls.CheckBoxList" /> is different from the last posting; otherwise, false.
            </returns>
        </member>
        <member name="M:Rock.Web.UI.Controls.RockCheckBoxList.RenderControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            Outputs server control content to a provided <see cref="T:System.Web.UI.HtmlTextWriter" /> object and stores tracing information about the control if tracing is enabled.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter" /> object that receives the control content.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.RockCheckBoxList.RenderBaseControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders the base control.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="P:Rock.Web.UI.Controls.RockCheckBoxList.Label">
            <summary>
            Gets or sets the label text.
            </summary>
            <value>
            The label text.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.RockCheckBoxList.Help">
            <summary>
            Gets or sets the help text.
            </summary>
            <value>
            The help text.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.RockCheckBoxList.Required">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Rock.Web.UI.Controls.RockTextBox"/> is required.
            </summary>
            <value>
              <c>true</c> if required; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.RockCheckBoxList.RequiredErrorMessage">
            <summary>
            Gets or sets the required error message.  If blank, the LabelName name will be used
            </summary>
            <value>
            The required error message.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.RockCheckBoxList.IsValid">
            <summary>
            Gets a value indicating whether this instance is valid.
            </summary>
            <value>
              <c>true</c> if this instance is valid; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.RockCheckBoxList.HelpBlock">
            <summary>
            Gets or sets the help block.
            </summary>
            <value>
            The help block.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.RockCheckBoxList.RequiredFieldValidator">
            <summary>
            Gets or sets the required field validator.
            </summary>
            <value>
            The required field validator.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.RockCheckBoxList.ValidationGroup">
            <summary>
            Gets or sets the group of controls for which the control that is derived from the <see cref="T:System.Web.UI.WebControls.ListControl" /> class causes validation when it posts back to the server.
            </summary>
            <returns>The group of controls for which the derived <see cref="T:System.Web.UI.WebControls.ListControl" /> causes validation when it posts back to the server. The default is an empty string ("").</returns>
        </member>
        <member name="P:Rock.Web.UI.Controls.RockCheckBoxList.SelectedValues">
            <summary>
            Selects the values.
            </summary>
            <value>
            The selected values.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.RockCheckBoxList.SelectedValuesAsInt">
            <summary>
            Selects the values as int.
            </summary>
            <value>
            The selected values as int.
            </value>
        </member>
        <member name="M:Rock.Web.UI.Controls.DaysOfWeekPicker.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Web.UI.Controls.DaysOfWeekPicker"/> class.
            </summary>
        </member>
        <member name="P:Rock.Web.UI.Controls.DaysOfWeekPicker.SelectedDaysOfWeek">
            <summary>
            Gets the selected days of the week
            </summary>
            <value>
            The selected days of the week
            </value>
        </member>
        <member name="T:Rock.Web.UI.Controls.RemoteAuthsPicker">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.RemoteAuthsPicker.OnInit(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.Init" /> event.
            </summary>
            <param name="e">An object that contains event data.</param>
        </member>
        <member name="P:Rock.Web.UI.Controls.RemoteAuthsPicker.SelectedValues">
            <summary>
            Selects the values.
            </summary>
            <value>
            The selected values.
            </value>
        </member>
        <member name="T:Rock.Web.UI.Controls.YearPicker">
            <summary>
            
            </summary>
        </member>
        <member name="T:Rock.Web.UI.Controls.RockTextBox">
            <summary>
            A <see cref="T:System.Web.UI.WebControls.TextBox"/> control with an associated label.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.RockTextBox.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Web.UI.Controls.RockTextBox"/> class.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.RockTextBox.CreateChildControls">
            <summary>
            Called by the ASP.NET page framework to notify server controls that use composition-based implementation to create any child controls they contain in preparation for posting back or rendering.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.RockTextBox.RenderControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            Outputs server control content to a provided <see cref="T:System.Web.UI.HtmlTextWriter" /> object and stores tracing information about the control if tracing is enabled.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter" /> object that receives the control content.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.RockTextBox.RenderBaseControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders the base control.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.RockTextBox.RenderDataValidator(System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders any data validator.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.RockTextBox.ShowErrorMessage(System.String)">
            <summary>
            Shows the error message.
            </summary>
            <param name="errorMessage">The error message.</param>
        </member>
        <member name="P:Rock.Web.UI.Controls.RockTextBox.Label">
            <summary>
            Gets or sets the label text.
            </summary>
            <value>
            The label text.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.RockTextBox.Help">
            <summary>
            Gets or sets the help text.
            </summary>
            <value>
            The help text.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.RockTextBox.Required">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Rock.Web.UI.Controls.RockTextBox"/> is required.
            </summary>
            <value>
              <c>true</c> if required; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.RockTextBox.RequiredErrorMessage">
            <summary>
            Gets or sets the required error message.  If blank, the LabelName name will be used
            </summary>
            <value>
            The required error message.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.RockTextBox.IsValid">
            <summary>
            Gets a value indicating whether this instance is valid.
            </summary>
            <value>
              <c>true</c> if this instance is valid; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.RockTextBox.HelpBlock">
            <summary>
            Gets or sets the help block.
            </summary>
            <value>
            The help block.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.RockTextBox.RequiredFieldValidator">
            <summary>
            Gets or sets the required field validator.
            </summary>
            <value>
            The required field validator.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.RockTextBox.ValidationGroup">
            <summary>
            Gets or sets the group of controls for which the <see cref="T:System.Web.UI.WebControls.TextBox" /> control causes validation when it posts back to the server.
            </summary>
            <returns>The group of controls for which the <see cref="T:System.Web.UI.WebControls.TextBox" /> control causes validation when it posts back to the server. The default value is an empty string ("").</returns>
        </member>
        <member name="P:Rock.Web.UI.Controls.RockTextBox.PrependText">
            <summary>
            Gets or sets the prepend text.
            </summary>
            <value>
            The prepend text.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.RockTextBox.AppendText">
            <summary>
            Gets or sets the append text.
            </summary>
            <value>
            The append text.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.RockTextBox.Placeholder">
            <summary>
            Gets or sets the placeholder text to display inside textbox when it is empty
            </summary>
            <value>
            The placeholder text
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.RockTextBox.Text">
            <summary>
            Gets or sets the text content of the <see cref="T:System.Web.UI.WebControls.TextBox" /> control.
            </summary>
            <returns>The text displayed in the <see cref="T:System.Web.UI.WebControls.TextBox" /> control. The default is an empty string ("").</returns>
        </member>
        <member name="M:Rock.Web.UI.Controls.YearPicker.OnInit(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.Init" /> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs" /> object that contains the event data.</param>
        </member>
        <member name="P:Rock.Web.UI.Controls.YearPicker.SelectedYear">
            <summary>
            Gets the selected date.
            </summary>
            <value>
            The selected date.
            </value>
        </member>
        <member name="T:Rock.Web.UI.Controls.EntityTypePicker">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.EntityTypePicker.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Web.UI.Controls.EntityTypePicker"/> class.
            </summary>
        </member>
        <member name="P:Rock.Web.UI.Controls.EntityTypePicker.EntityTypes">
            <summary>
            Gets or sets the EntityTypes.
            </summary>
            <value>
            The EntityTypes.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.EntityTypePicker.IncludeGlobalOption">
            <summary>
            Gets or sets a value indicating whether to include option for Global entity (0)
            </summary>
            <value>
            <c>true</c> if [include global option]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.EntityTypePicker.SelectedEntityTypeId">
            <summary>
            Gets the selected EntityType ids.
            </summary>
            <value>
            The selected EntityType ids.
            </value>
        </member>
        <member name="T:Rock.Web.UI.Controls.PanelWidget">
            <summary>
            
            </summary>
        </member>
        <member name="F:Rock.Web.UI.Controls.PanelWidget._hfExpanded">
            <summary>
            The hidden field for tracking expanded
            </summary>
        </member>
        <member name="F:Rock.Web.UI.Controls.PanelWidget._hfTitle">
            <summary>
            The title label
            </summary>
        </member>
        <member name="F:Rock.Web.UI.Controls.PanelWidget._lbDelete">
            <summary>
            The delete button
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.PanelWidget.OnInit(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.Init" /> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs" /> object that contains the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.PanelWidget.CreateChildControls">
            <summary>
            Called by the ASP.NET page framework to notify server controls that use composition-based implementation to create any child controls they contain in preparation for posting back or rendering.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.PanelWidget.lbDelete_Click(System.Object,System.EventArgs)">
            <summary>
            Handles the Click event of the lbDelete control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.PanelWidget.RenderControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            Outputs server control content to a provided <see cref="T:System.Web.UI.HtmlTextWriter" /> object and stores tracing information about the control if tracing is enabled.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter" /> object that receives the control content.</param>
        </member>
        <member name="P:Rock.Web.UI.Controls.PanelWidget.Title">
            <summary>
            Gets or sets the Title text.
            </summary>
            <value>
            The label text.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.PanelWidget.ShowReorderIcon">
            <summary>
            Gets or sets a value indicating whether [show reorder icon].
            </summary>
            <value>
              <c>true</c> if [show reorder icon]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.PanelWidget.ShowDeleteButton">
            <summary>
            Gets or sets a value indicating whether [show delete button].
            </summary>
            <value>
              <c>true</c> if [show delete button]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.PanelWidget.Expanded">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Rock.Web.UI.Controls.PanelWidget"/> is expanded.
            </summary>
            <value>
              <c>true</c> if expanded; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.PanelWidget.CssClass">
            <summary>
            Gets or sets the CSS class.
            </summary>
            <value>
            The CSS class.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.PanelWidget.HeaderControls">
            <summary>
            Gets or sets the header controls.
            </summary>
            <value>
            The header controls.
            </value>
        </member>
        <member name="E:Rock.Web.UI.Controls.PanelWidget.DeleteClick">
            <summary>
            Occurs when [delete click].
            </summary>
        </member>
        <member name="T:Rock.Web.UI.Controls.RockControlWrapper">
            <summary>
            A <see cref="T:System.Web.UI.WebControls.PlaceHolder"/> control with an associated label.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.RockControlWrapper.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Web.UI.Controls.RockControlWrapper"/> class.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.RockControlWrapper.CreateChildControls">
            <summary>
            Called by the ASP.NET page framework to notify server controls that use composition-based implementation to create any child controls they contain in preparation for posting back or rendering.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.RockControlWrapper.RenderControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders a label and <see cref="T:System.Web.UI.WebControls.TextBox"/> control to the specified <see cref="T:System.Web.UI.HtmlTextWriter"/> object.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter"/> that receives the rendered output.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.RockControlWrapper.RenderBaseControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders the base control.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.RockControlWrapper.RenderChildren(System.Web.UI.HtmlTextWriter)">
            <summary>
            Outputs the content of a server control's children to a provided <see cref="T:System.Web.UI.HtmlTextWriter" /> object, which writes the content to be rendered on the client.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter" /> object that receives the rendered content.</param>
        </member>
        <member name="P:Rock.Web.UI.Controls.RockControlWrapper.Label">
            <summary>
            Gets or sets the label text.
            </summary>
            <value>
            The label text.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.RockControlWrapper.Help">
            <summary>
            Gets or sets the help text.
            </summary>
            <value>
            The help text.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.RockControlWrapper.Required">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Rock.Web.UI.Controls.RockTextBox"/> is required.
            </summary>
            <value>
              <c>true</c> if required; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.RockControlWrapper.RequiredErrorMessage">
            <summary>
            Gets or sets the required error message.  If blank, the LabelName name will be used
            </summary>
            <value>
            The required error message.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.RockControlWrapper.ValidationGroup">
            <summary>
            Gets or sets an optional validation group to use.
            </summary>
            <value>
            The validation group.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.RockControlWrapper.IsValid">
            <summary>
            Gets a value indicating whether this instance is valid.
            </summary>
            <value>
              <c>true</c> if this instance is valid; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.RockControlWrapper.HelpBlock">
            <summary>
            Gets or sets the help block.
            </summary>
            <value>
            The help block.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.RockControlWrapper.RequiredFieldValidator">
            <summary>
            Gets or sets the required field validator.
            </summary>
            <value>
            The required field validator.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.RockControlWrapper.CssClass">
            <summary>
            Gets or sets the CSS class.
            </summary>
            <value>
            The CSS class.
            </value>
        </member>
        <member name="T:Rock.Web.UI.Controls.HighlightLabel">
            <summary>
            A highlighted label
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.HighlightLabel.OnPreRender(System.EventArgs)">
            <summary>
            Raises the <see cref="E:PreRender"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.HighlightLabel.RenderControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders a label and <see cref="T:System.Web.UI.WebControls.TextBox"/> control to the specified <see cref="T:System.Web.UI.HtmlTextWriter"/> object.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter"/> that receives the rendered output.</param>
        </member>
        <member name="P:Rock.Web.UI.Controls.HighlightLabel.CustomClass">
            <summary>
            Gets or sets the custom label suffix to use when generating the css class name.
            The value specified here will be be added to 'label-' when the lable type is Custom.
            </summary>
            <value>
            The text CSS class.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.HighlightLabel.IconCssClass">
            <summary>
            Gets or sets the icon class name to use on the label.
            If set, a standard <i class="blah"></i> will be placed in front of the label text.
            </summary>
            <value>
            The icon CSS class name (such as icon-flag, icon-ok, etc.)
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.HighlightLabel.Text">
            <summary>
            Gets or sets the label text.
            </summary>
            <value>
            The label text.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.HighlightLabel.LabelType">
            <summary>
            Gets or sets the type of the label.
            </summary>
            <value>
            The type of the label.
            </value>
        </member>
        <member name="T:Rock.Web.UI.Controls.LabelType">
            <summary>
            The type of highlighting to use.  Each type is associated with a particular css class to control the look (color)
            </summary>
        </member>
        <member name="F:Rock.Web.UI.Controls.LabelType.Default">
            <summary>
            Default
            </summary>
        </member>
        <member name="F:Rock.Web.UI.Controls.LabelType.Primary">
            <summary>
            Primary
            </summary>
        </member>
        <member name="F:Rock.Web.UI.Controls.LabelType.Success">
            <summary>
            Success
            </summary>
        </member>
        <member name="F:Rock.Web.UI.Controls.LabelType.Info">
            <summary>
            Info
            </summary>
        </member>
        <member name="F:Rock.Web.UI.Controls.LabelType.Warning">
            <summary>
            Warning
            </summary>
        </member>
        <member name="F:Rock.Web.UI.Controls.LabelType.Danger">
            <summary>
            Danger
            </summary>
        </member>
        <member name="F:Rock.Web.UI.Controls.LabelType.Campus">
            <summary>
            Campus
            </summary>
        </member>
        <member name="F:Rock.Web.UI.Controls.LabelType.Type">
            <summary>
            Entity Type
            </summary>
        </member>
        <member name="F:Rock.Web.UI.Controls.LabelType.Custom">
            <summary>
            Custom
            </summary>
        </member>
        <member name="T:Rock.Web.UI.Controls.BirthdayPicker">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.BirthdayPicker.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Web.UI.Controls.BirthdayPicker"/> class.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.BirthdayPicker.CreateChildControls">
            <summary>
            Called by the ASP.NET page framework to notify server controls that use composition-based implementation to create any child controls they contain in preparation for posting back or rendering.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.BirthdayPicker.dateList_SelectedIndexChanged(System.Object,System.EventArgs)">
            <summary>
            Handles the SelectedIndexChanged event of the date dropdown list controls.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.BirthdayPicker.PopulateDropDowns">
            <summary>
            Populates the drop downs.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.BirthdayPicker.RenderControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            Outputs server control content to a provided <see cref="T:System.Web.UI.HtmlTextWriter" /> object and stores tracing information about the control if tracing is enabled.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter" /> object that receives the control content.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.BirthdayPicker.RenderBaseControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders the base control.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="P:Rock.Web.UI.Controls.BirthdayPicker.Label">
            <summary>
            Gets or sets the label text.
            </summary>
            <value>
            The label text.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.BirthdayPicker.Help">
            <summary>
            Gets or sets the help text.
            </summary>
            <value>
            The help text.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.BirthdayPicker.Required">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Rock.Web.UI.Controls.RockTextBox"/> is required.
            </summary>
            <value>
              <c>true</c> if required; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.BirthdayPicker.RequiredErrorMessage">
            <summary>
            Gets or sets the required error message.  If blank, the LabelName name will be used
            </summary>
            <value>
            The required error message.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.BirthdayPicker.ValidationGroup">
            <summary>
            Gets or sets an optional validation group to use.
            </summary>
            <value>
            The validation group.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.BirthdayPicker.IsValid">
            <summary>
            Gets a value indicating whether this instance is valid.
            </summary>
            <value>
              <c>true</c> if this instance is valid; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.BirthdayPicker.HelpBlock">
            <summary>
            Gets or sets the help block.
            </summary>
            <value>
            The help block.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.BirthdayPicker.RequiredFieldValidator">
            <summary>
            Gets or sets the required field validator.
            </summary>
            <value>
            The required field validator.
            </value>
        </member>
        <member name="E:Rock.Web.UI.Controls.BirthdayPicker.SelectedBirthdayChanged">
            <summary>
            Occurs when [selected birthday changed].
            </summary>
        </member>
        <member name="P:Rock.Web.UI.Controls.BirthdayPicker.SelectedDate">
            <summary>
            Gets the selected date.
            </summary>
            <value>
            The selected date.
            </value>
        </member>
        <member name="T:Rock.Web.UI.Controls.LocationItemPicker">
            <summary>
            
            </summary>
        </member>
        <member name="T:Rock.Web.UI.Controls.ItemPicker">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.ItemPicker.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Web.UI.Controls.ItemPicker"/> class.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.ItemPicker.OnInit(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.Init" /> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs" /> object that contains the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.ItemPicker.OnLoad(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.Load" /> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs" /> object that contains the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.ItemPicker.RegisterJavaScript">
            <summary>
            Registers the java script.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.ItemPicker.CreateChildControls">
            <summary>
            Called by the ASP.NET page framework to notify server controls that use composition-based implementation to create any child controls they contain in preparation for posting back or rendering.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.ItemPicker.RenderControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            Outputs server control content to a provided <see cref="T:System.Web.UI.HtmlTextWriter" /> object and stores tracing information about the control if tracing is enabled.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter" /> object that receives the control content.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.ItemPicker.RenderBaseControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            This is where you implment the simple aspects of rendering your control.  The rest
            will be handled by calling RenderControlHelper's RenderControl() method.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.ItemPicker.SelectedValueAsInt(System.Boolean)">
            <summary>
            Gets the selected value as int.
            </summary>
            <param name="noneAsNull">if set to <c>true</c> [none as null].</param>
            <returns></returns>
            <value>
            The selected value as int.
              </value>
        </member>
        <member name="M:Rock.Web.UI.Controls.ItemPicker.SelectedValueAsId">
            <summary>
            Returns the value of the currently selected item.
            It will return NULL if either <see cref="T:Rock.Constants.None"/> or <see cref="T:Rock.Constants.All"/> is selected. />
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.UI.Controls.ItemPicker.SelectedValuesAsInt">
            <summary>
            Selecteds the values as int.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.UI.Controls.ItemPicker.btnSelect_Click(System.Object,System.EventArgs)">
            <summary>
            Handles the Click event of the _btnSelect control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.ItemPicker.SetValue(System.Nullable{System.Int32})">
            <summary>
            Sets the value.
            </summary>
            <param name="id">The id.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.ItemPicker.SetValues(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Sets the values.
            </summary>
            <param name="ids">The ids.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.ItemPicker.SetValueOnSelect">
            <summary>
            Sets the value on select.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.ItemPicker.SetValuesOnSelect">
            <summary>
            Sets the values on select.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.ItemPicker.ShowErrorMessage(System.String)">
            <summary>
            Shows the error message.
            </summary>
            <param name="errorMessage">The error message.</param>
        </member>
        <member name="P:Rock.Web.UI.Controls.ItemPicker.Label">
            <summary>
            Gets or sets the label text.
            </summary>
            <value>
            The label text.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.ItemPicker.IconCssClass">
            <summary>
            Gets or sets the CSS Icon text.
            </summary>
            <value>
            The CSS icon class.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.ItemPicker.Help">
            <summary>
            Gets or sets the help text.
            </summary>
            <value>
            The help text.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.ItemPicker.Required">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Rock.Web.UI.Controls.RockTextBox"/> is required.
            </summary>
            <value>
              <c>true</c> if required; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.ItemPicker.RequiredErrorMessage">
            <summary>
            Gets or sets the required error message.  If blank, the LabelName name will be used
            </summary>
            <value>
            The required error message.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.ItemPicker.ValidationGroup">
            <summary>
            Gets or sets an optional validation group to use.
            </summary>
            <value>
            The validation group.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.ItemPicker.IsValid">
            <summary>
            Gets a value indicating whether this instance is valid.
            </summary>
            <value>
              <c>true</c> if this instance is valid; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.ItemPicker.HelpBlock">
            <summary>
            Gets or sets the help block.
            </summary>
            <value>
            The help block.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.ItemPicker.RequiredFieldValidator">
            <summary>
            Gets or sets the required field validator.
            </summary>
            <value>
            The required field validator.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.ItemPicker.ItemRestUrl">
            <summary>
            Gets the item rest URL.
            </summary>
            <value>
            The item rest URL.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.ItemPicker.ItemRestUrlExtraParams">
            <summary>
            Gets or sets the item rest URL extra params.
            </summary>
            <value>
            The item rest URL extra params.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.ItemPicker.ItemId">
            <summary>
            Gets or sets the item id.
            </summary>
            <value>
            The item id.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.ItemPicker.ItemIds">
            <summary>
            Gets the item ids.
            </summary>
            <value>
            The item ids.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.ItemPicker.InitialItemParentIds">
            <summary>
            Gets or sets the initial item parent ids.
            </summary>
            <value>
            The initial item parent ids.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.ItemPicker.SelectedValue">
            <summary>
            Gets or sets the selected value.
            </summary>
            <value>
            The selected value.  NOTE: If nothing was previously set, it will return <see cref="F:Rock.Constants.None.IdValue"/>.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.ItemPicker.SelectedValues">
            <summary>
            Gets or sets the selected values.
            </summary>
            <value>
            The selected values.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.ItemPicker.ItemName">
            <summary>
            Gets or sets the name of the item.
            </summary>
            <value>
            The name of the item.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.ItemPicker.ItemNames">
            <summary>
            Gets or sets the item names.
            </summary>
            <value>
            The item names.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.ItemPicker.AllowMultiSelect">
            <summary>
            Gets or sets a value indicating whether [allow multi select].
            </summary>
            <value>
              <c>true</c> if [allow multi select]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.ItemPicker.DefaultText">
            <summary>
            Gets or sets the default text.
            </summary>
            <value>
            The default text.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.ItemPicker.ModePanel">
            <summary>
            Gets or sets the mode panel.
            </summary>
            <value>
            The mode panel.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.ItemPicker.ShowDropDown">
            <summary>
            Gets or sets a value indicating whether [show drop down].
            </summary>
            <value>
              <c>true</c> if [show drop down]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.ItemPicker.HidePickerLabel">
            <summary>
            Gets or sets a value indicating whether [hide picker label].
            </summary>
            <value>
              <c>true</c> if [hide picker label]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="E:Rock.Web.UI.Controls.ItemPicker.SelectItem">
            <summary>
            Occurs when [select item].
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.LocationItemPicker.OnInit(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.Init" /> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs" /> object that contains the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.LocationItemPicker.SetValue(Rock.Model.Location)">
            <summary>
            Sets the value.
            </summary>
            <param name="location">The location.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.LocationItemPicker.SetValues(System.Collections.Generic.IEnumerable{Rock.Model.Location})">
            <summary>
            Sets the values.
            </summary>
            <param name="locations">The locations.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.LocationItemPicker.SetValueOnSelect">
            <summary>
            Sets the value on select.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.LocationItemPicker.SetValuesOnSelect">
            <summary>
            Sets the values on select.
            </summary>
        </member>
        <member name="P:Rock.Web.UI.Controls.LocationItemPicker.ItemRestUrl">
            <summary>
            Gets the item rest URL.
            </summary>
            <value>
            The item rest URL.
            </value>
        </member>
        <member name="T:Rock.Web.UI.Controls.LocationAddressPicker">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.LocationAddressPicker.SetValue(Rock.Model.Location)">
            <summary>
            Sets the value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.LocationAddressPicker.OnLoad(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.Load" /> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs" /> object that contains the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.LocationAddressPicker.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders the control to the specified HTML writer.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter" /> object that receives the control content.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.LocationAddressPicker.CreateChildControls">
            <summary>
            Called by the ASP.NET page framework to notify server controls that use composition-based implementation to create any child controls they contain in preparation for posting back or rendering.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.LocationAddressPicker.SetPickerOnClick">
            <summary>
            Sets onclick script for the PickerLabel btn depending on Enabled
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.LocationAddressPicker._btnPickerLabel_Click(System.Object,System.EventArgs)">
            <summary>
            Handles the Click event of the _btnPickerLabel control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.LocationAddressPicker._btnSelect_Click(System.Object,System.EventArgs)">
            <summary>
            Handles the Click event of the _btnSelect control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.LocationAddressPicker._btnSelectNone_ServerClick(System.Object,System.EventArgs)">
            <summary>
            Handles the Click event of the _btnSelectNone control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.LocationAddressPicker.RenderControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            Outputs server control content to a provided <see cref="T:System.Web.UI.HtmlTextWriter" /> object and stores tracing information about the control if tracing is enabled.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter" /> object that receives the control content.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.LocationAddressPicker.RenderBaseControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders the <see cref="T:System.Web.UI.WebControls.TextBox" /> control to the specified <see cref="T:System.Web.UI.HtmlTextWriter" /> object.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter" /> that receives the rendered output.</param>
        </member>
        <member name="P:Rock.Web.UI.Controls.LocationAddressPicker.Label">
            <summary>
            Gets or sets the label text.
            </summary>
            <value>
            The label text.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.LocationAddressPicker.IconCssClass">
            <summary>
            Gets or sets the CSS Icon text.
            </summary>
            <value>
            The CSS icon class.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.LocationAddressPicker.Help">
            <summary>
            Gets or sets the help text.
            </summary>
            <value>
            The help text.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.LocationAddressPicker.Required">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Rock.Web.UI.Controls.RockTextBox"/> is required.
            </summary>
            <value>
              <c>true</c> if required; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.LocationAddressPicker.RequiredErrorMessage">
            <summary>
            Gets or sets the required error message.  If blank, the LabelName name will be used
            </summary>
            <value>
            The required error message.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.LocationAddressPicker.ValidationGroup">
            <summary>
            Gets or sets an optional validation group to use.
            </summary>
            <value>
            The validation group.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.LocationAddressPicker.IsValid">
            <summary>
            Gets a value indicating whether this instance is valid.
            </summary>
            <value>
              <c>true</c> if this instance is valid; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.LocationAddressPicker.HelpBlock">
            <summary>
            Gets or sets the help block.
            </summary>
            <value>
            The help block.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.LocationAddressPicker.RequiredFieldValidator">
            <summary>
            Gets or sets the required field validator.
            </summary>
            <value>
            The required field validator.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.LocationAddressPicker.AddressSummaryText">
            <summary>
            Gets the address summary text.
            </summary>
            <value>
            The address summary text.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.LocationAddressPicker.Location">
            <summary>
            Gets the location.
            </summary>
            <value>
            The location.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.LocationAddressPicker.ModePanel">
            <summary>
            Gets or sets the mode panel.
            </summary>
            <value>
            The mode panel.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.LocationAddressPicker.ShowDropDown">
            <summary>
            Gets or sets a value indicating whether [show drop down].
            </summary>
            <value>
              <c>true</c> if [show drop down]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.LocationAddressPicker.Enabled">
            <summary>
            Gets or sets a value indicating whether the Web server control is enabled.
            </summary>
            <returns>true if control is enabled; otherwise, false. The default is true.</returns>
        </member>
        <member name="T:Rock.Web.UI.Controls.RockControlHelper">
            <summary>
            Helper class to intialize and render rock controls with Bootstrap html elements
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.RockControlHelper.Init(Rock.Web.UI.Controls.IRockControl)">
            <summary>
            Inits the specified rock control.
            </summary>
            <param name="rockControl">The rock control.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.RockControlHelper.CreateChildControls(Rock.Web.UI.Controls.IRockControl,System.Web.UI.ControlCollection)">
            <summary> 
            Creates the child controls and handles adding the required field validator control.
            </summary>
            <param name="rockControl">The rock control.</param>
            <param name="controls">The controls.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.RockControlHelper.RenderControl(Rock.Web.UI.Controls.IRockControl,System.Web.UI.HtmlTextWriter,System.String)">
            <summary>
            Renders the control which handles adding all the IRockControl common pieces (Label, Help, etc.).
            </summary>
            <param name="rockControl">The rock control.</param>
            <param name="writer">The writer.</param>
            <param name="additionalCssClass">The additional CSS class.</param>
        </member>
        <member name="T:Rock.Web.UI.Controls.CodeEditor">
            <summary>
            A <see cref="T:System.Web.UI.WebControls.TextBox"/> control with an associated label.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.CodeEditor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Web.UI.Controls.RockTextBox"/> class.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.CodeEditor.OnInit(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.Init" /> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs" /> object that contains the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.CodeEditor.CreateChildControls">
            <summary>
            Called by the ASP.NET page framework to notify server controls that use composition-based implementation to create any child controls they contain in preparation for posting back or rendering.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.CodeEditor.RenderControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            Outputs server control content to a provided <see cref="T:System.Web.UI.HtmlTextWriter" /> object and stores tracing information about the control if tracing is enabled.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter" /> object that receives the control content.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.CodeEditor.RenderBaseControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders the base control.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.CodeEditor.EditorModeAsString(Rock.Web.UI.Controls.CodeEditorMode)">
            <summary>
            Gets the mode of the editor as text based on property
            </summary>
            <returns>The text value of the mode.</returns>
        </member>
        <member name="M:Rock.Web.UI.Controls.CodeEditor.EditorThemeAsString(Rock.Web.UI.Controls.CodeEditorTheme)">
            <summary>
            Gets the theme of the editor as text based on property
            </summary>
            <returns>The text value of the mode.</returns>
        </member>
        <member name="P:Rock.Web.UI.Controls.CodeEditor.Label">
            <summary>
            Gets or sets the label text.
            </summary>
            <value>
            The label text.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.CodeEditor.Help">
            <summary>
            Gets or sets the help text.
            </summary>
            <value>
            The help text.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.CodeEditor.Required">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Rock.Web.UI.Controls.RockTextBox"/> is required.
            </summary>
            <value>
              <c>true</c> if required; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.CodeEditor.RequiredErrorMessage">
            <summary>
            Gets or sets the required error message.  If blank, the LabelName name will be used
            </summary>
            <value>
            The required error message.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.CodeEditor.IsValid">
            <summary>
            Gets a value indicating whether this instance is valid.
            </summary>
            <value>
              <c>true</c> if this instance is valid; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.CodeEditor.HelpBlock">
            <summary>
            Gets or sets the help block.
            </summary>
            <value>
            The help block.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.CodeEditor.RequiredFieldValidator">
            <summary>
            Gets or sets the required field validator.
            </summary>
            <value>
            The required field validator.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.CodeEditor.ValidationGroup">
            <summary>
            Gets or sets the group of controls for which the <see cref="T:System.Web.UI.WebControls.TextBox" /> control causes validation when it posts back to the server.
            </summary>
            <returns>The group of controls for which the <see cref="T:System.Web.UI.WebControls.TextBox" /> control causes validation when it posts back to the server. The default value is an empty string ("").</returns>
        </member>
        <member name="P:Rock.Web.UI.Controls.CodeEditor.EditorHeight">
            <summary>
            Gets or sets the height.
            </summary>
            <value>
            The height of the control.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.CodeEditor.EditorMode">
            <summary>
            Gets or sets the editor mode (language).
            </summary>
            <value>
            The language of the editor.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.CodeEditor.EditorTheme">
            <summary>
            Gets or sets the editor theme.
            </summary>
            <value>
            The theme of the editor.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.CodeEditor.OnChangeScript">
            <summary>
            Gets or sets the javascript that will get executed when the codeeditor 'on change' event occurs
            </summary>
            <value>
            The on change press script.
            </value>
        </member>
        <member name="T:Rock.Web.UI.Controls.CodeEditorMode">
            <summary>
            The CodeEditor Mode
            </summary>
        </member>
        <member name="F:Rock.Web.UI.Controls.CodeEditorMode.Text">
            <summary>
            text
            </summary>
        </member>
        <member name="F:Rock.Web.UI.Controls.CodeEditorMode.Css">
            <summary>
            CSS
            </summary>
        </member>
        <member name="F:Rock.Web.UI.Controls.CodeEditorMode.Html">
            <summary>
            HTML
            </summary>
        </member>
        <member name="F:Rock.Web.UI.Controls.CodeEditorMode.Liquid">
            <summary>
            liquid
            </summary>
        </member>
        <member name="F:Rock.Web.UI.Controls.CodeEditorMode.JavaScript">
            <summary>
            java script
            </summary>
        </member>
        <member name="F:Rock.Web.UI.Controls.CodeEditorMode.Less">
            <summary>
            less
            </summary>
        </member>
        <member name="F:Rock.Web.UI.Controls.CodeEditorMode.Powershell">
            <summary>
            powershell
            </summary>
        </member>
        <member name="F:Rock.Web.UI.Controls.CodeEditorMode.Sql">
            <summary>
            SQL
            </summary>
        </member>
        <member name="F:Rock.Web.UI.Controls.CodeEditorMode.TypeScript">
            <summary>
            type script
            </summary>
        </member>
        <member name="F:Rock.Web.UI.Controls.CodeEditorMode.CSharp">
            <summary>
            c sharp
            </summary>
        </member>
        <member name="F:Rock.Web.UI.Controls.CodeEditorMode.Markdown">
            <summary>
            markdown
            </summary>
        </member>
        <member name="T:Rock.Web.UI.Controls.CodeEditorTheme">
            <summary>
            The CodeEditor Theme
            </summary>
        </member>
        <member name="F:Rock.Web.UI.Controls.CodeEditorTheme.Rock">
            <summary>
            rock
            </summary>
        </member>
        <member name="F:Rock.Web.UI.Controls.CodeEditorTheme.Chrome">
            <summary>
            chrome
            </summary>
        </member>
        <member name="F:Rock.Web.UI.Controls.CodeEditorTheme.CrimsonEditor">
            <summary>
            crimson editor
            </summary>
        </member>
        <member name="F:Rock.Web.UI.Controls.CodeEditorTheme.Dawn">
            <summary>
            dawn
            </summary>
        </member>
        <member name="F:Rock.Web.UI.Controls.CodeEditorTheme.Dreamweaver">
            <summary>
            dreamweaver
            </summary>
        </member>
        <member name="F:Rock.Web.UI.Controls.CodeEditorTheme.Eclipse">
            <summary>
            eclipse
            </summary>
        </member>
        <member name="F:Rock.Web.UI.Controls.CodeEditorTheme.SolarizedLight">
            <summary>
            solarized light
            </summary>
        </member>
        <member name="F:Rock.Web.UI.Controls.CodeEditorTheme.Textmate">
            <summary>
            textmate
            </summary>
        </member>
        <member name="F:Rock.Web.UI.Controls.CodeEditorTheme.Tomorrow">
            <summary>
            tomorrow
            </summary>
        </member>
        <member name="F:Rock.Web.UI.Controls.CodeEditorTheme.Xcode">
            <summary>
            xcode
            </summary>
        </member>
        <member name="F:Rock.Web.UI.Controls.CodeEditorTheme.Github">
            <summary>
            github
            </summary>
        </member>
        <member name="F:Rock.Web.UI.Controls.CodeEditorTheme.AmbianceDark">
            <summary>
            ambiance dark
            </summary>
        </member>
        <member name="F:Rock.Web.UI.Controls.CodeEditorTheme.ChaosDark">
            <summary>
            chaos dark
            </summary>
        </member>
        <member name="F:Rock.Web.UI.Controls.CodeEditorTheme.CloudsMidnightDark">
            <summary>
            clouds midnight dark
            </summary>
        </member>
        <member name="F:Rock.Web.UI.Controls.CodeEditorTheme.CobaltDark">
            <summary>
            cobalt dark
            </summary>
        </member>
        <member name="F:Rock.Web.UI.Controls.CodeEditorTheme.IdleFingersDark">
            <summary>
            idle fingers dark
            </summary>
        </member>
        <member name="F:Rock.Web.UI.Controls.CodeEditorTheme.krThemeDark">
            <summary>
            kr theme dark
            </summary>
        </member>
        <member name="F:Rock.Web.UI.Controls.CodeEditorTheme.MerbivoreDark">
            <summary>
            merbivore dark
            </summary>
        </member>
        <member name="F:Rock.Web.UI.Controls.CodeEditorTheme.MerbivoreSoftDark">
            <summary>
            merbivore soft dark
            </summary>
        </member>
        <member name="F:Rock.Web.UI.Controls.CodeEditorTheme.MonoIndustrialDark">
            <summary>
            mono industrial dark
            </summary>
        </member>
        <member name="F:Rock.Web.UI.Controls.CodeEditorTheme.MonokaiDark">
            <summary>
            monokai dark
            </summary>
        </member>
        <member name="F:Rock.Web.UI.Controls.CodeEditorTheme.PastelOnDark">
            <summary>
            pastel on dark
            </summary>
        </member>
        <member name="F:Rock.Web.UI.Controls.CodeEditorTheme.SolarizedDark">
            <summary>
            solarized dark
            </summary>
        </member>
        <member name="F:Rock.Web.UI.Controls.CodeEditorTheme.TerminalDark">
            <summary>
            terminal dark
            </summary>
        </member>
        <member name="F:Rock.Web.UI.Controls.CodeEditorTheme.TomorrowNightDark">
            <summary>
            tomorrow night dark
            </summary>
        </member>
        <member name="F:Rock.Web.UI.Controls.CodeEditorTheme.TomorrowNightBlueDark">
            <summary>
            tomorrow night blue dark
            </summary>
        </member>
        <member name="F:Rock.Web.UI.Controls.CodeEditorTheme.TomorrowNightBrightDark">
            <summary>
            tomorrow night bright dark
            </summary>
        </member>
        <member name="F:Rock.Web.UI.Controls.CodeEditorTheme.TomorrowNightEightiesDark">
            <summary>
            tomorrow night eighties dark
            </summary>
        </member>
        <member name="F:Rock.Web.UI.Controls.CodeEditorTheme.TwilightDark">
            <summary>
            twilight dark
            </summary>
        </member>
        <member name="F:Rock.Web.UI.Controls.CodeEditorTheme.VibrantInkDark">
            <summary>
            vibrant ink dark
            </summary>
        </member>
        <member name="T:Rock.Web.UI.Controls.CurrencyBox">
            <summary>
            A <see cref="T:System.Web.UI.WebControls.CurrencyBox"/> control with an associated label.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.CurrencyBox.OnInit(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.Init" /> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs" /> object that contains the event data.</param>
        </member>
        <member name="T:Rock.Web.UI.Controls.TermDescription">
            <summary>
            Renders a term and description
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.TermDescription.RenderControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            Outputs server control content to a provided <see cref="T:System.Web.UI.HtmlTextWriter" /> object and stores tracing information about the control if tracing is enabled.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter" /> object that receives the control content.</param>
        </member>
        <member name="P:Rock.Web.UI.Controls.TermDescription.Term">
            <summary>
            Gets or sets the term.
            </summary>
            <value>
            The term.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.TermDescription.Description">
            <summary>
            Gets or sets the description.
            </summary>
            <value>
            The description.
            </value>
        </member>
        <member name="T:Rock.Web.UI.Controls.DefinedValueField">
            <summary>
            Control for selecting a defined value
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.DefinedValueField.FormatDataValue(System.Object,System.Boolean)">
            <summary>
            Formats the specified field value for a cell in the <see cref="T:System.Web.UI.WebControls.BoundField" /> object.
            </summary>
            <param name="dataValue">The field value to format.</param>
            <param name="encode">true to encode the value; otherwise, false.</param>
            <returns>
            The field value converted to the format specified by <see cref="P:System.Web.UI.WebControls.BoundField.DataFormatString" />.
            </returns>
        </member>
        <member name="T:Rock.Web.UI.Controls.LocationPicker">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.LocationPicker.GetBestPickerModeForLocation(Rock.Model.Location)">
            <summary>
            Gets the best picker mode for location.
            </summary>
            <param name="location">The location.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.UI.Controls.LocationPicker.OnLoad(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.Load" /> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs" /> object that contains the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.LocationPicker.OnPreRender(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.PreRender" /> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs" /> object that contains the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.LocationPicker.CreateChildControls">
            <summary>
            Called by the ASP.NET page framework to notify server controls that use composition-based implementation to create any child controls they contain in preparation for posting back or rendering.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.LocationPicker._pointPicker_SelectGeography(System.Object,System.EventArgs)">
            <summary>
            Handles the SelectGeography event of the _pointPicker control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.LocationPicker._polygonPicker_SelectGeography(System.Object,System.EventArgs)">
            <summary>
            Handles the SelectGeography event of the _polygonPicker control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.LocationPicker.HandleModePostback">
            <summary>
            Handles the CheckedChanged event of the _radMode control.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.LocationPicker.RenderBaseControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders the <see cref="T:System.Web.UI.WebControls.TextBox" /> control to the specified <see cref="T:System.Web.UI.HtmlTextWriter" /> object.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter" /> that receives the rendered output.</param>
        </member>
        <member name="P:Rock.Web.UI.Controls.LocationPicker.AllowedPickerModes">
            <summary>
            Gets or sets the allowed picker modes.
            </summary>
            <value>
            The allowed picker modes.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.LocationPicker.CurrentPickerMode">
            <summary>
            Gets or sets the current picker mode.
            </summary>
            <value>
            The current picker mode.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.LocationPicker.Location">
            <summary>
            Gets or sets the location.
            </summary>
            <value>
            The location.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.LocationPicker.MapStyleValueGuid">
            <summary>
            Gets or sets the map style.
            </summary>
            <value>
            The map style.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.LocationPicker.Label">
            <summary>
            Gets or sets the label.
            </summary>
            <value>
            The label text
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.LocationPicker.Help">
            <summary>
            Gets or sets the help text.
            </summary>
            <value>
            The help text.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.LocationPicker.Required">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Rock.Web.UI.Controls.IRockControl"/> is required.
            </summary>
            <value>
              <c>true</c> if required; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.LocationPicker.RequiredErrorMessage">
            <summary>
            Gets or sets the required error message.  If blank, the LabelName name will be used
            </summary>
            <value>
            The required error message.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.LocationPicker.ValidationGroup">
            <summary>
            Gets or sets an optional validation group to use.
            </summary>
            <value>
            The validation group.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.LocationPicker.IsValid">
            <summary>
            Gets or sets a value indicating whether this instance is valid.
            </summary>
            <value>
              <c>true</c> if this instance is valid; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.LocationPicker.HelpBlock">
            <summary>
            Gets the help block.
            </summary>
            <value>
            The help block.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.LocationPicker.RequiredFieldValidator">
            <summary>
            Gets the required field validator.
            </summary>
            <value>
            The required field validator.
            </value>
        </member>
        <member name="T:Rock.Web.UI.Controls.LocationPickerMode">
            <summary>
            
            </summary>
            <summary>
            Represents the type of <see cref="T:Rock.Model.Location">Locations</see> that should be allowed to be selected using the location picker.
            </summary>
        </member>
        <member name="F:Rock.Web.UI.Controls.LocationPickerMode.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:Rock.Web.UI.Controls.LocationPickerMode.Address">
            <summary>
            An Address
            </summary>
        </member>
        <member name="F:Rock.Web.UI.Controls.LocationPickerMode.Named">
            <summary>
            A Named location (Building, Room)
            </summary>
        </member>
        <member name="F:Rock.Web.UI.Controls.LocationPickerMode.Point">
            <summary>
            A Geographic point (Latitude/Longitude)
            </summary>
        </member>
        <member name="F:Rock.Web.UI.Controls.LocationPickerMode.Polygon">
            <summary>
            A Geographic Polygon
            </summary>
        </member>
        <member name="F:Rock.Web.UI.Controls.LocationPickerMode.All">
            <summary>
            All
            </summary>
        </member>
        <member name="T:Rock.Web.UI.Controls.DateRangePicker">
            <summary>
            Control for selecting a date range
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.DateRangePicker.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Web.UI.Controls.DateRangePicker"/> class.
            </summary>
        </member>
        <member name="F:Rock.Web.UI.Controls.DateRangePicker._tbLowerValue">
            <summary>
            The lower value 
            </summary>
        </member>
        <member name="F:Rock.Web.UI.Controls.DateRangePicker._tbUpperValue">
            <summary>
            The upper value 
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.DateRangePicker.RegisterJavaScript">
            <summary>
            Registers the java script.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.DateRangePicker.CreateChildControls">
            <summary>
            Called by the ASP.NET page framework to notify server controls that use composition-based implementation to create any child controls they contain in preparation for posting back or rendering.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.DateRangePicker.RenderControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            Outputs server control content to a provided <see cref="T:System.Web.UI.HtmlTextWriter" /> object and stores tracing information about the control if tracing is enabled.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter" /> object that receives the control content.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.DateRangePicker.RenderBaseControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            This is where you implment the simple aspects of rendering your control.  The rest
            will be handled by calling RenderControlHelper's RenderControl() method.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.DateRangePicker.FormatDelimitedValues(System.String)">
            <summary>
            Formats the delimited values.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="P:Rock.Web.UI.Controls.DateRangePicker.Label">
            <summary>
            Gets or sets the label text.
            </summary>
            <value>
            The label text.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.DateRangePicker.Help">
            <summary>
            Gets or sets the help text.
            </summary>
            <value>
            The help text.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.DateRangePicker.Required">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Rock.Web.UI.Controls.RockTextBox"/> is required.
            </summary>
            <value>
              <c>true</c> if required; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.DateRangePicker.RequiredErrorMessage">
            <summary>
            Gets or sets the required error message.  If blank, the LabelName name will be used
            </summary>
            <value>
            The required error message.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.DateRangePicker.IsValid">
            <summary>
            Gets a value indicating whether this instance is valid.
            </summary>
            <value>
              <c>true</c> if this instance is valid; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.DateRangePicker.HelpBlock">
            <summary>
            Gets or sets the help block.
            </summary>
            <value>
            The help block.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.DateRangePicker.RequiredFieldValidator">
            <summary>
            Gets or sets the required field validator.
            </summary>
            <value>
            The required field validator.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.DateRangePicker.LowerValue">
            <summary>
            Gets or sets the lower value.
            </summary>
            <value>
            The lower value.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.DateRangePicker.UpperValue">
            <summary>
            Gets or sets the upper value.
            </summary>
            <value>
            The upper value.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.DateRangePicker.ReadOnly">
            <summary>
            Gets or sets a value indicating whether [read only].
            </summary>
            <value>
              <c>true</c> if [read only]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.DateRangePicker.ValidationGroup">
            <summary>
            Gets or sets the validation group.
            </summary>
            <value>
            The validation group.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.DateRangePicker.DelimitedValues">
            <summary>
            Gets or sets the lower and upper values by specifying a comma-delimted lower and upper date
            </summary>
            <value>
            The delimited values.
            </value>
        </member>
        <member name="T:Rock.Web.UI.Controls.CheckBoxEditableField">
            <summary>
            The ASP:CheckBoxField doesn't work very well for retrieving changed values, especially when the value is changed from True to False (weird)
            This CheckBoxEditableField works like the ASP:CheckBoxField except it gives the CheckBox's IDs so their changed values will consistantly persist on postbacks
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.CheckBoxEditableField.Initialize(System.Boolean,System.Web.UI.Control)">
            <summary>
            Performs basic instance initialization for a data control field.
            </summary>
            <param name="sortingEnabled">A value that indicates whether the control supports the sorting of columns of data.</param>
            <param name="control">The data control that owns the <see cref="T:System.Web.UI.WebControls.DataControlField" />.</param>
            <returns>
            Always returns false.
            </returns>
        </member>
        <member name="P:Rock.Web.UI.Controls.CheckBoxEditableField.DataField">
            <summary>
            Gets or sets the data field.
            </summary>
            <value>
            The data field.
            </value>
        </member>
        <member name="T:Rock.Web.UI.Controls.CheckBoxFieldTemplate">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.CheckBoxFieldTemplate.InstantiateIn(System.Web.UI.Control)">
            <summary>
            When implemented by a class, defines the <see cref="T:System.Web.UI.Control" /> object that child controls and templates belong to. These child controls are in turn defined within an inline template.
            </summary>
            <param name="container">The <see cref="T:System.Web.UI.Control" /> object to contain the instances of controls from the inline template.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.CheckBoxFieldTemplate.checkBox_DataBinding(System.Object,System.EventArgs)">
            <summary>
            Handles the DataBinding event of the checkBox control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:Rock.Web.UI.Controls.CheckBoxFieldTemplate.DataField">
            <summary>
            Gets the data field.
            </summary>
            <value>
            The data field.
            </value>
        </member>
        <member name="T:Rock.Web.UI.Controls.ColorField">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.ColorField.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Web.UI.Controls.ColorField"/> class.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.ColorField.FormatDataValue(System.Object,System.Boolean)">
            <summary>
            Formats the specified field value for a cell in the <see cref="T:System.Web.UI.WebControls.BoundField" /> object.
            </summary>
            <param name="dataValue">The field value to format.</param>
            <param name="encode">true to encode the value; otherwise, false.</param>
            <returns>
            The field value converted to the format specified by <see cref="P:System.Web.UI.WebControls.BoundField.DataFormatString" />.
            </returns>
        </member>
        <member name="M:Rock.Web.UI.Controls.ColorField.InitializeDataCell(System.Web.UI.WebControls.DataControlFieldCell,System.Web.UI.WebControls.DataControlRowState)">
            <summary>
            Initializes the specified <see cref="T:System.Web.UI.WebControls.TableCell" /> object to the specified row state.
            </summary>
            <param name="cell">The <see cref="T:System.Web.UI.WebControls.TableCell" /> to initialize.</param>
            <param name="rowState">One of the <see cref="T:System.Web.UI.WebControls.DataControlRowState" /> values.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.ColorField.cell_DataBinding(System.Object,System.EventArgs)">
            <summary>
            Handles the DataBinding event of the cell control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:Rock.Web.UI.Controls.ColorField.ToolTipDataField">
            <summary>
            Gets or sets the tool tip data field.
            </summary>
            <value>
            The tool tip data field.
            </value>
        </member>
        <member name="T:Rock.Web.UI.Controls.RockBulletedList">
            <summary>
            A <see cref="T:System.Web.UI.WebControls.BulletedList"/> control with an associated label.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.RockBulletedList.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Web.UI.Controls.RockBulletedList"/> class.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.RockBulletedList.CreateChildControls">
            <summary>
            Called by the ASP.NET page framework to notify server controls that use composition-based implementation to create any child controls they contain in preparation for posting back or rendering.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.RockBulletedList.RenderControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            Outputs server control content to a provided <see cref="T:System.Web.UI.HtmlTextWriter" /> object and stores tracing information about the control if tracing is enabled.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter" /> object that receives the control content.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.RockBulletedList.RenderBaseControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders the base control.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="P:Rock.Web.UI.Controls.RockBulletedList.Label">
            <summary>
            Gets or sets the label text.
            </summary>
            <value>
            The label text.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.RockBulletedList.Help">
            <summary>
            Gets or sets the help text.
            </summary>
            <value>
            The help text.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.RockBulletedList.Required">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Rock.Web.UI.Controls.RockTextBox"/> is required.
            </summary>
            <value>
              <c>true</c> if required; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.RockBulletedList.RequiredErrorMessage">
            <summary>
            Gets or sets the required error message.  If blank, the LabelName name will be used
            </summary>
            <value>
            The required error message.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.RockBulletedList.ValidationGroup">
            <summary>
            Gets or sets an optional validation group to use.
            </summary>
            <value>
            The validation group.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.RockBulletedList.IsValid">
            <summary>
            Gets a value indicating whether this instance is valid.
            </summary>
            <value>
              <c>true</c> if this instance is valid; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.RockBulletedList.HelpBlock">
            <summary>
            Gets or sets the help block.
            </summary>
            <value>
            The help block.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.RockBulletedList.RequiredFieldValidator">
            <summary>
            Gets or sets the required field validator.
            </summary>
            <value>
            The required field validator.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.RockBulletedList.Items">
            <summary>
            Gets or sets the label text.
            </summary>
            <value>
            The label text.
            </value>
        </member>
        <member name="T:Rock.Web.UI.Controls.NewFamilyAttributes">
            <summary>
            Report Filter control
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.NewFamilyAttributes.RenderControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            Writes the <see cref="T:System.Web.UI.WebControls.CompositeControl" /> content to the specified <see cref="T:System.Web.UI.HtmlTextWriter" /> object, for display on the client.
            </summary>
            <param name="writer">An <see cref="T:System.Web.UI.HtmlTextWriter" /> that represents the output stream to render HTML content on the client.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.NewFamilyAttributes.ClearRows">
            <summary>
            Clears the rows.
            </summary>
        </member>
        <member name="P:Rock.Web.UI.Controls.NewFamilyAttributes.CategoryId">
            <summary>
            Gets or sets the category id.
            </summary>
            <value>
            The category id.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.NewFamilyAttributes.AttributeList">
            <summary>
            Gets or sets the attribute ids.
            </summary>
            <value>
            The attribute ids.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.NewFamilyAttributes.AttributesRows">
            <summary>
            Gets the attributes rows.
            </summary>
            <value>
            The attributes rows.
            </value>
        </member>
        <member name="T:Rock.Web.UI.Controls.NewFamilyAttributesRow">
            <summary>
            Displays a bootstrap badge
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.NewFamilyAttributesRow.SetEditValues(Rock.Model.Person)">
            <summary>
            Sets the edit values.
            </summary>
            <param name="person">The person.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.NewFamilyAttributesRow.GetEditValues(Rock.Model.Person)">
            <summary>
            Gets the edit values.
            </summary>
            <param name="person">The person.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.NewFamilyAttributesRow.CreateChildControls">
            <summary>
            Called by the ASP.NET page framework to notify server controls that use composition-based implementation to create any child controls they contain in preparation for posting back or rendering.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.NewFamilyAttributesRow.RenderControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            Outputs server control content to a provided <see cref="T:System.Web.UI.HtmlTextWriter" /> object and stores tracing information about the control if tracing is enabled.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter" /> object that receives the control content.</param>
        </member>
        <member name="P:Rock.Web.UI.Controls.NewFamilyAttributesRow.PersonGuid">
            <summary>
            Gets or sets the person GUID.
            </summary>
            <value>
            The person GUID.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.NewFamilyAttributesRow.PersonName">
            <summary>
            Gets or sets the name of the person.
            </summary>
            <value>
            The name of the person.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.NewFamilyAttributesRow.AttributeList">
            <summary>
            Gets or sets the attribute ids.
            </summary>
            <value>
            The attribute ids.
            </value>
        </member>
        <member name="T:Rock.Web.UI.Controls.NewFamilyMembers">
            <summary>
            Report Filter control
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.NewFamilyMembers.CreateChildControls">
            <summary>
            Called by the ASP.NET page framework to notify server controls that use composition-based implementation to create any child controls they contain in preparation for posting back or rendering.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.NewFamilyMembers.lbAddFamilyMember_Click(System.Object,System.EventArgs)">
            <summary>
            Handles the Click event of the lbAddFamilyMember control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.NewFamilyMembers.RenderControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            Writes the <see cref="T:System.Web.UI.WebControls.CompositeControl" /> content to the specified <see cref="T:System.Web.UI.HtmlTextWriter" /> object, for display on the client.
            </summary>
            <param name="writer">An <see cref="T:System.Web.UI.HtmlTextWriter" /> that represents the output stream to render HTML content on the client.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.NewFamilyMembers.ClearRows">
            <summary>
            Clears the rows.
            </summary>
        </member>
        <member name="P:Rock.Web.UI.Controls.NewFamilyMembers.FamilyMemberRows">
            <summary>
            Gets the family member rows.
            </summary>
            <value>
            The family member rows.
            </value>
        </member>
        <member name="E:Rock.Web.UI.Controls.NewFamilyMembers.AddFamilyMemberClick">
            <summary>
            Occurs when [add family member click].
            </summary>
        </member>
        <member name="T:Rock.Web.UI.Controls.NewFamilyMembersRow">
            <summary>
            Displays a bootstrap badge
            </summary>
        </member>
        <member name="F:Rock.Web.UI.Controls.NewFamilyMembersRow.FAMILY_ROLE_KEY">
            <summary>
            The Family role key
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.NewFamilyMembersRow.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Web.UI.Controls.NewFamilyMembersRow"/> class.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.NewFamilyMembersRow.CreateChildControls">
            <summary>
            Called by the ASP.NET page framework to notify server controls that use composition-based implementation to create any child controls they contain in preparation for posting back or rendering.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.NewFamilyMembersRow.RenderControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            Outputs server control content to a provided <see cref="T:System.Web.UI.HtmlTextWriter" /> object and stores tracing information about the control if tracing is enabled.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter" /> object that receives the control content.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.NewFamilyMembersRow.BindGender">
            <summary>
            Binds the gender.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.NewFamilyMembersRow.BindListToDefinedType(System.Web.UI.WebControls.ListControl,System.String,System.Boolean)">
            <summary>
            Binds the type of the list to defined.
            </summary>
            <param name="listControl">The list control.</param>
            <param name="definedTypeGuid">The defined type GUID.</param>
            <param name="insertBlankOption">if set to <c>true</c> [insert blank option].</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.NewFamilyMembersRow.SetListValue(System.Web.UI.WebControls.ListControl,System.Nullable{System.Int32})">
            <summary>
            Sets the list value.
            </summary>
            <param name="listControl">The list control.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.NewFamilyMembersRow.SetListValue(System.Web.UI.WebControls.ListControl,System.String)">
            <summary>
            Sets the list value.
            </summary>
            <param name="listControl">The list control.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.NewFamilyMembersRow.rblRole_SelectedIndexChanged(System.Object,System.EventArgs)">
            <summary>
            Handles the SelectedIndexChanged event of the rblRole control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.NewFamilyMembersRow.lbDelete_Click(System.Object,System.EventArgs)">
            <summary>
            Handles the Click event of the lbDelete control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:Rock.Web.UI.Controls.NewFamilyMembersRow.PersonGuid">
            <summary>
            Gets or sets the person GUID.
            </summary>
            <value>
            The person GUID.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.NewFamilyMembersRow.RoleId">
            <summary>
            Gets or sets the role id.
            </summary>
            <value>
            The role id.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.NewFamilyMembersRow.TitleValueId">
            <summary>
            Gets or sets the title value id.
            </summary>
            <value>
            The title value id.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.NewFamilyMembersRow.FirstName">
            <summary>
            Gets or sets the first name.
            </summary>
            <value>
            The first name.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.NewFamilyMembersRow.LastName">
            <summary>
            Gets or sets the last name.
            </summary>
            <value>
            The last name.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.NewFamilyMembersRow.SuffixValueId">
            <summary>
            Gets or sets the suffix value id.
            </summary>
            <value>
            The suffix value id.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.NewFamilyMembersRow.BirthDate">
            <summary>
            Gets or sets the birth date.
            </summary>
            <value>
            The birth date.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.NewFamilyMembersRow.Gender">
            <summary>
            Gets or sets the gender.
            </summary>
            <value>
            The gender.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.NewFamilyMembersRow.ConnectionStatusValueId">
            <summary>
            Gets or sets the connection status value id.
            </summary>
            <value>
            The connection status value id.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.NewFamilyMembersRow.Grade">
            <summary>
            Gets or sets the grade.
            </summary>
            <value>
            The grade.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.NewFamilyMembersRow.FamilyRoles">
            <summary>
            Gets the family roles.
            </summary>
            <value>
            The family roles.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.NewFamilyMembersRow.RequireGender">
            <summary>
            Gets or sets a value indicating whether [require gender].
            </summary>
            <value>
              <c>true</c> if [require gender]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.NewFamilyMembersRow.ShowGrade">
            <summary>
            Gets or sets a value indicating whether [show grade].
            </summary>
            <value>
              <c>true</c> if [show grade]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.NewFamilyMembersRow.RequireGrade">
            <summary>
            Gets or sets a value indicating whether [require grade].
            </summary>
            <value>
            <c>true</c> if [require grade]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.NewFamilyMembersRow.ValidationGroup">
            <summary>
            Gets or sets the validation group.
            </summary>
            <value>
            The validation group.
            </value>
        </member>
        <member name="E:Rock.Web.UI.Controls.NewFamilyMembersRow.RoleUpdated">
            <summary>
            Occurs when [role updated].
            </summary>
        </member>
        <member name="E:Rock.Web.UI.Controls.NewFamilyMembersRow.DeleteClick">
            <summary>
            Occurs when [delete click].
            </summary>
        </member>
        <member name="T:Rock.Web.UI.Controls.NumberRangeEditor">
            <summary>
            Control for selecting a number range
            </summary>
        </member>
        <member name="F:Rock.Web.UI.Controls.NumberRangeEditor._tbLowerValue">
            <summary>
            The lower value edit box
            </summary>
        </member>
        <member name="F:Rock.Web.UI.Controls.NumberRangeEditor._tbUpperValue">
            <summary>
            The upper value edit box
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.NumberRangeEditor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Web.UI.Controls.NumberRangeEditor"/> class.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.NumberRangeEditor.CreateChildControls">
            <summary>
            Called by the ASP.NET page framework to notify server controls that use composition-based implementation to create any child controls they contain in preparation for posting back or rendering.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.NumberRangeEditor.RenderControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            Outputs server control content to a provided <see cref="T:System.Web.UI.HtmlTextWriter" /> object and stores tracing information about the control if tracing is enabled.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter" /> object that receives the control content.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.NumberRangeEditor.RenderBaseControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            This is where you implment the simple aspects of rendering your control.  The rest
            will be handled by calling RenderControlHelper's RenderControl() method.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.NumberRangeEditor.FormatDelimitedValues(System.String,System.String)">
            <summary>
            Formats the delimited values.
            </summary>
            <param name="value">The value.</param>
            <param name="format">The format.</param>
            <returns></returns>
        </member>
        <member name="P:Rock.Web.UI.Controls.NumberRangeEditor.Label">
            <summary>
            Gets or sets the label text.
            </summary>
            <value>
            The label text.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.NumberRangeEditor.Help">
            <summary>
            Gets or sets the help text.
            </summary>
            <value>
            The help text.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.NumberRangeEditor.Required">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Rock.Web.UI.Controls.RockTextBox"/> is required.
            </summary>
            <value>
              <c>true</c> if required; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.NumberRangeEditor.RequiredErrorMessage">
            <summary>
            Gets or sets the required error message.  If blank, the LabelName name will be used
            </summary>
            <value>
            The required error message.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.NumberRangeEditor.ValidationGroup">
            <summary>
            Gets or sets an optional validation group to use.
            </summary>
            <value>
            The validation group.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.NumberRangeEditor.IsValid">
            <summary>
            Gets a value indicating whether this instance is valid.
            </summary>
            <value>
              <c>true</c> if this instance is valid; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.NumberRangeEditor.HelpBlock">
            <summary>
            Gets or sets the help block.
            </summary>
            <value>
            The help block.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.NumberRangeEditor.RequiredFieldValidator">
            <summary>
            Gets or sets the required field validator.
            </summary>
            <value>
            The required field validator.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.NumberRangeEditor.NumberType">
            <summary>
            Gets or sets the type of the number.
            </summary>
            <value>
            The type of the number.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.NumberRangeEditor.MinimumValue">
            <summary>
            Gets or sets the minimum value that either number can be
            </summary>
            <value>
            The minimum value.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.NumberRangeEditor.MaximumValue">
            <summary>
            Gets or sets the maximum value that either number can be
            </summary>
            <value>
            The maximum value.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.NumberRangeEditor.LowerValue">
            <summary>
            Gets or sets the lower value.
            </summary>
            <value>
            The lower value.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.NumberRangeEditor.UpperValue">
            <summary>
            Gets or sets the upper value.
            </summary>
            <value>
            The upper value.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.NumberRangeEditor.DelimitedValues">
            <summary>
            Gets or sets the delimited values.
            </summary>
            <value>
            The delimited values.
            </value>
        </member>
        <member name="T:Rock.Web.UI.Controls.PersonProfileBadge">
            <summary>
            abstract class for controls used to render a Person Profile Badge
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.PersonProfileBadge.LoadViewState(System.Object)">
            <summary>
            Restores view-state information from a previous page request that was saved by the <see cref="M:System.Web.UI.Control.SaveViewState" /> method.
            </summary>
            <param name="savedState">An <see cref="T:System.Object" /> that represents the control state to be restored.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.PersonProfileBadge.SaveViewState">
            <summary>
            Saves any server control view-state changes that have occurred since the time the page was posted back to the server.
            </summary>
            <returns>
            Returns the server control's current view state. If there is no view state associated with the control, this method returns null.
            </returns>
        </member>
        <member name="M:Rock.Web.UI.Controls.PersonProfileBadge.OnInit(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.Init" /> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs" /> object that contains the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.PersonProfileBadge.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Sends server control content to a provided <see cref="T:System.Web.UI.HtmlTextWriter" /> object, which writes the content to be rendered on the client.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter" /> object that receives the server control content.</param>
        </member>
        <member name="P:Rock.Web.UI.Controls.PersonProfileBadge.PersonBadge">
            <summary>
            Gets or sets the name of the badge entity type.
            </summary>
            <value>
            The name of the badge entity type.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.PersonProfileBadge.ParentPersonBlock">
            <summary>
            Gets the parent person block.
            </summary>
            <value>
            The parent person block.
            </value>
        </member>
        <member name="T:Rock.Web.UI.Controls.PersonLink">
            <summary>
            A <see cref="T:System.Web.UI.WebControls.TextBox"/> control with numerical validation 
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.PersonLink.OnInit(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.Init" /> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs" /> object that contains the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.PersonLink.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders the <see cref="T:System.Web.UI.HtmlControls.HtmlContainerControl" /> control to the specified <see cref="T:System.Web.UI.HtmlTextWriter" /> object.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter" /> that receives the <see cref="T:System.Web.UI.HtmlControls.HtmlContainerControl" /> content.</param>
        </member>
        <member name="P:Rock.Web.UI.Controls.PersonLink.PersonId">
            <summary>
            Gets or sets the person id.
            </summary>
            <value>
            The person id.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.PersonLink.PersonName">
            <summary>
            Gets or sets the name of the person.
            </summary>
            <value>
            The name of the person.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.PersonLink.Role">
            <summary>
            Gets or sets the role.
            </summary>
            <value>
            The role.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.PersonLink.PhotoId">
            <summary>
            Gets or sets the photo id.
            </summary>
            <value>
            The photo id.
            </value>
        </member>
        <member name="T:Rock.Web.UI.Controls.HtmlEditor">
            <summary>
            Control for rendering an html editor
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.HtmlEditor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Web.UI.Controls.HtmlEditor"/> class.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.HtmlEditor.OnInit(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.Init" /> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs" /> object that contains the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.HtmlEditor.CreateChildControls">
            <summary>
            Called by the ASP.NET page framework to notify server controls that use composition-based implementation to create any child controls they contain in preparation for posting back or rendering.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.HtmlEditor.RenderControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            Outputs server control content to a provided <see cref="T:System.Web.UI.HtmlTextWriter" /> object and stores tracing information about the control if tracing is enabled.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter" /> object that receives the control content.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.HtmlEditor.RenderBaseControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders the base control.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="P:Rock.Web.UI.Controls.HtmlEditor.Label">
            <summary>
            Gets or sets the label text.
            </summary>
            <value>
            The label text.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.HtmlEditor.Help">
            <summary>
            Gets or sets the help text.
            </summary>
            <value>
            The help text.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.HtmlEditor.Required">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Rock.Web.UI.Controls.RockTextBox"/> is required.
            </summary>
            <value>
              <c>true</c> if required; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.HtmlEditor.RequiredErrorMessage">
            <summary>
            Gets or sets the required error message.  If blank, the LabelName name will be used
            </summary>
            <value>
            The required error message.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.HtmlEditor.IsValid">
            <summary>
            Gets a value indicating whether this instance is valid.
            </summary>
            <value>
              <c>true</c> if this instance is valid; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.HtmlEditor.HelpBlock">
            <summary>
            Gets or sets the help block.
            </summary>
            <value>
            The help block.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.HtmlEditor.RequiredFieldValidator">
            <summary>
            Gets or sets the required field validator.
            </summary>
            <value>
            The required field validator.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.HtmlEditor.ValidationGroup">
            <summary>
            Gets or sets the group of controls for which the <see cref="T:System.Web.UI.WebControls.TextBox" /> control causes validation when it posts back to the server.
            </summary>
            <returns>The group of controls for which the <see cref="T:System.Web.UI.WebControls.TextBox" /> control causes validation when it posts back to the server. The default value is an empty string ("").</returns>
        </member>
        <member name="P:Rock.Web.UI.Controls.HtmlEditor.Toolbar">
            <summary>
            Gets or sets the toolbar.
            </summary>
            <value>
            The toolbar.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.HtmlEditor.ResizeMaxWidth">
            <summary>
            Gets or sets the maximum width of the resize.
            </summary>
            <value>
            The maximum width of the resize.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.HtmlEditor.OnChangeScript">
            <summary>
            Gets or sets the custom javascript that will get executed when the ckeditor 'on change' event occurs
            </summary>
            <value>
            The custom on change press script.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.HtmlEditor.DocumentFolderRoot">
            <summary>
            Gets or sets the document folder root.
            Defaults to ~/Content
            </summary>
            <value>
            The document folder root.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.HtmlEditor.ImageFolderRoot">
            <summary>
            Gets or sets the image folder root.
            Defaults to ~/Content
            </summary>
            <value>
            The image folder root.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.HtmlEditor.UserSpecificRoot">
            <summary>
            Gets or sets a value indicating whether root folder should be specific to user.  If true
            a folder name equal to the the current user's login will be added to the root path.
            </summary>
            <value>
              <c>true</c> if [user specific root]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.HtmlEditor.MergeFields">
            <summary>
            Gets or sets the merge fields to make available.  This should include either a list of
            entity type names (full name), or other non-object string values
            </summary>
            <value>
            The merge fields.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.HtmlEditor.AdditionalConfigurations">
            <summary>
            Gets or sets any additional configuration settings for the CKEditor.  Should be in SettingName: SettingValue, ... format.  
            For example: autoParagrapth: false, enterMode: 3,
            </summary>
            <value>
            The additional configurations.
            </value>
        </member>
        <member name="T:Rock.Web.UI.Controls.HtmlEditor.ToolbarConfig">
            <summary>
            
            </summary>
        </member>
        <member name="F:Rock.Web.UI.Controls.HtmlEditor.ToolbarConfig.Light">
            <summary>
            A lighter more airy view
            </summary>
        </member>
        <member name="F:Rock.Web.UI.Controls.HtmlEditor.ToolbarConfig.Full">
            <summary>
            The full monty
            </summary>
        </member>
        <member name="T:Rock.Web.UI.Controls.PersonProfileBadgeList">
            <summary>
            class for controls used to render a Person Profile Badge
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.PersonProfileBadgeList.LoadViewState(System.Object)">
            <summary>
            Restores view-state information from a previous request that was saved with the <see cref="M:System.Web.UI.WebControls.WebControl.SaveViewState" /> method.
            </summary>
            <param name="savedState">An object that represents the control state to restore.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.PersonProfileBadgeList.SaveViewState">
            <summary>
            Saves any state that was modified after the <see cref="M:System.Web.UI.WebControls.Style.TrackViewState" /> method was invoked.
            </summary>
            <returns>
            An object that contains the current view state of the control; otherwise, if there is no view state associated with the control, null.
            </returns>
        </member>
        <member name="M:Rock.Web.UI.Controls.PersonProfileBadgeList.CreateChildControls">
            <summary>
            Called by the ASP.NET page framework to notify server controls that use composition-based implementation to create any child controls they contain in preparation for posting back or rendering.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.PersonProfileBadgeList.RenderControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            Outputs server control content to a provided <see cref="T:System.Web.UI.HtmlTextWriter" /> object and stores tracing information about the control if tracing is enabled.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter" /> object that receives the control content.</param>
        </member>
        <member name="P:Rock.Web.UI.Controls.PersonProfileBadgeList.PersonBadges">
            <summary>
            Gets or sets the component guids.
            </summary>
            <value>
            The component guids.
            </value>
        </member>
        <member name="T:Rock.Web.UI.Controls.ComponentPicker">
            <summary>
            
            </summary>
        </member>
        <member name="P:Rock.Web.UI.Controls.ComponentPicker.ContainerType">
            <summary>
            Gets or sets the type of the container.
            </summary>
            <value>
            The type of the container.
            </value>
        </member>
        <member name="T:Rock.Web.UI.Controls.ComponentsPicker">
            <summary>
            
            </summary>
        </member>
        <member name="P:Rock.Web.UI.Controls.ComponentsPicker.ContainerType">
            <summary>
            Gets or sets the binary file type id.
            </summary>
            <value>
            The binary file type id.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.ComponentsPicker.SelectedComponents">
            <summary>
            Gets the selected component ids.
            </summary>
            <value>
            The selected component ids.
            </value>
        </member>
        <member name="T:Rock.Web.UI.Controls.GroupTypePicker">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.GroupTypePicker.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Web.UI.Controls.GroupTypePicker"/> class.
            </summary>
        </member>
        <member name="P:Rock.Web.UI.Controls.GroupTypePicker.GroupTypes">
            <summary>
            Gets or sets the group types.
            </summary>
            <value>
            The group types.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.GroupTypePicker.SelectedGroupTypeId">
            <summary>
            Gets the selected groupType ids.
            </summary>
            <value>
            The selected groupType ids.
            </value>
        </member>
        <member name="T:Rock.Web.UI.Controls.GroupRolePicker">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.GroupRolePicker.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Web.UI.Controls.GroupRolePicker"/> class.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.GroupRolePicker.CreateChildControls">
            <summary>
            Called by the ASP.NET page framework to notify server controls that use composition-based implementation to create any child controls they contain in preparation for posting back or rendering.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.GroupRolePicker._ddlGroupType_SelectedIndexChanged(System.Object,System.EventArgs)">
            <summary>
            Handles the SelectedIndexChanged event of the _ddlGroupType control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.GroupRolePicker.RenderControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            Outputs server control content to a provided <see cref="T:System.Web.UI.HtmlTextWriter" /> object and stores tracing information about the control if tracing is enabled.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter" /> object that receives the control content.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.GroupRolePicker.RenderBaseControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders the base control.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.GroupRolePicker.LoadGroupTypes">
            <summary>
            Loads the group types.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.GroupRolePicker.LoadGroupRoles(System.Nullable{System.Int32})">
            <summary>
            Loads the group roles.
            </summary>
            <param name="groupTypeId">The group type unique identifier.</param>
        </member>
        <member name="P:Rock.Web.UI.Controls.GroupRolePicker.Label">
            <summary>
            Gets or sets the label text.
            </summary>
            <value>
            The label text.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.GroupRolePicker.Help">
            <summary>
            Gets or sets the help text.
            </summary>
            <value>
            The help text.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.GroupRolePicker.Required">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Rock.Web.UI.Controls.RockTextBox"/> is required.
            </summary>
            <value>
              <c>true</c> if required; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.GroupRolePicker.RequiredErrorMessage">
            <summary>
            Gets or sets the required error message.  If blank, the LabelName name will be used
            </summary>
            <value>
            The required error message.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.GroupRolePicker.ValidationGroup">
            <summary>
            Gets or sets an optional validation group to use.
            </summary>
            <value>
            The validation group.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.GroupRolePicker.IsValid">
            <summary>
            Gets a value indicating whether this instance is valid.
            </summary>
            <value>
              <c>true</c> if this instance is valid; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.GroupRolePicker.HelpBlock">
            <summary>
            Gets or sets the help block.
            </summary>
            <value>
            The help block.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.GroupRolePicker.RequiredFieldValidator">
            <summary>
            Gets or sets the required field validator.
            </summary>
            <value>
            The required field validator.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.GroupRolePicker.GroupTypeId">
            <summary>
            Gets or sets the group type id.
            </summary>
            <value>
            The group type id.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.GroupRolePicker.GroupRoleId">
            <summary>
            Gets or sets the role id.
            </summary>
            <value>
            The role id.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.GroupRolePicker.ExcludeGroupRoles">
            <summary>
            Gets or sets the exclude group roles.
            </summary>
            <value>
            The exclude group roles.
            </value>
        </member>
        <member name="T:Rock.Web.UI.Controls.GeoPicker">
            <summary>
            This control will create a Google map with drawring tools that
            allows the user to define a single point or a polygon which forms a geo-fence
            depending on the <see cref="F:Rock.Web.UI.Controls.GeoPicker.ManagerDrawingMode.Point"/>.
            
            To use on a page or usercontrol:
            <example>
            <code>
                <![CDATA[<Rock:GeoPicker ID="gpGeoPoint" runat="server" Required="false" Label="Geo Point" DrawingMode="Point" />]]>
            </code>
            </example>
            To set an initial value:
            <example>
            <code>
                gpGeoPoint.SetValue( DbGeography.FromText("POINT(-122.335197 47.646711)") );
            </code>
            </example>
            To access the value after it's been set use the <see cref="P:Rock.Web.UI.Controls.GeoPicker.SelectedValue"/> property:
            <example>
            <code>
               DbGeography point = gpGeoPoint.SelectedValue;
            </code>
            </example>
            
            If you wish to set an appropriate, initial center point you can use the <see cref="P:Rock.Web.UI.Controls.GeoPicker.CenterPoint"/> property.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.GeoPicker.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Web.UI.Controls.GeoPicker"/> class.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.GeoPicker.OnInit(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.Init" /> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs" /> object that contains the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.GeoPicker.CreateChildControls">
            <summary>
            Called by the ASP.NET page framework to notify server controls that use composition-based implementation to create any child controls they contain in preparation for posting back or rendering.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.GeoPicker.RenderControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            Outputs server control content to a provided <see cref="T:System.Web.UI.HtmlTextWriter" /> object and stores tracing information about the control if tracing is enabled.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter" /> object that receives the control content.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.GeoPicker.RenderBaseControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders the base control.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.GeoPicker.SetValue(System.Data.Entity.Spatial.DbGeography)">
            <summary>
            Sets the value. Necessary to preload the geo fence or geo point.
            </summary>
            <param name="dbGeography">The db geography.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.GeoPicker.RegisterJavaScript">
            <summary>
            Registers the java script.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.GeoPicker.ConvertPointToWellKnownText(System.String)">
            <summary>
            Converts single coordinate set (lat,long) into the Well Known Text (WKT) POINT format.
            http://en.wikipedia.org/wiki/Well-known_text
            </summary>
            <param name="latCommaLong"></param>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.UI.Controls.GeoPicker.ConvertPolyToWellKnownText(System.String)">
            <summary>
            Convert string from "lat1,long1|lat2,long2|..." to Well Known Text (WKT)
            http://en.wikipedia.org/wiki/Well-known_text
            format "POLYGON(( long1 lat1, long2 lat2, ...))".  It is expected that the input is a single
            polygon (not a polygon with an inner polygon).
            It will also correct the orientation (clockwise-ness) of the points because DbGeography needs
            them to be in counter-clockwise order.
            </summary>
            <param name="latCommaLongPipe">string of "lat1,long1|lat2,long2|..."</param>
            <returns>A Well Known Text (WKT) POLYGON string suitable for use by DbGeography</returns>
        </member>
        <member name="M:Rock.Web.UI.Controls.GeoPicker.ConvertPointFromWellKnownText(System.String)">
            <summary>
            Convert from WKT format:
            "POINT (long1 lat1)" to "lat1,long1"
            </summary>
            <param name="wkt">a POINT in Well Known Text format</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.UI.Controls.GeoPicker.ConvertPolyFromWellKnownText(System.String)">
            <summary>
            Convert from WKT format:
            "POLYGON ((long1 lat1, long2 lat2, ...))" to "lat1,long1|lat2,long2|..."
            </summary>
            <param name="wkt">a POLYGON in Well Known Text format</param>
            <returns>string suitable for Google Maps polygon geoPicker "lat1,long1|lat2,long2|..."</returns>
        </member>
        <member name="M:Rock.Web.UI.Controls.GeoPicker.IsClockwisePolygon(System.Drawing.PointF[])">
            <summary>
            Attempt to determine if the polygon is clockwise or counter-clockwise.
            Thank you dominoc!  
            http://dominoc925.blogspot.com/2012/03/c-code-to-determine-if-polygon-vertices.html
            </summary>
            <param name="polygon"></param>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.UI.Controls.GeoPicker.btnSelect_Click(System.Object,System.EventArgs)">
            <summary>
            Handles the Click event of the btnSelect control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="P:Rock.Web.UI.Controls.GeoPicker.Label">
            <summary>
            Gets or sets the label text.
            </summary>
            <value>
            The label text.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.GeoPicker.Help">
            <summary>
            Gets or sets the help text.
            </summary>
            <value>
            The help text.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.GeoPicker.Required">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Rock.Web.UI.Controls.RockTextBox"/> is required.
            </summary>
            <value>
              <c>true</c> if required; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.GeoPicker.RequiredErrorMessage">
            <summary>
            Gets or sets the required error message.  If blank, the LabelName name will be used
            </summary>
            <value>
            The required error message.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.GeoPicker.ValidationGroup">
            <summary>
            Gets or sets an optional validation group to use.
            </summary>
            <value>
            The validation group.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.GeoPicker.IsValid">
            <summary>
            Gets a value indicating whether this instance is valid.
            </summary>
            <value>
              <c>true</c> if this instance is valid; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.GeoPicker.HelpBlock">
            <summary>
            Gets or sets the help block.
            </summary>
            <value>
            The help block.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.GeoPicker.RequiredFieldValidator">
            <summary>
            Gets or sets the required field validator.
            </summary>
            <value>
            The required field validator.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.GeoPicker.CenterPoint">
            <summary>
            Gets or sets the point that map should initially be centered on
            </summary>
            <value>
            The center point.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.GeoPicker.SelectedValue">
            <summary>
            Gets or sets the selected value.
            </summary>
            <value>
            The selected value.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.GeoPicker.GeoDisplayName">
            <summary>
            Gets or sets the name of the Geography's display name.  This is what's shown
            to the user before they actually edit the GeoPicker to change its value.
            </summary>
            <value>
            The name of the geography.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.GeoPicker.GeoFence">
            <summary>
            Gets or sets the path of the Geography.
            </summary>
            <value>
            The path/fence of the geography.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.GeoPicker.GeoPoint">
            <summary>
            Gets or sets the point of the Geography.
            </summary>
            <value>
            The path/fence of the geography.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.GeoPicker.DrawingMode">
            <summary>
            Gets or sets a drawing mode indicating whether this <see cref="T:Rock.Web.UI.Controls.GeoPicker"/> is for points or polygons.
            </summary>
            <value>
              DrawingMode.Point or DrawingMode.Polygon
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.GeoPicker.MapStyleValueGuid">
            <summary>
            Gets or sets the drawing style to use on the map.
            </summary>
            <value>
              A style guid as found in the defined values (e.g., Rock, Retro, Old Timey, etc.) for the Map Styles
              defined type (<see cref="F:Rock.SystemGuid.DefinedType.MAP_STYLES"/>). 
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.GeoPicker.ModePanel">
            <summary>
            Gets or sets the mode panel.
            </summary>
            <value>
            The mode panel.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.GeoPicker.ShowDropDown">
            <summary>
            Gets or sets a value indicating whether [show drop down].
            </summary>
            <value>
              <c>true</c> if [show drop down]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="E:Rock.Web.UI.Controls.GeoPicker.SelectGeography">
            <summary>
            Gets or sets the select dbGeography.
            </summary>
            <value>
            The select dbGeography.
            </value>
        </member>
        <member name="T:Rock.Web.UI.Controls.GeoPicker.ManagerDrawingMode">
            <summary>
            Which type of selection to enable
            </summary>
        </member>
        <member name="F:Rock.Web.UI.Controls.GeoPicker.ManagerDrawingMode.Point">
            <summary>
            point
            </summary>
        </member>
        <member name="F:Rock.Web.UI.Controls.GeoPicker.ManagerDrawingMode.Polygon">
            <summary>
            polygon
            </summary>
        </member>
        <member name="T:Rock.Web.UI.Controls.MonthDayPicker">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.MonthDayPicker.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Web.UI.Controls.MonthDayPicker"/> class.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.MonthDayPicker.CreateChildControls">
            <summary>
            Called by the ASP.NET page framework to notify server controls that use composition-based implementation to create any child controls they contain in preparation for posting back or rendering.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.MonthDayPicker.monthDayDropDownList_SelectedIndexChanged(System.Object,System.EventArgs)">
            <summary>
            Handles the SelectedIndexChanged event of the monthDayDropDownList control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.MonthDayPicker.PopulateDropDowns">
            <summary>
            Populates the drop downs.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.MonthDayPicker.RenderControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            Outputs server control content to a provided <see cref="T:System.Web.UI.HtmlTextWriter" /> object and stores tracing information about the control if tracing is enabled.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter" /> object that receives the control content.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.MonthDayPicker.RenderBaseControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders the base control.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="P:Rock.Web.UI.Controls.MonthDayPicker.Label">
            <summary>
            Gets or sets the label text.
            </summary>
            <value>
            The label text.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.MonthDayPicker.Help">
            <summary>
            Gets or sets the help text.
            </summary>
            <value>
            The help text.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.MonthDayPicker.Required">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Rock.Web.UI.Controls.RockTextBox"/> is required.
            </summary>
            <value>
              <c>true</c> if required; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.MonthDayPicker.RequiredErrorMessage">
            <summary>
            Gets or sets the required error message.  If blank, the LabelName name will be used
            </summary>
            <value>
            The required error message.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.MonthDayPicker.ValidationGroup">
            <summary>
            Gets or sets an optional validation group to use.
            </summary>
            <value>
            The validation group.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.MonthDayPicker.IsValid">
            <summary>
            Gets a value indicating whether this instance is valid.
            </summary>
            <value>
              <c>true</c> if this instance is valid; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.MonthDayPicker.HelpBlock">
            <summary>
            Gets or sets the help block.
            </summary>
            <value>
            The help block.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.MonthDayPicker.RequiredFieldValidator">
            <summary>
            Gets or sets the required field validator.
            </summary>
            <value>
            The required field validator.
            </value>
        </member>
        <member name="E:Rock.Web.UI.Controls.MonthDayPicker.SelectedMonthDayChanged">
            <summary>
            Occurs when [selected month day changed].
            </summary>
        </member>
        <member name="P:Rock.Web.UI.Controls.MonthDayPicker.SelectedDate">
            <summary>
            Gets the selected date.
            </summary>
            <value>
            The selected date.
            </value>
        </member>
        <member name="T:Rock.Web.UI.Controls.MonthYearPicker">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.MonthYearPicker.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Web.UI.Controls.MonthYearPicker"/> class.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.MonthYearPicker.CreateChildControls">
            <summary>
            Called by the ASP.NET page framework to notify server controls that use composition-based implementation to create any child controls they contain in preparation for posting back or rendering.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.MonthYearPicker.monthYearDropDownList_SelectedIndexChanged(System.Object,System.EventArgs)">
            <summary>
            Handles the SelectedIndexChanged event of the monthYearDropDownList control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.MonthYearPicker.PopulateDropDowns">
            <summary>
            Populates the drop downs.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.MonthYearPicker.RenderControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            Outputs server control content to a provided <see cref="T:System.Web.UI.HtmlTextWriter" /> object and stores tracing information about the control if tracing is enabled.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter" /> object that receives the control content.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.MonthYearPicker.RenderBaseControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders the base control.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="P:Rock.Web.UI.Controls.MonthYearPicker.Label">
            <summary>
            Gets or sets the label text.
            </summary>
            <value>
            The label text.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.MonthYearPicker.Help">
            <summary>
            Gets or sets the help text.
            </summary>
            <value>
            The help text.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.MonthYearPicker.Required">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Rock.Web.UI.Controls.RockTextBox"/> is required.
            </summary>
            <value>
              <c>true</c> if required; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.MonthYearPicker.RequiredErrorMessage">
            <summary>
            Gets or sets the required error message.  If blank, the LabelName name will be used
            </summary>
            <value>
            The required error message.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.MonthYearPicker.ValidationGroup">
            <summary>
            Gets or sets an optional validation group to use.
            </summary>
            <value>
            The validation group.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.MonthYearPicker.IsValid">
            <summary>
            Gets a value indicating whether this instance is valid.
            </summary>
            <value>
              <c>true</c> if this instance is valid; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.MonthYearPicker.HelpBlock">
            <summary>
            Gets or sets the help block.
            </summary>
            <value>
            The help block.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.MonthYearPicker.RequiredFieldValidator">
            <summary>
            Gets or sets the required field validator.
            </summary>
            <value>
            The required field validator.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.MonthYearPicker.MinimumYear">
            <summary>
            Gets or sets the minimum year.
            </summary>
            <value>
            The minimum year.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.MonthYearPicker.MaximumYear">
            <summary>
            Gets or sets the maximum year.
            </summary>
            <value>
            The maximum year.
            </value>
        </member>
        <member name="E:Rock.Web.UI.Controls.MonthYearPicker.SelectedMonthYearChanged">
            <summary>
            Occurs when [selected month year changed].
            </summary>
        </member>
        <member name="P:Rock.Web.UI.Controls.MonthYearPicker.SelectedDate">
            <summary>
            Gets the selected date.
            </summary>
            <value>
            The selected date.
            </value>
        </member>
        <member name="T:Rock.Web.UI.Controls.CampusPicker">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.CampusPicker.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Web.UI.Controls.CampusPicker"/> class.
            </summary>
        </member>
        <member name="P:Rock.Web.UI.Controls.CampusPicker.Campuses">
            <summary>
            Gets or sets the campuses.
            </summary>
            <value>
            The campuses.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.CampusPicker.SelectedCampusId">
            <summary>
            Gets the selected campus ids.
            </summary>
            <value>
            The selected campus ids.
            </value>
        </member>
        <member name="T:Rock.Web.UI.Controls.DateTimePicker">
            <summary>
            control to select a date time
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.DateTimePicker.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Web.UI.Controls.DateTimePicker"/> class.
            </summary>
        </member>
        <member name="F:Rock.Web.UI.Controls.DateTimePicker._datePicker">
            <summary>
            The date control part of the date/time picker
            </summary>
        </member>
        <member name="F:Rock.Web.UI.Controls.DateTimePicker._timePicker">
            <summary>
            The time control part of the date/time picker
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.DateTimePicker.OnInit(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.Init" /> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs" /> object that contains the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.DateTimePicker.CreateChildControls">
            <summary>
            Called by the ASP.NET page framework to notify server controls that use composition-based implementation to create any child controls they contain in preparation for posting back or rendering.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.DateTimePicker.RenderControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            Outputs server control content to a provided <see cref="T:System.Web.UI.HtmlTextWriter" /> object and stores tracing information about the control if tracing is enabled.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter" /> object that receives the control content.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.DateTimePicker.RenderBaseControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            This is where you implment the simple aspects of rendering your control.  The rest
            will be handled by calling RenderControlHelper's RenderControl() method.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="P:Rock.Web.UI.Controls.DateTimePicker.Label">
            <summary>
            Gets or sets the label text.
            </summary>
            <value>
            The label text.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.DateTimePicker.Help">
            <summary>
            Gets or sets the help text.
            </summary>
            <value>
            The help text.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.DateTimePicker.Required">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Rock.Web.UI.Controls.RockTextBox"/> is required.
            </summary>
            <value>
              <c>true</c> if required; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.DateTimePicker.RequiredErrorMessage">
            <summary>
            Gets or sets the required error message.  If blank, the LabelName name will be used
            </summary>
            <value>
            The required error message.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.DateTimePicker.IsValid">
            <summary>
            Gets a value indicating whether this instance is valid.
            </summary>
            <value>
              <c>true</c> if this instance is valid; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.DateTimePicker.HelpBlock">
            <summary>
            Gets or sets the help block.
            </summary>
            <value>
            The help block.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.DateTimePicker.RequiredFieldValidator">
            <summary>
            Gets or sets the required field validator.
            </summary>
            <value>
            The required field validator.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.DateTimePicker.ValidationGroup">
            <summary>
            Gets or sets the validation group.
            </summary>
            <value>
            The validation group.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.DateTimePicker.SelectedDateTimeIsBlank">
            <summary>
            Gets a value indicating whether [selected date time is blank].
            </summary>
            <value>
            <c>true</c> if [selected date time is blank]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.DateTimePicker.SelectedDateTime">
            <summary>
            Gets or sets the selected date time.  Defaults to Today if blank
            </summary>
            <value>
            The selected date time.
            </value>
        </member>
        <member name="T:Rock.Web.UI.Controls.TagList">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.TagList.OnInit(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.Init" /> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs" /> object that contains the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.TagList.RenderControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            Outputs server control content to a provided <see cref="T:System.Web.UI.HtmlTextWriter" /> object and stores tracing information about the control if tracing is enabled.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter" /> object that receives the control content.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.TagList.GetTagValues(System.Nullable{System.Int32})">
            <summary>
            Updates the control with the current tags that exist for the current entity
            </summary>
            <param name="currentPersonId">The current person identifier.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.TagList.SaveTagValues(Rock.Model.PersonAlias)">
            <summary>
            Saves the tag values that user entered for the entity (
            </summary>
            <param name="personAlias">The person alias.</param>
        </member>
        <member name="P:Rock.Web.UI.Controls.TagList.EntityTypeId">
            <summary>
            Gets or sets the entity type id.
            </summary>
            <value>
            The entity type id.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.TagList.EntityQualifierColumn">
            <summary>
            Gets or sets the entity qualifier column.
            </summary>
            <value>
            The entity qualifier column.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.TagList.EntityQualifierValue">
            <summary>
            Gets or sets the entity qualifier value.
            </summary>
            <value>
            The entity qualifier value.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.TagList.EntityGuid">
            <summary>
            Gets or sets the entity GUID.
            </summary>
            <value>
            The entity GUID.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.TagList.AllowNewTags">
            <summary>
            Gets or sets a value indicating whether user should be able to create new tags
            </summary>
            <value>
              <c>true</c> if [allow new tags]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.TagList.DelaySave">
            <summary>
            Gets or sets a value indicating whether tags should not be created immediately.
            </summary>
            <value>
              <c>true</c> if true, tags will not be created as they are entered by user.  
              Instead the SaveTagValues() method will need to be called to save the tags
            </value>
        </member>
        <member name="T:Rock.Web.UI.Controls.DatePicker">
            <summary>
            
            </summary>
        </member>
        <member name="T:Rock.Web.UI.Controls.DataTextBox">
            <summary>
            A composite control that renders a label, textbox, and datavalidation control for a specific field of a data model
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.DataTextBox.ShowErrorMessage(System.String)">
            <summary>
            Shows the error message.
            </summary>
            <param name="errorMessage">The error message.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.DataTextBox.CreateChildControls">
            <summary>
            Called by the ASP.NET page framework to notify server controls that use composition-based implementation to create any child controls they contain in preparation for posting back or rendering.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.DataTextBox.RenderDataValidator(System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders any data validators.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="P:Rock.Web.UI.Controls.DataTextBox.SourceTypeName">
            <summary>
            Gets or sets the name of the assembly qualified name of the entity that is being validated
            </summary>
            <value>
            The name of the assembly qualified type name.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.DataTextBox.PropertyName">
            <summary>
            Gets or sets the name of the entity property.
            </summary>
            <value>
            The name of the entity property.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.DataTextBox.ValidationGroup">
            <summary>
            Gets or sets the group of controls for which the <see cref="T:System.Web.UI.WebControls.TextBox" /> control causes validation when it posts back to the server.
            </summary>
            <returns>The group of controls for which the <see cref="T:System.Web.UI.WebControls.TextBox" /> control causes validation when it posts back to the server. The default value is an empty string ("").</returns>
        </member>
        <member name="P:Rock.Web.UI.Controls.DataTextBox.LabelTextFromPropertyName">
            <summary>
            Gets or sets a value indicating whether [get label from property name].
            Default = True
            </summary>
            <value>
            <c>true</c> if [get label from property name]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.DataTextBox.IsValid">
            <summary>
            Gets a value indicating whether this instance is valid.
            </summary>
            <value>
              <c>true</c> if this instance is valid; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Rock.Web.UI.Controls.DatePicker.OnInit(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.Init" /> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs" /> object that contains the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.DatePicker.RenderControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            Outputs server control content to a provided <see cref="T:System.Web.UI.HtmlTextWriter" /> object and stores tracing information about the control if tracing is enabled.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter" /> object that receives the control content.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.DatePicker.RegisterJavascript">
            <summary>
            Registers the javascript.
            </summary>
        </member>
        <member name="P:Rock.Web.UI.Controls.DatePicker.StartView">
            <summary>
            Gets or sets the start view.
            </summary>
            <value>
            The start view.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.DatePicker.SelectedDate">
            <summary>
            Gets the selected date.
            </summary>
            <value>
            The selected date.
            </value>
        </member>
        <member name="T:Rock.Web.UI.Controls.DatePicker.StartViewOption">
            <summary>
            The mode to start in when first displaying selection window
            </summary>
        </member>
        <member name="F:Rock.Web.UI.Controls.DatePicker.StartViewOption.month">
            <summary>
            Month
            </summary>
        </member>
        <member name="F:Rock.Web.UI.Controls.DatePicker.StartViewOption.year">
            <summary>
            Year
            </summary>
        </member>
        <member name="F:Rock.Web.UI.Controls.DatePicker.StartViewOption.decade">
            <summary>
            Decade
            </summary>
        </member>
        <member name="T:Rock.Web.UI.Controls.TimePicker">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.TimePicker.OnInit(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.Init" /> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs" /> object that contains the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.TimePicker.RegisterJavascript">
            <summary>
            Registers the javascript.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.TimePicker.RenderControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            Outputs server control content to a provided <see cref="T:System.Web.UI.HtmlTextWriter" /> object and stores tracing information about the control if tracing is enabled.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter" /> object that receives the control content.</param>
        </member>
        <member name="P:Rock.Web.UI.Controls.TimePicker.SelectedTime">
            <summary>
            Gets or sets the selected time.
            </summary>
            <value>
            The selected time.
            </value>
        </member>
        <member name="T:Rock.Web.UI.Controls.MergeFieldPicker">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.MergeFieldPicker.OnInit(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.Init" /> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs" /> object that contains the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.MergeFieldPicker.OnLoad(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.Load" /> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs" /> object that contains the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.MergeFieldPicker.SetValue(System.String)">
            <summary>
            Sets the value.
            </summary>
            <param name="nodePath">The node path.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.MergeFieldPicker.SetValues(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Sets the values.
            </summary>
            <param name="nodePaths">The node paths.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.MergeFieldPicker.SetValueOnSelect">
            <summary>
            Sets the value on select.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.MergeFieldPicker.SetValuesOnSelect">
            <summary>
            Sets the values on select.
            </summary>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Rock.Web.UI.Controls.MergeFieldPicker.FormatSelectedValue(System.String)">
            <summary>
            Formats the selected value (node path) into a liquid merge field.
            </summary>
            <param name="selectedValue">The selected value.</param>
            <returns></returns>
        </member>
        <member name="P:Rock.Web.UI.Controls.MergeFieldPicker.MergeFields">
            <summary>
            Gets or sets the merge fields.
            </summary>
            <value>
            The merge fields.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.MergeFieldPicker.ItemRestUrl">
            <summary>
            Gets the item rest URL.
            </summary>
            <value>
            The item rest URL.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.MergeFieldPicker.SelectedMergeField">
            <summary>
            The selected merge field.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Rock.Web.UI.Controls.PersonPicker">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.PersonPicker.SetValue(Rock.Model.Person)">
            <summary>
            Sets the value.
            </summary>
            <param name="person">The person.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.PersonPicker.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Web.UI.Controls.PersonPicker"/> class.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.PersonPicker.OnInit(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.Init" /> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs" /> object that contains the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.PersonPicker.RegisterJavaScript">
            <summary>
            Registers the java script.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.PersonPicker.CreateChildControls">
            <summary>
            Called by the ASP.NET page framework to notify server controls that use composition-based implementation to create any child controls they contain in preparation for posting back or rendering.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.PersonPicker.RenderControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            Outputs server control content to a provided <see cref="T:System.Web.UI.HtmlTextWriter" /> object and stores tracing information about the control if tracing is enabled.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter" /> object that receives the control content.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.PersonPicker.RenderBaseControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders the <see cref="T:System.Web.UI.WebControls.TextBox" /> control to the specified <see cref="T:System.Web.UI.HtmlTextWriter" /> object.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter" /> that receives the rendered output.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.PersonPicker.btnSelect_Click(System.Object,System.EventArgs)">
            <summary>
            Handles the Click event of the btnSelect control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="P:Rock.Web.UI.Controls.PersonPicker.Label">
            <summary>
            Gets or sets the label text.
            </summary>
            <value>
            The label text.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.PersonPicker.IconCssClass">
            <summary>
            Gets or sets the CSS Icon text.
            </summary>
            <value>
            The CSS icon class.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.PersonPicker.Help">
            <summary>
            Gets or sets the help text.
            </summary>
            <value>
            The help text.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.PersonPicker.Required">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Rock.Web.UI.Controls.RockTextBox"/> is required.
            </summary>
            <value>
              <c>true</c> if required; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.PersonPicker.RequiredErrorMessage">
            <summary>
            Gets or sets the required error message.  If blank, the LabelName name will be used
            </summary>
            <value>
            The required error message.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.PersonPicker.ValidationGroup">
            <summary>
            Gets or sets an optional validation group to use.
            </summary>
            <value>
            The validation group.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.PersonPicker.IsValid">
            <summary>
            Gets a value indicating whether this instance is valid.
            </summary>
            <value>
              <c>true</c> if this instance is valid; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.PersonPicker.HelpBlock">
            <summary>
            Gets or sets the help block.
            </summary>
            <value>
            The help block.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.PersonPicker.RequiredFieldValidator">
            <summary>
            Gets or sets the required field validator.
            </summary>
            <value>
            The required field validator.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.PersonPicker.PersonId">
            <summary>
            Gets or sets the person id.
            </summary>
            <value>
            The person id.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.PersonPicker.SelectedValue">
            <summary>
            Gets or sets the selected value.
            </summary>
            <value>
            The selected value.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.PersonPicker.PersonName">
            <summary>
            Gets or sets the name of the person.
            </summary>
            <value>
            The name of the person.
            </value>
        </member>
        <member name="E:Rock.Web.UI.Controls.PersonPicker.SelectPerson">
            <summary>
            Gets or sets the select person.
            </summary>
            <value>
            The select person.
            </value>
        </member>
        <member name="T:Rock.Web.UI.Controls.TreeViewItem">
            <summary>
            
            </summary>
        </member>
        <member name="P:Rock.Web.UI.Controls.TreeViewItem.Id">
            <summary>
            Gets or sets the id.
            </summary>
            <value>
            The id.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.TreeViewItem.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.TreeViewItem.HasChildren">
            <summary>
            Gets or sets a value indicating whether this instance has children.
            </summary>
            <value>
            <c>true</c> if this instance has children; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.TreeViewItem.IconCssClass">
            <summary>
            Gets or sets the icon CSS class.
            </summary>
            <value>
            The icon CSS class.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.TreeViewItem.IconSmallUrl">
            <summary>
            Gets or sets an image url.
            </summary>
            <value>
            The image url.
            </value>
        </member>
        <member name="T:Rock.Web.UI.Controls.NumberBox">
            <summary>
            A <see cref="T:System.Web.UI.WebControls.TextBox"/> control with numerical validation 
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.NumberBox.CreateChildControls">
            <summary>
            Called by the ASP.NET page framework to notify server controls that use composition-based implementation to create any child controls they contain in preparation for posting back or rendering.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.NumberBox.RenderDataValidator(System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders any data validator.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="P:Rock.Web.UI.Controls.NumberBox.FieldName">
            <summary>
            Gets or sets the name of the field (for range validation messages when Label is not provided)
            </summary>
            <value>
            The name of the field.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.NumberBox.NumberType">
            <summary>
            Gets or sets the type of the validation data.
            </summary>
            <value>
            The type of the validation data.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.NumberBox.MinimumValue">
            <summary>
            Gets or sets the minimum value.
            </summary>
            <value>
            The minimum value.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.NumberBox.MaximumValue">
            <summary>
            Gets or sets the maximum value.
            </summary>
            <value>
            The maximum value.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.NumberBox.IsValid">
            <summary>
            Gets a value indicating whether this instance is valid.
            </summary>
            <value>
              <c>true</c> if this instance is valid; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Rock.Web.UI.Controls.PageBreadCrumbs">
            <summary>
            Displays a bootstrap badge
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.PageBreadCrumbs.RenderControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            Outputs server control content to a provided <see cref="T:System.Web.UI.HtmlTextWriter" /> object and stores tracing information about the control if tracing is enabled.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter" /> object that receives the control content.</param>
        </member>
        <member name="P:Rock.Web.UI.Controls.PageBreadCrumbs.PreText">
            <summary>
            Gets or sets the javascript that will get executed when the ckeditor 'on key' event occurs
            </summary>
            <value>
            The on key press script.
            </value>
        </member>
        <member name="T:Rock.Web.UI.Controls.PageDescription">
            <summary>
            Renders the description of a page
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.PageDescription.RenderControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            Outputs server control content to a provided <see cref="T:System.Web.UI.HtmlTextWriter" /> object and stores tracing information about the control if tracing is enabled.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter" /> object that receives the control content.</param>
        </member>
        <member name="T:Rock.Web.UI.Controls.PageIcon">
            <summary>
            Renders the icon of a page
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.PageIcon.RenderControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            Outputs server control content to a provided <see cref="T:System.Web.UI.HtmlTextWriter" /> object and stores tracing information about the control if tracing is enabled.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter" /> object that receives the control content.</param>
        </member>
        <member name="T:Rock.Web.UI.Controls.CategoryPicker">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.CategoryPicker.OnInit(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.Init" /> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs" /> object that contains the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.CategoryPicker.SetValue(Rock.Model.Category)">
            <summary>
            Sets the value.
            </summary>
            <param name="category">The category.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.CategoryPicker.SetValues(System.Collections.Generic.IEnumerable{Rock.Model.Category})">
            <summary>
            Sets the values.
            </summary>
            <param name="categories">The categories.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.CategoryPicker.SetValueOnSelect">
            <summary>
            Sets the value on select.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.CategoryPicker.SetValuesOnSelect">
            <summary>
            Sets the values on select.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.CategoryPicker.SetExtraRestParams">
            <summary>
            Sets the extra rest params.
            </summary>
        </member>
        <member name="P:Rock.Web.UI.Controls.CategoryPicker.ItemRestUrl">
            <summary>
            Gets the item rest URL.
            </summary>
            <value>
            The item rest URL.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.CategoryPicker.EntityTypeName">
            <summary>
            Sets the type of the category entity.
            </summary>
            <value>
            The type of the category entity.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.CategoryPicker.EntityTypeId">
            <summary>
            Gets or sets the entity type id.
            </summary>
            <value>
            The entity type id.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.CategoryPicker.EntityTypeQualifierColumn">
            <summary>
            Gets or sets the entity type qualifier column.
            </summary>
            <value>
            The entity type qualifier column.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.CategoryPicker.EntityTypeQualifierValue">
            <summary>
            Gets or sets the entity type qualifier value.
            </summary>
            <value>
            The entity type qualifier value.
            </value>
        </member>
        <member name="T:Rock.Web.UI.Controls.BinaryFileTypePicker">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.BinaryFileTypePicker.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Web.UI.Controls.BinaryFileTypePicker"/> class.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.BinaryFileTypePicker.SelectedValueAsInt(System.Boolean)">
            <summary>
            Selects the value as int.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Rock.Web.UI.Controls.BinaryFilePicker">
            <summary>
            
            </summary>
        </member>
        <member name="P:Rock.Web.UI.Controls.BinaryFilePicker.BinaryFileTypeId">
            <summary>
            Gets or sets the binary file type id.
            </summary>
            <value>
            The binary file type id.
            </value>
        </member>
        <member name="T:Rock.Web.UI.Controls.AccountPicker">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.AccountPicker.OnInit(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.Init" /> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs" /> object that contains the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.AccountPicker.SetValue(Rock.Model.FinancialAccount)">
            <summary>
            Sets the value.
            </summary>
            <param name="account">The account.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.AccountPicker.SetValues(System.Collections.Generic.IEnumerable{Rock.Model.FinancialAccount})">
            <summary>
            Sets the values.
            </summary>
            <param name="accounts">The accounts.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.AccountPicker.SetValueOnSelect">
            <summary>
            Sets the value on select.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.AccountPicker.SetValuesOnSelect">
            <summary>
            Sets the values on select.
            </summary>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="P:Rock.Web.UI.Controls.AccountPicker.ItemRestUrl">
            <summary>
            Gets the item rest URL.
            </summary>
            <value>
            The item rest URL.
            </value>
        </member>
        <member name="T:Rock.Web.UI.Controls.WorkflowTypePicker">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.WorkflowTypePicker.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Web.UI.Controls.WorkflowTypePicker"/> class.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.WorkflowTypePicker.SelectedValueAsInt(System.Boolean)">
            <summary>
            Selects the value as int.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Rock.Web.UI.Controls.GroupPicker">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.GroupPicker.OnInit(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.Init" /> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs" /> object that contains the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.GroupPicker.SetValue(Rock.Model.Group)">
            <summary>
            Sets the value.
            </summary>
            <param name="group">The group.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.GroupPicker.SetValues(System.Collections.Generic.IEnumerable{Rock.Model.Group})">
            <summary>
            Sets the values.
            </summary>
            <param name="groups">The groups.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.GroupPicker.SetValueOnSelect">
            <summary>
            Sets the value on select.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.GroupPicker.SetValuesOnSelect">
            <summary>
            Sets the values on select.
            </summary>
        </member>
        <member name="P:Rock.Web.UI.Controls.GroupPicker.ItemRestUrl">
            <summary>
            Gets the item rest URL.
            </summary>
            <value>
            The item rest URL.
            </value>
        </member>
        <member name="T:Rock.Web.UI.Controls.HiddenFieldValidator">
            <summary>
            from http://stackoverflow.com/questions/6607984/asprequiredfieldvalidator-does-not-validate-hidden-fields
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.HiddenFieldValidator.ControlPropertiesValid">
            <summary>
            Determines whether the control specified by the <see cref="P:System.Web.UI.WebControls.BaseValidator.ControlToValidate" /> property is a valid control.
            </summary>
            <returns>
            true if the control specified by <see cref="P:System.Web.UI.WebControls.BaseValidator.ControlToValidate" /> is a valid control; otherwise, false.
            </returns>
        </member>
        <member name="T:Rock.Web.UI.Controls.FileUploader">
            <summary>
            A control to select a file and set any attributes
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.FileUploader.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Web.UI.Controls.FileUploader"/> class.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.FileUploader.CreateChildControls">
            <summary>
            Called by the ASP.NET page framework to notify server controls that use composition-based implementation to create any child controls they contain in preparation for posting back or rendering.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.FileUploader.RenderControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            Outputs server control content to a provided <see cref="T:System.Web.UI.HtmlTextWriter" /> object and stores tracing information about the control if tracing is enabled.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter" /> object that receives the control content.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.FileUploader.RenderBaseControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            This is where you implment the simple aspects of rendering your control.  The rest
            will be handled by calling RenderControlHelper's RenderControl() method.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.FileUploader.RegisterStartupScript">
            <summary>
            Registers the startup script.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.FileUploader.RaisePostBackEvent(System.String)">
            <summary>
            When implemented by a class, enables a server control to process an event raised when a form is posted to the server.
            </summary>
            <param name="eventArgument">A <see cref="T:System.String" /> that represents an optional event argument to be passed to the event handler.</param>
        </member>
        <member name="P:Rock.Web.UI.Controls.FileUploader.Label">
            <summary>
            Gets or sets the label text.
            </summary>
            <value>
            The label text.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.FileUploader.Help">
            <summary>
            Gets or sets the help text.
            </summary>
            <value>
            The help text.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.FileUploader.Required">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Rock.Web.UI.Controls.RockTextBox"/> is required.
            </summary>
            <value>
              <c>true</c> if required; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.FileUploader.RequiredErrorMessage">
            <summary>
            Gets or sets the required error message.  If blank, the LabelName name will be used
            </summary>
            <value>
            The required error message.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.FileUploader.ValidationGroup">
            <summary>
            Gets or sets an optional validation group to use.
            </summary>
            <value>
            The validation group.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.FileUploader.IsValid">
            <summary>
            Gets a value indicating whether this instance is valid.
            </summary>
            <value>
              <c>true</c> if this instance is valid; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.FileUploader.HelpBlock">
            <summary>
            Gets or sets the help block.
            </summary>
            <value>
            The help block.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.FileUploader.RequiredFieldValidator">
            <summary>
            Gets or sets the required field validator.
            </summary>
            <value>
            The required field validator.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.FileUploader.BinaryFileId">
            <summary>
            Gets or sets the binary file id.
            </summary>
            <value>
            The binary file id.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.FileUploader.BinaryFileTypeGuid">
            <summary>
            Gets or sets the binary file type GUID.
            </summary>
            <value>
            The binary file type GUID.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.FileUploader.UploadedContentFilePath">
            <summary>
            Gets the uploaded content file path.
            </summary>
            <value>
            The uploaded content file path.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.FileUploader.IsBinaryFile">
            <summary>
            Gets or sets a value indicating whether [is binary file].
            </summary>
            <value>
              <c>true</c> if [is binary file]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.FileUploader.RootFolder">
            <summary>
            Gets or sets the root folder.
            </summary>
            <value>
            The root folder.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.FileUploader.UploadUrl">
            <summary>
            Gets or sets the upload URL.
            </summary>
            <value>
            The upload URL.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.FileUploader.ShowDeleteButton">
            <summary>
            Gets or sets a value indicating whether [show delete button].
            Defaults to true
            </summary>
            <value>
              <c>true</c> if [show delete button]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.FileUploader.SubmitFunctionClientScript">
            <summary>
            Gets or sets the submit function client script.
            </summary>
            <value>
            The submit function client script.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.FileUploader.DoneFunctionClientScript">
            <summary>
            Gets or sets the done function client script.
            </summary>
            <value>
            The done function client script.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.FileUploader.DisplayMode">
            <summary>
            Gets or sets the display mode.
            </summary>
            <value>
            The display mode.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.FileUploader.Enabled">
            <summary>
            Gets or sets a value indicating whether the Web server control is enabled.
            </summary>
            <returns>true if control is enabled; otherwise, false. The default is true.</returns>
        </member>
        <member name="E:Rock.Web.UI.Controls.FileUploader.FileUploaded">
            <summary>
            Occurs when a file is uploaded.
            </summary>
        </member>
        <member name="T:Rock.Web.UI.Controls.FileUploader.UploaderDisplayMode">
            <summary>
            
            </summary>
        </member>
        <member name="F:Rock.Web.UI.Controls.FileUploader.UploaderDisplayMode.DropZone">
            <summary>
            As a dropzone
            </summary>
        </member>
        <member name="F:Rock.Web.UI.Controls.FileUploader.UploaderDisplayMode.Button">
            <summary>
            As a button
            </summary>
        </member>
        <member name="T:Rock.Web.UI.Controls.PagePicker">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.PagePicker.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Web.UI.Controls.PagePicker"/> class.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.PagePicker.OnInit(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.Init" /> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs" /> object that contains the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.PagePicker.SetValue(Rock.Model.PageRoute)">
            <summary>
            Sets the value.
            </summary>
            <param name="pageRoute">The page route.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.PagePicker.SetValue(Rock.Model.Page)">
            <summary>
            Sets the value.
            </summary>
            <param name="page">The page.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.PagePicker.SetValues(System.Collections.Generic.IEnumerable{Rock.Model.Page})">
            <summary>
            Sets the values.
            </summary>
            <param name="pages">The pages.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.PagePicker.SetValueOnSelect">
            <summary>
            Handles the Click event of the btnSelect control.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.PagePicker.SetValuesOnSelect">
            <summary>
            Sets the values on select.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.PagePicker.CreateChildControls">
            <summary>
            Called by the ASP.NET page framework to notify server controls that use composition-based implementation to create any child controls they contain in preparation for posting back or rendering.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.PagePicker._btnSelectPageRoute_Click(System.Object,System.EventArgs)">
            <summary>
            Handles the Click event of the _btnSelectPageRoute control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.PagePicker.RenderBaseControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            This is where you implment the simple aspects of rendering your control.  The rest
            will be handled by calling RenderControlHelper's RenderControl() method.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="P:Rock.Web.UI.Controls.PagePicker.PromptForPageRoute">
            <summary>
            Gets or sets a value indicating whether [prompt for page route].
            </summary>
            <value>
              <c>true</c> if [prompt for page route]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.PagePicker.HiddenPageIds">
            <summary>
            Gets or sets the hidden page ids.
            </summary>
            <value>
            The hidden page ids.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.PagePicker.PageId">
            <summary>
            Gets the page unique identifier.
            </summary>
            <value>
            The page unique identifier.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.PagePicker.PageRouteId">
            <summary>
            Gets or sets the page route unique identifier.
            </summary>
            <value>
            The page route unique identifier.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.PagePicker.IsPageRoute">
            <summary>
            Determines whether [is page route].
            </summary>
            <returns></returns>
        </member>
        <member name="P:Rock.Web.UI.Controls.PagePicker.ItemRestUrl">
            <summary>
            Gets the item rest URL.
            </summary>
            <value>
            The item rest URL.
            </value>
        </member>
        <member name="T:Rock.Web.UI.Controls.KeyValueList">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.KeyValueList.RenderControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            Outputs server control content to a provided <see cref="T:System.Web.UI.HtmlTextWriter" /> object and stores tracing information about the control if tracing is enabled.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter" /> object that receives the control content.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.KeyValueList.RegisterClientScript">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.Init" /> event.
            </summary>
            <param name="values">The values.</param>
        </member>
        <member name="P:Rock.Web.UI.Controls.KeyValueList.KeyPrompt">
            <summary>
            Gets or sets the key prompt.
            </summary>
            <value>
            The key prompt.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.KeyValueList.ValuePrompt">
            <summary>
            Gets or sets the value prompt.
            </summary>
            <value>
            The value prompt.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.KeyValueList.CustomValues">
            <summary>
            Gets or sets custom values.  If custom values are used, the value portion of this control will
            render as a DropDownList with the selected values.
            </summary>
            <value>
            The custom values.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.KeyValueList.DefinedTypeId">
            <summary>
            Gets or sets the defined type id.  If a defined type id is used, the value portion of this control
            will render as a DropDownList of values from that defined type.  If a DefinedTypeId is not specified
            the values will be rendered as free-form text fields.
            </summary>
            <value>
            The defined type id.
            </value>
        </member>
        <member name="T:Rock.Web.UI.Controls.ToggleField">
            <summary>
            <see cref="T:Rock.Web.UI.Controls.Grid"/> Column for toggling the bool/checkbox value of a row in a grid
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.ToggleField.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Web.UI.Controls.ToggleField"/> class.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.ToggleField.Initialize(System.Boolean,System.Web.UI.Control)">
            <summary>
            Performs basic instance initialization for a data control field.
            </summary>
            <param name="sortingEnabled">A value that indicates whether the control supports the sorting of columns of data.</param>
            <param name="control">The data control that owns the <see cref="T:System.Web.UI.WebControls.DataControlField"/>.</param>
            <returns>
            Always returns false.
            </returns>
        </member>
        <member name="M:Rock.Web.UI.Controls.ToggleField.toggleFieldTemplate_CheckedChanged(System.Object,Rock.Web.UI.Controls.RowEventArgs)">
            <summary>
            Handles the CheckedChanged event of the toggleFieldTemplate control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:Rock.Web.UI.Controls.RowEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.ToggleField.OnClick(Rock.Web.UI.Controls.RowEventArgs)">
            <summary>
            Raises the <see cref="E:Click"/> event.
            </summary>
            <param name="e">The <see cref="T:Rock.Web.UI.Controls.RowEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:Rock.Web.UI.Controls.ToggleField.CssClass">
            <summary>
            Gets or sets the CssClass of the field.
            </summary>
            <value>
            The CssClass.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.ToggleField.DataField">
            <summary>
            Gets or sets the DataField of the BoundField.
            </summary>
            <value>
            The data field.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.ToggleField.Enabled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Rock.Web.UI.Controls.ToggleField"/> is enabled.
            </summary>
            <value>
              <c>true</c> if enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.ToggleField.OnText">
            <summary>
            Gets or sets the text that represents the "on" state.
            </summary>
            <value>
            The "on" text.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.ToggleField.OffText">
            <summary>
            Gets or sets the text that represents the "off" state.
            </summary>
            <value>
            The "off" text.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.ToggleField.ParentGrid">
            <summary>
            Gets the parent grid.
            </summary>
            <value>
            The parent grid.
            </value>
        </member>
        <member name="E:Rock.Web.UI.Controls.ToggleField.CheckedChanged">
            <summary>
            Occurs when [checked changed].
            </summary>
        </member>
        <member name="T:Rock.Web.UI.Controls.ToggleFieldTemplate">
            <summary>
            Template used by the <see cref="T:Rock.Web.UI.Controls.ToggleField"/> control
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.ToggleFieldTemplate.InstantiateIn(System.Web.UI.Control)">
            <summary>
            When implemented by a class, defines the <see cref="T:System.Web.UI.Control"/>
            object that child controls and templates belong to. These child controls are in
            turn defined within an inline template.
            </summary>
            <param name="container">The <see cref="T:System.Web.UI.Control"/> object to contain the instances of controls from the inline template.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.ToggleFieldTemplate.toggle_PreRender(System.Object,System.EventArgs)">
            <summary>
            Handles the PreRender event of the toggle control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.ToggleFieldTemplate.toggle_DataBinding(System.Object,System.EventArgs)">
            <summary>
            Handles the DataBinding event of the Toggle control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.ToggleFieldTemplate.toggle_CheckedChanged(System.Object,System.EventArgs)">
            <summary>
            Handles the CheckedChanged event of the Toggle control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:Rock.Web.UI.Controls.ToggleFieldTemplate.ParentGrid">
            <summary>
            Gets or sets the parent grid.
            </summary>
            <value>
            The parent grid.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.ToggleFieldTemplate.DataField">
            <summary>
            Gets or sets the DataField to bind to.
            </summary>
            <value>
            The DataField to bind to.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.ToggleFieldTemplate.Enabled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Rock.Web.UI.Controls.ToggleFieldTemplate"/> is enabled.
            </summary>
            <value>
              <c>true</c> if enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="E:Rock.Web.UI.Controls.ToggleFieldTemplate.CheckedChanged">
            <summary>
            Occurs when checkbox [checked changed].
            </summary>
        </member>
        <member name="T:Rock.Web.UI.Controls.NoteControl">
            <summary>
            Displays a Rock Note.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.NoteControl.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Web.UI.Controls.NoteControl"/> class.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.NoteControl.OnInit(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.Init" /> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs" /> object that contains the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.NoteControl.CreateChildControls">
            <summary>
            Called by the ASP.NET page framework to notify server controls that use composition-based implementation to create any child controls they contain in preparation for posting back or rendering.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.NoteControl.RenderControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            Outputs server control content to a provided <see cref="T:System.Web.UI.HtmlTextWriter" /> object and stores tracing information about the control if tracing is enabled.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter" /> object that receives the control content.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.NoteControl.lbSaveNote_Click(System.Object,System.EventArgs)">
            <summary>
            Handles the Click event of the lbSaveNote control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.NoteControl.lbDeleteNote_Click(System.Object,System.EventArgs)">
            <summary>
            Handles the Click event of the lbDeleteNote control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:Rock.Web.UI.Controls.NoteControl.Note">
            <summary>
            Sets the note.
            </summary>
            <value>
            The note.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.NoteControl.NoteId">
            <summary>
            Gets or sets the note id.
            </summary>
            <value>
            The note id.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.NoteControl.NoteTypeId">
            <summary>
            Gets or sets the note type identifier.
            </summary>
            <value>
            The note type identifier.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.NoteControl.EntityId">
            <summary>
            Gets or sets the entity identifier.
            </summary>
            <value>
            The entity identifier.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.NoteControl.SourceTypeValueId">
            <summary>
            Gets or sets the source type value id.
            </summary>
            <value>
            The source type value id.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.NoteControl.Caption">
            <summary>
            Gets or sets the caption.
            </summary>
            <value>
            The caption.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.NoteControl.AddAlwaysVisible">
            <summary>
            Gets or sets a value indicating whether an add view is always visible.
            </summary>
            <value>
              <c>true</c> if [add always visible]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.NoteControl.CreatedByName">
            <summary>
            Gets or sets the name of the created by.
            </summary>
            <value>
            The name of the created by.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.NoteControl.CreatedByPhotoId">
            <summary>
            Gets or sets the created by photo identifier.
            </summary>
            <value>
            The created by photo identifier.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.NoteControl.CreatedByGender">
            <summary>
            Gets or sets the created by gender.
            </summary>
            <value>
            The created by gender.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.NoteControl.CreatedDateTime">
            <summary>
            Gets or sets the created date time.
            </summary>
            <value>
            The created date time.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.NoteControl.Label">
            <summary>
            Gets or sets the label for the note entry box
            </summary>
            <value>
            The label.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.NoteControl.Text">
            <summary>
            Gets or sets the text.
            </summary>
            <value>
            The text.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.NoteControl.IsAlert">
            <summary>
            Gets or sets a value indicating whether this instance is alert.
            </summary>
            <value>
              <c>true</c> if this instance is alert; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.NoteControl.IsPrivate">
            <summary>
            Gets or sets a value indicating whether this instance is private.
            </summary>
            <value>
            <c>true</c> if this instance is private; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.NoteControl.CanEdit">
            <summary>
            Gets or sets a value indicating whether this instance can edit.
            </summary>
            <value>
              <c>true</c> if this instance can edit; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.NoteControl.DisplayType">
            <summary>
            Gets or sets the display type.
            </summary>
            <value>
            The display type.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.NoteControl.ShowAlertCheckBox">
            <summary>
            Gets or sets a value indicating whether [show alert check box].
            </summary>
            <value>
              <c>true</c> if [show alert check box]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.NoteControl.ShowPrivateCheckBox">
            <summary>
            Gets or sets a value indicating whether [show private check box].
            </summary>
            <value>
            <c>true</c> if [show private check box]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.NoteControl.ShowSecurityButton">
            <summary>
            Gets or sets a value indicating whether [show security button].
            </summary>
            <value>
              <c>true</c> if [show security button]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.NoteControl.UsePersonIcon">
            <summary>
            Gets or sets a value indicating whether person icon should used instead of icon representing the source.
            </summary>
            <value>
              <c>true</c> if [use person icon]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="E:Rock.Web.UI.Controls.NoteControl.SaveButtonClick">
            <summary>
            Occurs when [save button click].
            </summary>
        </member>
        <member name="E:Rock.Web.UI.Controls.NoteControl.DeleteButtonClick">
            <summary>
            Occurs when [delete button click].
            </summary>
        </member>
        <member name="T:Rock.Web.UI.Controls.NoteEventArgs">
            <summary>
            Note Event Argument includes id of note updated
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.NoteEventArgs.#ctor(System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Web.UI.Controls.NoteEventArgs"/> class.
            </summary>
            <param name="noteId">The note identifier.</param>
        </member>
        <member name="P:Rock.Web.UI.Controls.NoteEventArgs.NoteId">
            <summary>
            Gets the note identifier.
            </summary>
            <value>
            The note identifier.
            </value>
        </member>
        <member name="T:Rock.Web.UI.Controls.NoteDisplayType">
            <summary>
            
            </summary>
        </member>
        <member name="F:Rock.Web.UI.Controls.NoteDisplayType.Full">
            <summary>
            The full
            </summary>
        </member>
        <member name="F:Rock.Web.UI.Controls.NoteDisplayType.Light">
            <summary>
            The light
            </summary>
        </member>
        <member name="T:Rock.Web.UI.Controls.ButtonDropDownList">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.ButtonDropDownList.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Web.UI.Controls.ButtonDropDownList"/> class.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.ButtonDropDownList.OnLoad(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.Load" /> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs" /> object that contains the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.ButtonDropDownList.OnInit(System.EventArgs)">
            <summary>
            Handles the <see cref="E:System.Web.UI.Control.Init" /> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs" /> object that contains the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.ButtonDropDownList.CreateChildControls">
            <summary>
            Called by the ASP.NET page framework to notify server controls that use composition-based implementation to create any child controls they contain in preparation for posting back or rendering.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.ButtonDropDownList.RenderControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            Outputs server control content to a provided <see cref="T:System.Web.UI.HtmlTextWriter" /> object and stores tracing information about the control if tracing is enabled.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter" /> object that receives the control content.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.ButtonDropDownList.RenderBaseControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders the base control.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="P:Rock.Web.UI.Controls.ButtonDropDownList.Label">
            <summary>
            Gets or sets the label text.
            </summary>
            <value>
            The label text.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.ButtonDropDownList.Help">
            <summary>
            Gets or sets the help text.
            </summary>
            <value>
            The help text.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.ButtonDropDownList.Required">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Rock.Web.UI.Controls.RockTextBox"/> is required.
            </summary>
            <value>
              <c>true</c> if required; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.ButtonDropDownList.RequiredErrorMessage">
            <summary>
            Gets or sets the required error message.  If blank, the LabelName name will be used
            </summary>
            <value>
            The required error message.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.ButtonDropDownList.IsValid">
            <summary>
            Gets a value indicating whether this instance is valid.
            </summary>
            <value>
              <c>true</c> if this instance is valid; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.ButtonDropDownList.HelpBlock">
            <summary>
            Gets or sets the help block.
            </summary>
            <value>
            The help block.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.ButtonDropDownList.RequiredFieldValidator">
            <summary>
            Gets or sets the required field validator.
            </summary>
            <value>
            The required field validator.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.ButtonDropDownList.ValidationGroup">
            <summary>
            Gets or sets the group of controls for which the control that is derived from the <see cref="T:System.Web.UI.WebControls.ListControl" /> class causes validation when it posts back to the server.
            </summary>
            <returns>The group of controls for which the derived <see cref="T:System.Web.UI.WebControls.ListControl" /> causes validation when it posts back to the server. The default is an empty string ("").</returns>
        </member>
        <member name="P:Rock.Web.UI.Controls.ButtonDropDownList.Title">
            <summary>
            Gets or sets the title.
            </summary>
            <value>
            The title.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.ButtonDropDownList.SelectedItem">
            <summary>
            Gets the selected item with the lowest index in the list control.
            </summary>
            <returns>A <see cref="T:System.Web.UI.WebControls.ListItem" /> that represents the lowest indexed item selected from the list control. The default is null.</returns>
        </member>
        <member name="P:Rock.Web.UI.Controls.ButtonDropDownList.SelectedValue">
            <summary>
            Gets the value of the selected item in the list control, or selects the item in the list control that contains the specified value.
            </summary>
            <returns>The value of the selected item in the list control. The default is an empty string ("").</returns>
        </member>
        <member name="P:Rock.Web.UI.Controls.ButtonDropDownList.SelectedIndex">
            <summary>
            Gets or sets the lowest ordinal index of the selected items in the list.
            </summary>
            <returns>The lowest ordinal index of the selected items in the list. The default is -1, which indicates that nothing is selected.</returns>
        </member>
        <member name="E:Rock.Web.UI.Controls.ButtonDropDownList.SelectionChanged">
            <summary>
            Occurs when [selection changed].
            </summary>
        </member>
        <member name="T:Rock.Web.UI.Controls.AttributeEditor">
            <summary>
            Custom attribute editor control
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.AttributeEditor.OnInit(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.Init" /> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs" /> object that contains the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.AttributeEditor.LoadViewState(System.Object)">
            <summary>
            Restores view-state information from a previous request that was saved with the <see cref="M:System.Web.UI.WebControls.WebControl.SaveViewState" /> method.
            </summary>
            <param name="savedState">An object that represents the control state to restore.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.AttributeEditor.CreateChildControls">
            <summary>
            Called by the ASP.NET page framework to notify server controls that use composition-based implementation to create any child controls they contain in preparation for posting back or rendering.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.AttributeEditor.OnLoad(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.Load" /> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs" /> object that contains the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.AttributeEditor.OnPreRender(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.PreRender" /> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs" /> object that contains the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.AttributeEditor.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Writes the <see cref="T:System.Web.UI.WebControls.CompositeControl" /> content to the specified <see cref="T:System.Web.UI.HtmlTextWriter" /> object, for display on the client.
            </summary>
            <param name="writer">An <see cref="T:System.Web.UI.HtmlTextWriter" /> that represents the output stream to render HTML content on the client.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.AttributeEditor.SaveViewState">
            <summary>
            Saves any state that was modified after the <see cref="M:System.Web.UI.WebControls.Style.TrackViewState" /> method was invoked.
            </summary>
            <returns>
            An object that contains the current view state of the control; otherwise, if there is no view state associated with the control, null.
            </returns>
        </member>
        <member name="M:Rock.Web.UI.Controls.AttributeEditor.cvKey_ServerValidate(System.Object,System.Web.UI.WebControls.ServerValidateEventArgs)">
            <summary>
            Handles the ServerValidate event of the cvKey control.
            </summary>
            <param name="source">The source of the event.</param>
            <param name="args">The <see cref="T:System.Web.UI.WebControls.ServerValidateEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.AttributeEditor._ddlFieldType_SelectedIndexChanged(System.Object,System.EventArgs)">
            <summary>
            Handles the SelectedIndexChanged event of the _ddlFieldType control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.AttributeEditor.btnSave_Click(System.Object,System.EventArgs)">
            <summary>
            Handles the Click event of the btnSave control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.AttributeEditor.btnCancel_Click(System.Object,System.EventArgs)">
            <summary>
            Handles the Click event of the btnCancel control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.AttributeEditor.SetAttributeProperties(Rock.Model.Attribute,System.Type)">
            <summary>
            Sets the attribute properties.
            </summary>
            <param name="attribute">The attribute.</param>
            <param name="objectType">Type of the object.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.AttributeEditor.GetAttributeProperties(Rock.Model.Attribute)">
            <summary>
            Gets the attribute properties.
            </summary>
            <param name="attribute">The attribute.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.AttributeEditor.CreateFieldTypeDetailControls(System.Nullable{System.Int32},System.Boolean)">
            <summary>
            Creates the field type detail controls.
            </summary>
            <param name="fieldTypeId">The field type id.</param>
            <param name="recreate">if set to <c>true</c> [recreate].</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.AttributeEditor.RegisterClientScript">
            <summary>
            Registers the client script.
            </summary>
        </member>
        <member name="P:Rock.Web.UI.Controls.AttributeEditor.AttributeId">
            <summary>
            Gets or sets the attribute id.
            </summary>
            <value>
            The attribute id.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.AttributeEditor.AttributeGuid">
            <summary>
            Gets or sets the attribute GUID.
            </summary>
            <value>
            The attribute GUID.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.AttributeEditor.AttributeEntityTypeId">
            <summary>
            Gets or sets the attribute entity type id.
            </summary>
            <value>
            The attribute entity type id.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.AttributeEditor.ShowActions">
            <summary>
            Gets or sets a value indicating whether [show actions].
            </summary>
            <value>
              <c>true</c> if [show actions]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.AttributeEditor.ActionTitle">
            <summary>
            Gets or sets the action title.
            </summary>
            <value>
            The action title.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.AttributeEditor.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.AttributeEditor.Description">
            <summary>
            Gets or sets the description.
            </summary>
            <value>
            The description.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.AttributeEditor.Key">
            <summary>
            Gets or sets the key.
            </summary>
            <value>
            The key.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.AttributeEditor.CategoryIds">
            <summary>
            Gets or sets the category ids.
            </summary>
            <value>
            The category ids.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.AttributeEditor.Required">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Rock.Web.UI.Controls.AttributeEditor"/> is required.
            </summary>
            <value>
              <c>true</c> if required; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.AttributeEditor.ShowInGridVisible">
            <summary>
            Gets or sets a value indicating whether Show in Grid option is displayed
            </summary>
            <value>
              <c>true</c> if Show in Grid option is visible; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.AttributeEditor.ShowInGrid">
            <summary>
            Gets or sets a value indicating whether [show in grid].
            </summary>
            <value>
              <c>true</c> if [show in grid]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.AttributeEditor.FieldTypeId">
            <summary>
            Gets or sets the field type id.
            </summary>
            <value>
            The field type id.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.AttributeEditor.Qualifiers">
            <summary>
            Gets or sets the qualifiers.
            </summary>
            <value>
            The qualifiers.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.AttributeEditor.DefaultValue">
            <summary>
            Gets or sets the default value.
            </summary>
            <value>
            The default value.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.AttributeEditor.ValidationGroup">
            <summary>
            Gets or sets the validation group.
            </summary>
            <value>
            The validation group.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.AttributeEditor.ReservedKeyNames">
            <summary>
            Gets or sets the reserved key names.
            </summary>
            <value>
            The reserved key names.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.AttributeEditor.ObjectPropertyNames">
            <summary>
            Gets or sets the object property names.
            </summary>
            <value>
            The object property names.
            </value>
        </member>
        <member name="E:Rock.Web.UI.Controls.AttributeEditor.SaveClick">
            <summary>
            Occurs when Save is clicked
            </summary>
        </member>
        <member name="E:Rock.Web.UI.Controls.AttributeEditor.CancelClick">
            <summary>
            Occurs when Cancel is clicked.
            </summary>
        </member>
        <member name="T:Rock.Web.UI.Controls.ScheduleBuilder">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.ScheduleBuilder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Web.UI.Controls.ScheduleBuilder"/> class.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.ScheduleBuilder.OnInit(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.Init" /> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs" /> object that contains the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.ScheduleBuilder.RegisterJavaScript">
            <summary>
            Registers the java script.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.ScheduleBuilder.CreateChildControls">
            <summary>
            Called by the ASP.NET page framework to notify server controls that use composition-based implementation to create any child controls they contain in preparation for posting back or rendering.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.ScheduleBuilder.RenderControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            Outputs server control content to a provided <see cref="T:System.Web.UI.HtmlTextWriter" /> object and stores tracing information about the control if tracing is enabled.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter" /> object that receives the control content.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.ScheduleBuilder.RenderBaseControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            This is where you implment the simple aspects of rendering your control.  The rest
            will be handled by calling RenderControlHelper's RenderControl() method.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.ScheduleBuilder.btnSaveSchedule_Click(System.Object,System.EventArgs)">
            <summary>
            Handles the Click event of the btnSaveSchedule control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.ScheduleBuilder._btnShowPopup_Click(System.Object,System.EventArgs)">
            <summary>
            Handles the Click event of the _btnShowPopup control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:Rock.Web.UI.Controls.ScheduleBuilder.Label">
            <summary>
            Gets or sets the label text.
            </summary>
            <value>
            The label text.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.ScheduleBuilder.IconCssClass">
            <summary>
            Gets or sets the CSS Icon text.
            </summary>
            <value>
            The CSS icon class.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.ScheduleBuilder.Help">
            <summary>
            Gets or sets the help text.
            </summary>
            <value>
            The help text.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.ScheduleBuilder.Required">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Rock.Web.UI.Controls.RockTextBox"/> is required.
            </summary>
            <value>
              <c>true</c> if required; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.ScheduleBuilder.RequiredErrorMessage">
            <summary>
            Gets or sets the required error message.  If blank, the LabelName name will be used
            </summary>
            <value>
            The required error message.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.ScheduleBuilder.ValidationGroup">
            <summary>
            Gets or sets an optional validation group to use.
            </summary>
            <value>
            The validation group.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.ScheduleBuilder.IsValid">
            <summary>
            Gets a value indicating whether this instance is valid.
            </summary>
            <value>
              <c>true</c> if this instance is valid; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.ScheduleBuilder.HelpBlock">
            <summary>
            Gets or sets the help block.
            </summary>
            <value>
            The help block.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.ScheduleBuilder.RequiredFieldValidator">
            <summary>
            Gets or sets the required field validator.
            </summary>
            <value>
            The required field validator.
            </value>
        </member>
        <member name="E:Rock.Web.UI.Controls.ScheduleBuilder.SaveSchedule">
            <summary>
            Occurs when [save schedule].
            </summary>
        </member>
        <member name="P:Rock.Web.UI.Controls.ScheduleBuilder.iCalendarContent">
            <summary>
            Gets or sets the content of the attribute calendar.
            </summary>
            <value>
            The content of the attribute calendar.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.ScheduleBuilder.ToolTip">
            <summary>
            Gets or sets the text displayed when the mouse pointer hovers over the Web server control.
            </summary>
            <returns>The text displayed when the mouse pointer hovers over the Web server control. The default is <see cref="F:System.String.Empty" />.</returns>
        </member>
        <member name="P:Rock.Web.UI.Controls.ScheduleBuilder.ShowDuration">
            <summary>
            Gets or sets a value indicating whether prompt for duration in the Schedule Builder
            defaults to true
            Set to false if the schedule only requires start datetime(s)
            </summary>
            <value>
              <c>true</c> if [show duration]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.ScheduleBuilder.ShowScheduleFriendlyTextAsToolTip">
            <summary>
            Gets or sets a value indicating whether [show schedule friendly text as tool tip].
            </summary>
            <value>
            <c>true</c> if [show schedule friendly text as tool tip]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Rock.Web.UI.Controls.ScheduleBuilderPopupContents">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.ScheduleBuilderPopupContents.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Web.UI.Controls.ScheduleBuilder"/> class.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.ScheduleBuilderPopupContents.TextBoxToPositiveInteger(System.Web.UI.WebControls.TextBox,System.Int32)">
            <summary>
            Texts the box to positive integer.
            </summary>
            <param name="textBox">The text box.</param>
            <param name="minValue">The min value.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.UI.Controls.ScheduleBuilderPopupContents.GetCalendarContentFromControls">
            <summary>
            Gets the calendar content from controls.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.UI.Controls.ScheduleBuilderPopupContents.CreateChildControls">
            <summary>
            Called by the ASP.NET page framework to notify server controls that use composition-based implementation to create any child controls they contain in preparation for posting back or rendering.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.ScheduleBuilderPopupContents.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Writes the <see cref="T:System.Web.UI.WebControls.CompositeControl" /> content to the specified <see cref="T:System.Web.UI.HtmlTextWriter" /> object, for display on the client.
            </summary>
            <param name="writer">An <see cref="T:System.Web.UI.HtmlTextWriter" /> that represents the output stream to render HTML content on the client.</param>
        </member>
        <member name="P:Rock.Web.UI.Controls.ScheduleBuilderPopupContents._iCalendarContent">
            <summary>
            The _i calendar content
            </summary>
        </member>
        <member name="P:Rock.Web.UI.Controls.ScheduleBuilderPopupContents.ShowDuration">
            <summary>
            Gets or sets a value indicating whether [_show duration].
            </summary>
            <value>
              <c>true</c> if [_show duration]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.ScheduleBuilderPopupContents.iCalendarContent">
            <summary>
            Gets or sets the content of the i calendar.
            </summary>
            <value>
            The content of the i calendar. 
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.ScheduleBuilderPopupContents.ValidationGroup">
            <summary>
            Gets or sets the validation group.
            </summary>
            <value>
            The validation group.
            </value>
        </member>
        <member name="T:Rock.Web.UI.Controls.SecurityButton">
            <summary>
            A Button for setting security for a particular secured item
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.SecurityButton.CreateChildControls">
            <summary>
            Called by the ASP.NET page framework to notify server controls that use composition-based implementation to create any child controls they contain in preparation for posting back or rendering.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.SecurityButton.RenderControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            Outputs server control content to a provided <see cref="T:System.Web.UI.HtmlTextWriter" /> object and stores tracing information about the control if tracing is enabled.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter" /> object that receives the control content.</param>
        </member>
        <member name="P:Rock.Web.UI.Controls.SecurityButton.EntityTypeId">
            <summary>
            Gets or sets the entity type id.
            </summary>
            <value>
            The entity type id.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.SecurityButton.EntityId">
            <summary>
            Gets or sets the entity id.
            </summary>
            <value>
            The entity id.
            </value>
        </member>
        <member name="T:Rock.Web.UI.Controls.StateDropDownList">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.StateDropDownList.OnInit(System.EventArgs)">
            <summary>
            Handles the <see cref="E:System.Web.UI.Control.Init" /> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs" /> object that contains the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.StateDropDownList.RenderControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            Outputs server control content to a provided <see cref="T:System.Web.UI.HtmlTextWriter" /> object and stores tracing information about the control if tracing is enabled.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter" /> object that receives the control content.</param>
        </member>
        <member name="P:Rock.Web.UI.Controls.StateDropDownList.UseAbbreviation">
            <summary>
            Display an abbreviated state name
            </summary>
        </member>
        <member name="P:Rock.Web.UI.Controls.StateDropDownList.DefaultSelectedValue">
            <summary>
            Gets the default selected value which is the Organizations Address's State
            </summary>
            <value>
            The default selected value.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.StateDropDownList.SelectedValue">
            <summary>
            Gets the value of the selected item in the list control, or selects the item in the list control that contains the specified value.
            </summary>
            <returns>The value of the selected item in the list control. The default is an empty string ("").</returns>
        </member>
        <member name="T:Rock.Web.UI.Controls.WorkflowActionEditor">
            <summary>
            Report Filter control
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.WorkflowActionEditor.OnInit(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.Init" /> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs" /> object that contains the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.WorkflowActionEditor.CreateChildControls">
            <summary>
            Called by the ASP.NET page framework to notify server controls that use composition-based implementation to create any child controls they contain in preparation for posting back or rendering.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.WorkflowActionEditor.ddlEntityType_SelectedIndexChanged(System.Object,System.EventArgs)">
            <summary>
            Handles the SelectedIndexChanged event of the ddlEntityType control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.WorkflowActionEditor.RenderControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            Writes the <see cref="T:System.Web.UI.WebControls.CompositeControl" /> content to the specified <see cref="T:System.Web.UI.HtmlTextWriter" /> object, for display on the client.
            </summary>
            <param name="writer">An <see cref="T:System.Web.UI.HtmlTextWriter" /> that represents the output stream to render HTML content on the client.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.WorkflowActionEditor.lbDeleteActionType_Click(System.Object,System.EventArgs)">
            <summary>
            Handles the Click event of the lbDeleteActionType control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:Rock.Web.UI.Controls.WorkflowActionEditor.ForceContentVisible">
            <summary>
            Gets or sets a value indicating whether to force content visible.
            </summary>
            <value>
              <c>true</c> if [force content visible]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.WorkflowActionEditor.WorkflowAttributes">
            <summary>
            Sets the workflow attributes.
            </summary>
            <value>
            The workflow attributes.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.WorkflowActionEditor.WorkflowActivities">
            <summary>
            Sets the workflow activities.
            </summary>
            <value>
            The workflow activities.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.WorkflowActionEditor.IsDeleteEnabled">
            <summary>
            Gets or sets a value indicating whether this instance is delete enabled.
            </summary>
            <value>
            <c>true</c> if this instance is delete enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.WorkflowActionEditor.WorkflowActionType">
            <summary>
            Gets or sets the type of the workflow activity.
            </summary>
            <value>
            The type of the workflow activity.
            </value>
        </member>
        <member name="E:Rock.Web.UI.Controls.WorkflowActionEditor.DeleteActionTypeClick">
            <summary>
            Occurs when [delete action type click].
            </summary>
        </member>
        <member name="T:Rock.Web.UI.Controls.WorkflowFormAttributeRow">
            <summary>
            Workflow Action Form Row Editor
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.WorkflowFormAttributeRow.CreateChildControls">
            <summary>
            Called by the ASP.NET page framework to notify server controls that use composition-based implementation to create any child controls they contain in preparation for posting back or rendering.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.WorkflowFormAttributeRow.RenderControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            Outputs server control content to a provided <see cref="T:System.Web.UI.HtmlTextWriter" /> object and stores tracing information about the control if tracing is enabled.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter" /> object that receives the control content.</param>
        </member>
        <member name="P:Rock.Web.UI.Controls.WorkflowFormAttributeRow.AttributeGuid">
            <summary>
            Gets or sets the attribute unique identifier.
            </summary>
            <value>
            The attribute unique identifier.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.WorkflowFormAttributeRow.AttributeName">
            <summary>
            Gets or sets the name of the attribute.
            </summary>
            <value>
            The name of the attribute.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.WorkflowFormAttributeRow.Guid">
            <summary>
            Gets or sets the unique identifier.
            </summary>
            <value>
            The unique identifier.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.WorkflowFormAttributeRow.Order">
            <summary>
            Gets or sets the order.
            </summary>
            <value>
            The order.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.WorkflowFormAttributeRow.IsVisible">
            <summary>
            Gets or sets a value indicating whether [is visible].
            </summary>
            <value>
              <c>true</c> if [is visible]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.WorkflowFormAttributeRow.IsEditable">
            <summary>
            Gets or sets a value indicating whether [is editable].
            </summary>
            <value>
              <c>true</c> if [is editable]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.WorkflowFormAttributeRow.IsRequired">
            <summary>
            Gets or sets a value indicating whether [is required].
            </summary>
            <value>
              <c>true</c> if [is required]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Rock.Web.UI.Controls.WorkflowFormEditor">
            <summary>
            Workflow Action Form Editor
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.WorkflowFormEditor.CreateChildControls">
            <summary>
            Called by the ASP.NET page framework to notify server controls that use composition-based implementation to create any child controls they contain in preparation for posting back or rendering.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.WorkflowFormEditor.RenderControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            Outputs server control content to a provided <see cref="T:System.Web.UI.HtmlTextWriter" /> object and stores tracing information about the control if tracing is enabled.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter" /> object that receives the control content.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.WorkflowFormEditor.ClearRows">
            <summary>
            Clears the rows.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.WorkflowFormEditor.UpdateRows(System.Collections.Generic.IEnumerable{Rock.Model.WorkflowActionFormAttribute})">
            <summary>
            Updates the rows.
            </summary>
            <param name="formAttributes">The form attributes.</param>
        </member>
        <member name="P:Rock.Web.UI.Controls.WorkflowFormEditor.Form">
            <summary>
            Gets or sets the form.
            </summary>
            <value>
            The form.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.WorkflowFormEditor.WorkflowAttributes">
            <summary>
            Gets or sets the workflow attributes.
            </summary>
            <value>
            The workflow attributes.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.WorkflowFormEditor.WorkflowActivities">
            <summary>
            Gets or sets the workflow activities.
            </summary>
            <value>
            The workflow activities.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.WorkflowFormEditor.AttributeRows">
            <summary>
            Gets the attribute rows.
            </summary>
            <value>
            The attribute rows.
            </value>
        </member>
        <member name="T:Rock.Web.UI.Controls.WorkflowActivityEditor">
            <summary>
            Report Filter control
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.WorkflowActivityEditor.OnInit(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.Init" /> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs" /> object that contains the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.WorkflowActivityEditor.GetWorkflowActivityType">
            <summary>
            Gets or sets the type of the workflow activity.
            </summary>
            <value>
            The type of the workflow activity.
            </value>
        </member>
        <member name="M:Rock.Web.UI.Controls.WorkflowActivityEditor.SetWorkflowActivityType(Rock.Model.WorkflowActivityType)">
            <summary>
            Sets the type of the workflow activity.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.WorkflowActivityEditor.CreateChildControls">
            <summary>
            Called by the ASP.NET page framework to notify server controls that use composition-based implementation to create any child controls they contain in preparation for posting back or rendering.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.WorkflowActivityEditor.RenderControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            Writes the <see cref="T:System.Web.UI.WebControls.CompositeControl" /> content to the specified <see cref="T:System.Web.UI.HtmlTextWriter" /> object, for display on the client.
            </summary>
            <param name="writer">An <see cref="T:System.Web.UI.HtmlTextWriter" /> that represents the output stream to render HTML content on the client.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.WorkflowActivityEditor.lbDeleteActivityType_Click(System.Object,System.EventArgs)">
            <summary>
            Handles the Click event of the lbDeleteActivityType control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.WorkflowActivityEditor.lbAddActionType_Click(System.Object,System.EventArgs)">
            <summary>
            Handles the Click event of the lbAddActionType control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:Rock.Web.UI.Controls.WorkflowActivityEditor.ForceContentVisible">
            <summary>
            Gets or sets a value indicating whether to force content visible.
            </summary>
            <value>
              <c>true</c> if [force content visible]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.WorkflowActivityEditor.ActivityTypeGuid">
            <summary>
            Gets or sets the activity type unique identifier.
            </summary>
            <value>
            The activity type unique identifier.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.WorkflowActivityEditor.Name">
            <summary>
            Gets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.WorkflowActivityEditor.IsDeleteEnabled">
            <summary>
            Gets or sets a value indicating whether this instance is delete enabled.
            </summary>
            <value>
            <c>true</c> if this instance is delete enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="E:Rock.Web.UI.Controls.WorkflowActivityEditor.DeleteActivityTypeClick">
            <summary>
            Occurs when [delete activity type click].
            </summary>
        </member>
        <member name="E:Rock.Web.UI.Controls.WorkflowActivityEditor.AddActionTypeClick">
            <summary>
            Occurs when [add action type click].
            </summary>
        </member>
        <member name="T:Rock.Web.UI.Controls.BadgeField">
            <summary>
            <see cref="T:Rock.Web.UI.Controls.Grid"/> Column for displaying a badge
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.BadgeField.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Web.UI.Controls.BadgeField"/> class.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.BadgeField.FormatDataValue(System.Object,System.Boolean)">
            <summary>
            Formats the specified field value for a cell in the <see cref="T:System.Web.UI.WebControls.BoundField" /> object.
            </summary>
            <param name="dataValue">The field value to format.</param>
            <param name="encode">true to encode the value; otherwise, false.</param>
            <returns>
            The field value converted to the format specified by <see cref="P:System.Web.UI.WebControls.BoundField.DataFormatString" />.
            </returns>
        </member>
        <member name="P:Rock.Web.UI.Controls.BadgeField.ImportantMin">
            <summary>
            Gets or sets the important minimum value rule.
            </summary>
            <value>
            The minimum value to be considered Important.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.BadgeField.ImportantMax">
            <summary>
            Gets or sets the important max.
            </summary>
            <value>
            The maximum value to be considered Important.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.BadgeField.WarningMin">
            <summary>
            Gets or sets the Warning minimum value rule.
            </summary>
            <value>
            The minimum value to be considered Warning.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.BadgeField.WarningMax">
            <summary>
            Gets or sets the Warning maximum value rule.
            </summary>
            <value>
            The maximum value to be considered Warning.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.BadgeField.SuccessMin">
            <summary>
            Gets or sets the Success minimum value rule.
            </summary>
            <value>
            The minimum value to be considered Success.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.BadgeField.SuccessMax">
            <summary>
            Gets or sets the Success maximum value rule.
            </summary>
            <value>
            The maximum value to be considered Success.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.BadgeField.InfoMin">
            <summary>
            Gets or sets the Info minimum value rule.
            </summary>
            <value>
            The minimum value to be considered Info.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.BadgeField.InfoMax">
            <summary>
            Gets or sets the Info maximum value rule.
            </summary>
            <value>
            The maximum value to be considered Info.
            </value>
        </member>
        <member name="E:Rock.Web.UI.Controls.BadgeField.SetBadgeType">
            <summary>
            Occurs when badge field is being formatted.  Use to set the badge type
            based on the current row's field value.
            </summary>
        </member>
        <member name="T:Rock.Web.UI.Controls.BadgeRowEventArgs">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.BadgeRowEventArgs.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Web.UI.Controls.BadgeRowEventArgs"/> class.
            </summary>
            <param name="fieldValue">The field value.</param>
        </member>
        <member name="P:Rock.Web.UI.Controls.BadgeRowEventArgs.FieldValue">
            <summary>
            Gets the field value.
            </summary>
            <value>
            The field value.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.BadgeRowEventArgs.BadgeType">
            <summary>
            Gets or sets the type of the badge.
            </summary>
            <value>
            The type of the badge.
            </value>
        </member>
        <member name="T:Rock.Web.UI.Controls.Toggle">
            <summary>
            A <see cref="T:System.Web.UI.WebControls.TextBox"/> control with an associated label.
            </summary>
        </member>
        <member name="T:Rock.Web.UI.Controls.RockCheckBox">
            <summary>
            A <see cref="T:System.Web.UI.WebControls.TextBox"/> control with an associated label.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.RockCheckBox.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Web.UI.Controls.RockCheckBox"/> class.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.RockCheckBox.CreateChildControls">
            <summary>
            Called by the ASP.NET page framework to notify server controls that use composition-based implementation to create any child controls they contain in preparation for posting back or rendering.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.RockCheckBox.OnPreRender(System.EventArgs)">
            <summary>
            Registers client script for generating postback prior to rendering on the client if <see cref="P:System.Web.UI.WebControls.CheckBox.AutoPostBack" /> is true.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.RockCheckBox.RenderControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            Outputs server control content to a provided <see cref="T:System.Web.UI.HtmlTextWriter" /> object and stores tracing information about the control if tracing is enabled.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter" /> object that receives the control content.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.RockCheckBox.RenderBaseControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders the base control.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="P:Rock.Web.UI.Controls.RockCheckBox.Label">
            <summary>
            Gets or sets the label text.
            </summary>
            <value>
            The label text.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.RockCheckBox.Help">
            <summary>
            Gets or sets the help text.
            </summary>
            <value>
            The help text.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.RockCheckBox.Required">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Rock.Web.UI.Controls.RockTextBox"/> is required.
            </summary>
            <value>
              <c>true</c> if required; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.RockCheckBox.RequiredErrorMessage">
            <summary>
            Gets or sets the required error message.  If blank, the LabelName name will be used
            </summary>
            <value>
            The required error message.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.RockCheckBox.IsValid">
            <summary>
            Gets a value indicating whether this instance is valid.
            </summary>
            <value>
              <c>true</c> if this instance is valid; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.RockCheckBox.HelpBlock">
            <summary>
            Gets or sets the help block.
            </summary>
            <value>
            The help block.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.RockCheckBox.RequiredFieldValidator">
            <summary>
            Gets or sets the required field validator.
            </summary>
            <value>
            The required field validator.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.RockCheckBox.ValidationGroup">
            <summary>
            Gets or sets the group of controls for which the <see cref="T:System.Web.UI.WebControls.CheckBox" /> control causes validation when it posts back to the server.
            </summary>
            <returns>The group of controls for which the <see cref="T:System.Web.UI.WebControls.CheckBox" /> causes validation when it posts back to the server. The default is an empty string ("").</returns>
        </member>
        <member name="M:Rock.Web.UI.Controls.Toggle.OnInit(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.Init" /> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs" /> object that contains the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.Toggle.RenderBaseControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            Outputs server control content to a provided <see cref="T:System.Web.UI.HtmlTextWriter" /> object and stores tracing information about the control if tracing is enabled.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter" /> object that receives the control content.</param>
        </member>
        <member name="P:Rock.Web.UI.Controls.Toggle.OnText">
            <summary>
            Gets or sets the on text.
            </summary>
            <value>
            The on text.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.Toggle.OffText">
            <summary>
            Gets or sets the off text.
            </summary>
            <value>
            The off text.
            </value>
        </member>
        <member name="T:Rock.Web.UI.Controls.HelpBlock">
            <summary>
            Displays a help icon that will display the Text property when clicked
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.HelpBlock.OnInit(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.Init" /> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs" /> object that contains the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.HelpBlock.RenderControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            Outputs server control content to a provided <see cref="T:System.Web.UI.HtmlTextWriter" /> object and stores tracing information about the control if tracing is enabled.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter" /> object that receives the control content.</param>
        </member>
        <member name="T:Rock.Reporting.DataFilterContainer">
            <summary>
            MEF Container class for data filters
            </summary>
        </member>
        <member name="M:Rock.Reporting.DataFilterContainer.GetAvailableFilteredEntityTypeNames">
            <summary>
            Gets a list of entity type names that have Data Filter components
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rock.Reporting.DataFilterContainer.GetComponent(System.String)">
            <summary>
            Gets the component with the matching Entity Type Name
            </summary>
            <param name="entityTypeName">Name of the entity type.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Reporting.DataFilterContainer.GetComponentsByFilteredEntityName(System.String)">
            <summary>
            Gets the components that are for filtering a given entity type name
            </summary>
            <param name="entityTypeName">Name of the entity type.</param>
            <returns></returns>
        </member>
        <member name="P:Rock.Reporting.DataFilterContainer.Instance">
            <summary>
            Gets the instance.
            </summary>
        </member>
        <member name="T:Rock.Reporting.DataFilter.Person.GroupTypeAttendanceFilter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Reporting.DataFilter.Person.GroupTypeAttendanceFilter.GetTitle(System.Type)">
            <summary>
            Gets the title.
            </summary>
            <param name="entityType"></param>
            <returns></returns>
            <value>
            The title.
            </value>
        </member>
        <member name="M:Rock.Reporting.DataFilter.Person.GroupTypeAttendanceFilter.GetClientFormatSelection(System.Type)">
            <summary>
            Formats the selection on the client-side.  When the filter is collapsed by the user, the Filterfield control
            will set the description of the filter to whatever is returned by this property.  If including script, the
            controls parent container can be referenced through a '$content' variable that is set by the control before 
            referencing this property.
            </summary>
            <value>
            The client format script.
            </value>
        </member>
        <member name="M:Rock.Reporting.DataFilter.Person.GroupTypeAttendanceFilter.FormatSelection(System.Type,System.String)">
            <summary>
            Formats the selection.
            </summary>
            <param name="entityType">Type of the entity.</param>
            <param name="selection">The selection.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Reporting.DataFilter.Person.GroupTypeAttendanceFilter.CreateChildControls(System.Type,Rock.Web.UI.Controls.FilterField)">
            <summary>
            Creates the child controls.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rock.Reporting.DataFilter.Person.GroupTypeAttendanceFilter.RenderControls(System.Type,Rock.Web.UI.Controls.FilterField,System.Web.UI.HtmlTextWriter,System.Web.UI.Control[])">
            <summary>
            Renders the controls.
            </summary>
            <param name="entityType">Type of the entity.</param>
            <param name="filterControl">The filter control.</param>
            <param name="writer">The writer.</param>
            <param name="controls">The controls.</param>
        </member>
        <member name="M:Rock.Reporting.DataFilter.Person.GroupTypeAttendanceFilter.GetSelection(System.Type,System.Web.UI.Control[])">
            <summary>
            Gets the selection.
            </summary>
            <param name="entityType">Type of the entity.</param>
            <param name="controls">The controls.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Reporting.DataFilter.Person.GroupTypeAttendanceFilter.SetSelection(System.Type,System.Web.UI.Control[],System.String)">
            <summary>
            Sets the selection.
            </summary>
            <param name="entityType">Type of the entity.</param>
            <param name="controls">The controls.</param>
            <param name="selection">The selection.</param>
        </member>
        <member name="M:Rock.Reporting.DataFilter.Person.GroupTypeAttendanceFilter.GetExpression(System.Type,Rock.Data.IService,System.Linq.Expressions.ParameterExpression,System.String)">
            <summary>
            Gets the expression.
            </summary>
            <param name="entityType">Type of the entity.</param>
            <param name="serviceInstance">The service instance.</param>
            <param name="parameterExpression">The parameter expression.</param>
            <param name="selection">The selection.</param>
            <returns></returns>
        </member>
        <member name="P:Rock.Reporting.DataFilter.Person.GroupTypeAttendanceFilter.AppliesToEntityType">
            <summary>
            Gets the entity type that filter applies to.
            </summary>
            <value>
            The entity that filter applies to.
            </value>
        </member>
        <member name="P:Rock.Reporting.DataFilter.Person.GroupTypeAttendanceFilter.Section">
            <summary>
            Gets the section.
            </summary>
            <value>
            The section.
            </value>
        </member>
        <member name="T:Rock.Reporting.DataFilter.Person.HasPictureFilter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Reporting.DataFilter.Person.HasPictureFilter.GetTitle(System.Type)">
            <summary>
            Gets the title.
            </summary>
            <param name="entityType"></param>
            <returns></returns>
            <value>
            The title.
            </value>
        </member>
        <member name="M:Rock.Reporting.DataFilter.Person.HasPictureFilter.GetClientFormatSelection(System.Type)">
            <summary>
            Formats the selection on the client-side.  When the filter is collapsed by the user, the Filterfield control
            will set the description of the filter to whatever is returned by this property.  If including script, the
            controls parent container can be referenced through a '$content' variable that is set by the control before 
            referencing this property.
            </summary>
            <value>
            The client format script.
            </value>
        </member>
        <member name="M:Rock.Reporting.DataFilter.Person.HasPictureFilter.FormatSelection(System.Type,System.String)">
            <summary>
            Formats the selection.
            </summary>
            <param name="entityType">Type of the entity.</param>
            <param name="selection">The selection.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Reporting.DataFilter.Person.HasPictureFilter.CreateChildControls(System.Type,Rock.Web.UI.Controls.FilterField)">
            <summary>
            Creates the child controls.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rock.Reporting.DataFilter.Person.HasPictureFilter.RenderControls(System.Type,Rock.Web.UI.Controls.FilterField,System.Web.UI.HtmlTextWriter,System.Web.UI.Control[])">
            <summary>
            Renders the controls.
            </summary>
            <param name="entityType">Type of the entity.</param>
            <param name="filterControl">The filter control.</param>
            <param name="writer">The writer.</param>
            <param name="controls">The controls.</param>
        </member>
        <member name="M:Rock.Reporting.DataFilter.Person.HasPictureFilter.GetSelection(System.Type,System.Web.UI.Control[])">
            <summary>
            Gets the selection.
            </summary>
            <param name="entityType">Type of the entity.</param>
            <param name="controls">The controls.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Reporting.DataFilter.Person.HasPictureFilter.SetSelection(System.Type,System.Web.UI.Control[],System.String)">
            <summary>
            Sets the selection.
            </summary>
            <param name="entityType">Type of the entity.</param>
            <param name="controls">The controls.</param>
            <param name="selection">The selection.</param>
        </member>
        <member name="M:Rock.Reporting.DataFilter.Person.HasPictureFilter.GetExpression(System.Type,Rock.Data.IService,System.Linq.Expressions.ParameterExpression,System.String)">
            <summary>
            Gets the expression.
            </summary>
            <param name="entityType">Type of the entity.</param>
            <param name="serviceInstance">The service instance.</param>
            <param name="parameterExpression">The parameter expression.</param>
            <param name="selection">The selection.</param>
            <returns></returns>
        </member>
        <member name="P:Rock.Reporting.DataFilter.Person.HasPictureFilter.AppliesToEntityType">
            <summary>
            Gets the entity type that filter applies to.
            </summary>
            <value>
            The entity that filter applies to.
            </value>
        </member>
        <member name="P:Rock.Reporting.DataFilter.Person.HasPictureFilter.Section">
            <summary>
            Gets the section.
            </summary>
            <value>
            The section.
            </value>
        </member>
        <member name="T:Rock.Web.UI.Adapters.RadioButtonListAdapter">
            <summary>
            Control adapter for radio button list
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Adapters.RadioButtonListAdapter.RenderBeginTag(System.Web.UI.HtmlTextWriter)">
            <summary>
            Creates the beginning tag for the Web control in the markup that is transmitted to the target browser.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter" /> containing methods to render the target-specific output.</param>
        </member>
        <member name="M:Rock.Web.UI.Adapters.RadioButtonListAdapter.RenderEndTag(System.Web.UI.HtmlTextWriter)">
            <summary>
            Creates the ending tag for the Web control in the markup that is transmitted to the target browser.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter" /> containing methods to render the target-specific output.</param>
        </member>
        <member name="M:Rock.Web.UI.Adapters.RadioButtonListAdapter.RenderContents(System.Web.UI.HtmlTextWriter)">
            <summary>
            Generates the target-specific inner markup for the Web control to which the control adapter is attached.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter" /> containing methods to render the target-specific output.</param>
        </member>
        <member name="T:Rock.Web.UI.Controls.FilterGroup">
            <summary>
            Report Filter control
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.FilterGroup.CreateChildControls">
            <summary>
            Called by the ASP.NET page framework to notify server controls that use composition-based implementation to create any child controls they contain in preparation for posting back or rendering.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.FilterGroup.RenderControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            Writes the <see cref="T:System.Web.UI.WebControls.CompositeControl" /> content to the specified <see cref="T:System.Web.UI.HtmlTextWriter" /> object, for display on the client.
            </summary>
            <param name="writer">An <see cref="T:System.Web.UI.HtmlTextWriter" /> that represents the output stream to render HTML content on the client.</param>
        </member>
        <member name="P:Rock.Web.UI.Controls.FilterGroup.FilteredEntityTypeName">
            <summary>
            Gets or sets the name of entity type that is being filtered.
            </summary>
            <value>
            The name of the filtered entity type.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.FilterGroup.DataViewFilterGuid">
            <summary>
            Gets or sets the data view filter unique identifier.
            </summary>
            <value>
            The data view filter unique identifier.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.FilterGroup.FilterType">
            <summary>
            Gets or sets the type of the filter.
            </summary>
            <value>
            The type of the filter.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.FilterGroup.IsDeleteEnabled">
            <summary>
            Gets or sets a value indicating whether this instance is delete enabled.
            </summary>
            <value>
            <c>true</c> if this instance is delete enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="E:Rock.Web.UI.Controls.FilterGroup.AddFilterClick">
            <summary>
            Occurs when [add filter click].
            </summary>
        </member>
        <member name="E:Rock.Web.UI.Controls.FilterGroup.AddGroupClick">
            <summary>
            Occurs when [add group click].
            </summary>
        </member>
        <member name="E:Rock.Web.UI.Controls.FilterGroup.DeleteGroupClick">
            <summary>
            Occurs when [delete group click].
            </summary>
        </member>
        <member name="T:Rock.Web.UI.Controls.FilterField">
            <summary>
            Report Filter control
            </summary>
        </member>
        <member name="F:Rock.Web.UI.Controls.FilterField.ddlFilterType">
            <summary>
            The filter type dropdown
            </summary>
        </member>
        <member name="F:Rock.Web.UI.Controls.FilterField.lbDelete">
            <summary>
            The delte button
            </summary>
        </member>
        <member name="F:Rock.Web.UI.Controls.FilterField.hfExpanded">
            <summary>
            The hidden field for tracking expanded
            </summary>
        </member>
        <member name="F:Rock.Web.UI.Controls.FilterField.filterControls">
            <summary>
            The filter controls
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.FilterField.OnInit(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.Init" /> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs" /> object that contains the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.FilterField.CreateChildControls">
            <summary>
            Called by the ASP.NET page framework to notify server controls that use composition-based implementation to create any child controls they contain in preparation for posting back or rendering.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.FilterField.RenderControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            Writes the <see cref="T:System.Web.UI.WebControls.CompositeControl" /> content to the specified <see cref="T:System.Web.UI.HtmlTextWriter" /> object, for display on the client.
            </summary>
            <param name="writer">An <see cref="T:System.Web.UI.HtmlTextWriter" /> that represents the output stream to render HTML content on the client.</param>
        </member>
        <member name="P:Rock.Web.UI.Controls.FilterField.FilteredEntityTypeName">
            <summary>
            Gets or sets the name of entity type that is being filtered.
            </summary>
            <value>
            The name of the filtered entity type.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.FilterField.DataViewFilterGuid">
            <summary>
            Gets or sets the data view filter unique identifier.
            </summary>
            <value>
            The data view filter unique identifier.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.FilterField.FilteredEntityType">
            <summary>
            Gets the type of the filtered entity.
            </summary>
            <value>
            The type of the filtered entity.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.FilterField.FilterEntityTypeName">
            <summary>
            Gets or sets the name of the filter entity type.  This is a DataFilter type
            that applies to the FilteredEntityType
            </summary>
            <value>
            The name of the entity type.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.FilterField.Expanded">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Rock.Web.UI.Controls.FilterField"/> is expanded.
            </summary>
            <value>
              <c>true</c> if expanded; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.FilterField.Selection">
            <summary>
            Gets or sets the selection.
            </summary>
            <value>
            The selection.
            </value>
        </member>
        <member name="E:Rock.Web.UI.Controls.FilterField.DeleteClick">
            <summary>
            Occurs when [delete click].
            </summary>
        </member>
        <member name="E:Rock.Web.UI.Controls.FilterField.SelectionChanged">
            <summary>
            Occurs when [selection changed].
            </summary>
        </member>
        <member name="T:Rock.Web.UI.Controls.AttributeField">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.AttributeField.GetValue(System.Web.UI.Control)">
            <summary>
            Retrieves the value of the field bound to the <see cref="T:System.Web.UI.WebControls.BoundField" /> object.
            </summary>
            <param name="controlContainer">The container for the field value.</param>
            <returns>
            The value of the field bound to the <see cref="T:System.Web.UI.WebControls.BoundField" />.
            </returns>
        </member>
        <member name="M:Rock.Web.UI.Controls.AttributeField.FormatDataValue(System.Object,System.Boolean)">
            <summary>
            Formats the specified field value for a cell in the <see cref="T:System.Web.UI.WebControls.BoundField" /> object.
            </summary>
            <param name="dataValue">The field value to format.</param>
            <param name="encode">true to encode the value; otherwise, false.</param>
            <returns>
            The field value converted to the format specified by <see cref="P:System.Web.UI.WebControls.BoundField.DataFormatString" />.
            </returns>
        </member>
        <member name="T:Rock.Web.UI.BreadCrumb">
            <summary>
            Helper class to work with page navigation
            </summary>
        </member>
        <member name="M:Rock.Web.UI.BreadCrumb.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Web.UI.BreadCrumb"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="active">if set to <c>true</c> [active].</param>
        </member>
        <member name="M:Rock.Web.UI.BreadCrumb.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Web.UI.BreadCrumb"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="url">The URL.</param>
            <param name="active">if set to <c>true</c> [active].</param>
        </member>
        <member name="M:Rock.Web.UI.BreadCrumb.#ctor(System.String,Rock.Web.PageReference,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Web.UI.BreadCrumb"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="pageReference">The page reference.</param>
            <param name="active">if set to <c>true</c> [active].</param>
        </member>
        <member name="P:Rock.Web.UI.BreadCrumb.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:Rock.Web.UI.BreadCrumb.Url">
            <summary>
            Gets or sets the URL.
            </summary>
            <value>
            The URL.
            </value>
        </member>
        <member name="P:Rock.Web.UI.BreadCrumb.Active">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Rock.Web.UI.BreadCrumb"/> is active.
            </summary>
            <value>
              <c>true</c> if active; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Rock.Web.UI.RockMasterPage">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Web.UI.RockMasterPage.SetPage(Rock.Web.Cache.PageCache)">
            <summary>
            Sets the page.
            </summary>
            <param name="pageCache">The page cache.</param>
        </member>
        <member name="M:Rock.Web.UI.RockMasterPage.ResolveRockUrl(System.String)">
            <summary>
            Resolves the rock URL.
            </summary>
            <param name="url">The URL.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.UI.RockMasterPage.ResolveRockUrl(System.String,System.Boolean)">
            <summary>
            Resolves the rock URL.
            </summary>
            <param name="url">The URL.</param>
            <param name="fingerprint">if set to <c>true</c> [fingerprint].</param>
            <returns></returns>
        </member>
        <member name="P:Rock.Web.UI.RockMasterPage.ShowPageTitle">
            <summary>
            Gets or sets a value indicating whether [show page title].
            </summary>
            <value>
              <c>true</c> if [show page title]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Rock.Web.UI.IDetailBlock">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Web.UI.IDetailBlock.ShowDetail(System.String,System.Int32)">
            <summary>
            Shows the detail.
            </summary>
            <param name="itemKey">The item key.</param>
            <param name="itemKeyValue">The item key value.</param>
        </member>
        <member name="T:Rock.Web.UI.ISecondaryBlock">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Web.UI.ISecondaryBlock.SetVisible(System.Boolean)">
            <summary>
            Sets the visible.
            </summary>
            <param name="visible">if set to <c>true</c> [visible].</param>
        </member>
        <member name="T:Rock.Web.UI.ViewStateList`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:Rock.Web.UI.ViewStateList`1.internalListJson">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Web.UI.ViewStateList`1.GetList">
            <summary>
            Gets the list.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.UI.ViewStateList`1.SerializeList(System.Collections.Generic.List{`0})">
            <summary>
            Serializes the list.
            </summary>
            <param name="list">The list.</param>
        </member>
        <member name="M:Rock.Web.UI.ViewStateList`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Web.UI.ViewStateList`1"/> class.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.ViewStateList`1.GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Rock.Web.UI.ViewStateList`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Rock.Web.UI.ViewStateList`1.RemoveEntity(System.Int32)">
            <summary>
            Removes the entity.
            </summary>
            <param name="id">The id.</param>
        </member>
        <member name="M:Rock.Web.UI.ViewStateList`1.RemoveEntity(System.Guid)">
            <summary>
            Removes the entity.
            </summary>
            <param name="guid">The GUID.</param>
        </member>
        <member name="M:Rock.Web.UI.ViewStateList`1.Add(Rock.Data.Model{`0})">
            <summary>
            Adds the specified item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:Rock.Web.UI.ViewStateList`1.AddAll(System.Collections.Generic.List{`0})">
            <summary>
            Adds all.
            </summary>
            <param name="items">The items.</param>
        </member>
        <member name="M:Rock.Web.UI.ViewStateList`1.InsertAll(System.Collections.Generic.List{`0})">
            <summary>
            Inserts all.
            </summary>
            <param name="items">The items.</param>
        </member>
        <member name="M:Rock.Web.UI.ViewStateList`1.Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.ViewStateList`1.SaveViewState">
            <summary>
            Saves the state of the view.
            </summary>
        </member>
        <member name="T:Rock.Web.Utilities.HtmlSanitizer">
            <summary>
            
            </summary>
        </member>
        <member name="F:Rock.Web.Utilities.HtmlSanitizer.BlackList">
            <summary>
            The black list
            </summary>
        </member>
        <member name="M:Rock.Web.Utilities.HtmlSanitizer.SanitizeHtml(System.String,System.String[])">
            <summary>
            Cleans up an HTML string and removes HTML tags in blacklist
            </summary>
            <param name="html">The HTML.</param>
            <param name="blackList">The black list.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.Utilities.HtmlSanitizer.Sanitize(System.String)">
            <summary>
            Cleans up an HTML string by removing elements
            on the blacklist and all elements that start
            with onXXX .
            </summary>
            <param name="html"></param>
            <returns></returns>
        </member>
        <member name="T:Rock.Workflow.Action.ActivateActions">
            <summary>
            Activates all the actions for the current action's activity.
            </summary>
        </member>
        <member name="T:Rock.Workflow.ActionComponent">
            <summary>
            Base class for components that perform actions for a workflow
            </summary>
        </member>
        <member name="M:Rock.Workflow.ActionComponent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Workflow.ActionComponent"/> class.
            </summary>
        </member>
        <member name="M:Rock.Workflow.ActionComponent.Execute(Rock.Model.WorkflowAction,System.Object,System.Collections.Generic.List{System.String}@)">
            <summary>
            Executes the specified workflow.
            </summary>
            <param name="action">The workflow action.</param>
            <param name="entity">The entity.</param>
            <param name="errorMessages">The error messages.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Workflow.ActionComponent.LoadAttributes">
            <summary>
            Loads the attributes.
            </summary>
            <exception cref="T:System.Exception">Workflow Action attributes are saved specific to the current action, which requires that the current action is included in order to load or retrieve values.  Use the LoadAttributes( WorkflowAction action ) method instead.</exception>
        </member>
        <member name="M:Rock.Workflow.ActionComponent.LoadAttributes(Rock.Model.WorkflowAction)">
            <summary>
            Loads the attributes for the action.  The attributes are loaded by the framework prior to executing the action, 
            so typically workflow actions do not need to load the attributes
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="M:Rock.Workflow.ActionComponent.GetAttributeValue(System.String)">
            <summary>
            Use GetAttributeValue( WorkflowAction action, string key) instead.  Workflow action attribute values are 
            specific to the action instance (rather than global).  This method will throw an exception
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
            <exception cref="T:System.Exception">Workflow Action attributes are saved specific to the current action, which requires that the current action is included in order to load or retrieve values.  Use the GetAttributeValue( WorkflowAction action, string key ) method instead.</exception>
        </member>
        <member name="M:Rock.Workflow.ActionComponent.GetAttributeValue(Rock.Model.WorkflowAction,System.String)">
            <summary>
            Gets the attribute value for the action
            </summary>
            <param name="action">The action.</param>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="P:Rock.Workflow.ActionComponent.AttributeValueDefaults">
            <summary>
            Gets the attribute value defaults.
            </summary>
            <value>
            The attribute defaults.
            </value>
        </member>
        <member name="P:Rock.Workflow.ActionComponent.Order">
            <summary>
            Always returns 0.  (Ordering of actions is configured through the workflow admin and stored as property of WorkflowActionType)
            </summary>
            <value>
            The order.
            </value>
        </member>
        <member name="P:Rock.Workflow.ActionComponent.IsActive">
            <summary>
            Always returns true.  (Activating of actions is configured through the workflow admin and stored as a WorkflowActionType)
            </summary>
            <value>
              <c>true</c> if this instance is active; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Rock.Workflow.Action.ActivateActions.Execute(Rock.Model.WorkflowAction,System.Object,System.Collections.Generic.List{System.String}@)">
            <summary>
            Executes the specified workflow.
            </summary>
            <param name="action">The action.</param>
            <param name="entity">The entity.</param>
            <param name="errorMessages">The error messages.</param>
            <returns></returns>
        </member>
        <member name="T:Rock.Workflow.Action.WriteToLog">
            <summary>
            Writes a message to Workflow log.
            </summary>
        </member>
        <member name="M:Rock.Workflow.Action.WriteToLog.Execute(Rock.Model.WorkflowAction,System.Object,System.Collections.Generic.List{System.String}@)">
            <summary>
            Executes the specified workflow.
            </summary>
            <param name="action">The action.</param>
            <param name="entity">The entity.</param>
            <param name="errorMessages">The error messages.</param>
            <returns></returns>
        </member>
        <member name="T:Rock.Workflow.Action.UserEntryForm">
            <summary>
            Prompts user for attribute values
            </summary>
        </member>
        <member name="T:Rock.Workflow.Action.CheckIn.CheckInActionComponent">
            <summary>
            An action component specifically for a check-in workflow
            </summary>
        </member>
        <member name="M:Rock.Workflow.Action.CheckIn.CheckInActionComponent.GetCheckInState(System.Object,System.Collections.Generic.List{System.String}@)">
            <summary>
            Gets the state of the check-in.
            </summary>
            <param name="entity">The entity.</param>
            <param name="errorMessages">The error messages.</param>
            <returns></returns>
        </member>
        <member name="T:Rock.Workflow.Action.CheckIn.CalculateLastAttended">
            <summary>
            Calculates and updates the LastCheckIn property on check-in objects
            </summary>
        </member>
        <member name="M:Rock.Workflow.Action.CheckIn.CalculateLastAttended.Execute(Rock.Model.WorkflowAction,System.Object,System.Collections.Generic.List{System.String}@)">
            <summary>
            Executes the specified workflow.
            </summary>
            <param name="action">The workflow action.</param>
            <param name="entity">The entity.</param>
            <param name="errorMessages">The error messages.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Rock.Workflow.Action.CheckIn.FilterGroupsByGrade">
            <summary>
            Removes the groups for each selected family member that are not specific to their grade.
            </summary>
        </member>
        <member name="M:Rock.Workflow.Action.CheckIn.FilterGroupsByGrade.Execute(Rock.Model.WorkflowAction,System.Object,System.Collections.Generic.List{System.String}@)">
            <summary>
            Executes the specified workflow.
            </summary>
            <param name="action">The workflow action.</param>
            <param name="entity">The entity.</param>
            <param name="errorMessages">The error messages.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Rock.Workflow.Action.CheckIn.FilterGroupsByAge">
            <summary>
            Removes the groups for each selected family member that are not specific to their age.
            </summary>
        </member>
        <member name="M:Rock.Workflow.Action.CheckIn.FilterGroupsByAge.Execute(Rock.Model.WorkflowAction,System.Object,System.Collections.Generic.List{System.String}@)">
            <summary>
            Executes the specified workflow.
            </summary>
            <param name="action">The workflow action.</param>
            <param name="entity">The entity.</param>
            <param name="errorMessages">The error messages.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Rock.Workflow.Action.CheckIn.FilterGroupsByGender">
            <summary>
            Removes the grouptypes from each family member that are not specific to their grade
            </summary>
        </member>
        <member name="M:Rock.Workflow.Action.CheckIn.FilterGroupsByGender.Execute(Rock.Model.WorkflowAction,System.Object,System.Collections.Generic.List{System.String}@)">
            <summary>
            Executes the specified workflow.
            </summary>
            <param name="action">The workflow action.</param>
            <param name="entity">The entity.</param>
            <param name="errorMessages">The error messages.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Rock.Workflow.Action.CheckIn.FilterGroupsByAbilityLevel">
            <summary>
            Removes the locations and groups for each selected family member
            if the person's ability level does not match the groups.
            </summary>
        </member>
        <member name="M:Rock.Workflow.Action.CheckIn.FilterGroupsByAbilityLevel.Execute(Rock.Model.WorkflowAction,System.Object,System.Collections.Generic.List{System.String}@)">
            <summary>
            Executes the specified workflow.
            </summary>
            <param name="action">The workflow action.</param>
            <param name="entity">The entity.</param>
            <param name="errorMessages">The error messages.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Rock.Workflow.Action.CheckIn.FilterGroupsBySpecialNeeds">
            <summary>
            Removes the location's "special needs" groups for each selected family member
            if the person is not "special needs".  The filter can ALSO be configured to 
            remove normal (non-special needs) groups when the person is "special needs".
            </summary>
        </member>
        <member name="M:Rock.Workflow.Action.CheckIn.FilterGroupsBySpecialNeeds.Execute(Rock.Model.WorkflowAction,System.Object,System.Collections.Generic.List{System.String}@)">
            <summary>
            Executes the specified workflow.
            </summary>
            <param name="action">The workflow action.</param>
            <param name="entity">The entity.</param>
            <param name="errorMessages">The error messages.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Rock.Workflow.Action.CheckIn.FilterGroupsByLastName">
            <summary>
            Removes the locations and groups for each selected family member that
            are not specific to their last name.
            </summary>
        </member>
        <member name="M:Rock.Workflow.Action.CheckIn.FilterGroupsByLastName.Execute(Rock.Model.WorkflowAction,System.Object,System.Collections.Generic.List{System.String}@)">
            <summary>
            Executes the specified workflow.
            </summary>
            <param name="action">The workflow action.</param>
            <param name="entity">The entity.</param>
            <param name="errorMessages">The error messages.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Rock.Workflow.Action.CheckIn.CreateLabels">
            <summary>
            Saves the selected check-in data as attendance
            </summary>
        </member>
        <member name="M:Rock.Workflow.Action.CheckIn.CreateLabels.Execute(Rock.Model.WorkflowAction,System.Object,System.Collections.Generic.List{System.String}@)">
            <summary>
            Executes the specified workflow.
            </summary>
            <param name="action">The workflow action.</param>
            <param name="entity">The entity.</param>
            <param name="errorMessages">The error messages.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Rock.Workflow.Action.CheckIn.FilterByGrade">
            <summary>
            Removes the grouptypes from each family member that are not specific to their grade
            </summary>
        </member>
        <member name="M:Rock.Workflow.Action.CheckIn.FilterByGrade.Execute(Rock.Model.WorkflowAction,System.Object,System.Collections.Generic.List{System.String}@)">
            <summary>
            Executes the specified workflow.
            </summary>
            <param name="action">The workflow action.</param>
            <param name="entity">The entity.</param>
            <param name="errorMessages">The error messages.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Rock.Workflow.Action.CheckIn.RemoveEmptyPeople">
            <summary>
            Removes any person that does not have any group types
            </summary>
        </member>
        <member name="M:Rock.Workflow.Action.CheckIn.RemoveEmptyPeople.Execute(Rock.Model.WorkflowAction,System.Object,System.Collections.Generic.List{System.String}@)">
            <summary>
            Executes the specified workflow.
            </summary>
            <param name="action">The workflow action.</param>
            <param name="entity">The entity.</param>
            <param name="errorMessages">The error messages.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Rock.Workflow.Action.CheckIn.RemoveEmptyGroupTypes">
            <summary>
            Removes any group type that does not have any groups
            </summary>
        </member>
        <member name="M:Rock.Workflow.Action.CheckIn.RemoveEmptyGroupTypes.Execute(Rock.Model.WorkflowAction,System.Object,System.Collections.Generic.List{System.String}@)">
            <summary>
            Executes the specified workflow.
            </summary>
            <param name="action">The workflow action.</param>
            <param name="entity">The entity.</param>
            <param name="errorMessages">The error messages.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Rock.Workflow.Action.CheckIn.RemoveEmptyLocations">
            <summary>
            Removes locations (from groups) if the location has no schedule.
            </summary>
        </member>
        <member name="M:Rock.Workflow.Action.CheckIn.RemoveEmptyLocations.Execute(Rock.Model.WorkflowAction,System.Object,System.Collections.Generic.List{System.String}@)">
            <summary>
            Executes the specified workflow.
            </summary>
            <param name="action">The workflow action.</param>
            <param name="entity">The entity.</param>
            <param name="errorMessages">The error messages.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Rock.Workflow.Action.CheckIn.SaveAttendance">
            <summary>
            Saves the selected check-in data as attendance
            </summary>
        </member>
        <member name="M:Rock.Workflow.Action.CheckIn.SaveAttendance.Execute(Rock.Model.WorkflowAction,System.Object,System.Collections.Generic.List{System.String}@)">
            <summary>
            Executes the specified workflow.
            </summary>
            <param name="action">The workflow action.</param>
            <param name="entity">The entity.</param>
            <param name="errorMessages">The error messages.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Rock.Workflow.Action.CheckIn.RemoveEmptyGroups">
            <summary>
            Removes any group that does not have any locations
            </summary>
        </member>
        <member name="M:Rock.Workflow.Action.CheckIn.RemoveEmptyGroups.Execute(Rock.Model.WorkflowAction,System.Object,System.Collections.Generic.List{System.String}@)">
            <summary>
            Executes the specified workflow.
            </summary>
            <param name="action">The workflow action.</param>
            <param name="entity">The entity.</param>
            <param name="errorMessages">The error messages.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Rock.Workflow.Action.CheckIn.LoadSchedules">
            <summary>
            Loads the schedules available for each group
            </summary>
        </member>
        <member name="M:Rock.Workflow.Action.CheckIn.LoadSchedules.Execute(Rock.Model.WorkflowAction,System.Object,System.Collections.Generic.List{System.String}@)">
            <summary>
            Executes the specified workflow.
            </summary>
            <param name="action">The workflow action.</param>
            <param name="entity">The entity.</param>
            <param name="errorMessages">The error messages.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Rock.Workflow.Action.CheckIn.LoadGroups">
            <summary>
            Loads the groups available for each location.
            </summary>
        </member>
        <member name="M:Rock.Workflow.Action.CheckIn.LoadGroups.Execute(Rock.Model.WorkflowAction,System.Object,System.Collections.Generic.List{System.String}@)">
            <summary>
            Executes the specified workflow.
            </summary>
            <param name="action">The workflow action.</param>
            <param name="entity">The entity.</param>
            <param name="errorMessages">The error messages.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Rock.Workflow.Action.CheckIn.FilterActiveLocations">
            <summary>
            Removes any locations that are not active
            </summary>
        </member>
        <member name="M:Rock.Workflow.Action.CheckIn.FilterActiveLocations.Execute(Rock.Model.WorkflowAction,System.Object,System.Collections.Generic.List{System.String}@)">
            <summary>
            Executes the specified workflow.
            </summary>
            <param name="action">The workflow action.</param>
            <param name="entity">The entity.</param>
            <param name="errorMessages">The error messages.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Rock.Workflow.Action.CheckIn.LoadLocations">
            <summary>
            Adds the locations for each members group types
            </summary>
        </member>
        <member name="M:Rock.Workflow.Action.CheckIn.LoadLocations.Execute(Rock.Model.WorkflowAction,System.Object,System.Collections.Generic.List{System.String}@)">
            <summary>
            Executes the specified workflow.
            </summary>
            <param name="action">The workflow action.</param>
            <param name="entity">The entity.</param>
            <param name="errorMessages">The error messages.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Rock.Workflow.Action.CheckIn.FilterByAge">
            <summary>
            Removes the grouptypes from each family member that are not specific to their age
            </summary>
        </member>
        <member name="M:Rock.Workflow.Action.CheckIn.FilterByAge.Execute(Rock.Model.WorkflowAction,System.Object,System.Collections.Generic.List{System.String}@)">
            <summary>
            Executes the specified workflow.
            </summary>
            <param name="action">The workflow action.</param>
            <param name="entity">The entity.</param>
            <param name="errorMessages">The error messages.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Rock.Workflow.Action.CheckIn.LoadGroupTypes">
            <summary>
            Loads the group types allowed for each person in a family
            </summary>
        </member>
        <member name="M:Rock.Workflow.Action.CheckIn.LoadGroupTypes.Execute(Rock.Model.WorkflowAction,System.Object,System.Collections.Generic.List{System.String}@)">
            <summary>
            Executes the specified workflow.
            </summary>
            <param name="action">The workflow action.</param>
            <param name="entity">The entity.</param>
            <param name="errorMessages">The error messages.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Rock.Workflow.Action.CheckIn.FindRelationships">
            <summary>
            Finds people with a relationship to members of family
            </summary>
        </member>
        <member name="M:Rock.Workflow.Action.CheckIn.FindRelationships.Execute(Rock.Model.WorkflowAction,System.Object,System.Collections.Generic.List{System.String}@)">
            <summary>
            Executes the specified workflow.
            </summary>
            <param name="action">The workflow action.</param>
            <param name="entity">The entity.</param>
            <param name="errorMessages">The error messages.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Rock.Workflow.Action.CheckIn.FindFamilyMembers">
            <summary>
            Finds family members in a given family
            </summary>
        </member>
        <member name="M:Rock.Workflow.Action.CheckIn.FindFamilyMembers.Execute(Rock.Model.WorkflowAction,System.Object,System.Collections.Generic.List{System.String}@)">
            <summary>
            Executes the specified workflow.
            </summary>
            <param name="action">The workflow action.</param>
            <param name="entity">The entity.</param>
            <param name="errorMessages">The error messages.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Rock.Workflow.Action.CheckIn.FindFamilies">
            <summary>
            Finds families based on a given search critieria (i.e. phone, barcode, etc)
            </summary>
        </member>
        <member name="M:Rock.Workflow.Action.CheckIn.FindFamilies.Execute(Rock.Model.WorkflowAction,System.Object,System.Collections.Generic.List{System.String}@)">
            <summary>
            Executes the specified workflow.
            </summary>
            <param name="action">The workflow action.</param>
            <param name="entity">The entity.</param>
            <param name="errorMessages">The error messages.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Rock.Workflow.Action.CheckIn.SelectByBestFit">
            <summary>
            Assigns a grouptype, group, location and schedule from those available if one hasn't been previously selected
            </summary>
        </member>
        <member name="M:Rock.Workflow.Action.CheckIn.SelectByBestFit.Execute(Rock.Model.WorkflowAction,System.Object,System.Collections.Generic.List{System.String}@)">
            <summary>
            Executes the specified workflow.
            </summary>
            <param name="action">The workflow action.</param>
            <param name="entity">The entity.</param>
            <param name="errorMessages">The error messages.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Rock.Workflow.Action.CheckIn.SelectByLastAttended">
            <summary>
            Selects the available grouptype, group, location and schedule if it matches their previous attendance
            </summary>
        </member>
        <member name="M:Rock.Workflow.Action.CheckIn.SelectByLastAttended.Execute(Rock.Model.WorkflowAction,System.Object,System.Collections.Generic.List{System.String}@)">
            <summary>
            Executes the specified workflow.
            </summary>
            <param name="action">The workflow action.</param>
            <param name="entity">The entity.</param>
            <param name="errorMessages">The error messages.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Rock.Workflow.Action.CompleteActivity">
            <summary>
            Marks an activity as complete
            </summary>
        </member>
        <member name="M:Rock.Workflow.Action.CompleteActivity.Execute(Rock.Model.WorkflowAction,System.Object,System.Collections.Generic.List{System.String}@)">
            <summary>
            Executes the specified workflow action.
            </summary>
            <param name="action">The action.</param>
            <param name="entity">The entity.</param>
            <param name="errorMessages">The error messages.</param>
            <returns></returns>
        </member>
        <member name="T:Rock.Workflow.Action.ParseZebraLabel">
            <summary>
            Parse Zebra Label
            </summary>
        </member>
        <member name="M:Rock.Workflow.Action.ParseZebraLabel.Execute(Rock.Model.WorkflowAction,System.Object,System.Collections.Generic.List{System.String}@)">
            <summary>
            Executes the specified workflow.
            </summary>
            <param name="action">The action.</param>
            <param name="entity">The entity.</param>
            <param name="errorMessages">The error messages.</param>
            <returns></returns>
        </member>
        <member name="T:Rock.Workflow.Action.RunSQL">
            <summary>
            Runs a SQL query
            </summary>
        </member>
        <member name="M:Rock.Workflow.Action.RunSQL.Execute(Rock.Model.WorkflowAction,System.Object,System.Collections.Generic.List{System.String}@)">
            <summary>
            Executes the specified workflow.
            </summary>
            <param name="action">The action.</param>
            <param name="entity">The entity.</param>
            <param name="errorMessages">The error messages.</param>
            <returns></returns>
        </member>
        <member name="T:Rock.Workflow.TriggerCache">
            <summary>
            MEF Container class for WorkflowAction Componenets
            </summary>
        </member>
        <member name="M:Rock.Workflow.TriggerCache.#cctor">
            <summary>
            Initializes the <see cref="T:Rock.Workflow.TriggerCache"/> class.
            </summary>
        </member>
        <member name="M:Rock.Workflow.TriggerCache.Refresh">
            <summary>
            Refreshes this instance.
            </summary>
        </member>
        <member name="M:Rock.Workflow.TriggerCache.Triggers(System.String,Rock.Model.WorkflowTriggerType)">
            <summary>
            Triggerses the specified entity type name.
            </summary>
            <param name="entityTypeName">Name of the entity type.</param>
            <param name="triggerType">Type of the trigger.</param>
            <returns></returns>
        </member>
        <member name="T:Rock.Model.WorkflowTrigger">
            <summary>
            Represents an a WorkflowTrigger in Rock. A WorkflowTrigger can be setup on an EntityType or a subset of entities to start/trigger a workflow
            when a save or delete is performed on the entity. If the workflow does not complete successfully, the database action will not be performed.
            </summary>
        </member>
        <member name="M:Rock.Model.WorkflowTrigger.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Rock.Model.WorkflowTrigger.IsSystem">
            <summary>
            Gets or sets a flag indicating if this WorkflowTrigger is part of Rock core system/framework.
            </summary>
            <value>
            A <see cref="T:System.Boolean"/> value that is <c>true</c> if this WorkflowTrigger is part of the Rock core system/framework; otherwise <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Model.WorkflowTrigger.IsActive">
            <summary>
            Gets or sets a flag indicating if the WorkflowTrigger is active.
            </summary>
            <value>
            A <see cref="T:System.Boolean"/> value that is <c>true</c> if the WorkflowTrigger is active; otherwise <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Model.WorkflowTrigger.EntityTypeId">
            <summary>
            Gets or sets the EntityTypeId of the <see cref="T:Rock.Model.EntityType"/> of the entities that this trigger applies to
            </summary>
            <value>
            A <see cref="T:System.Int32"/> representing the EntityTypeId of the <see cref="T:Rock.Model.EntityType"/> that this trigger applies to.
            </value>
        </member>
        <member name="P:Rock.Model.WorkflowTrigger.EntityTypeQualifierColumn">
            <summary>
            Gets or sets the name of the Entity Qualifier Column that contains the value that filters the scope of the WorkflowTrigger. This
            property must be used in conjunction with the <see cref="P:Rock.Model.WorkflowTrigger.EntityTypeQualifierValue"/> property.
            </summary>
            <value>
            A <see cref="T:System.String"/> representing the name of the column that contains the value that filters the scope of the WorkflowTrigger.
            </value>
        </member>
        <member name="P:Rock.Model.WorkflowTrigger.EntityTypeQualifierValue">
            <summary>
            Gets or sets the EntityTypeQualifierValue in the <see cref="P:Rock.Model.WorkflowTrigger.EntityTypeQualifierColumn"/> that is used to filter the scope of the WorkflowTrigger.
            </summary>
            <value>
            A <see cref="T:System.String"/> containing the EntityTypeQualifierValue that is used to filter the scope of the WorkflowTrigger.
            </value>
        </member>
        <member name="P:Rock.Model.WorkflowTrigger.WorkflowTypeId">
            <summary>
            Gets or sets the WorkflowTypeId of the <see cref="T:Rock.Model.WorkflowType"/> that is executed by this WorkflowTrigger. This property is required.
            </summary>
            <value>
            A <see cref="T:System.Int32"/> representing WorkflowTypeId of the <see cref="T:Rock.Model.WorkflowType"/> that is executed by the WorkflowTrigger.
            </value>
        </member>
        <member name="P:Rock.Model.WorkflowTrigger.WorkflowTriggerType">
            <summary>
            Gets or sets the type of the workflow trigger. Indicates the type of change and  the timing the trigger.
            </summary>
            <value>
            A <see cref="T:Rock.Model.WorkflowTriggerType"/> enum value indicating the type of trigger.
            When <c>WorkflowTriggerType.PreSave</c> the workflow is triggered prior to a save action being executed.
            When <c>WorkflowTriggerType.PostSave</c> the workflow is triggered after a save action is executed.
            When <c>WorkflowTriggerType.PreDelete</c> the workflow is triggered prior to a delete action being executed.
            When <c>WorkflowTriggerType.PostDelete</c> the workflow is triggered after the delete action is executed.
            </value>
        </member>
        <member name="P:Rock.Model.WorkflowTrigger.WorkflowName">
            <summary>
            Gets or sets the name of the workflow trigger.
            </summary>
            <value>
            A <see cref="T:System.String"/> representing the name of the workflow trigger.
            </value>
        </member>
        <member name="P:Rock.Model.WorkflowTrigger.EntityType">
            <summary>
            Gets or sets the <see cref="T:Rock.Model.EntityType"/> that contains the entities that are affected by this WorkflowTrigger.
            </summary>
            <value>
            The <see cref="T:Rock.Model.EntityType"/> that contains the entities that are affected by this WorkflowTrigger.
            </value>
        </member>
        <member name="P:Rock.Model.WorkflowTrigger.WorkflowType">
            <summary>
            Gets or sets the <see cref="T:Rock.Model.WorkflowType"/> that is executed by this WorkflowTrigger.
            </summary>
            <value>
            The <see cref="T:Rock.Model.WorkflowType"/> that is executed by this WorkflowTrigger.
            </value>
        </member>
        <member name="T:Rock.Model.WorkflowTriggerConfiguration">
            <summary>
            EntityTypeWorkflowTrigger Configuration class.
            </summary>
        </member>
        <member name="M:Rock.Model.WorkflowTriggerConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.WorkflowTriggerConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Rock.Model.WorkflowTriggerType">
            <summary>
            Type of workflow trigger
            </summary>
        </member>
        <member name="F:Rock.Model.WorkflowTriggerType.PreSave">
            <summary>
            Pre Save
            </summary>
        </member>
        <member name="F:Rock.Model.WorkflowTriggerType.PostSave">
            <summary>
            Post Save
            </summary>
        </member>
        <member name="F:Rock.Model.WorkflowTriggerType.PreDelete">
            <summary>
            Pre Delete
            </summary>
        </member>
        <member name="F:Rock.Model.WorkflowTriggerType.PostDelete">
            <summary>
            Post Delete
            </summary>
        </member>
        <member name="T:Rock.Model.EntityType">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Model.EntityType.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Rock.Model.EntityType.Name">
            <summary>
            Gets or sets the full name of the EntityType (including the namespace). This value is required and is an alternate key.
            </summary>
            <value>
            A <see cref="T:System.String"/> representing the full name of the EntityType.
            </value>
        </member>
        <member name="P:Rock.Model.EntityType.AssemblyName">
            <summary>
            Gets or sets the assembly name of the EntityType. 
            </summary>
            <value>
            A <see cref="T:System.String"/> representing the Assembly Name of the EntityType.
            </value>
        </member>
        <member name="P:Rock.Model.EntityType.FriendlyName">
            <summary>
            Gets or sets the friendly name of the EntityType (the class name).
            </summary>
            <value>
            A <see cref="T:System.String"/> representing the friendly name of the Entity Type.
            </value>
        </member>
        <member name="P:Rock.Model.EntityType.IsEntity">
            <summary>
            Gets or sets a flag indicating whether this entity type implements the
            IEntity interface.
            </summary>
            <value>
             A <see cref="T:System.Boolean"/> value that is  <c>true</c> if this instance is an entity; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Model.EntityType.IsSecured">
            <summary>
            Gets or sets a flag indicating whether this entity type implements the
            ISecured interface.
            </summary>
            <value>
            A <see cref="T:System.Boolean"/> value that is <c>true</c> if this instance is secured; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Model.EntityType.IsCommon">
            <summary>
            Gets or sets a flag indicating whether this entity type is a commonly used entity.
            If so, it will grouped at the top by the entity type picker control
            </summary>
            <value>
            A <see cref="T:System.Boolean"/> value that is <c>true</c> if this instance is common; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Model.EntityType.SingleValueFieldTypeId">
            <summary>
            Gets or sets the single value field type identifier.
            </summary>
            <value>
            The single value field type identifier.
            </value>
        </member>
        <member name="P:Rock.Model.EntityType.MultiValueFieldTypeId">
            <summary>
            Gets or sets the multi value field type identifier.
            </summary>
            <value>
            The multi value field type identifier.
            </value>
        </member>
        <member name="P:Rock.Model.EntityType.IsSystem">
            <summary>
            Gets a flag  indicating whether this instance is part of the Rock core system/framework.
            </summary>
            <value>
            A <see cref="T:System.Boolean"/> value that is <c>true</c> if this instance is system; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Model.EntityType.SingleValueFieldType">
            <summary>
            Gets or sets the type of the single value field. 
            This helps determine what type of control can be used to select this type of Entity (single values)
            </summary>
            <value>
            The type of the single value field.
            </value>
        </member>
        <member name="P:Rock.Model.EntityType.MultiValueFieldType">
            <summary>
            Gets or sets the type of the multi value field.  
            This helps determine what type of control can be used to select this type of Entity (multiple values)
            </summary>
            <value>
            The type of the multi value field.
            </value>
        </member>
        <member name="T:Rock.Model.EntityTypeConfiguration">
            <summary>
            Entity Type Configuration class.
            </summary>
        </member>
        <member name="M:Rock.Model.EntityTypeConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.EntityTypeConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Rock.Model.TaggedItemService">
            <summary>
            Data access/service class for <see cref="T:Rock.Model.TaggedItem"/> entity objects.
            </summary>
            <summary>
            TaggedItem Service class
            </summary>
        </member>
        <member name="M:Rock.Model.TaggedItemService.Get(System.Int32,System.String,System.String,System.Nullable{System.Int32},System.Guid)">
            <summary>
            Returns a list of <see cref="T:Rock.Model.TaggedItem">TaggedItems</see> by EntityType, QualifierColumn, QualifierValue, OwnerId and EntityGuid.
            </summary>
            <param name="entityTypeId">A <see cref="T:System.Int32"/> representing the EntityTypeID of an <see cref="T:Rock.Model.EntityType"/> of the <see cref="T:Rock.Model.TaggedItem"/>. </param>
            <param name="entityQualifierColumn">A <see cref="T:System.String"/> representing the EntityQualifierColumn of the <see cref="T:Rock.Model.Tag"/> that the <see cref="T:Rock.Model.TaggedItem"/>
            belongs to. If a qualifier column was not used, this value can be null.</param>
            <param name="entityQualifierValue">A <see cref="T:System.String"/> representing the EntityQualifierValue of the <see cref="T:Rock.Model.Tag"/> that the <see cref="T:Rock.Model.TaggedItem"/>
            belongs to. If a qualifier value was not used, this  value can be null.</param>
            <param name="ownerId">A <see cref="T:System.Int32"/> representing the PersonId of the <see cref="T:Rock.Model.Person"/> who is the owner of the <see cref="T:Rock.Model.Tag"/> that 
            the <see cref="T:Rock.Model.TaggedItem"/> belongs to. </param>
            <param name="entityGuid">A <see cref="T:System.Guid"/> representing the entity Guid of the <see cref="T:Rock.Model.TaggedItem"/></param>
            <returns>A queryable collection of <see cref="T:Rock.Model.TaggedItem">TaggedItems</see> that match the provided criteria.</returns>
        </member>
        <member name="M:Rock.Model.TaggedItemService.Get(System.Int32,System.Guid)">
            <summary>
            Returns a <see cref="T:Rock.Model.TaggedItem"/> by TagId and EntityGuid. 
            </summary>
            <param name="tagId">A <see cref="T:System.Int32"/> representing the TagId of the <see cref="T:Rock.Model.Tag"/> that the <see cref="T:Rock.Model.TaggedItem"/> belongs to.</param>
            <param name="entityGuid">A <see cref="T:System.Guid"/> representing the Guid identifier of an <see cref="T:Rock.Model.TaggedItem">TaggedItem's</see> Entity object.</param>
            <returns>The <see cref="T:Rock.Model.TaggedItem"/> that matches the provided criteria. If a match is not found, null will be returned.</returns>
        </member>
        <member name="M:Rock.Model.TaggedItemService.#ctor(Rock.Data.RockContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.TaggedItemService"/> class
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Rock.Model.TaggedItemService.CanDelete(Rock.Model.TaggedItem,System.String@)">
            <summary>
            Determines whether this instance can delete the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="errorMessage">The error message.</param>
            <returns>
              <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Rock.Model.TagService">
            <summary>
            Service/Data access class for <see cref="T:Rock.Model.Tag"/> entity objects.
            </summary>
            <summary>
            Tag Service class
            </summary>
        </member>
        <member name="M:Rock.Model.TagService.Get(System.Int32,System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Returns a queryable collection of <see cref="T:Rock.Model.Tag">Tags</see> by EntityType, Qualifier Column, Qualifier Value and Owner.
            </summary>
            <param name="entityTypeId">A <see cref="T:System.Int32"/> representing the EntityTypeID of the <see cref="T:Rock.Model.EntityType"/> of the entities that are eligible for the <see cref="T:Rock.Model.Tag"/>.</param>
            <param name="entityQualifierColumn">A <see cref="T:System.String"/> that represents the EntityQualifierColumn of the <see cref="T:Rock.Model.Tag"/>. This value can be null.</param>
            <param name="entityQualifierValue">A <see cref="T:System.String"/> that represents the EntityQualifierValue of the <see cref="T:Rock.Model.Tag"/>. This value can be null.</param>
            <param name="ownerId">A <see cref="T:System.Int32"/> representing the <see cref="T:Rock.Model.Tag"/> owner's PersonId. If the <see cref="T:Rock.Model.Tag"/> is public this value can be null.</param>
            <returns>A queryable collection of <see cref="T:Rock.Model.Tag">Tags</see> that match the provided criteria.</returns>
        </member>
        <member name="M:Rock.Model.TagService.Get(System.Int32,System.String,System.String,System.Nullable{System.Int32},System.String)">
            <summary>
            Returns an <see cref="T:Rock.Model.Tag"/> by EntityType, Qualifier Column, Qualifier Value, Owner and Tag Name.
            </summary>
            <param name="entityTypeId">A <see cref="T:System.Int32"/> representing the EntityTypeID of the <see cref="T:Rock.Model.EntityType"/> of entities that are eligible for the <see cref="T:Rock.Model.Tag"/>.</param>
            <param name="entityQualifierColumn">A <see cref="T:System.String"/> representing the EntityQualifierColumn of the <see cref="T:Rock.Model.Tag"/>. 
            If the <see cref="T:Rock.Model.Tag"/> does not have a EntityQualifierColumn associated with it, this value can be null.</param>
            <param name="entityQualifierValue">A <see cref="T:System.String"/> representing the EntityQualifierValue of the <see cref="T:Rock.Model.Tag"/>.
            If the <see cref="T:Rock.Model.Tag"/> does not have a EntityQualifierValue associated with it, this value can be null.</param>
            <param name="ownerId">A <see cref="T:System.Int32"/> representing the owner's PersonId.</param>
            <param name="name">A <see cref="T:System.String"/> representing the Name of the <see cref="T:Rock.Model.Tag"/>.</param>
            <returns>The <see cref="T:Rock.Model.Tag"/> that matches the provided criteria. If a match is not found, null will be returned.</returns>
        </member>
        <member name="M:Rock.Model.TagService.#ctor(Rock.Data.RockContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.TagService"/> class
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Rock.Model.TagService.CanDelete(Rock.Model.Tag,System.String@)">
            <summary>
            Determines whether this instance can delete the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="errorMessage">The error message.</param>
            <returns>
              <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Rock.Model.Tag">
            <summary>
            Represents a collection or group of entity objects that share one or more common characteristics . A tag can either be private (owned by an individual <see cref="T:Rock.Model.Person"/>)
            or public.
            </summary>
        </member>
        <member name="M:Rock.Model.Tag.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this Tag.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this Tag.
            </returns>
        </member>
        <member name="P:Rock.Model.Tag.IsSystem">
            <summary>
            Gets or sets a flag indicating if this Tag is part of the Rock core system/framework.
            </summary>
            <value>
            A <see cref="T:System.Boolean"/> that is <c>true</c> if this Tag is part of the Rock core system/framework; otherwise <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Model.Tag.EntityTypeId">
            <summary>
            Gets or sets the EntityTypeId of the <see cref="T:Rock.Model.EntityType"/> containing the entities that can use this Tag. This property is required.
            </summary>
            <value>
            A <see cref="T:System.Int32"/> representing the EntityTypeId of the <see cref="T:Rock.Model.EntityType"/> that contains the entities that can use this Tag.
            </value>
        </member>
        <member name="P:Rock.Model.Tag.EntityTypeQualifierColumn">
            <summary>
            Gets or sets the name of the column/property that contains the value that can narrow the scope of entities that can receive this Tag. Entities where this 
            column contains the <see cref="P:Rock.Model.Tag.EntityTypeQualifierValue"/> will be eligible to have this Tag. This property must be used in conjunction with the <see cref="P:Rock.Model.Tag.EntityTypeQualifierValue"/>
            property. If all entities of the the specified <see cref="T:Rock.Model.EntityType"/> are eligible to use this Tag, this property will be null.
            </summary>
            <value>
            A <see cref="T:System.String"/> representing the EntityTypeQualifierColumn.
            </value>
        </member>
        <member name="P:Rock.Model.Tag.EntityTypeQualifierValue">
            <summary>
            Gets or sets the value in the <see cref="P:Rock.Model.Tag.EntityTypeQualifierColumn"/> that narrows the scope of entities that can receive this Tag. Entities that contain this value 
            in the <see cref="P:Rock.Model.Tag.EntityTypeQualifierColumn"/> are eligible to use this Tag. This property must be used in conjunction with the <see cref="P:Rock.Model.Tag.EntityTypeQualifierColumn"/> property.
            </summary>
            <value>
            A <see cref="T:System.String"/> representing the EntityTypeQualiferValue that limits which entities of the specified EntityType that can use this Tag.
            </value>
        </member>
        <member name="P:Rock.Model.Tag.Name">
            <summary>
            Gets or sets the Name of the Tag. This property is required.
            </summary>
            <value>
            A <see cref="T:System.String"/> that represents the Name of the Tag
            </value>
        </member>
        <member name="P:Rock.Model.Tag.Description">
            <summary>
            Gets or sets the description.
            </summary>
            <value>
            The description.
            </value>
        </member>
        <member name="P:Rock.Model.Tag.Order">
            <summary>
            Gets or sets the display order of the tag. the lower the number, the higher display priority that the Tag has.  For example the Tags with the lower Order could be displayed higher on the Tag list.
            This property is required.
            </summary>
            <value>
            A <see cref="T:System.Int32"/> that represents the display Order of the Tag.
            </value>
        </member>
        <member name="P:Rock.Model.Tag.OwnerId">
            <summary>
            Gets or sets the PersonId of the <see cref="T:Rock.Model.Person"/> who is the Owner this Tag. If this value is Null, the Tag will be considered an Public/all user tag.
            </summary>
            <value>
            A <see cref="T:System.Int32"/> that represents the PersonId of the <see cref="T:Rock.Model.Person"/> who is the Owner of this Tag.  If this is a Public tag, this value will be null.
            </value>
        </member>
        <member name="P:Rock.Model.Tag.Owner">
            <summary>
            Gets or sets the <see cref="T:Rock.Model.Person"/> who is the Owner of this Tag.
            </summary>
            <value>
            The <see cref="T:Rock.Model.Person"/> who is the owner of the tag.
            </value>
        </member>
        <member name="P:Rock.Model.Tag.EntityType">
            <summary>
            Gets or sets the <see cref="T:Rock.Model.EntityType"/> of the Entities that this Tag can be applied to.
            </summary>
            <value>
            The <see cref="T:Rock.Model.EntityType"/> of Entities that this Tag can be applied to.
            </value>
        </member>
        <member name="P:Rock.Model.Tag.TaggedItems">
            <summary>
            Gets or sets a collection of <see cref="T:Rock.Model.TaggedItem">TaggedItems</see> representing the entities that are tagged with this Tag.
            </summary>
            <value>
            A collection containing of <see cref="T:Rock.Model.TaggedItem">TaggedItems</see> representing the entities that use this tag.
            </value>
        </member>
        <member name="T:Rock.Model.TagConfiguration">
            <summary>
            Tag Configuration class.
            </summary>
        </member>
        <member name="M:Rock.Model.TagConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.TagConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Rock.Model.TaggedItem">
            <summary>
            Represents an entity object that belongs to a Tag. The same entity object can belong to multiple tags.
            </summary>
        </member>
        <member name="M:Rock.Model.TaggedItem.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this TagItem.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this TagItem.
            </returns>
        </member>
        <member name="P:Rock.Model.TaggedItem.IsSystem">
            <summary>
            Gets or sets a flag indicating if this TaggedItem is part of the Rock core system/framework.
            </summary>
            <value>
            A <see cref="T:System.Boolean"/> that is <c>true</c> if this TaggedItem is part of the Rock core system/framework; otherwise <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Model.TaggedItem.TagId">
            <summary>
            Gets or sets the TagId of the <see cref="T:Rock.Model.Tag"/> that this TaggedItem is tagged with.
            </summary>
            <value>
            A <see cref="T:System.Int32"/> representing the TagId of the <see cref="T:Rock.Model.Tag"/> that this TaggedItem is tagged with.
            </value>
        </member>
        <member name="P:Rock.Model.TaggedItem.EntityGuid">
            <summary>
            Gets or sets the GUID identifier of the tagged entity.
            </summary>
            <value>
            A <see cref="T:System.Guid"/> representing the GUID identifier of the tagged entity.
            </value>
        </member>
        <member name="P:Rock.Model.TaggedItem.Quantity">
            <summary>
            Gets or sets the quantity.  Used if tagging the same entity multiple times is supported.
            </summary>
            <value>
            The quantity.
            </value>
        </member>
        <member name="P:Rock.Model.TaggedItem.Tag">
            <summary>
            Gets or sets the Tag that this TaggedItem belongs to.
            </summary>
            <value>
            The <see cref="T:Rock.Model.Tag"/> that this TaggedItem belongs to.
            </value>
        </member>
        <member name="P:Rock.Model.TaggedItem.ParentAuthority">
            <summary>
            Gets the parent security authority for this TagItem
            </summary>
            <value>
            An entity that implements the <see cref="T:Rock.Security.ISecured"/> interface that this TagItem inherits security authority from.
            </value>
        </member>
        <member name="T:Rock.Model.TaggedItemConfiguration">
            <summary>
            Attribute Value Configuration class.
            </summary>
        </member>
        <member name="M:Rock.Model.TaggedItemConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.AttributeValueConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Rock.Model.DefinedTypeService">
            <summary>
            DefinedType Service class
            </summary>
            <summary>
            Service/Data Access class for <see cref="T:Rock.Model.DefinedType"/> entity objects.
            </summary>
        </member>
        <member name="M:Rock.Model.DefinedTypeService.#ctor(Rock.Data.RockContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.DefinedTypeService"/> class
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Rock.Model.DefinedTypeService.CanDelete(Rock.Model.DefinedType,System.String@)">
            <summary>
            Determines whether this instance can delete the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="errorMessage">The error message.</param>
            <returns>
              <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Rock.Model.DefinedTypeService.GetByFieldTypeId(System.Nullable{System.Int32})">
            <summary>
            Returns an enumerable collection of <see cref="T:Rock.Model.DefinedType">DefinedTypes</see> by FieldTypeId
            </summary>
            <param name="fieldTypeId">A <see cref="T:System.Int32"/> representing the FieldTypeId of the <see cref="T:Rock.Model.FieldType"/> that is used for the 
            <see cref="T:Rock.Model.DefinedValue"/>
            </param>
            <returns>An enumerable collection of <see cref="T:Rock.Model.DefinedType">DefinedTypes</see> that use the specified <see cref="T:Rock.Model.FieldType"/>.</returns>
        </member>
        <member name="M:Rock.Model.DefinedTypeService.GetByGuid(System.Guid)">
            <summary>
            Returns a <see cref="T:Rock.Model.DefinedType"/> by GUID identifier.
            </summary>
            <param name="guid">A <see cref="T:System.Guid"/> representing the Guid identifier of the <see cref="T:Rock.Model.DefinedType"/> to retrieve.</param>
            <returns>The <see cref="T:Rock.Model.DefinedType"/> with a matching Guid identifier. If a match is not found, null is returned.</returns>
        </member>
        <member name="T:Rock.Model.DefinedTypeExtensionMethods">
            <summary>
            Generated Extension Methods
            </summary>
        </member>
        <member name="M:Rock.Model.DefinedTypeExtensionMethods.Clone(Rock.Model.DefinedType,System.Boolean)">
            <summary>
            Clones this DefinedType object to a new DefinedType object
            </summary>
            <param name="source">The source.</param>
            <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.DefinedTypeExtensionMethods.CopyPropertiesFrom(Rock.Model.DefinedType,Rock.Model.DefinedType)">
            <summary>
            Copies the properties from another DefinedType object to this DefinedType object
            </summary>
            <param name="target">The target.</param>
            <param name="source">The source.</param>
        </member>
        <member name="T:Rock.Model.DefinedValueService">
            <summary>
            DefinedValue Service class
            </summary>
            <summary>
            Service/Data Access class for <see cref="T:Rock.Model.DefinedValue"/> entity objects.
            </summary>
        </member>
        <member name="M:Rock.Model.DefinedValueService.#ctor(Rock.Data.RockContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.DefinedValueService"/> class
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Rock.Model.DefinedValueService.CanDelete(Rock.Model.DefinedValue,System.String@)">
            <summary>
            Determines whether this instance can delete the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="errorMessage">The error message.</param>
            <returns>
              <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Rock.Model.DefinedValueService.GetByDefinedTypeId(System.Int32)">
            <summary>
            Returns an enumerable collection of <see cref="T:Rock.Model.DefinedValue">DefinedValues</see> that belong to a specified <see cref="T:Rock.Model.DefinedType"/> retrieved by the DefinedType's DefinedTypeId.
            </summary>
            <param name="definedTypeId">A <see cref="T:System.Int32"/> representing the DefinedTypeId of the <see cref="T:Rock.Model.DefinedType"/> to retrieve <see cref="T:Rock.Model.DefinedValue">DefinedValues</see> for.</param>
            <returns>An enumerable collection of <see cref="T:Rock.Model.DefinedValue">DefinedValues</see> that belong to the specified <see cref="T:Rock.Model.DefinedType"/>. The <see cref="T:Rock.Model.DefinedValue">DefinedValues</see> will 
            be ordered by the <see cref="T:Rock.Model.DefinedValue">DefinedValue's</see> Order property.</returns>
        </member>
        <member name="M:Rock.Model.DefinedValueService.GetByDefinedTypeGuid(System.Guid)">
            <summary>
            Returns an enumerable collection of <see cref="T:Rock.Model.DefinedValue">DefinedValues</see> that belong to a specified <see cref="T:Rock.Model.DefinedType"/> retrieved by the DefinedType's Guid identifier.
            </summary>
            <param name="definedTypeGuid">A <see cref="T:System.Guid"/> representing the Guid identifier of the <see cref="T:Rock.Model.DefinedType"/> to retrieve <see cref="T:Rock.Model.DefinedValue">DefinedValues</see>
            for.</param>
            <returns>An enumerable collection of <see cref="T:Rock.Model.DefinedValue">DefinedValues</see> that belong to the <see cref="T:Rock.Model.DefinedType"/> specified by the provided Guid. If a match
            is not found, an empty collection will be returned.</returns>
        </member>
        <member name="M:Rock.Model.DefinedValueService.GetByGuid(System.Guid)">
            <summary>
            Returns a <see cref="T:Rock.Model.DefinedValue"/> by it's Guid identifier.
            </summary>
            <param name="guid">A <see cref="T:System.Guid"/> representing the Guid identifier of the <see cref="T:Rock.Model.DefinedValue"/> to retrieve.</param>
            <returns>The <see cref="T:Rock.Model.DefinedValue"/> specified by the provided Guid. If a match is not found, a null value will be returned.</returns>
        </member>
        <member name="M:Rock.Model.DefinedValueService.GetIdByGuid(System.Guid)">
            <summary>
            Returns a DefinedValueId of a  <see cref="T:Rock.Model.DefinedValue"/> by it's Guid.
            </summary>
            <param name="guid">A <see cref="T:System.Guid"/> representing the Guid identifier of the <see cref="T:Rock.Model.DefinedValue"/> to retrieve the DefinedvalueId for.</param>
            <returns>A <see cref="T:System.Int32"/> representing the DefinedValueId of the <see cref="T:Rock.Model.DefinedValue"/> specified by the provided Guid. If a match is not found,
            a null value will be returned.</returns>
        </member>
        <member name="T:Rock.Model.DefinedValueExtensionMethods">
            <summary>
            Generated Extension Methods
            </summary>
        </member>
        <member name="M:Rock.Model.DefinedValueExtensionMethods.Clone(Rock.Model.DefinedValue,System.Boolean)">
            <summary>
            Clones this DefinedValue object to a new DefinedValue object
            </summary>
            <param name="source">The source.</param>
            <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.DefinedValueExtensionMethods.CopyPropertiesFrom(Rock.Model.DefinedValue,Rock.Model.DefinedValue)">
            <summary>
            Copies the properties from another DefinedValue object to this DefinedValue object
            </summary>
            <param name="target">The target.</param>
            <param name="source">The source.</param>
        </member>
        <member name="T:Rock.Model.ExceptionLogService">
            <summary>
            ExceptionLog Service class
            </summary>
            <summary>
            The data access/service class for <see cref="T:Rock.Model.ExceptionLog"/> entity type objects.
            </summary>
        </member>
        <member name="M:Rock.Model.ExceptionLogService.#ctor(Rock.Data.RockContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.ExceptionLogService"/> class
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Rock.Model.ExceptionLogService.CanDelete(Rock.Model.ExceptionLog,System.String@)">
            <summary>
            Determines whether this instance can delete the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="errorMessage">The error message.</param>
            <returns>
              <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Rock.Model.ExceptionLogService.GetByParentId(System.Nullable{System.Int32})">
            <summary>
            Gets a collection of <see cref="T:Rock.Model.ExceptionLog"/> entities by the Id of their Parent exceptionId. 
            Under most instances, only one child <see cref="T:Rock.Model.ExceptionLog"/> entity will be returned in the collection.
            </summary>
            <param name="parentId">An <see cref="T:System.Int32"/> containing the Id of the parent ExceptionLog entity to search by.</param>
            <returns>An enumerable collection of <see cref="T:Rock.Model.ExceptionLog"/> entities who's Parent ExceptionId matches the provided value..</returns>
        </member>
        <member name="M:Rock.Model.ExceptionLogService.GetBySiteId(System.Nullable{System.Int32})">
            <summary>
            Gets a collection of <see cref="T:Rock.Model.ExceptionLog"/> entities by the Id of the <see cref="T:Rock.Model.Site"/> that they occurred on.
            </summary>
            <param name="siteId">An <see cref="T:System.Int32"/> containing the Id of the <see cref="T:Rock.Model.Site"/> to search by.</param>
            <returns>An enumerable collection of <see cref="T:Rock.Model.ExceptionLog"/> entities who's SiteId matches the provided value.</returns>
        </member>
        <member name="M:Rock.Model.ExceptionLogService.LogException(System.Exception,System.Web.HttpContext,System.Nullable{System.Int32},System.Nullable{System.Int32},Rock.Model.PersonAlias)">
            <summary>
            Logs new <see cref="T:Rock.Model.ExceptionLog"/> entities.  This method serves as an interface to asynchronously log exceptions.
            </summary>
            <param name="ex">A <see cref="T:System.Exception"/> object to log.</param>
            <param name="context">The <see cref="T:System.Web.HttpContext"/></param>
            <param name="pageId">A <see cref="T:System.Int32"/> containing the Id of the <see cref="T:Rock.Model.Page"/> that the exception occurred on.
            This parameter is nullable..</param>
            <param name="siteId">A <see cref="T:System.Int32"/> containing the Id of the <see cref="T:Rock.Model.Site"/> that the exception occurred on.</param>
            <param name="personAlias">The person alias.</param>
        </member>
        <member name="M:Rock.Model.ExceptionLogService.LogExceptions(System.Exception,Rock.Model.ExceptionLog,System.Boolean)">
            <summary>
            Recursively logs exception and any children.
            </summary>
            <param name="ex">The <see cref="T:System.Exception"/> to log.</param>
            <param name="log">The parent <see cref="T:Rock.Model.ExceptionLog"/> of the exception being logged. This value is nullable.</param>
            <param name="isParent">A <see cref="T:System.Boolean"/> flag indicating if this Exception is a parent exception. This value is 
                <c>true</c> if the exception that is being logged is a parent exception, otherwise <c>false</c>.
            </param>
        </member>
        <member name="M:Rock.Model.ExceptionLogService.PopulateExceptionLog(System.Exception,System.Web.HttpContext,System.Nullable{System.Int32},System.Nullable{System.Int32},Rock.Model.PersonAlias)">
            <summary>
            Populates the <see cref="T:Rock.Model.ExceptionLog"/> entity with the exception data.
            </summary>
            <param name="ex">The <see cref="T:System.Exception"/> to log.</param>
            <param name="context">The <see cref="T:System.Web.HttpContext"/>.</param>
            <param name="pageId">An <see cref="T:System.Int32"/> containing the Id of the <see cref="T:Rock.Model.Page"/> where the exception occurred.
            This value is nullable.</param>
            <param name="siteId">An <see cref="T:System.Int32"/> containing the Id the <see cref="T:Rock.Model.Site"/> where the exception occurred.
            This value is nullable.</param>
            <param name="personAlias">The person alias.</param>
            <returns></returns>
        </member>
        <member name="T:Rock.Model.ExceptionLogExtensionMethods">
            <summary>
            Generated Extension Methods
            </summary>
        </member>
        <member name="M:Rock.Model.ExceptionLogExtensionMethods.Clone(Rock.Model.ExceptionLog,System.Boolean)">
            <summary>
            Clones this ExceptionLog object to a new ExceptionLog object
            </summary>
            <param name="source">The source.</param>
            <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.ExceptionLogExtensionMethods.CopyPropertiesFrom(Rock.Model.ExceptionLog,Rock.Model.ExceptionLog)">
            <summary>
            Copies the properties from another ExceptionLog object to this ExceptionLog object
            </summary>
            <param name="target">The target.</param>
            <param name="source">The source.</param>
        </member>
        <member name="T:Rock.Model.FieldTypeService">
            <summary>
            FieldType Service class
            </summary>
            <summary>
            Service/Data Access class for <see cref="T:Rock.Model.FieldType"/> entity objects.
            </summary>
        </member>
        <member name="M:Rock.Model.FieldTypeService.#ctor(Rock.Data.RockContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.FieldTypeService"/> class
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Rock.Model.FieldTypeService.CanDelete(Rock.Model.FieldType,System.String@)">
            <summary>
            Determines whether this instance can delete the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="errorMessage">The error message.</param>
            <returns>
              <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Rock.Model.FieldTypeService.GetByName(System.String)">
            <summary>
            Returns an enumerable collection of <see cref="T:Rock.Model.FieldType">FieldTypes</see> by Name.
            </summary>
            <param name="name">A <see cref="T:System.String"/> represents the Name of the <see cref="T:Rock.Model.FieldType">FieldType(s)</see> to retrieve.</param>
            <returns>An enumerable collection of <see cref="T:Rock.Model.FieldType">FieldTypes</see> with a name that matches the specified value.</returns>
        </member>
        <member name="M:Rock.Model.FieldTypeService.GetByGuid(System.Guid)">
            <summary>
            Returns a <see cref="T:Rock.Model.FieldType"/> by it's Guid identifier.
            </summary>
            <param name="guid">A <see cref="T:System.Guid"/> representing the Guid identifier of the <see cref="T:Rock.Model.FieldType"/> to retrieve.</param>
            <returns>The <see cref="T:Rock.Model.FieldType"/> with a Guid identifier that matches the specified value.</returns>
        </member>
        <member name="M:Rock.Model.FieldTypeService.RegisterFieldTypes(System.String)">
            <summary>
            Gets a list of all <see cref="T:Rock.Model.FieldType">FieldTypes</see> (all items that implement the <see cref="T:Rock.Field.IFieldType"/> interface) and registers the 
            <see cref="T:Rock.Model.FieldType">FieldTypes</see> that have not been previously registered.
            </summary>
            <param name="physWebAppPath">A <see cref="T:System.String"/> representing the physical path of the web application.</param>
        </member>
        <member name="T:Rock.Model.FieldTypeExtensionMethods">
            <summary>
            Generated Extension Methods
            </summary>
        </member>
        <member name="M:Rock.Model.FieldTypeExtensionMethods.Clone(Rock.Model.FieldType,System.Boolean)">
            <summary>
            Clones this FieldType object to a new FieldType object
            </summary>
            <param name="source">The source.</param>
            <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.FieldTypeExtensionMethods.CopyPropertiesFrom(Rock.Model.FieldType,Rock.Model.FieldType)">
            <summary>
            Copies the properties from another FieldType object to this FieldType object
            </summary>
            <param name="target">The target.</param>
            <param name="source">The source.</param>
        </member>
        <member name="T:Rock.Model.ExceptionLog">
            <summary>
            Represents an entry in the Exception Log. It is a record of an exception that was was thrown and logged by the Rock system/framework.
            These exceptions can include several status codes, the one most often seen is 500, but can also include 404 (when configured in Global Attributes) 
            and other status codes. These entities are not tracked by the <see cref="T:Rock.Model.Audit"/> model.
            </summary>
        </member>
        <member name="M:Rock.Model.ExceptionLog.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> containing the Exception's description that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> containing the Exception's description that represents this instance.
            </returns>
        </member>
        <member name="P:Rock.Model.ExceptionLog.ParentId">
            <summary>
            Gets or sets the Id of the parent/outer ExceptionLog entity (if it exists). ExceptionLog entities are hierarchical.
            </summary>
            <value>
            An <see cref="T:System.Int32"/> representing the Id of the parent ExceptionId. If this ExceptionLog entity does not have a parent exception,
            will be null.
            </value>
        </member>
        <member name="P:Rock.Model.ExceptionLog.SiteId">
            <summary>
            Gets or sets the Id of the <see cref="T:Rock.Model.Site"/> that the exception occurred on. If this did not occur on a site (i.e. a job) this value will be null.
            </summary>
            <value>
            A <see cref="T:System.Int32"/> representing the Id of <see cref="T:Rock.Model.Site"/> that this exception occurred on.
            </value>
        </member>
        <member name="P:Rock.Model.ExceptionLog.PageId">
            <summary>
            Gets or sets the Id of the <see cref="T:Rock.Model.Page"/> that the exception occurred on.
            </summary>
            <value>
            A <see cref="T:System.Int32"/> representing the Id of the <see cref="T:Rock.Model.Page"/> that the exception occurred on. 
            If this exception did not occur on a <see cref="T:Rock.Model.Page"/> this value will be null.
            </value>
        </member>
        <member name="P:Rock.Model.ExceptionLog.HasInnerException">
            <summary>
            Gets or sets a flag indicating if this exception has a child/inner exception. 
            </summary>
            <value>
            A <see cref="T:System.Boolean"/> value that will be <c>true</c> if the exception has an inner exception otherwise <c>false</c> or null.
            </value>
        </member>
        <member name="P:Rock.Model.ExceptionLog.StatusCode">
            <summary>
            Gets or sets the StatusCode that was returned and describes the type of error.  
            </summary>
            <value>
            A <see cref="T:System.String"/> value representing the StatusCode that was returned as part of this exception. If a StatusCode was returned
            this value will be null.
            </value>
        </member>
        <member name="P:Rock.Model.ExceptionLog.ExceptionType">
            <summary>
            Gets or sets the type (exception class) of the exception that occurred. i.e. System.Data.SqlClient.SqlException
            </summary>
            <value>
            A <see cref="T:System.String"/> representing the type name of the exception that occurred. 
            </value>
        </member>
        <member name="P:Rock.Model.ExceptionLog.Description">
            <summary>
            Gets or sets a message that describes the exception.
            </summary>
            <value>
            A <see cref="T:System.String"/> representing the description of the exception.
            </value>
        </member>
        <member name="P:Rock.Model.ExceptionLog.Source">
            <summary>
            Gets or sets the name of the application or the object that causes the error.
            </summary>
            <value>
            A <see cref="T:System.String"/> representing the class type name/application that threw the exception.
            </value>
        </member>
        <member name="P:Rock.Model.ExceptionLog.StackTrace">
            <summary>
            Gets a string representation of the immediate frames on the call stack.
            </summary>
            <value>
            A <see cref="T:System.String"/> representing the StackTrace of the exception that occurred.
            </value>
        </member>
        <member name="P:Rock.Model.ExceptionLog.PageUrl">
            <summary>
            Gets or sets the relative URL of the page that the exception occurred on.
            </summary>
            <value>
            A <see cref="T:System.String"/> representing the URL of the <see cref="T:Rock.Model.Page"/> that the exception occurred on. 
            </value>
        </member>
        <member name="P:Rock.Model.ExceptionLog.ServerVariables">
            <summary>
            Gets or sets a table of the ServerVariables at the time that the exception occurred.
            </summary>
            <value>
            A <see cref="T:System.String"/> containing a table of the ServerVariables at the time the exception occurred.
            </value>
        </member>
        <member name="P:Rock.Model.ExceptionLog.QueryString">
            <summary>
            Gets or sets the full query string from the page that the exception occurred on.
            </summary>
            <value>
            A <see cref="T:System.String"/> representing the URL Query String from the page that threw the exception.
            </value>
        </member>
        <member name="P:Rock.Model.ExceptionLog.Form">
            <summary>
            Gets or sets a table containing all the form items from the page request where the exception occurred.
            </summary>
            <value>
            A <see cref="T:System.String"/> representing a table containing the value of the form items posted during the page request.
            </value>
        </member>
        <member name="P:Rock.Model.ExceptionLog.Cookies">
            <summary>
            Gets or sets a table containing the session cookies from the client when the exception occurred.
            </summary>
            <value>
            A <see cref="T:System.String"/> containing the session cooks from the client when the exception occurred
            </value>
        </member>
        <member name="P:Rock.Model.ExceptionLog.Site">
            <summary>
            Gets or sets the <see cref="T:Rock.Model.Site"/> that the exception occurred on.
            </summary>
            <value>
            The <see cref="T:Rock.Model.Site"/> that the exception occurred on. If this did not occur on a site, this value will be null.
            </value>
        </member>
        <member name="P:Rock.Model.ExceptionLog.Page">
            <summary>
            Gets or sets the <see cref="T:Rock.Model.Page"/> that the exception occurred on.
            </summary>
            <value>
            The <see cref="T:Rock.Model.Page"/> that the exception occurred on. If this exception was not thrown on a <see cref="T:Rock.Model.Page"/>
            this value will be null.
            </value>
        </member>
        <member name="T:Rock.Model.ExceptionLogConfiguration">
            <summary>
            Exception Log Configuration class.
            </summary>
        </member>
        <member name="M:Rock.Model.ExceptionLogConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.ExceptionLogConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Rock.Model.RangeValue`1">
            <summary>
            Represents a Range of objects in Rock.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Rock.Model.RangeValue`1.#ctor(`0,`0)">
            <summary>
            Initializes a new instanceof the <see cref="T:Rock.Model.RangeValue`1"/> class.
            </summary> 
            <param name="from">The From/minimum value of the range.</param>
            <param name="to">The To/maximum value of the range.</param>
        </member>
        <member name="P:Rock.Model.RangeValue`1.From">
            <summary>
            Gets or sets the From/mininimum value of the range.
            </summary>
            <value>
            The from/minimum value of the range.
            </value>
        </member>
        <member name="P:Rock.Model.RangeValue`1.To">
            <summary>
            Gets or sets To/maximum value of the range.
            </summary>
            <value>
            The to/maximum value of the range.
            </value>
        </member>
        <member name="T:Rock.Model.ServiceLogService">
            <summary>
            ServiceLog Service class
            </summary>
        </member>
        <member name="M:Rock.Model.ServiceLogService.#ctor(Rock.Data.RockContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.ServiceLogService"/> class
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Rock.Model.ServiceLogService.CanDelete(Rock.Model.ServiceLog,System.String@)">
            <summary>
            Determines whether this instance can delete the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="errorMessage">The error message.</param>
            <returns>
              <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Rock.Model.ServiceLogExtensionMethods">
            <summary>
            Generated Extension Methods
            </summary>
        </member>
        <member name="M:Rock.Model.ServiceLogExtensionMethods.Clone(Rock.Model.ServiceLog,System.Boolean)">
            <summary>
            Clones this ServiceLog object to a new ServiceLog object
            </summary>
            <param name="source">The source.</param>
            <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.ServiceLogExtensionMethods.CopyPropertiesFrom(Rock.Model.ServiceLog,Rock.Model.ServiceLog)">
            <summary>
            Copies the properties from another ServiceLog object to this ServiceLog object
            </summary>
            <param name="target">The target.</param>
            <param name="source">The source.</param>
        </member>
        <member name="T:Rock.Model.TaggedItemExtensionMethods">
            <summary>
            Generated Extension Methods
            </summary>
        </member>
        <member name="M:Rock.Model.TaggedItemExtensionMethods.Clone(Rock.Model.TaggedItem,System.Boolean)">
            <summary>
            Clones this TaggedItem object to a new TaggedItem object
            </summary>
            <param name="source">The source.</param>
            <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.TaggedItemExtensionMethods.CopyPropertiesFrom(Rock.Model.TaggedItem,Rock.Model.TaggedItem)">
            <summary>
            Copies the properties from another TaggedItem object to this TaggedItem object
            </summary>
            <param name="target">The target.</param>
            <param name="source">The source.</param>
        </member>
        <member name="T:Rock.Model.TagExtensionMethods">
            <summary>
            Generated Extension Methods
            </summary>
        </member>
        <member name="M:Rock.Model.TagExtensionMethods.Clone(Rock.Model.Tag,System.Boolean)">
            <summary>
            Clones this Tag object to a new Tag object
            </summary>
            <param name="source">The source.</param>
            <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.TagExtensionMethods.CopyPropertiesFrom(Rock.Model.Tag,Rock.Model.Tag)">
            <summary>
            Copies the properties from another Tag object to this Tag object
            </summary>
            <param name="target">The target.</param>
            <param name="source">The source.</param>
        </member>
        <member name="T:Rock.Model.LocationService">
            <summary>
            Location Service class
            </summary>
            <summary>
            Data access and service class for <see cref="T:Rock.Model.Location"/> entities.
            </summary>
        </member>
        <member name="M:Rock.Model.LocationService.#ctor(Rock.Data.RockContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.LocationService"/> class
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Rock.Model.LocationService.CanDelete(Rock.Model.Location,System.String@)">
            <summary>
            Determines whether this instance can delete the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="errorMessage">The error message.</param>
            <returns>
              <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Rock.Model.LocationService.Get(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Returns the first <see cref="T:Rock.Model.Location"/> where the address matches the provided address.  If no address is found with the provided values, 
            the address will be standardized. If there is still not a match, the address will be saved as a new location.
            </summary>
            <param name="street1">A <see cref="T:System.String"/> representing the Address Line 1 to search by.</param>
            <param name="street2">A <see cref="T:System.String"/> representing the Address Line 2 to search by.</param>
            <param name="city">A <see cref="T:System.String"/> representing the City to search by.</param>
            <param name="state">A <see cref="T:System.String"/> representing the State to search by.</param>
            <param name="zip">A <see cref="T:System.String"/> representing the Zip/Postal code to search by</param>
            <returns>The first <see cref="T:Rock.Model.Location"/> where an address match is found, if no match is found a new <see cref="T:Rock.Model.Location"/> is created and returned.</returns>
        </member>
        <member name="M:Rock.Model.LocationService.GetByGeoPoint(System.Data.Entity.Spatial.DbGeography)">
            <summary>
            Returns a <see cref="T:Rock.Model.Location"/> by GeoPoint. If a match is not found,
            a new Location will be added based on the Geopoint.
            </summary>
            <param name="point">A <see cref="T:System.Data.Entity.Spatial.DbGeography"/> object
                representing the Geopoint for the location.</param>
            <returns>The first <see cref="T:Rock.Model.Location"/> that matches the specified GeoPoint.</returns>
        </member>
        <member name="M:Rock.Model.LocationService.GetByGeoFence(System.Data.Entity.Spatial.DbGeography)">
            <summary>
            Returns the first <see cref="T:Rock.Model.Location"/> with a GeoFence that matches
            the specified GeoFence.
            </summary>
            <param name="fence">A <see cref="T:System.Data.Entity.Spatial.DbGeography"/> object that 
             represents the GeoFence of the location to retrieve.</param>
            <returns>The <see cref="T:Rock.Model.Location"/> for the specified GeoFence. </returns>
        </member>
        <member name="M:Rock.Model.LocationService.Verify(Rock.Model.Location,System.Boolean)">
            <summary>
            Performs Address Verification on the provided <see cref="T:Rock.Model.Location"/>.
            </summary>
            <param name="location">A <see cref="T:Rock.Model.Location"/> to verify.</param>
            <param name="reVerify">if set to <c>true</c> [re verify].</param>
        </member>
        <member name="M:Rock.Model.LocationService.GetAllDescendents(System.Int32)">
            <summary>
            Returns an enumerable collection of <see cref="T:Rock.Model.Location">Locations</see> that are descendants of a <see cref="T:Rock.Model.Location"/>
            </summary>
            <param name="parentLocationId">A <see cref="T:System.Int32"/> representing the Id of the <see cref="T:Rock.Model.Location"/></param>
            <returns>A collection of <see cref="T:Rock.Model.Location"/> entities that are descendants of the provided parent <see cref="T:Rock.Model.Location"/>.</returns>
        </member>
        <member name="T:Rock.Model.LocationExtensionMethods">
            <summary>
            Generated Extension Methods
            </summary>
        </member>
        <member name="M:Rock.Model.LocationExtensionMethods.Clone(Rock.Model.Location,System.Boolean)">
            <summary>
            Clones this Location object to a new Location object
            </summary>
            <param name="source">The source.</param>
            <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.LocationExtensionMethods.CopyPropertiesFrom(Rock.Model.Location,Rock.Model.Location)">
            <summary>
            Copies the properties from another Location object to this Location object
            </summary>
            <param name="target">The target.</param>
            <param name="source">The source.</param>
        </member>
        <member name="T:Rock.Model.GroupTypeLocationType">
            <summary>
            Represents the a type of <see cref="T:Rock.Model.Location"/> that is supported by a <see cref="T:Rock.Model.GroupType"/>.
            </summary>
        </member>
        <member name="P:Rock.Model.GroupTypeLocationType.GroupTypeId">
            <summary>
            Gets or sets the Id of the <see cref="T:Rock.Model.GroupType"/>. This property is required, and is part of the key.
            </summary>
            <value>
            An <see cref="T:System.Int32"/> representing the Id of the <see cref="T:Rock.Model.GroupType"/>.
            </value>
        </member>
        <member name="P:Rock.Model.GroupTypeLocationType.LocationTypeValueId">
            <summary>
            Gets or sets the Id of the LocationType <see cref="T:Rock.Model.DefinedValue"/> that represents a type of <see cref="T:Rock.Model.Location"/> that is
            supported by a <see cref="T:Rock.Model.GroupType"/>. This property is required and is part of the key.
            </summary>
            <value>
            A <see cref="T:System.Int32"/> representing the Id of a LocationType <see cref="T:Rock.Model.DefinedValue"/>  that is supported by a <see cref="T:Rock.Model.GroupType"/>.
            </value>
        </member>
        <member name="P:Rock.Model.GroupTypeLocationType.GroupType">
            <summary>
            Gets or sets the <see cref="T:Rock.Model.GroupType"/>.
            </summary>
            <value>
            The <see cref="T:Rock.Model.GroupType"/>.
            </value>
        </member>
        <member name="P:Rock.Model.GroupTypeLocationType.LocationTypeValue">
            <summary>
            Gets or sets the a <see cref="T:Rock.Model.DefinedType"/> that is supported by the <see cref="T:Rock.Model.GroupType"/>.
            </summary>
            <value>
            A <see cref="T:Rock.Model.GroupType"/> that is supported by the <see cref="T:Rock.Model.GroupType"/>.
            </value>
        </member>
        <member name="T:Rock.Model.Campus">
            <summary>
            Represents a physical or virtual Campus/Site for an organization.  
            </summary>
        </member>
        <member name="M:Rock.Model.Campus.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> containing the Location's Name that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> containing the Location's Name that represents this instance.
            </returns>
        </member>
        <member name="P:Rock.Model.Campus.IsSystem">
            <summary>
            Gets or sets a flag indicating if the Campus is a part of the Rock system/framework. This property is required.
            </summary>
            <value>
            A <see cref="T:System.Boolean"/> that is <c>true</c> if this Block is part of the Rock core system/framework, otherwise is <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Model.Campus.Name">
            <summary>
            Gets or sets the name of the Campus. This property is required.
            </summary>
            <value>
            A <see cref="T:System.String"/> that represents the Campus name.
            </value>
        </member>
        <member name="P:Rock.Model.Campus.ShortCode">
            <summary>
            Gets or sets an optional short code identifier for the campus.
            </summary>
            <value>
            A <see cref="T:System.String"/> value that represents a short code identifier for a campus. If the campus does not have a ShortCode
            this value is null.
            </value>
        </member>
        <member name="P:Rock.Model.Campus.LocationId">
            <summary>
            Gets or sets the Id of the <see cref="T:Rock.Model.Location"/> that is associated with this campus. 
            </summary>
            <value>
            A <see cref="T:System.Int32"/> that represents the Id of the (physical) location of the campus. If none exists, this value is null.
            </value>
        </member>
        <member name="P:Rock.Model.Campus.PhoneNumber">
            <summary>
            Gets or sets the phone number of the campus.
            </summary>
            <value>
            A <see cref="T:System.String"/> that represents the campus phone number.
            </value>
        </member>
        <member name="P:Rock.Model.Campus.LeaderPersonAliasId">
            <summary>
            Gets or sets the Id of the <see cref="T:Rock.Model.Person"/> that is the leader of the campus.
            </summary>
            <value>
            A <see cref="T:System.Int32"/> that represents the Id of the person who leads the campus.
            </value>
        </member>
        <member name="P:Rock.Model.Campus.Location">
            <summary>
            Gets or sets the <see cref="T:Rock.Model.Location"/> entity that is associated with this campus.
            </summary>
            <value>
            The <see cref="T:Rock.Model.Location"/> that is associated with this campus.
            </value>
        </member>
        <member name="P:Rock.Model.Campus.LeaderPersonAlias">
            <summary>
            Gets or sets the <see cref="T:Rock.Model.Person"/> entity that is associated with the leader of the campus.
            </summary>
            <value>
            The <see cref="T:Rock.Model.Person"/> that is associated as the leader of the campus.
            </value>
        </member>
        <member name="T:Rock.Model.CampusConfiguration">
            <summary>
            Campus Configuration class.
            </summary>
        </member>
        <member name="M:Rock.Model.CampusConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.CampusConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Rock.Model.CampusService">
            <summary>
            Campus Service class
            </summary>
        </member>
        <member name="M:Rock.Model.CampusService.#ctor(Rock.Data.RockContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.CampusService"/> class
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Rock.Model.CampusService.CanDelete(Rock.Model.Campus,System.String@)">
            <summary>
            Determines whether this instance can delete the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="errorMessage">The error message.</param>
            <returns>
              <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Rock.Model.CampusExtensionMethods">
            <summary>
            Generated Extension Methods
            </summary>
        </member>
        <member name="M:Rock.Model.CampusExtensionMethods.Clone(Rock.Model.Campus,System.Boolean)">
            <summary>
            Clones this Campus object to a new Campus object
            </summary>
            <param name="source">The source.</param>
            <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.CampusExtensionMethods.CopyPropertiesFrom(Rock.Model.Campus,Rock.Model.Campus)">
            <summary>
            Copies the properties from another Campus object to this Campus object
            </summary>
            <param name="target">The target.</param>
            <param name="source">The source.</param>
        </member>
        <member name="T:Rock.Model.SystemEmailService">
            <summary>
            SystemEmail Service class
            </summary>
        </member>
        <member name="M:Rock.Model.SystemEmailService.#ctor(Rock.Data.RockContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.SystemEmailService"/> class
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Rock.Model.SystemEmailService.CanDelete(Rock.Model.SystemEmail,System.String@)">
            <summary>
            Determines whether this instance can delete the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="errorMessage">The error message.</param>
            <returns>
              <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Rock.Model.SystemEmailExtensionMethods">
            <summary>
            Generated Extension Methods
            </summary>
        </member>
        <member name="M:Rock.Model.SystemEmailExtensionMethods.Clone(Rock.Model.SystemEmail,System.Boolean)">
            <summary>
            Clones this SystemEmail object to a new SystemEmail object
            </summary>
            <param name="source">The source.</param>
            <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.SystemEmailExtensionMethods.CopyPropertiesFrom(Rock.Model.SystemEmail,Rock.Model.SystemEmail)">
            <summary>
            Copies the properties from another SystemEmail object to this SystemEmail object
            </summary>
            <param name="target">The target.</param>
            <param name="source">The source.</param>
        </member>
        <member name="T:Rock.Model.PersonService">
            <summary>
            Person Service class
            </summary>
            <summary>
            Data Access/Service class for <see cref="T:Rock.Model.Person"/> entity objects.
            </summary>
        </member>
        <member name="M:Rock.Model.PersonService.#ctor(Rock.Data.RockContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.PersonService"/> class
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Rock.Model.PersonService.CanDelete(Rock.Model.Person,System.String@)">
            <summary>
            Determines whether this instance can delete the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="errorMessage">The error message.</param>
            <returns>
              <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Rock.Model.PersonService.Get(System.Guid)">
            <summary>
            Gets the specified unique identifier.
            </summary>
            <param name="guid">The unique identifier.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.PersonService.Get(System.Int32)">
            <summary>
            Gets the specified identifier.
            </summary>
            <param name="id">The identifier.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.PersonService.Queryable">
            <summary>
            Returns a queryable collection of <see cref="T:Rock.Model.Person"/> entities.
            </summary>
            <returns>A queryable collection of <see cref="T:Rock.Model.Person"/> entities.</returns>
        </member>
        <member name="M:Rock.Model.PersonService.Queryable(System.Boolean,System.Boolean)">
            <summary>
            Returns a queryable collection of <see cref="T:Rock.Model.Person"/> entities. If includeDeceased is <c>false</c>, deceased individuals will be excluded.
            </summary>
            <param name="includeDeceased">A <see cref="T:System.Boolean"/> value indicating if deceased <see cref="T:Rock.Model.Person"/> should be included. If <c>true</c>
            deceased individuals will be included, otherwise <c>false</c> and they will be excluded.</param>
            <param name="includeBusinesses">if set to <c>true</c> [include businesses].</param>
            <returns>
            A queryable collection of <see cref="T:Rock.Model.Person"/> entities, with deceased individuals either included or excluded based on the provided value.
            </returns>
        </member>
        <member name="M:Rock.Model.PersonService.Queryable(System.String)">
            <summary>
            Returns a queryable collection of all <see cref="T:Rock.Model.Person"/> entities with eager loading of the properties that are included in the includes parameter.
            </summary>
            <param name="includes">A <see cref="T:System.String"/> containing a comma delimited list of properties that should support eager loading.</param>
            <returns>A queryable collection of <see cref="T:Rock.Model.Person"/> entities with properties that support eager loading.</returns>
        </member>
        <member name="M:Rock.Model.PersonService.Queryable(System.String,System.Boolean,System.Boolean)">
            <summary>
            Returns a queryable collection of <see cref="T:Rock.Model.Person"/> entities with eager loading of properties that are included in the includes parameter.
            If includeDeceased is <c>false</c>, deceased individuals will be excluded
            </summary>
            <param name="includes">The includes.</param>
            <param name="includeDeceased">A <see cref="T:System.Boolean"/> value indicating if deceased <see cref="T:Rock.Model.Person"/> should be included. If <c>true</c>
            deceased individuals will be included, otherwise <c>false</c> and they will be excluded.</param>
            <param name="includeBusinesses">if set to <c>true</c> [include businesses].</param>
            <returns>
            A queryable collection of <see cref="T:Rock.Model.Person"/> entities with properties that support eager loading, with deceased individuals either included or excluded based on the provided value.
            </returns>
        </member>
        <member name="M:Rock.Model.PersonService.GetByEmail(System.String,System.Boolean,System.Boolean)">
            <summary>
            Gets an enumerable collection of <see cref="T:Rock.Model.Person"/> entities by email address.
            </summary>
            <param name="email">A <see cref="T:System.String"/> representing the email address to search by.</param>
            <param name="includeDeceased">A <see cref="T:System.Boolean"/> flag indicating if deceased individuals should be included in the search results, if
            <c>true</c> then they will be included, otherwise <c>false</c>. Default value is false.</param>
            <param name="includeBusinesses">if set to <c>true</c> [include businesses].</param>
            <returns>
            An enumerable collection of <see cref="T:Rock.Model.Person"/> entities that match the search criteria.
            </returns>
        </member>
        <member name="M:Rock.Model.PersonService.GetByMatch(System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Gets an enumerable collection of <see cref="T:Rock.Model.Person"/> entities that have a matching email address, firstname and lastname.
            </summary>
            <param name="firstName">A <see cref="T:System.String"/> representing the first name to search by.</param>
            <param name="lastName">A <see cref="T:System.String"/> representing the last name to search by.</param>
            <param name="email">A <see cref="T:System.String"/> representing the email address to search by.</param>
            <param name="includeDeceased">A <see cref="T:System.Boolean"/> flag indicating if deceased individuals should be included in the search results, if
            <c>true</c> then they will be included, otherwise <c>false</c>. Default value is false.</param>
            <param name="includeBusinesses">if set to <c>true</c> [include businesses].</param>
            <returns>
            An enumerable collection of <see cref="T:Rock.Model.Person"/> entities that match the search criteria.
            </returns>
        </member>
        <member name="M:Rock.Model.PersonService.GetByMaritalStatusId(System.Nullable{System.Int32},System.Boolean,System.Boolean)">
            <summary>
            Gets an enumerable collection of <see cref="T:Rock.Model.Person"/> entities by martial status <see cref="T:Rock.Model.DefinedValue"/>
            </summary>
            <param name="maritalStatusId">An <see cref="T:System.Int32"/> representing the Id of the Marital Status <see cref="T:Rock.Model.DefinedValue"/> to search by.</param>
            <param name="includeDeceased">A <see cref="T:System.Boolean"/> flag indicating if deceased individuals should be included in search results, if <c>true</c> then they will be
            included, otherwise <c>false</c>.</param>
            <param name="includeBusinesses">if set to <c>true</c> [include businesses].</param>
            <returns>
            An enumerable collection of <see cref="T:Rock.Model.Person"/> entities that match the search criteria.
            </returns>
        </member>
        <member name="M:Rock.Model.PersonService.GetByPersonConnectionStatusId(System.Nullable{System.Int32},System.Boolean,System.Boolean)">
            <summary>
            Returns an enumerable collection of <see cref="T:Rock.Model.Person"/> entities by the the Person's Connection Status <see cref="T:Rock.Model.DefinedValue"/>.
            </summary>
            <param name="personConnectionStatusId">A <see cref="T:System.Int32"/> representing the Id of the Person Connection Status <see cref="T:Rock.Model.DefinedValue"/> to search by.</param>
            <param name="includeDeceased">A <see cref="T:System.Boolean"/> flag indicating if deceased individuals should be included in search results, if <c>true</c> then they will be
            included, otherwise <c>false</c>.</param>
            <param name="includeBusinesses">if set to <c>true</c> [include businesses].</param>
            <returns>
            An enumerable collection of <see cref="T:Rock.Model.Person"/> entities that match the search criteria.
            </returns>
        </member>
        <member name="M:Rock.Model.PersonService.GetByRecordStatusId(System.Nullable{System.Int32},System.Boolean,System.Boolean)">
            <summary>
            Returns an enumerable collection of <see cref="T:Rock.Model.Person"/> entities by their Record Status <see cref="T:Rock.Model.DefinedValue"/>
            </summary>
            <param name="recordStatusId">A <see cref="T:System.Int32"/> representing the Id of the Record Status <see cref="T:Rock.Model.DefinedValue"/> to search by.</param>
            <param name="includeDeceased">A <see cref="T:System.Boolean"/> flag indicating if deceased individuals should be included in search results, if <c>true</c> then they will be
            included, otherwise <c>false</c>.</param>
            <param name="includeBusinesses">if set to <c>true</c> [include businesses].</param>
            <returns>
            An enumerable collection of <see cref="T:Rock.Model.Person"/> entities that match the search criteria.
            </returns>
        </member>
        <member name="M:Rock.Model.PersonService.GetByRecordStatusReasonId(System.Nullable{System.Int32},System.Boolean,System.Boolean)">
            <summary>
            Returns an enumerable collection of <see cref="T:Rock.Model.Person"/> entities by the RecordStatusReason <see cref="T:Rock.Model.DefinedValue"/>.
            </summary>
            <param name="recordStatusReasonId">A <see cref="T:System.Int32"/> representing the Id of the RecordStatusReason <see cref="T:Rock.Model.DefinedValue"/> to search by.</param>
            <param name="includeDeceased">A <see cref="T:System.Boolean"/> flag indicating if deceased individuals should be included in search results, if <c>true</c> then they will be
            included, otherwise <c>false</c>.</param>
            <param name="includeBusinesses">if set to <c>true</c> [include businesses].</param>
            <returns>
            An enumerable collection of <see cref="T:Rock.Model.Person"/> entities that match the search criteria.
            </returns>
        </member>
        <member name="M:Rock.Model.PersonService.GetByRecordTypeId(System.Nullable{System.Int32},System.Boolean)">
            <summary>
            Returns an enumerable collection of <see cref="T:Rock.Model.Person"/> entities by their RecordType <see cref="T:Rock.Model.DefinedValue"/>.
            </summary>
            <param name="recordTypeId">A <see cref="T:System.Int32"/> representing the Id of the RecordType <see cref="T:Rock.Model.DefinedValue"/> to search by.</param>
            <param name="includeDeceased">A <see cref="T:System.Boolean"/> flag indicating if deceased individuals should be included in search results, if <c>true</c> then they will be
            included, otherwise <c>false</c>.</param>
            <returns>
            An enumerable collection of <see cref="T:Rock.Model.Person"/> entities that match the search criteria.
            </returns>
        </member>
        <member name="M:Rock.Model.PersonService.GetBySuffixId(System.Nullable{System.Int32},System.Boolean,System.Boolean)">
            <summary>
            Returns an enumerable collection of <see cref="T:Rock.Model.Person"/> entities by their Suffix <see cref="T:Rock.Model.DefinedValue"/>
            </summary>
            <param name="suffixId">An <see cref="T:System.Int32"/> representing the Id of Suffix <see cref="T:Rock.Model.DefinedValue"/> to search by.</param>
            <param name="includeDeceased">A <see cref="T:System.Boolean"/> flag indicating if deceased individuals should be included in search results, if <c>true</c> then they will be
            included, otherwise <c>false</c>.</param>
            <param name="includeBusinesses">if set to <c>true</c> [include businesses].</param>
            <returns>
            An enumerable collection of <see cref="T:Rock.Model.Person"/> entities that match the search criteria.
            </returns>
        </member>
        <member name="M:Rock.Model.PersonService.GetByTitleId(System.Nullable{System.Int32},System.Boolean,System.Boolean)">
            <summary>
            Returns a collection of <see cref="T:Rock.Model.Person"/> entities by their Title <see cref="T:Rock.Model.DefinedValue"/>.
            </summary>
            <param name="titleId">A <see cref="T:System.Int32"/> representing the Id of the Title <see cref="T:Rock.Model.DefinedValue"/>.</param>
            <param name="includeDeceased">A <see cref="T:System.Boolean"/> flag indicating if deceased individuals should be included in search results, if <c>true</c> then they will be
            included, otherwise <c>false</c>.</param>
            <param name="includeBusinesses">if set to <c>true</c> [include businesses].</param>
            <returns>
            An enumerable collection of <see cref="T:Rock.Model.Person"/> entities that match the search criteria.
            </returns>
        </member>
        <member name="M:Rock.Model.PersonService.GetByFullName(System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Gets the full name of the by.
            </summary>
            <param name="fullName">The full name.</param>
            <param name="allowFirstNameOnly">if set to true, a single value in fullName will also search for matching first names.</param>
            <param name="includeDeceased">if set to <c>true</c> [include deceased].</param>
            <param name="includeBusinesses">if set to <c>true</c> [include businesses].</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.PersonService.GetByFullName(System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean@)">
            <summary>
            Returns a queryable collection of <see cref="T:Rock.Model.Person"/> entities by the person's full name.
            </summary>
            <param name="fullName">A <see cref="T:System.String"/> representing the full name to search by.</param>
            <param name="includeDeceased">A <see cref="T:System.Boolean"/> flag indicating if deceased individuals should be included in search results, if <c>true</c> then they will be
            included, otherwise <c>false</c>.</param>
            <param name="includeBusinesses">if set to <c>true</c> [include businesses].</param>
            <param name="allowFirstNameOnly">if set to true, a single value in fullName will also search for matching first names.</param>
            <param name="reversed">if set to <c>true</c> [reversed].</param>
            <returns>
            A queryable collection of <see cref="T:Rock.Model.Person"/> entities that match the search criteria.
            </returns>
        </member>
        <member name="M:Rock.Model.PersonService.GetByFullNameOrdered(System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean@)">
            <summary>
            Gets the by full name ordered.
            </summary>
            <param name="fullName">The full name.</param>
            <param name="includeDeceased">if set to <c>true</c> [include deceased].</param>
            <param name="includeBusinesses">if set to <c>true</c> [include businesses].</param>
            <param name="allowFirstNameOnly">if set to true, a single value in fullName will also search for matching first names.</param>
            <param name="reversed">if set to <c>true</c> [reversed].</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.PersonService.GetSimiliarNames(System.String,System.Collections.Generic.List{System.Int32},System.Boolean,System.Boolean)">
            <summary>
            Gets the similiar sounding names.
            </summary>
            <param name="fullName">The full name.</param>
            <param name="excludeIds">The exclude ids.</param>
            <param name="includeDeceased">if set to <c>true</c> [include deceased].</param>
            <param name="includeBusinesses">if set to <c>true</c> [include businesses].</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.PersonService.GetByPhonePartial(System.String,System.Boolean,System.Boolean)">
            <summary>
            Gets an queryable collection of <see cref="T:Rock.Model.Person"/> entities where their phone number partially matches the provided value.
            </summary>
            <param name="partialPhoneNumber">A <see cref="T:System.String"/> containing a partial phone number to match.</param>
            <param name="includeDeceased">A <see cref="T:System.Boolean"/> flag indicating if deceased individuals should be included in search results, if <c>true</c> then they will be
            included, otherwise <c>false</c>.</param>
            <param name="includeBusinesses">if set to <c>true</c> [include businesses].</param>
            <returns>
            An queryable collection of <see cref="T:Rock.Model.Person"/> entities that match the search criteria.
            </returns>
        </member>
        <member name="M:Rock.Model.PersonService.GetFamilies(System.Int32)">
            <summary>
            Gets the families.
            </summary>
            <param name="personId">The person identifier.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.PersonService.GetFamilyMembers(System.Int32,System.Boolean)">
            <summary>
            Returns a collection of <see cref="T:Rock.Model.Person"/> entities containing the family members of the provided person.
            </summary>
            <param name="personId">The person identifier.</param>
            <param name="includeSelf">if set to <c>true</c> [include self].</param>
            <returns>
            An enumerable collection of <see cref="T:Rock.Model.Person"/> entities containing the family members of the provided person.
            </returns>
        </member>
        <member name="M:Rock.Model.PersonService.GetFamilyMembers(Rock.Model.Group,System.Int32,System.Boolean)">
            <summary>
            Returns a collection of <see cref="T:Rock.Model.Person"/> entities containing the family members of the provided person.
            </summary>
            <param name="family">The family.</param>
            <param name="personId">The person identifier.</param>
            <param name="includeSelf">if set to <c>true</c> [include self].</param>
            <returns>
            An enumerable collection of <see cref="T:Rock.Model.Person"/> entities containing the family members of the provided person.
            </returns>
        </member>
        <member name="M:Rock.Model.PersonService.GetFamilyNames(System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Gets the family names.
            </summary>
            <param name="personId">The person identifier.</param>
            <param name="includeMemberNames">if set to <c>true</c> [include member names].</param>
            <param name="includeSelf">if set to <c>true</c> [include self].</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.PersonService.GetFirstLocation(System.Int32,System.Int32)">
            <summary>
            Gets the first location.
            </summary>
            <param name="personId">The person identifier.</param>
            <param name="locationTypeValueId">The location type value id.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.PersonService.GetPhoneNumber(Rock.Model.Person,Rock.Web.Cache.DefinedValueCache)">
            <summary>
            Gets a phone number
            </summary>
            <param name="person">The person.</param>
            <param name="phoneType">Type of the phone.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.PersonService.Get(System.Int32,System.Boolean)">
            <summary>
            Returns a <see cref="T:Rock.Model.Person"/> by their PersonId
            </summary>
            <param name="id">The <see cref="T:System.Int32"/> representing the Id of the <see cref="T:Rock.Model.Person"/> to search for.</param>
            <param name="followMerges">A <see cref="T:System.Boolean"/> flag indicating that the provided PersonId should be checked against the <see cref="T:Rock.Model.PersonAlias"/> list.
            When <c>true</c> the <see cref="T:Rock.Model.PersonAlias"/> log will be checked for the PersonId, otherwise <c>false</c>.</param>
            <returns>The <see cref="T:Rock.Model.Person"/> associated with the provided Id, otherwise null.</returns>
        </member>
        <member name="M:Rock.Model.PersonService.Get(System.Guid,System.Boolean)">
            <summary>
            Returns a <see cref="T:Rock.Model.Person"/> by their Guid.
            </summary>
            <param name="guid">A <see cref="T:System.Guid"/> representing the <see cref="T:Rock.Model.Person">Person's</see> Guid identifier.</param>
            <param name="followMerges">A <see cref="T:System.Boolean"/> flag indicating that the provided Guid should be checked against the <see cref="T:Rock.Model.PersonAlias"/> list.
            When <c>true</c> the <see cref="T:Rock.Model.PersonAlias"/> log will be checked for the Guid, otherwise <c>false</c>.</param>
            <returns>The <see cref="T:Rock.Model.Person"/> associated with the provided Guid, otherwise null.</returns>
        </member>
        <member name="M:Rock.Model.PersonService.GetByEncryptedKey(System.String)">
            <summary>
            Gets the by encrypted key.
            </summary>
            <param name="encryptedKey">The encrypted key.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.PersonService.GetByEncryptedKey(System.String,System.Boolean)">
            <summary>
            Returns a <see cref="T:Rock.Model.Person"/> by their encrypted key value.
            </summary>
            <param name="encryptedKey">A <see cref="T:System.String"/> containing an encrypted key value.</param>
            <param name="followMerges">if set to <c>true</c> [follow merges].</param>
            <returns>
            The <see cref="T:Rock.Model.Person"/> associated with the provided Key, otherwise null.
            </returns>
        </member>
        <member name="M:Rock.Model.PersonService.GetSpouse(Rock.Model.Person)">
            <summary>
            Gets the <see cref="T:Rock.Model.Person"/> entity of the provided Person's spouse.
            </summary>
            <param name="person">The <see cref="T:Rock.Model.Person"/> entity of the Person to retrieve the spouse of.</param>
            <returns>The <see cref="T:Rock.Model.Person"/> entity containing the provided Person's spouse. If the provided Person's spouse is not found, this value will be null.</returns>
        </member>
        <member name="M:Rock.Model.PersonService.SaveUserPreference(Rock.Model.Person,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Saves a <see cref="T:Rock.Model.Person">Person's</see> user preference setting by key.
            </summary>
            <param name="person">The <see cref="T:Rock.Model.Person"/> who the preference value belongs to.</param>
            <param name="key">A <see cref="T:System.String"/> representing the key (name) of the preference setting. </param>
            <param name="values">A list of <see cref="T:System.String"/> values representing the value of the preference setting.</param>
        </member>
        <member name="M:Rock.Model.PersonService.GetUserPreference(Rock.Model.Person,System.String)">
            <summary>
            Returns a <see cref="T:Rock.Model.Person"/> user preference value by preference setting's key.
            </summary>
            <param name="person">The <see cref="T:Rock.Model.Person"/> to retrieve the preference value for.</param>
            <param name="key">A <see cref="T:System.String"/> representing the key name of the preference setting.</param>
            <returns>A list of <see cref="T:System.String"/> containing the values associated with the user's preference setting.</returns>
        </member>
        <member name="M:Rock.Model.PersonService.GetUserPreferences(Rock.Model.Person)">
            <summary>
            Returns all of the user preference settings for a <see cref="T:Rock.Model.Person"/>.
            </summary>
            <param name="person">The <see cref="T:Rock.Model.Person"/> to retrieve the user preference settings for.</param>
            <returns>A dictionary containing all of the <see cref="T:Rock.Model.Person">Person's</see> user preference settings.</returns>
        </member>
        <member name="T:Rock.Model.PersonExtensionMethods">
            <summary>
            Generated Extension Methods
            </summary>
        </member>
        <member name="M:Rock.Model.PersonExtensionMethods.Clone(Rock.Model.Person,System.Boolean)">
            <summary>
            Clones this Person object to a new Person object
            </summary>
            <param name="source">The source.</param>
            <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.PersonExtensionMethods.CopyPropertiesFrom(Rock.Model.Person,Rock.Model.Person)">
            <summary>
            Copies the properties from another Person object to this Person object
            </summary>
            <param name="target">The target.</param>
            <param name="source">The source.</param>
        </member>
        <member name="M:Rock.Model.PersonExtensionMethods.GetFamilies(Rock.Model.Person)">
            <summary>
            Gets the families.
            </summary>
            <param name="person">The person.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.PersonExtensionMethods.GetFamilyMembers(Rock.Model.Person,System.Boolean)">
            <summary>
            Gets a queryable collection of <see cref="T:Rock.Model.Person"/> entities containing the Person's family.
            </summary>
            <param name="person">The <see cref="T:Rock.Model.Person"/> to retrieve family members for.</param>
            <param name="includeSelf">A <see cref="T:System.Boolean"/> value that is <c>true</c> if the provided person should be returned in the results, otherwise <c>false</c>.</param>
            <returns>Returns a queryable collection of <see cref="T:Rock.Model.Person"/> entities representing the provided Person's family.</returns>
        </member>
        <member name="M:Rock.Model.PersonExtensionMethods.GetSpouse(Rock.Model.Person)">
            <summary>
            Gets the <see cref="T:Rock.Model.Person"/> entity of the provided Person's spouse.
            </summary>
            <param name="person">The <see cref="T:Rock.Model.Person"/> entity of the Person to retrieve the spouse of.</param>
            <returns>The <see cref="T:Rock.Model.Person"/> entity containing the provided Person's spouse. If the provided Person's spouse is not found, this value will be null.</returns>
        </member>
        <member name="T:Rock.Model.PersonViewed">
            <summary>
            Represents an instance of when a <see cref="T:Rock.Model.Person">Person's</see> person detail data was viewed in Rock.  Includes data on who was viewed, the person who viewed their record, and when/where their record
            was viewed.
            </summary>
        </member>
        <member name="M:Rock.Model.PersonViewed.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Rock.Model.PersonViewed.ViewerPersonAliasId">
            <summary>
            Gets or sets the Id of the <see cref="T:Rock.Model.Person"/> that was the viewer.
            </summary>
            <value>
            A <see cref="T:System.Int32"/> representing the Id of the <see cref="T:Rock.Model.Person"/> who was the viewer.
            </value>
        </member>
        <member name="P:Rock.Model.PersonViewed.TargetPersonAliasId">
            <summary>
            Gets or sets the Id of the Target/Viewed <see cref="T:Rock.Model.Person"/>.
            </summary>
            <value>
            A <see cref="T:System.Int32"/> representing the Id of the Target/Viewed <see cref="T:Rock.Model.Person"/> 
            </value>
        </member>
        <member name="P:Rock.Model.PersonViewed.ViewDateTime">
            <summary>
            Gets or sets the Date and Time that the that the person was viewed.
            </summary>
            <value>
            A <see cref="T:System.DateTime"/> representing the time that the person was viewed.
            </value>
        </member>
        <member name="P:Rock.Model.PersonViewed.IpAddress">
            <summary>
            Gets or sets the IP address of the computer/device that requested the page view.
            </summary>
            <value>
            A <see cref="T:System.String"/> representing the IP address of the computer/device that requested the page view.
            </value>
        </member>
        <member name="P:Rock.Model.PersonViewed.Source">
            <summary>
            Gets or sets the source of the view (site id or application name)
            </summary>
            <value>
            A <see cref="T:System.String"/> representing the source of the View.
            </value>
        </member>
        <member name="P:Rock.Model.PersonViewed.ViewerPersonAlias">
            <summary>
            Gets or sets the <see cref="T:Rock.Model.Person"/> entity of the viewer.
            </summary>
            <value>
            A <see cref="T:Rock.Model.Person"/> entity representing the viewer.
            </value>
        </member>
        <member name="P:Rock.Model.PersonViewed.TargetPersonAlias">
            <summary>
            Gets or sets the <see cref="T:Rock.Model.Person"/> entity of the individual who was viewed.
            </summary>
            <value>
            A <see cref="T:Rock.Model.Person"/> entity representing the person who was viewed.
            </value>
        </member>
        <member name="T:Rock.Model.PersonViewedConfiguration">
            <summary>
            Person Viewed Configuration class.
            </summary>
        </member>
        <member name="M:Rock.Model.PersonViewedConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.PersonViewedConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Rock.Model.PersonViewedService">
            <summary>
            PersonViewed Service class
            </summary>
            <summary>
            Data Access/service class for <see cref="T:Rock.Model.PersonViewed"/> entities.
            </summary>
        </member>
        <member name="M:Rock.Model.PersonViewedService.#ctor(Rock.Data.RockContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.PersonViewedService"/> class
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Rock.Model.PersonViewedService.CanDelete(Rock.Model.PersonViewed,System.String@)">
            <summary>
            Determines whether this instance can delete the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="errorMessage">The error message.</param>
            <returns>
              <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Rock.Model.PersonViewedService.GetByTargetPersonId(System.Nullable{System.Int32})">
            <summary>
            Returns an enumerable collection of <see cref="T:Rock.Model.PersonViewed"/> entities by the Id of the Target <see cref="T:Rock.Model.Person"/>
            </summary>
            <param name="targetPersonId">An <see cref="T:System.Int32"/> representing the Id of the Target <see cref="T:Rock.Model.Person"/> to search by.</param>
            <returns>An enumerable collection of <see cref="T:Rock.Model.PersonViewed"/> entities where the Id of the target <see cref="T:Rock.Model.Person"/> matches the provided value.</returns>
        </member>
        <member name="M:Rock.Model.PersonViewedService.GetByViewerPersonId(System.Nullable{System.Int32})">
            <summary>
            Returns an enumerable collection of <see cref="T:Rock.Model.PersonViewed"/> entities by the Id of the Viewer <see cref="T:Rock.Model.Person"/>.
            </summary>
            <param name="viewerPersonId">A <see cref="T:System.Int32"/> representing the Id of the Viewer <see cref="T:Rock.Model.Person"/></param>
            <returns>An enumerable collection of <see cref="T:Rock.Model.PersonViewed"/> entities where the Id of the viewer <see cref="T:Rock.Model.Person"/> matches the provided value.</returns>
        </member>
        <member name="T:Rock.Model.PersonViewedExtensionMethods">
            <summary>
            Generated Extension Methods
            </summary>
        </member>
        <member name="M:Rock.Model.PersonViewedExtensionMethods.Clone(Rock.Model.PersonViewed,System.Boolean)">
            <summary>
            Clones this PersonViewed object to a new PersonViewed object
            </summary>
            <param name="source">The source.</param>
            <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.PersonViewedExtensionMethods.CopyPropertiesFrom(Rock.Model.PersonViewed,Rock.Model.PersonViewed)">
            <summary>
            Copies the properties from another PersonViewed object to this PersonViewed object
            </summary>
            <param name="target">The target.</param>
            <param name="source">The source.</param>
        </member>
        <member name="T:Rock.Model.PhoneNumberService">
            <summary>
            PhoneNumber Service class
            </summary>
            <summary>
            Data access/service class for <see cref="T:Rock.Model.PhoneNumber"/> entities.
            </summary>
        </member>
        <member name="M:Rock.Model.PhoneNumberService.#ctor(Rock.Data.RockContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.PhoneNumberService"/> class
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Rock.Model.PhoneNumberService.CanDelete(Rock.Model.PhoneNumber,System.String@)">
            <summary>
            Determines whether this instance can delete the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="errorMessage">The error message.</param>
            <returns>
              <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Rock.Model.PhoneNumberService.GetByPersonId(System.Int32)">
            <summary>
            Returns an enumerable collection of <see cref="T:Rock.Model.PhoneNumber">Phone Numbers</see> that belong to a <see cref="T:Rock.Model.Person"/>.
            </summary>
            <param name="personId">A <see cref="T:System.Int32"/> representing the PersonId of the <see cref="T:Rock.Model.Person"/> to retrieve phone numbers for.</param>
            <returns>An enumerable collection of <see cref="T:Rock.Model.PhoneNumber">PhoneNumbers</see> that belong to the specified <see cref="T:Rock.Model.Person"/>.</returns>
        </member>
        <member name="M:Rock.Model.PhoneNumberService.GetNumbersBySearchterm(System.String)">
            <summary>
            Returns a list of phone numbers that match the given search term.
            </summary>
            <param name="searchterm">A partial phone number search string (everything but digits will be removed before attempting the search).</param>
            <returns>A querable list of <see cref="T:System.String"/> phone numbers (as strings)</returns>
        </member>
        <member name="M:Rock.Model.PhoneNumberService.GetPersonIdsByNumber(System.String)">
            <summary>
            Returns a list of PersonIds <see cref="T:System.Int32"/> of people who have a phone number that match the given search term.
            </summary>
            <param name="searchterm">A partial phone number search string (everything but digits will be removed before attempting the search).</param>
            <returns>A querable list of <see cref="T:System.Int32"/> PersonIds</returns>
        </member>
        <member name="M:Rock.Model.PhoneNumberService.GetBySearchterm(System.String)">
            <summary>
            Returns a querable set of <see cref="T:Rock.Model.PhoneNumber">Phone Numbers</see> that match the given search term.
            </summary>
            <param name="searchterm">A partial phone number search string (everything but digits will be removed before attempting the search).</param>
            <returns>A querable list of <see cref="T:Rock.Model.PhoneNumber">PhoneNumbers</see></returns>
        </member>
        <member name="T:Rock.Model.PhoneNumberExtensionMethods">
            <summary>
            Generated Extension Methods
            </summary>
        </member>
        <member name="M:Rock.Model.PhoneNumberExtensionMethods.Clone(Rock.Model.PhoneNumber,System.Boolean)">
            <summary>
            Clones this PhoneNumber object to a new PhoneNumber object
            </summary>
            <param name="source">The source.</param>
            <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.PhoneNumberExtensionMethods.CopyPropertiesFrom(Rock.Model.PhoneNumber,Rock.Model.PhoneNumber)">
            <summary>
            Copies the properties from another PhoneNumber object to this PhoneNumber object
            </summary>
            <param name="target">The target.</param>
            <param name="source">The source.</param>
        </member>
        <member name="T:Rock.Model.DiscService">
            <summary>
            DISC Class for administering and scoring a DISC Assessment
            </summary>
        </member>
        <member name="F:Rock.Model.DiscService.questionData">
            <summary>
            Raw question data. This data format comes from source disc.js file from Greg Wiens.
            </summary>
        </member>
        <member name="M:Rock.Model.DiscService.GetResponses">
            <summary>
            Fetch a List of <see cref="T:Rock.Model.DiscService.ResponseItem"/> for display/processing.
            </summary>
            <returns>a List of <see cref="T:Rock.Model.DiscService.ResponseItem"/>.</returns>
        </member>
        <member name="M:Rock.Model.DiscService.Score(System.Collections.Generic.List{System.String})">
            <summary>
            Scores the test.
            </summary>
            <param name="selectedResponseIDs">a List of ResponseIDs to be scored.</param>
            <returns>a struct TestResults object with final scores.</returns>
        </member>
        <member name="M:Rock.Model.DiscService.AttributeValueLookup(Rock.Model.Person,System.String)">
            <summary>
            Fetches DISC scores.
            </summary>
            <param name="person"></param>
            <param name="attrib"></param>
            <returns>The DISC score, if one is saved. Otherwise, returns 0.</returns>
        </member>
        <member name="M:Rock.Model.DiscService.LoadSavedAssessmentResults(Rock.Model.Person)">
            <summary>
            Loads and returns saved Assessment scores for the Person.
            </summary>
            <param name="person">The Person to get the scores for.</param>
            <returns>AssessmentResults</returns>
        </member>
        <member name="M:Rock.Model.DiscService.SaveAssessmentResults(Rock.Model.Person,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Saves Assessment results to a Person's PersonProperties
            </summary>
            <param name="person"></param>
            <param name="ABd">Adaptive Behavior D</param>
            <param name="ABi">Adaptive Behavior I</param>
            <param name="ABs">Adaptive Behavior S</param>
            <param name="ABc">Adaptive Behavior C</param>
            <param name="NBd">Natural Behavior D</param>
            <param name="NBi">Natural Behavior I</param>
            <param name="NBs">Natural Behavior S</param>
            <param name="NBc">Natural Behavior C</param>
        </member>
        <member name="T:Rock.Model.DiscService.AssessmentResults">
            <summary>
            The AssessmentResults struct used to return the final assessment scores
            </summary>
        </member>
        <member name="F:Rock.Model.DiscService.AssessmentResults.AdaptiveBehaviorS">
            <summary>
            
            </summary>
        </member>
        <member name="F:Rock.Model.DiscService.AssessmentResults.AdaptiveBehaviorC">
            <summary>
            
            </summary>
        </member>
        <member name="F:Rock.Model.DiscService.AssessmentResults.AdaptiveBehaviorI">
            <summary>
            
            </summary>
        </member>
        <member name="F:Rock.Model.DiscService.AssessmentResults.AdaptiveBehaviorD">
            <summary>
            
            </summary>
        </member>
        <member name="F:Rock.Model.DiscService.AssessmentResults.NaturalBehaviorS">
            <summary>
            
            </summary>
        </member>
        <member name="F:Rock.Model.DiscService.AssessmentResults.NaturalBehaviorC">
            <summary>
            
            </summary>
        </member>
        <member name="F:Rock.Model.DiscService.AssessmentResults.NaturalBehaviorI">
            <summary>
            
            </summary>
        </member>
        <member name="F:Rock.Model.DiscService.AssessmentResults.NaturalBehaviorD">
            <summary>
            
            </summary>
        </member>
        <member name="F:Rock.Model.DiscService.AssessmentResults.LastSaveDate">
            <summary>
            
            </summary>
        </member>
        <member name="T:Rock.Model.DiscService.ResponseItem">
            <summary>
            An individual response to a question. 
            <para>Properties: QuestionNumber, ResponseNumber, ResponseID (QuestionNumber + ResponseNumber), ResponseText, MostScore, and LeastScore.</para>
            </summary>
        </member>
        <member name="F:Rock.Model.DiscService.ResponseItem.QuestionNumber">
            <summary>
            
            </summary>
        </member>
        <member name="F:Rock.Model.DiscService.ResponseItem.ResponseNumber">
            <summary>
            
            </summary>
        </member>
        <member name="F:Rock.Model.DiscService.ResponseItem.ResponseID">
            <summary>
            
            </summary>
        </member>
        <member name="F:Rock.Model.DiscService.ResponseItem.ResponseText">
            <summary>
            
            </summary>
        </member>
        <member name="F:Rock.Model.DiscService.ResponseItem.MostScore">
            <summary>
            
            </summary>
        </member>
        <member name="F:Rock.Model.DiscService.ResponseItem.LeastScore">
            <summary>
            
            </summary>
        </member>
        <member name="T:Rock.Data.NotAuditedAttribute">
            <summary>
            Custom attribute used to decorate model classes or specific model properties that should 
            not be audited.  If attributed to class, no class changes will be audited, if attributed
            to properties, changes will be audited only if properties withouth attribute have changed.
            This would typically include logging tables (i.e. Audit, Exception, UserLogin-LastActivityDate, etc)
            Specific properties can also 
            </summary>
        </member>
        <member name="T:Rock.Data.RockPluginDBInitializer`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Rock.Data.RockPluginDBInitializer`1.InitializeDatabase(`0)">
            <summary>
            Initializes the database.
            </summary>
            <param name="context">The context.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Rock.Data.RockTransactionScope">
            <summary>
            Use to wrap a block in a StartTransaction/Commit/Rollback
            </summary>
        </member>
        <member name="M:Rock.Data.RockTransactionScope.WrapTransaction(System.Action)">
            <summary>
            Executes a block of code within a Start/Commit/Rollback
            </summary>
            <example>  
            <code> 
             RockTransactionScope.WrapTransaction( () =>
             {
                 marketingCampaignAdTypeService.Save( marketingCampaignAdType, CurrentPersonId );
                 foreach (var attribute in attributes)
                 {
                   attributeService.Save( attribute, CurrentPersonId );
                 };  
             });    
            </code> 
            </example>
            <param name="action">A.</param>
        </member>
        <member name="T:Rock.Data.RouteAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Data.RouteAttribute.IsValid(System.Object)">
            <summary>
            Determines whether the specified value of the object is valid.
            </summary>
            <param name="value">The value of the object to validate.</param>
            <returns>
            true if the specified value is valid; otherwise, false.
            </returns>
        </member>
        <member name="T:Rock.Extension.IComponentData">
            <summary>
            Component Metadata
            </summary>
        </member>
        <member name="P:Rock.Extension.IComponentData.ComponentName">
            <summary>
            Gets the name of the component.
            </summary>
            <value>
            The name of the component.
            </value>
        </member>
        <member name="T:Rock.Extension.ComponentDescription">
            <summary>
            Helper class for wrapping the properties of a MEF class to use in databinding
            </summary>
        </member>
        <member name="M:Rock.Extension.ComponentDescription.#ctor(System.Int32,System.Collections.Generic.KeyValuePair{System.String,Rock.Extension.Component})">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Extension.ComponentDescription"/> class.
            </summary>
            <param name="id">The id.</param>
            <param name="service">The service.</param>
        </member>
        <member name="P:Rock.Extension.ComponentDescription.Id">
            <summary>
            Gets or sets the id.
            </summary>
            <value>
            The id.
            </value>
        </member>
        <member name="P:Rock.Extension.ComponentDescription.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:Rock.Extension.ComponentDescription.Type">
            <summary>
            Gets or sets the type.
            </summary>
            <value>
            The type.
            </value>
        </member>
        <member name="P:Rock.Extension.ComponentDescription.Description">
            <summary>
            Gets or sets the description.
            </summary>
            <value>
            The description.
            </value>
        </member>
        <member name="P:Rock.Extension.ComponentDescription.Order">
            <summary>
            Gets or sets the order.
            </summary>
            <value>
            The order.
            </value>
        </member>
        <member name="P:Rock.Extension.ComponentDescription.IsActive">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Rock.Extension.ComponentDescription"/> is active.
            </summary>
            <value>
              <c>true</c> if active; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Rock.Address.MelissaData">
            <summary>
            The AddressCheck service from <a href="http://www.melissadata.com/">Melissa Data</a>
            </summary>
        </member>
        <member name="M:Rock.Address.MelissaData.VerifyLocation(Rock.Model.Location,System.Boolean,System.String@)">
            <summary>
            Standardizes the address
            </summary>
            <param name="location">The location.</param>
            <param name="reVerify">Should location be reverified even if it has already been succesfully verified</param>
            <param name="result">The result code unique to the service.</param>
            <returns>
            True/False value of whether the address was standardized succesfully
            </returns>
        </member>
        <member name="T:Rock.Address.ServiceObjects">
            <summary>
            Geocoder service from <a href="http://www.serviceobjects.com">ServiceObjects</a>
            </summary>
        </member>
        <member name="M:Rock.Address.ServiceObjects.VerifyLocation(Rock.Model.Location,System.Boolean,System.String@)">
            <summary>
            Geocodes the specified address.
            </summary>
            <param name="location">The location.</param>
            <param name="reVerify">Should location be reverified even if it has already been succesfully verified</param>
            <param name="result">The result code unique to the service.</param>
            <returns>
            True/False value of whether the address was geocoded succesfully
            </returns>
        </member>
        <member name="T:Rock.Model.Auth">
            <summary>
            Represents a user or group's security authorization to perform a specified action on a securable entity in Rock. Authorization can either be allowed or denied and local (to the entity) security will override
            the parent (inherited) authority. Order of Auth's does matter. The first Auth for a specific action on an entity that the user qualifies for determines if they are allowed or denied.
            </summary>
        </member>
        <member name="M:Rock.Model.Auth.IsAllowedByDefault(System.String)">
            <summary>
            Returns the default authorization for a specific action.
            </summary>
            <param name="action">A <see cref="T:System.String"/> representing the name of the action.</param>
            <returns>A <see cref="T:System.Boolean"/> that is <c>true</c> if the specified action is allowed by default; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Rock.Model.Auth.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Rock.Model.Auth.EntityTypeId">
            <summary>
            Gets or sets the EntityTypeId of the <see cref="T:Rock.Model.EntityType"/> for the entity that this Auth object applies to.
            </summary>
            <value>
            A <see cref="T:System.Int32"/> representing the EntityTypeId of the <see cref="T:Rock.Model.EntityType"/> of the entity that this Auth object applies to.
            </value>
        </member>
        <member name="P:Rock.Model.Auth.EntityId">
            <summary>
            Gets or sets the EntityId of the entity that this Auth entity applies to.
            </summary>
            <value>
            A <see cref="T:System.Int32"/> representing the EntityId of the entity that this Auth entity applies to.
            </value>
        </member>
        <member name="P:Rock.Model.Auth.Order">
            <summary>
            Gets or sets the order or priority of the Auth entity. 
            </summary>
            <value>
            A <see cref="T:System.Int32"/> representing the order of the Auth entity.
            </value>
        </member>
        <member name="P:Rock.Model.Auth.Action">
            <summary>
            Gets or sets the name of action that this Auth entity covers (i.e. view, edit, administrate, etc.).
            </summary>
            <value>
            A <see cref="T:System.String"/> representing the name of the action that is covered by this Auth entity.
            </value>
        </member>
        <member name="P:Rock.Model.Auth.AllowOrDeny">
            <summary>
            Gets or sets a flag indicating if this Auth entity allows or denies this action for the role.
            </summary>
            <value>
            A <see cref="T:System.String"/> value that equals A for allow and D for deny.
            </value>
        </member>
        <member name="P:Rock.Model.Auth.SpecialRole">
            <summary>
            Gets or sets the special role that this Auth entity applies to.
            </summary>
            <value>
            A <see cref="T:Rock.Model.SpecialRole"/> enum indicating the special role that this Auth entity applies to.
            If this Auth entity does not apply to any special role then the value will be <c>SpecialRole.None</c> or (0); 
            If this Auth entity applies to All Users (authenticated and unauthenticated) then the value will be <c>SpecialRole.AllUsers</c> or 1;
            If this Auth entity applies to All Authenticated Users then the value will be <c>SpecialRole.AllAuthenticatedUsers</c> or 2;
            If this Auth entity applies to All Un-authenticated Users then this value will be <c>SpecialRole.AllUnAuthenticatedUsers</c> or 3.
            </value>
        </member>
        <member name="P:Rock.Model.Auth.PersonId">
            <summary>
            Gets or sets the PersonId of the <see cref="T:Rock.Model.Person"/> that this Auth entity allows or denies access to. This is used for user based authorization
            </summary>
            <value>
            A <see cref="T:System.Int32"/> representing the PersonId of the <see cref="T:Rock.Model.Person"/> that this Auth entity allows or denies access to. This applies to user/person based authorization.
            If user/person based Authorization is not used this value will be null.
            </value>
        </member>
        <member name="P:Rock.Model.Auth.GroupId">
            <summary>
            Gets or sets the GroupId of the Security Role <see cref="T:Rock.Model.Group"/> that this Auth entity allows or denies access to. This is used for group based authorization.
            </summary>
            <value>
            A <see cref="T:System.Int32"/> representing the GroupId of the <see cref="T:Rock.Model.Person"/> that this Auth entity allows or denies access to. This applies to group based authorization.
            If group based Authorization is not used this value will be null.
            </value>
        </member>
        <member name="P:Rock.Model.Auth.Group">
            <summary>
            Gets or sets the Security Role <see cref="T:Rock.Model.Group"/> that this Auth entity allows or denies access to. This is used for Group based authorization. 
            </summary>
            <value>
            The <see cref="T:Rock.Model.Group"/> that this Auth entity allows or denies access to. If group based authorization is not used, this value will be null.
            </value>
        </member>
        <member name="P:Rock.Model.Auth.Person">
            <summary>
            Gets or sets the <see cref="T:Rock.Model.Person"/> that this Auth entity allows or denies access to. This is used for Person based authorization.
            </summary>
            <value>
            The <see cref="T:Rock.Model.Person"/> that this Auth entity allows or denies access to. If person based authorization is not used, this value will be null.
            </value>
        </member>
        <member name="P:Rock.Model.Auth.EntityType">
            <summary>
            Gets or sets the the <see cref="T:Rock.Model.EntityType"/> of the entity that is being secured.
            </summary>
            <value>
            The <see cref="T:Rock.Model.EntityType"/> of of the entity that is being secured.
            </value>
        </member>
        <member name="T:Rock.Model.AuthConfiguration">
            <summary>
            Auth Configuration class.
            </summary>
        </member>
        <member name="M:Rock.Model.AuthConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.AuthConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Rock.Model.SpecialRole">
            <summary>
            Authorization for a special group of users not defined by a specific role or person
            </summary>
        </member>
        <member name="F:Rock.Model.SpecialRole.None">
            <summary>
            No special role
            </summary>
        </member>
        <member name="F:Rock.Model.SpecialRole.AllUsers">
            <summary>
            Authorize all users
            </summary>
        </member>
        <member name="F:Rock.Model.SpecialRole.AllAuthenticatedUsers">
            <summary>
            Authorize all authenticated users
            </summary>
        </member>
        <member name="F:Rock.Model.SpecialRole.AllUnAuthenticatedUsers">
            <summary>
            Authorize all un-authenticated users
            </summary>
        </member>
        <member name="T:Rock.Model.BlockType">
            <summary>
            Represents a a configurable and functional component or module that extends the base functionality of the Rock system/framework. A
            BlockType can be implemented one or more <see cref="T:Rock.Model.Page">Pages</see> or <see cref="T:Rock.Model.Layout">Layouts</see>.
            </summary>
        </member>
        <member name="M:Rock.Model.BlockType.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance. Returns the name of the BlockType
            </returns>
        </member>
        <member name="P:Rock.Model.BlockType.IsSystem">
            <summary>
            Gets or sets a flag indicating if this BlockType was created by and is a part of the Rock core system/framework. This property is required.
            </summary>
            <value>
            A <see cref="T:System.Boolean"/> that is <c>true</c> if this Block is part of the Rock core system/framework, otherwise is <c>false</c>.
            </value>
            <example>
            True
            </example>
        </member>
        <member name="P:Rock.Model.BlockType.Path">
            <summary>
            Gets or sets relative path to the .Net ASCX UserControl that provides the HTML Markup and code for the BlockType. This property is required.
            </summary>
            <value>
            A <see cref="T:System.String"/> that represents the relative path to the supporting UserControl for the BlockType.
            </value>
            <example>
            ~/Blocks/Security/Login.ascx
            </example>
        </member>
        <member name="P:Rock.Model.BlockType.Name">
            <summary>
            Gets or sets the name of the BlockType.
            </summary>
            <value>
            A <see cref="T:System.String"/> that represents the Name of the BlockType. This property is required.
            </value>
            <example>
            Login
            </example>
        </member>
        <member name="P:Rock.Model.BlockType.Category">
            <summary>
            Gets or sets the category of the BlockType.  Blocks will be grouped by category when displayed to user
            </summary>
            <value>
            A <see cref="T:System.String"/> that represents the category of the BlockType.
            </value>
            <example>
            Security
            </example>
        </member>
        <member name="P:Rock.Model.BlockType.Description">
            <summary>
            Gets or sets the user defined description of the BlockType. 
            </summary>
            <value>
            A <see cref="T:System.String"/> that represents the Description of the BlockType
            </value>
            <example>
            Provides ability to login to site.
            </example>
        </member>
        <member name="P:Rock.Model.BlockType.Blocks">
            <summary>
            Gets or sets a collection of  <see cref="T:Rock.Model.Block">Blocks</see> that are implementations of this BlockType.
            </summary>
            <value>
            Collection of <see cref="T:Rock.Model.Block">Blocks</see> that implements this BlockType.
            </value>
        </member>
        <member name="T:Rock.Model.BlockTypeConfiguration">
            <summary>
            Block Type Configuration class.
            </summary>
        </member>
        <member name="M:Rock.Model.BlockTypeConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.BlockTypeConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Rock.Model.Block">
            <summary>
            Represents an implementation of a <see cref="T:Rock.Model.BlockType"/> in Rock. A block can be implemented on a Site's <see cref="T:Rock.Model.Layout"/> and appear on 
            all pages on the site that uses that template or on an individual <see cref="T:Rock.Model.Page"/>.  
            
            An example of a Block being implemented on a layout template would be an implementation of a HTML Content Block Type in the footer zone of a layout that contains the site's copyright notice.  
            This Block will show on all <see cref="T:Rock.Model.Page">Pages</see> of the <see cref="T:Rock.Model.Site"/> that uses the layout.
            
            An example of a Block being implemented on a page would be the New Account <see cref="T:Rock.Model.BlockType"/> being implemented on the New Account page.
            </summary>
        </member>
        <member name="M:Rock.Model.Block.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance. Returns the Name of the Block
            </returns>
        </member>
        <member name="P:Rock.Model.Block.IsSystem">
            <summary>
            Gets or sets a flag indicating if this Block was created by and is a part of the Rock core system/framework. This property is required.
            </summary>
            <value>
            A <see cref="T:System.Boolean"/> that is <c>true</c> if this Block is part of the Rock core system/framework, otherwise is <c>false</c>.
            </value>
            <example>
            True
            </example>
        </member>
        <member name="P:Rock.Model.Block.PageId">
            <summary>
            Gets or sets the Id of the <see cref="T:Rock.Model.Page"/> that this Block is implemented on. This property will only be populated
            if the Block is implemented on a <see cref="T:Rock.Model.Page"/>.
            </summary>
            <value>
            An <see cref="T:System.Int32"/> that represents the Id of the <see cref="T:Rock.Model.Page"/> that this Block is implemented on.  This value will be null if this Block is implemented 
            as part of a <see cref="T:Rock.Model.Layout"/>.
            </value>
            <example>
            1
            </example>
        </member>
        <member name="P:Rock.Model.Block.LayoutId">
            <summary>
            Gets or sets the Id of the <see cref="T:Rock.Model.Layout"/> that this Block is implemented on. This property will only be populated
            if the Block is implemented on a <see cref="T:Rock.Model.Layout"/>.
            </summary>
            <value>
            An <see cref="T:System.Int32"/> that represents the Id of the <see cref="T:Rock.Model.Layout"/> that this Block is implemented on.  This value will be null if this Block is implemented 
            as part of a <see cref="T:Rock.Model.Page"/>.
            </value>
            <example>
            1
            </example>
        </member>
        <member name="P:Rock.Model.Block.BlockTypeId">
            <summary>
            Gets or sets the Id of the <see cref="T:Rock.Model.BlockType"/> that this Block is implementing. This property is required.
            </summary>
            <value>
            An <see cref="T:System.Int32"/> that represents the <see cref="T:Rock.Model.BlockType"/> that this Block is implementing.
            </value>
            <example>
            4
            </example>
        </member>
        <member name="P:Rock.Model.Block.Zone">
            <summary>
            Gets or sets the name of the layout zone/section that this Block is being implemented on. This property is required.
            </summary>
            <value>
            A <see cref="T:System.String"/> that represents the name of the Zone that this Block is implemented on.
            </value>
            <example>
            Content
            </example>
        </member>
        <member name="P:Rock.Model.Block.Order">
            <summary>
            Gets or sets the order that this Block appears in the <see cref="P:Rock.Model.Block.Page"/>/Layout zone that the Block is implemented in.  Blocks are 
            displayed/rendered in Ascending (1,2,3,...) order. The lower the number the higher in the Zone the Block will appear.  <see cref="T:Rock.Model.Page"/> Blocks have
            priority over layout Blocks, so they will appear higher in the Zone than <see cref="T:Rock.Model.Site"/>/Layout Blocks. This property is required
            </summary>
            <value>
            A <see cref="T:System.Int32"/> that represents the display order of the Block in a <see cref="T:Rock.Model.Page"/>/Layout Zone.
            </value>
        </member>
        <member name="P:Rock.Model.Block.Name">
            <summary>
            Gets or sets a user defined name of the block implementation. This property is required.
            </summary>
            <value>
            A <see cref="T:System.String"/> that represents a user defined name for the Block.
            </value>
        </member>
        <member name="P:Rock.Model.Block.CssClass">
            <summary>
            Gets or sets an optional CSS class to include when the block's parent container is rendered
            </summary>
            <value>
            The CSS class.
            </value>
        </member>
        <member name="P:Rock.Model.Block.PreHtml">
            <summary>
            Gets or sets any HTML to be rendered before the block
            </summary>
            <value>
            The pre HTML.
            </value>
        </member>
        <member name="P:Rock.Model.Block.PostHtml">
            <summary>
            Gets or sets any HTML to be rendered after the block
            </summary>
            <value>
            The post HTML.
            </value>
        </member>
        <member name="P:Rock.Model.Block.OutputCacheDuration">
            <summary>
            Gets or sets the length of time (in minutes) that the Block's data is cached. This property is required.
            </summary>
            <value>
            An <see cref="T:System.Int32"/> that represents the length of time that the Block's data is cached.
            </value>
        </member>
        <member name="P:Rock.Model.Block.BlockType">
            <summary>
            Gets or sets the <see cref="T:Rock.Model.BlockType"/> entity that this Block is implementing.
            </summary>
            <value>
            The <see cref="T:Rock.Model.BlockType"/> that that is being implemented by this Block.
            </value>
        </member>
        <member name="P:Rock.Model.Block.Page">
            <summary>
            Gets or sets the <see cref="T:Rock.Model.Page"/> entity that this Block is implemented on. This 
            property will be null if this Block is being implemented on as part of a <see cref="T:Rock.Model.Layout"/>.
            </summary>
            <value>
            The <see cref="T:Rock.Model.Page"/> entity that this Block is being implemented on. This value will 
            be null if the Block is implemented as part of a <see cref="T:Rock.Model.Layout"/>.
            </value>
        </member>
        <member name="P:Rock.Model.Block.Layout">
            <summary>
            Gets or sets the <see cref="T:Rock.Model.Layout"/> entity that this Block is implemented on. This 
            property will be null if this Block is being implemented on as part of a <see cref="T:Rock.Model.Page"/>.
            </summary>
            <value>
            The <see cref="T:Rock.Model.Layout"/> entity that this Block is being implemented on. This value will 
            be null if the Block is implemented as part of a <see cref="T:Rock.Model.Page"/>.
            </value>
        </member>
        <member name="P:Rock.Model.Block.BlockLocation">
            <summary>
            Gets the location where this Block is being implemented on.  
            </summary>
            <value>
            The <see cref="T:Rock.Model.BlockLocation"/> where this Block is being implemented on. <c>BlockLocation.Page</c> if the PageId is not null, otherwise <c>BlockLocation.Layout</c>
            </value>
            <example>
            <c>BlockLocation.Page</c>
            </example>
        </member>
        <member name="P:Rock.Model.Block.ParentAuthority">
            <summary>
            Gets the securable object that security permissions should be inherited from.  If block is located on a page
            security will be inherited from the page, otherwise it will be inherited from the site.
            </summary>
            <value>
            The parent authority. If the block is located on the page, security will be
            inherited from the page, otherwise it will be inherited from the site.
            </value>
        </member>
        <member name="P:Rock.Model.Block.SupportedActions">
            <summary>
            Gets the supported actions.
            </summary>
            <value>
            The supported actions.
            </value>
        </member>
        <member name="T:Rock.Model.BlockConfiguration">
            <summary>
            Block Instance Configuration class.
            </summary>
        </member>
        <member name="M:Rock.Model.BlockConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.BlockConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Rock.Model.BlockLocation">
            <summary>
            The location where the Block is implemented
            </summary>
        </member>
        <member name="F:Rock.Model.BlockLocation.Layout">
            <summary>
            Block is located in the layout (will be rendered for every page using the layout)
            </summary>
        </member>
        <member name="F:Rock.Model.BlockLocation.Page">
            <summary>
            Block is located on the page
            </summary>
        </member>
        <member name="T:Rock.Model.BinaryFile">
            <summary>
            Represents any file that has either been uploaded to or generated and saved to Rock.  
            </summary>
        </member>
        <member name="M:Rock.Model.BinaryFile.SetStorageEntityTypeId(System.Nullable{System.Int32})">
            <summary>
            Sets the type of the storage entity.
            Should only be set by the BinaryFileService
            </summary>
            <param name="storageEntityTypeId">The storage entity type identifier.</param>
        </member>
        <member name="M:Rock.Model.BinaryFile.PreSaveChanges(Rock.Data.DbContext,System.Data.Entity.EntityState)">
            <summary>
            Pres the save.
            </summary>
            <param name="dbContext">The database context.</param>
            <param name="state">The state.</param>
        </member>
        <member name="M:Rock.Model.BinaryFile.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> containing the name of the file and  represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> containing the name of the file and represents this instance.
            </returns>
        </member>
        <member name="M:Rock.Model.BinaryFile.MakePermanent(System.String)">
            <summary>
            Makes the <see cref="T:Rock.Model.BinaryFile">BinaryFiles</see> represented in the comma delimited list of BinaryFileIds permanent.
            </summary>
            <param name="commaDelimitedIds">A <see cref="T:System.String"/> containing a comma delimited list of BinaryFileIDs representing the <see cref="T:Rock.Model.BinaryFile">BinaryFiles</see> that are to be marked as permanent.</param>
        </member>
        <member name="M:Rock.Model.BinaryFile.MakePermanent(System.Int32)">
            <summary>
            Makes the <see cref="T:Rock.Model.BinaryFile"/> represented by the provided BinaryFileId permanent.
            </summary>
            <param name="id">A <see cref="T:System.Int32"/> representing the Id of the <see cref="T:Rock.Model.BinaryFile"/> to be made permanent.</param>
        </member>
        <member name="P:Rock.Model.BinaryFile.IsTemporary">
            <summary>
            Gets or sets a flag indicating if this is a temporary file. This property is required.
            </summary>
            <value>
            A <see cref="T:System.Boolean"/> value that is <c>true</c> if this is a temporary file, otherwise <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Model.BinaryFile.IsSystem">
            <summary>
            Gets or sets a flag indicating if this file is part of the Rock core system/framework.
            </summary>
            <value>
            A <see cref="T:System.Boolean"/> value that is <c>true</c> if this file is part of the core system/framework; otherwise <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Model.BinaryFile.BinaryFileTypeId">
            <summary>
            Gets or sets the id of the <see cref="T:Rock.Model.BinaryFileType"/> that this file belongs to.
            </summary>
            <value>
            A <see cref="T:System.Int32"/> representing the <see cref="T:Rock.Model.BinaryFileType"/>.
            </value>
        </member>
        <member name="P:Rock.Model.BinaryFile.Url">
            <summary>
            Gets or sets the Url to access the file.
            </summary>
            <value>
            A <see cref="T:System.String"/> representing the Url to the file.
            </value>
        </member>
        <member name="P:Rock.Model.BinaryFile.FileName">
            <summary>
            Gets or sets the name of the file, including any extensions. This name is usually captured when the file is uploaded to Rock and this same name will be used when the file is downloaded. This property is required.
            </summary>
            <value>
            A <see cref="T:System.String"/> representing the name of the file, including the extension.
            </value>
        </member>
        <member name="P:Rock.Model.BinaryFile.MimeType">
            <summary>
            Gets or sets the Mime Type for the file. This property is required
            </summary>
            <value>
            A <see cref="T:System.String"/> representing the Mime Type for the file.
            </value>
        </member>
        <member name="P:Rock.Model.BinaryFile.Description">
            <summary>
            Gets or sets a user defined description of the file.
            </summary>
            <value>
            A <see cref="T:System.String"/> representing the user defined description of the file.
            </value>
        </member>
        <member name="P:Rock.Model.BinaryFile.StorageEntityTypeId">
            <summary>
            Gets the Id of the Storage Service <see cref="T:Rock.Model.EntityType"/> that is used to store this file.
            </summary>
            <value>
            A <see cref="T:System.Int32"/> representing the ID of the Storage Service <see cref="T:Rock.Model.EntityType"/> that is being used to store this file.
            </value>
        </member>
        <member name="P:Rock.Model.BinaryFile.BinaryFileType">
            <summary>
            Gets or sets the <see cref="T:Rock.Model.BinaryFileType"/> of the file.
            </summary>
            <value>
            The <see cref="T:Rock.Model.BinaryFileType"/> of the file.
            </value>
        </member>
        <member name="P:Rock.Model.BinaryFile.Data">
            <summary>
            Gets or sets a <see cref="T:Rock.Model.BinaryFileData"/> that contains the content of the file. This object can be used for temporary storage or be persisted to the database.
            </summary>
            <value>
            The <see cref="T:Rock.Model.BinaryFileData"/> that contains the content of the file. 
            </value>
        </member>
        <member name="P:Rock.Model.BinaryFile.StorageEntityType">
            <summary>
            Gets or sets the Storage Service <see cref="T:Rock.Model.EntityType"/>
            </summary>
            <value>
            The <see cref="T:Rock.Model.EntityType"/> representing the Storage Service that is being used.
            </value>
        </member>
        <member name="P:Rock.Model.BinaryFile.ParentAuthority">
            <summary>
            Gets the parent authority.
            </summary>
            <value>
            The parent authority.
            </value>
        </member>
        <member name="T:Rock.Model.BinaryFileConfiguration">
            <summary>
            File Configuration class.
            </summary>
        </member>
        <member name="M:Rock.Model.BinaryFileConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.BinaryFileConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Rock.Model.HtmlContent">
            <summary>
            Html Content POCO Entity.
            </summary>
        </member>
        <member name="M:Rock.Model.HtmlContent.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Rock.Model.HtmlContent.BlockId">
            <summary>
            Gets or sets the Id of the <see cref="T:Rock.Model.Block"/> that the HTML content should appear on. This property is required.
            </summary>
            <value>
            A <see cref="T:System.Int32"/> representing the Id of the <see cref="T:Rock.Model.Block"/> that the HTML content should be a part of.
            </value>
        </member>
        <member name="P:Rock.Model.HtmlContent.EntityValue">
            <summary>
            Gets or sets the Entity Value that must be present on the page for this HTML Content to be displayed. If this value will null
            there will not be an entity restriction on the HTMLContent object.
            </summary>
            <value>
            A <see cref="T:System.String"/> representing the EntityValue restriction for the HTMLContent object.
            </value>
        </member>
        <member name="P:Rock.Model.HtmlContent.Version">
            <summary>
            Gets or sets the version number for the HTMLContent
            </summary>
            <value>
            A <see cref="T:System.Int32"/> representing the version number for the HTML content.
            </value>
        </member>
        <member name="P:Rock.Model.HtmlContent.Content">
            <summary>
            Gets or sets the HTML content that will display on the block when conditions (if any) are met.
            </summary>
            <value>
            A <see cref="T:System.String"/> representing the HTML content that will appear as part of the block.
            </value>
        </member>
        <member name="P:Rock.Model.HtmlContent.IsApproved">
            <summary>
            Gets or sets a flag indicating if the content has been approved. If approval is required, the content will not be displayed until it has been approved.
            </summary>
            <value>
            A <see cref="T:System.Boolean"/> value that is <c>true</c> if the HTML content has been approved; otherwise <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Model.HtmlContent.ApprovedByPersonId">
            <summary>
            Gets or sets the Id of the <see cref="T:Rock.Model.Person"/> who approved the HTMLContent.
            </summary>
            <value>
            A <see cref="T:System.Int32"/> representing the Id of the <see cref="T:Rock.Model.Person"/> who approved the HTMLContent. If the HTMLContent had not been approved, this value will be null.
            </value>
        </member>
        <member name="P:Rock.Model.HtmlContent.ApprovedDateTime">
            <summary>
            Gets or sets the date and time that the HTMLContent was approved.
            </summary>
            <value>
            A <see cref="T:System.DateTime"/> value that represents when the HTMLContent was approved. If the HTMLContent had not been approved, this value will be null.
            </value>
        </member>
        <member name="P:Rock.Model.HtmlContent.StartDateTime">
            <summary>
            Gets or sets the date and time that the HTMLContent becomes active and available to be displayed on the web.  If a date and time is provided, the HTMLContent will not be available until then; if null
            the HTMLContent will be available immediately.  Please note that the start date is overridden by the approval status, if the HTMLContent is subject to approval, it will not be displayed until it is approved.
            </summary>
            <value>
            A <see cref="T:System.DateTime"/> representing the date and time that the content becomes available. If the HTMLContent does not have start date (immediately available) this value will be null.
            </value>
        </member>
        <member name="P:Rock.Model.HtmlContent.ExpireDateTime">
            <summary>
            Gets or sets the date and time that the HTMLContent expires and is no longer available. If this value is null the HTMLContent remains available until it is overwritten or replaced with a new version.
            </summary>
            <value>
            A <see cref="T:System.DateTime"/> representing the date and time that the HTMLContent expires. If the content does not expire this value will be null.
            </value>
        </member>
        <member name="P:Rock.Model.HtmlContent.Block">
            <summary>
            Gets or sets the <see cref="T:Rock.Model.Block"/> that this HTMLContent appears on. 
            </summary>
            <value>
            The <see cref="T:Rock.Model.Block"/> that this HTML content appears on.
            </value>
        </member>
        <member name="P:Rock.Model.HtmlContent.ApprovedByPerson">
            <summary>
            Gets or sets the <see cref="T:Rock.Model.Person"/> who approved the HTML content.
            </summary>
            <value>
            The <see cref="T:Rock.Model.Person"/> who approved the HTMLContent.
            </value>
        </member>
        <member name="T:Rock.Model.HtmlContentConfiguration">
            <summary>
            Html Content Configuration class.
            </summary>
        </member>
        <member name="M:Rock.Model.HtmlContentConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.HtmlContentConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Rock.Model.Page">
            <summary>
            Represents an individual webpage in Rock. A page is a container on a <see cref="T:Rock.Model.Site"/> that has a <see cref="T:Rock.Model.Layout"/> which
            consists of one or more content area zones. Each content area zone on the page can contain zero or more <see cref="T:Rock.Model.Block">Blocks.</see>.
            
            Pages are hierarchical, and are used to create the structure of the site.  Each page can have one parent Page and zero or more children pages, and the 
            page hierarchy is used to create the SiteMap.
            </summary>
        </member>
        <member name="M:Rock.Model.Page.PreSaveChanges(Rock.Data.DbContext,System.Data.Entity.EntityState)">
            <summary>
            Method that will be called on an entity immediately before the item is saved by context
            </summary>
            <param name="dbContext">The database context.</param>
            <param name="state">The state.</param>
        </member>
        <member name="M:Rock.Model.Page.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Rock.Model.Page.InternalName">
            <summary>
            Gets or sets the internal name to use when administering this page
            </summary>
            <value>
            A <see cref="T:System.String"/> that represents the internal name of the Page.
            </value>
        </member>
        <member name="P:Rock.Model.Page.PageTitle">
            <summary>
            Gets or sets the title of the of the Page to use as the page caption, in menu's, breadcrumb display etc.
            </summary>
            <value>
            A <see cref="T:System.String"/> that represents the page title of the Page.
            </value>
        </member>
        <member name="P:Rock.Model.Page.BrowserTitle">
            <summary>
            Gets or sets the browser title to use for the page
            </summary>
            <value>
            The browser title.
            </value>
        </member>
        <member name="P:Rock.Model.Page.ParentPageId">
            <summary>
            Gets or sets the Id of the parent Page.
            </summary>
            <value>
            An <see cref="T:System.Int32"/> that represents the Id of the parent Page.
            </value>
        </member>
        <member name="P:Rock.Model.Page.IsSystem">
            <summary>
            Gets or sets a flag indicating if the Page is part of the Rock core system/framework.
            </summary>
            <value>
            A <see cref="T:System.Boolean"/> that is <c>true</c> if this Page is part of the Rock core system/framework, otherwise <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Model.Page.LayoutId">
            <summary>
            Gets or sets the Id of the <see cref="T:Rock.Model.Layout"/> that this Page uses.
            </summary>
            <value>
            An <see cref="T:System.Int32"/> that represents the Id of the <see cref="T:Rock.Model.Layout"/> that this Page uses.
            </value>
        </member>
        <member name="P:Rock.Model.Page.RequiresEncryption">
            <summary>
            Gets or sets a flag that indicates if the Page requires SSL encryption.
            </summary>
            <value>
            A <see cref="T:System.Boolean"/> that is <c>true</c> if this Page requires encryption, otherwise <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Model.Page.EnableViewState">
            <summary>
            Gets or sets a flag indicating if view state should be enabled on the page. 
            </summary>
            <value>
            A <see cref="T:System.Boolean"/> that is <c>true</c> if view state should be enabled on the page, otherwise <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Model.Page.PageDisplayTitle">
            <summary>
            Gets or sets a value indicating whether the Page Title should be displayed on the page (if the <see cref="T:Rock.Model.Layout"/> supports it).
            </summary>
            <value>
              A <see cref="T:System.Boolean"/> that is <c>true</c> if the title should be displayed on the Page, otherwise <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Model.Page.PageDisplayBreadCrumb">
            <summary>
            Gets or sets a flag indicating whether breadcrumbs are displayed on Page
            </summary>
            <value>
            A <see cref="T:System.Boolean"/> that is <c>true</c> if breadcrumbs should be displayed on the page, otherwise, <c>false</c>
            </value>
        </member>
        <member name="P:Rock.Model.Page.PageDisplayIcon">
            <summary>
            Gets or sets a value indicating whether the Page icon should be displayed on the Page.
            </summary>
            <value>
              A <see cref="T:System.Boolean"/> that is <c>true</c> if the icon should be displayed otherwise <c>false</c>
            </value>
        </member>
        <member name="P:Rock.Model.Page.PageDisplayDescription">
            <summary>
            Gets or sets a value indicating whether the Page description should be displayed on the page.
            </summary>
            <value>
            A <see cref="T:System.Boolean"/>value that is <c>true</c> if the description should be displayed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Model.Page.DisplayInNavWhen">
            <summary>
            Gets or sets a a value indicating when the Page should be displayed in the navigation.
            </summary>
            <value>
            An <see cref="P:Rock.Model.Page.DisplayInNavWhen"/> enum value that determines when to display in a navigation 
            0 = When Security Allows
            1 = Always
            3 = Never   
            
            Enum[DisplayInNavWhen].
            </value>
        </member>
        <member name="P:Rock.Model.Page.MenuDisplayDescription">
            <summary>
            Gets or sets a flag indicating if the Page description should be displayed in the menu.
            </summary>
            <value>
            A <see cref="T:System.Boolean"/> value that is <c>true</c> if the description should be displayed, otherwise <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Model.Page.MenuDisplayIcon">
            <summary>
            Gets or sets a flag indicating if the Page icon should be displayed in the menu.
            </summary>
            <value>
            A <see cref="T:System.Boolean"/> value that is <c>true</c> if the Page description should be displayed, otherwise <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Model.Page.MenuDisplayChildPages">
            <summary>
            Gets or sets a flag indicating if the Page's children Pages should be displayed in the menu.
            </summary>
            <value>
            A <see cref="T:System.Boolean"/> value that is <c>true</c> if the Page's child pages should be displayed, otherwise <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Model.Page.BreadCrumbDisplayName">
            <summary>
            Gets or sets a value indicating whether the Page Name is displayed in the breadcrumb.
            </summary>
            <value>
            A <see cref="T:System.Boolean"/> value that is <c>true</c> if the Page's name should be displayed in breadcrumb, otherwise <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Model.Page.BreadCrumbDisplayIcon">
            <summary>
            Gets or sets a value indicating whether icon is displayed in breadcrumb.
            </summary>
            <value>
            A <see cref="T:System.Boolean"/> that is <c>true</c> if the icon is displayed in the breadcrumb, otherwise <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Model.Page.Order">
            <summary>
            Gets or sets a number indicating the order of the page in the menu and in the site map.
            This will also affect the page order in the menu. This property is required.
            </summary>
            <value>
            A <see cref="T:System.Int32"/> indicating the order of the page in the page hierarchy and sitemap.
            </value>
        </member>
        <member name="P:Rock.Model.Page.OutputCacheDuration">
            <summary>
            Gets or sets a value indicating the length of time in that rendered output is cached. This property is required.
            </summary>
            <value>
            An <see cref="T:System.Int32"/> represents the length of time that output is cached. 0 = no caching.
            </value>
        </member>
        <member name="P:Rock.Model.Page.Description">
            <summary>
            Gets or sets a user defined description of the page.  This will be added as a meta tag for the page 
            </summary>
            <value>
            A <see cref="T:System.String"/> that represents the Page description.
            </value>
        </member>
        <member name="P:Rock.Model.Page.KeyWords">
            <summary>
            Gets or sets the key words.
            </summary>
            <value>
            The key words.
            </value>
        </member>
        <member name="P:Rock.Model.Page.HeaderContent">
            <summary>
            Gets or sets html content to add to the page header area of the page when rendered.
            </summary>
            <value>
            The content of the header.
            </value>
        </member>
        <member name="P:Rock.Model.Page.IconCssClass">
            <summary>
            Gets or sets the icon CSS class name for a font vector based icon.
            </summary>
            <value>
            A <see cref="T:System.String"/> that represents the CSS Class Name of the icon being used. This value will be empty/null if a file based icon is being used.
            </value>
        </member>
        <member name="P:Rock.Model.Page.IncludeAdminFooter">
            <summary>
            Gets or sets a flag indicating if the admin footer should be displayed when a Site Administrator is logged in.
            </summary>
            <value>
            A <see cref="T:System.Boolean"/> value that is <c>true</c> if admin footer is displayed; otherwise <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Model.Page.ParentPage">
            <summary>
            Gets or sets the Page entity for the parent page.
            </summary>
            <value>
            The <see cref="T:Rock.Model.Page"/> entity for the parent Page
            </value>
        </member>
        <member name="P:Rock.Model.Page.SupportedActions">
            <summary>
            Gets the supported actions.
            </summary>
            <value>
            The supported actions.
            </value>
        </member>
        <member name="P:Rock.Model.Page.Layout">
            <summary>
            Gets or sets the <see cref="T:Rock.Model.Layout"/> that the pages uses.
            </summary>
            <value>
            The <see cref="T:Rock.Model.Layout"/> entity that the Page is using
            </value>
        </member>
        <member name="P:Rock.Model.Page.Blocks">
            <summary>
            Gets or sets the collection of <see cref="T:Rock.Model.Block">Blocks</see> that are used on the page.
            </summary>
            <value>
            Collection of <see cref="T:Rock.Model.Block"/> entities that are used on the Page.
            </value>
        </member>
        <member name="P:Rock.Model.Page.Pages">
            <summary>
            Gets or sets the collection of the current page's child pages.
            </summary>
            <value>
            Collection of child pages
            </value>
        </member>
        <member name="P:Rock.Model.Page.PageRoutes">
            <summary>
            Gets or sets the <see cref="T:Rock.Model.PageRoute">PageRoutes</see> that reference this page.
            </summary>
            <value>
            Collection of <see cref="T:Rock.Model.PageRoute"/> entities that reference this page.
            </value>
        </member>
        <member name="P:Rock.Model.Page.PageContexts">
            <summary>
            Gets or sets a collection of <see cref="T:Rock.Model.PageContext"/> entities that are used on this page.
            </summary>
            <value>
            A collection of <see cref="T:Rock.Model.PageContext"/> entities that are used on the page. 
            </value>
        </member>
        <member name="P:Rock.Model.Page.ParentAuthority">
            <summary>
            Gets the parent authority for the page. Page security is automatically inherited from the parent page, unless 
            explicitly overridden.  If there is no parent page, it is inherited from the site (through the layout)
            </summary>
            <value>
            The parent authority.
            </value>
        </member>
        <member name="T:Rock.Model.PageConfiguration">
            <summary>
            Page Configuration class.
            </summary>
        </member>
        <member name="M:Rock.Model.PageConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.PageConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Rock.Model.DisplayInNavWhen">
            <summary>
            Represents how a <see cref="T:Rock.Model.Page"/> should be displayed in the page navigation controls.
            </summary>
        </member>
        <member name="F:Rock.Model.DisplayInNavWhen.WhenAllowed">
            <summary>
            Display this page in navigation controls when allowed by security
            </summary>
        </member>
        <member name="F:Rock.Model.DisplayInNavWhen.Always">
            <summary>
            Always display this page in navigation controls, regardless of security
            </summary>
        </member>
        <member name="F:Rock.Model.DisplayInNavWhen.Never">
            <summary>
            Never display this page in navigation controls
            </summary>
        </member>
        <member name="T:Rock.Model.PageRoute">
            <summary>
            Represents a PageRoute object in Rock. All pages in Rock are accessed via a PageRoute. The default route that is used in Rock
            is /page/{pageId} (for example /page/113 tells Rock to load the <see cref="T:Rock.Model.Page"/> associated with PageId 113). This model allows
            for custom page routes to be created, which in turn allows us to use Friendlier Urls (for example the default New Account page can be accessed by /NewAccount 
            as well as /page/4).
            </summary>
        </member>
        <member name="M:Rock.Model.PageRoute.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> containing the Route and represents this PageRoute
            </summary>
            <returns>
            A <see cref="T:System.String"/> containing the Route and represents this instance.
            </returns>
        </member>
        <member name="P:Rock.Model.PageRoute.IsSystem">
            <summary>
            Gets or sets a flag indicating if the PageRoute is part of of the Rock core system/framework. This property is required.
            </summary>
            <value>
            A <see cref="T:System.Boolean"/> value that is <c>true</c> if the PageRoute is part of the Rock core system/framework, otherwise <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Model.PageRoute.PageId">
            <summary>
            Gets or sets the Id of the <see cref="T:Rock.Model.Page"/> that the PageRoute is linked to. This property is required.
            </summary>
            <value>
            A <see cref="T:System.Int32"/> containing the Id of the <see cref="T:Rock.Model.Page"/> that the PageRoute is linked to.
            </value>
        </member>
        <member name="P:Rock.Model.PageRoute.Route">
            <summary>
            Gets or sets the format of the route path. Route examples include: Page <example>NewAccount</example> or <example>Checkin/Welcome</example>. 
            A specific group <example>Group/{GroupId} (i.e. Group/16)</example>. A person's history <example>Person/{PersonId}/History (i.e. Person/12/History)</example>.
            This property is required.
            </summary>
            <value>
            A <see cref="T:System.String"/> containing the format of the RoutePath.
            </value>
        </member>
        <member name="P:Rock.Model.PageRoute.Page">
            <summary>
            Gets or sets the <see cref="T:Rock.Model.Page"/> associated with the RoutePath.
            </summary>
            <value>
            The <see cref="T:Rock.Model.Page"/> that is associated with the RoutePath.
            </value>
        </member>
        <member name="T:Rock.Model.PageRouteConfiguration">
            <summary>
            Page Route Configuration class.
            </summary>
        </member>
        <member name="M:Rock.Model.PageRouteConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.PageRouteConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Rock.Model.Site">
            <summary>
            Site Model Entity. A Site in Rock is a collection of <see cref="T:Rock.Model.Page">pages</see> and usually 
            associated with one or more <see cref="T:Rock.Model.SiteDomain">SiteDomains </see>.
            </summary>
        </member>
        <member name="M:Rock.Model.Site.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> containing the Name of the site that that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> containing the Name of the site that represents this instance.
            </returns>
        </member>
        <member name="P:Rock.Model.Site.IsSystem">
            <summary>
            Gets or sets a flag indicating if this Site was created by and is part of the Rock core system/framework. This property is required.
            </summary>
            <value>
            A <see cref="T:System.Boolean"/> that is <c>true</c> if this Site is part of the Rock core system/framework, otherwise <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Model.Site.Name">
            <summary>
            Gets or sets the name of the Site. This property is required.
            </summary>
            <value>
            A <see cref="T:System.String"/> that represents the name of the Site.
            </value>
        </member>
        <member name="P:Rock.Model.Site.Description">
            <summary>
            Gets or sets a user defined description/summary  of the Site.
            </summary>
            <value>
            A <see cref="T:System.String"/> that contains the description of the Site. If no description is provided
             this value will be an null string.
            </value>
        </member>
        <member name="P:Rock.Model.Site.Theme">
            <summary>
            Gets or sets the name of the Theme that is used on the Site.
            </summary>
            <value>
            A <see cref="T:System.String"/> that contains the name of the theme that is being used on the Site.
            </value>
        </member>
        <member name="P:Rock.Model.Site.DefaultPageId">
            <summary>
            Gets or sets the Id of the Site's default <see cref="T:Rock.Model.Page"/>. 
            </summary>
            <remarks>
            This is the <see cref="T:Rock.Model.Page"/> that is loaded when the user browses to the root of one of the Site's <see cref="T:Rock.Model.SiteDomain"/>
            (i.e. http://www.mychurchdomain.org/) without providing a page or route. 
            </remarks>
            <value>
            An <see cref="T:System.Int32"/> containing the Id of the Site's default <see cref="T:Rock.Model.Page"/>. If the site doesn't have a default <see cref="T:Rock.Model.Page"/>
            this value will be null.
            </value>
        </member>
        <member name="P:Rock.Model.Site.DefaultPageRouteId">
            <summary>
            Gets or sets the default page route unique identifier.
            If this has a value (and the PageRoute can be found) use this instead of the DefaultPageId
            </summary>
            <value>
            The default page route unique identifier.
            </value>
        </member>
        <member name="P:Rock.Model.Site.LoginPageId">
            <summary>
            Gets or sets the Id of the Site's login <see cref="T:Rock.Model.Page"/>
            </summary>
            <remarks>
            This is the <see cref="T:Rock.Model.Page"/> that is loaded when the user is not logged in and they browse to a page or block that requires authentication.
            </remarks>
            <value>
            An <see cref="T:System.Int32"/> containing the Id of the Site's login <see cref="T:Rock.Model.Page"/>. If the site doesn't have a login <see cref="T:Rock.Model.Page"/>
            this value will be null.
            </value>
        </member>
        <member name="P:Rock.Model.Site.LoginPageRouteId">
            <summary>
            Gets or sets the login page route unique identifier.
            If this has a value (and the PageRoute can be found) use this instead of the LoginPageId
            </summary>
            <value>
            The login page route unique identifier.
            </value>
        </member>
        <member name="P:Rock.Model.Site.RegistrationPageId">
            <summary>
            Gets or sets the Id of the Site's registration <see cref="T:Rock.Model.Page"/>
            </summary>
            <remarks>
            This is the <see cref="T:Rock.Model.Page"/> that is loaded when the user requests to register for a <see cref="T:Rock.Model.Group"/>.
            </remarks>
            <value>
            An <see cref="T:System.Int32"/> containing the Id of the Site's registration <see cref="T:Rock.Model.Page"/>. If the site doesn't have a registration <see cref="T:Rock.Model.Page"/>
            this value will be null.
            </value>
        </member>
        <member name="P:Rock.Model.Site.RegistrationPageRouteId">
            <summary>
            Gets or sets the registration page route unique identifier.
            If this has a value (and the PageRoute can be found) use this instead of the RegistrationPageId
            </summary>
            <value>
            The registration page route unique identifier.
            </value>
        </member>
        <member name="P:Rock.Model.Site.PageNotFoundPageId">
            <summary>
            Gets or sets the Id of the 404 <see cref="T:Rock.Model.Page"/>
            </summary>
            <remarks>
            This is the <see cref="T:Rock.Model.Page"/> that is loaded when a page is not found.
            </remarks>
            <value>
            An <see cref="T:System.Int32"/> containing the Id of the Site's 404 <see cref="T:Rock.Model.Page"/>. 
            </value>
        </member>
        <member name="P:Rock.Model.Site.PageNotFoundPageRouteId">
            <summary>
            Gets or sets the 404 page route unique identifier.
            </summary>
            <value>
            The 404 page route unique identifier.
            </value>
        </member>
        <member name="P:Rock.Model.Site.ErrorPage">
            <summary>
            Gets or sets the path to the error page.
            </summary>
            <value>
            A <see cref="T:System.String"/> containing the path to the error page.
            </value>
        </member>
        <member name="P:Rock.Model.Site.GoogleAnalyticsCode">
            <summary>
            Gets or sets the google analytics code.
            </summary>
            <value>
            The google analytics code.
            </value>
        </member>
        <member name="P:Rock.Model.Site.FacebookAppId">
            <summary>
            Gets or sets the Site's Facebook AppId for utilizing the Facebook SDK.
            </summary>
            <remarks>
            Each site that utilizes the Facebook SDK requires a different AppId. More info is available at http://developer.facebook.com
            </remarks>
            <value>
            Facebook App Id.
            </value>
        </member>
        <member name="P:Rock.Model.Site.FacebookAppSecret">
            <summary>
            Gets or sets the site's App Secret for the Facebook API
            </summary>
            <value>
            Facebook App Secret.
            </value>
        </member>
        <member name="P:Rock.Model.Site.Layouts">
            <summary>
            Gets or sets a collection of <see cref="T:Rock.Model.Layout"/> entities that are a part of the Site.
            </summary>
            <value>
            A collection of <see cref="T:Rock.Model.Layout"/> entities that are a part of the site.
            </value>
        </member>
        <member name="P:Rock.Model.Site.SiteDomains">
            <summary>
            Gets or sets the collection of <see cref="T:Rock.Model.SiteDomain"/> entities that reference the Site.
            </summary>
            <value>
            Collection of <see cref="T:Rock.Model.SiteDomain"/> entities that reference the Site.
            </value>
        </member>
        <member name="P:Rock.Model.Site.DefaultPage">
            <summary>
            Gets or sets the default <see cref="T:Rock.Model.Page"/> page for the site.
            </summary>
            <value>
            The default <see cref="T:Rock.Model.Page"/> for the site. 
            </value>
        </member>
        <member name="P:Rock.Model.Site.DefaultPageRoute">
            <summary>
            Gets or sets the default <see cref="T:Rock.Model.PageRoute"/> page route for this site. If this value is null, the DefaultPage will be used
            </summary>
            <value>
            The default page route.
            </value>
        </member>
        <member name="P:Rock.Model.Site.LoginPage">
            <summary>
            Gets or sets the login <see cref="T:Rock.Model.Page"/> page for the site.
            </summary>
            <value>
            The login <see cref="T:Rock.Model.Page"/> for the site. 
            </value>
        </member>
        <member name="P:Rock.Model.Site.LoginPageRoute">
            <summary>
            Gets or sets the login <see cref="T:Rock.Model.PageRoute"/> page route for this site. If this value is null, the LoginPage will be used
            </summary>
            <value>
            The login page route.
            </value>
        </member>
        <member name="P:Rock.Model.Site.RegistrationPage">
            <summary>
            Gets or sets the registration <see cref="T:Rock.Model.Page"/> page for the site.
            </summary>
            <value>
            The registration <see cref="T:Rock.Model.Page"/> for the site. 
            </value>
        </member>
        <member name="P:Rock.Model.Site.RegistrationPageRoute">
            <summary>
            Gets or sets the registration <see cref="T:Rock.Model.PageRoute"/> page route for this site. If this value is null, the RegistrationPage will be used
            </summary>
            <value>
            The registration page route.
            </value>
        </member>
        <member name="P:Rock.Model.Site.PageNotFoundPage">
            <summary>
            Gets or sets the 404 <see cref="T:Rock.Model.Page"/> page for the site.
            </summary>
            <value>
            The 404 <see cref="T:Rock.Model.Page"/> for the site. 
            </value>
        </member>
        <member name="P:Rock.Model.Site.PageNotFoundPageRoute">
            <summary>
            Gets or sets the 404 <see cref="T:Rock.Model.PageRoute"/> page route for this site. 
            </summary>
            <value>
            The registration page route.
            </value>
        </member>
        <member name="T:Rock.Model.SiteConfiguration">
            <summary>
            Site Configuration class.
            </summary>
        </member>
        <member name="M:Rock.Model.SiteConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.SiteConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Rock.Model.SiteDomain">
            <summary>
            Represents a SiteDomain or URL that is associated with a <see cref="T:Rock.Model.Site"/> in Rock.  A domain (i.e. yourchurch.org) and a subdomain (sub.yourchurch.org) are considered
            two different SiteDomains in Rock.
            </summary>
            <remarks>
            A SiteDomain must have a matching Binding setup in IIS otherwise it will not resolve.
            </remarks>
        </member>
        <member name="M:Rock.Model.SiteDomain.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> containing the domain name and represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> containing the domain name  that represents this instance.
            </returns>
        </member>
        <member name="P:Rock.Model.SiteDomain.IsSystem">
            <summary>
            Gets or sets a flag indicating if this SiteDomain was created by and is part of the Rock core system/framework. This property is required.
            </summary>
            <value>
            A <see cref="T:System.Boolean"/> that is <c>true</c> if the SiteDomain is part of the core system/framework.
            </value>
        </member>
        <member name="P:Rock.Model.SiteDomain.SiteId">
            <summary>
            Gets or sets the Id of the <see cref="T:Rock.Model.Site"/> that this SiteDomain references. This property is required.
            </summary>
            <value>
            An <see cref="T:System.Int32"/> containing the Id of the <see cref="T:Rock.Model.Site"/> that this SiteDomain references.
            </value>
        </member>
        <member name="P:Rock.Model.SiteDomain.Domain">
            <summary>
            Gets or sets the the Url/Domain Name of this SiteDomain. This property is required.
            </summary>
            <remarks>
            Examples include: localhost, mysite.com (or www.mysite.com), subdomain.mysite.com.
            </remarks>
            <value>
            A <see cref="T:System.String"/> containing the Domain Name for this SiteDomain.
            </value>
        </member>
        <member name="P:Rock.Model.SiteDomain.Site">
            <summary>
            Gets or sets the <see cref="T:Rock.Model.Site"/> that is associated with this SiteDomain.
            </summary>
            <value>
            The <see cref="T:Rock.Model.Site"/> that this SiteDomain is associated with.
            </value>
        </member>
        <member name="T:Rock.Model.SiteDomainConfiguration">
            <summary>
            Site Domain Configuration class.
            </summary>
        </member>
        <member name="M:Rock.Model.SiteDomainConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.SiteDomainConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Rock.Model.UserLogin">
            <summary>
            Represents a user's Rock login and authentication credentials.
            </summary>
        </member>
        <member name="M:Rock.Model.UserLogin.IsAllowedByDefault(System.String)">
            <summary>
            Returns a boolean flag indicating if the provided action is allowed by default
            </summary>
            <param name="action">A <see cref="T:System.String"/> representing the action.</param>
            <returns>A <see cref="T:System.Boolean"/> flag indicating if the provided action is allowed by default.</returns>
        </member>
        <member name="M:Rock.Model.UserLogin.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> containing the UserName that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> containing the UserName that represents this instance.
            </returns>
        </member>
        <member name="M:Rock.Model.UserLogin.GetCurrentUserName">
            <summary>
            Returns the UserName of the user that is currently logged in.
            </summary>
            <returns>A <see cref="T:System.String"/> representing the UserName of the user that is currently logged in.</returns>
        </member>
        <member name="P:Rock.Model.UserLogin.EntityTypeId">
            <summary>
            Gets or sets the EntityTypeId of the <see cref="T:Rock.Model.EntityType"/> for the authentication service that this UserLogin user.
            </summary>
            <value>
            A <see cref="T:System.Int32"/> representing the EntityTypeId of the <see cref="T:Rock.Model.EntityType"/> that this DataView reports on.
            </value>
        </member>
        <member name="P:Rock.Model.UserLogin.UserName">
            <summary>
            Gets or sets the UserName that is associated with this UserLogin. This property is required.
            </summary>
            <value>
            A <see cref="T:System.String"/> representing the UserName that is associated with this UserLogin.
            </value>
        </member>
        <member name="P:Rock.Model.UserLogin.Password">
            <summary>
            Gets or sets the Password.  Stored as a SHA1 hash for Rock Database Auth, but possibly a different hashtype for other ServiceTypes
            </summary>
            <value>
            A <see cref="T:System.String"/> representing the password. 
            </value>
        </member>
        <member name="P:Rock.Model.UserLogin.IsConfirmed">
            <summary>
            Gets or sets a flag indicating if the UserLogin has been confirmed.
            </summary>
            <value>
            A <see cref="T:System.Boolean"/> value that is <c>true</c> if the UserLogin has been confirmed; otherwise <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Model.UserLogin.LastActivityDateTime">
            <summary>
            Gets or sets the date and time of the last activity (login, password change, etc.) performed with this UserLogin.
            </summary>
            <value>
            A <see cref="T:System.DateTime"/> representing the date and time of the last activity associated with this UserLogin.
            </value>
        </member>
        <member name="P:Rock.Model.UserLogin.LastLoginDateTime">
            <summary>
            Gets or sets the most recent date and time that a user successfully logged in using this UserLogin.
            </summary>
            <value>
            A <see cref="T:System.DateTime"/> representing the most recent date and time that a user successfully logged in with this UserLogin.
            </value>
        </member>
        <member name="P:Rock.Model.UserLogin.LastPasswordChangedDateTime">
            <summary>
            Gets or sets the date and time that the password was successfully changed.
            </summary>
            <value>
            A <see cref="T:System.DateTime"/> representing when the password was last changed.
            </value>
        </member>
        <member name="P:Rock.Model.UserLogin.IsOnLine">
            <summary>
            Gets or sets a flag indicating if the user is currently online and logged in to the system.
            </summary>
            <value>
            A <see cref="T:System.Boolean"/> value that is <c>true</c> if the user is currently online and logged in with this UserLogin; otherwise <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Model.UserLogin.IsLockedOut">
            <summary>
            Gets or sets a flag indicating if the UserLogin is currently locked out.
            </summary>
            <value>
            A <see cref="T:System.Boolean"/> that is <c>true</c> if the UserLogin is currently locked out; otherwise <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Model.UserLogin.LastLockedOutDateTime">
            <summary>
            Gets or sets date and time that the UserLogin was last locked out.
            </summary>
            <value>
            A <see cref="T:System.DateTime"/> representing the date and time that the user login was last locked out.
            </value>
        </member>
        <member name="P:Rock.Model.UserLogin.FailedPasswordAttemptCount">
            <summary>
            Gets or sets the number of failed password attempts within the failed password attempt window.
            </summary>
            <value>
            An <see cref="T:System.Int32"/> representing the failed password attempts during the attempt window.
            </value>
        </member>
        <member name="P:Rock.Model.UserLogin.FailedPasswordAttemptWindowStartDateTime">
            <summary>
            Gets or sets the failed password attempt window start date time.
            </summary>
            <value>
            The failed password attempt window start date time.
            </value>
        </member>
        <member name="P:Rock.Model.UserLogin.LastPasswordExpirationWarningDateTime">
            <summary>
            Gets or sets the last time that user was notified about their password expiring.
            </summary>
            <value>
            The last password expiration warning date time.
            </value>
        </member>
        <member name="P:Rock.Model.UserLogin.ApiKey">
            <summary>
            Gets or sets the API key associated with the UserLogin
            </summary>
            <value>
            A <see cref="T:System.String"/> representing the API key that is associated with the UserLogin
            </value>
        </member>
        <member name="P:Rock.Model.UserLogin.PersonId">
            <summary>
            Gets or sets the Id of the <see cref="T:Rock.Model.Person"/> who this UserLogin belongs to.
            </summary>
            <value>
            A <see cref="T:System.Int32"/> representing the Id of the <see cref="T:Rock.Model.Person"/> that this UserLogin belongs to.
            </value>
        </member>
        <member name="P:Rock.Model.UserLogin.Person">
            <summary>
            Gets or sets the <see cref="T:Rock.Model.Person"/> that this UserLogin is associated with.
            </summary>
            <value>
            The <see cref="T:Rock.Model.Person"/> that this UserLogin is associated with.
            </value>
        </member>
        <member name="P:Rock.Model.UserLogin.EntityType">
            <summary>
            Gets or sets the <see cref="T:Rock.Model.EntityType"/> for the authentication service that this UserLogin user.
            </summary>
            <value>
            The <see cref="T:Rock.Model.EntityType"/> that this DataView reports on.
            </value>
        </member>
        <member name="P:Rock.Model.UserLogin.IsAuthenticated">
            <summary>
            Gets a flag indicating if the User authenticated with their last interaction with Rock (versus using an impersonation link).
            </summary>
            <value>
              A <see cref="T:System.Boolean"/> value that is <c>true</c> if the user actually authenticated; otherwise <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Model.UserLogin.ConfirmationCode">
            <summary>
            Gets an encrypted confirmation code for the UserLogin.
            </summary>
            <value>
            A <see cref="T:System.String"/> representing the encrypted confirmation code.
            </value>
        </member>
        <member name="P:Rock.Model.UserLogin.ConfirmationCodeEncoded">
            <summary>
            Gets a URL encoded  and encrypted confirmation code.
            </summary>
            <value>
            A <see cref="T:System.String"/> representing a URL encoded and encrypted confirmation code.
            </value>
        </member>
        <member name="T:Rock.Model.UserLoginConfiguration">
            <summary>
            User Configuration class.
            </summary>
        </member>
        <member name="M:Rock.Model.UserLoginConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.UserLoginConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Rock.Model.AuthenticationServiceType">
            <summary>
            Type of authentication service used to authenticate user
            </summary>
        </member>
        <member name="F:Rock.Model.AuthenticationServiceType.Internal">
            <summary>
            An internal authentication service (i.e. Database, Active Directory)
            </summary>
        </member>
        <member name="F:Rock.Model.AuthenticationServiceType.External">
            <summary>
            An external authentication service (i.e. Facebook, Twitter, Google, etc.)
            </summary>
        </member>
        <member name="T:Rock.Communication.Email">
            <summary>
            Sends an email template using the Email communication channel
            </summary>
        </member>
        <member name="M:Rock.Communication.Email.Send(System.Guid,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.Dictionary{System.String,System.Object}},System.String,System.String)">
            <summary>
            Sends the specified email template unique identifier.
            </summary>
            <param name="emailTemplateGuid">The email template unique identifier.</param>
            <param name="recipients">The recipients.</param>
            <param name="appRoot">The application root.</param>
            <param name="themeRoot">The theme root.</param>
        </member>
        <member name="T:Rock.Model.Attribute">
            <summary>
            Represents an attribute or configuration setting in Rock
            </summary>
        </member>
        <member name="F:Rock.Model.Attribute.SYSTEM_SETTING_QUALIFIER">
            <summary>
            The Qualifier on null entity types to distinguish a 'System Setting' from a Global Attribute
            </summary>
        </member>
        <member name="M:Rock.Model.Attribute.PreSaveChanges(Rock.Data.DbContext,System.Data.Entity.EntityState)">
            <summary>
            Pres the save.
            </summary>
            <param name="dbContext">The database context.</param>
            <param name="state">The state.</param>
        </member>
        <member name="M:Rock.Model.Attribute.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Rock.Model.Attribute.IsSystem">
            <summary>
            Gets or sets a flag indicating if this Attribute is part of the Rock core system/framework. This property is required.
            </summary>
            <value>
            A <see cref="T:System.Boolean"/> value that is <c>true</c> if this Attribute is part of the Rock core system/framework; otherwise <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Model.Attribute.FieldTypeId">
            <summary>
            Gets or sets the FieldTypeId of the <see cref="T:Rock.Model.FieldType"/> that is used to select/set the <see cref="T:Rock.Model.AttributeValue"/> for this Attribute setting.
            The FieldType can also be used to enforce formatting of the attribute setting. This property is required.
            </summary>
            <value>
            A <see cref="T:System.Int32"/> representing the FieldTyepId of the <see cref="T:Rock.Model.FieldType"/> that is used to select/set the <see cref="T:Rock.Model.AttributeValue"/>
            </value>
        </member>
        <member name="P:Rock.Model.Attribute.EntityTypeId">
            <summary>
            Gets or sets the EntityTypeId of the <see cref="T:Rock.Model.EntityType"/> that this Attribute is used to configure. This property will not be populated if the Attribute is a Global (system) Attribute.
            </summary>
            <value>
            A <see cref="T:System.Int32"/> representing the EntityTypeId of the <see cref="T:Rock.Model.EntityType"/> that this Attribute is used to configure. This property will be null if the Attribute is a Global (system)
            Attribute.
            </value>
        </member>
        <member name="P:Rock.Model.Attribute.EntityTypeQualifierColumn">
            <summary>
            Gets or sets the entity type qualifier column that contains the value (see <see cref="P:Rock.Model.Attribute.EntityTypeQualifierValue"/>) that is used narrow the scope of the Attribute to a subset or specific instance of an EntityType.
            </summary>
            <value>
            A <see cref="T:System.String"/> representing the name of the Qualifier Column/Property that contains the <see cref="P:Rock.Model.Attribute.EntityTypeQualifierValue"/> that is used to narrow the scope of the Attribute.
            </value>
        </member>
        <member name="P:Rock.Model.Attribute.EntityTypeQualifierValue">
            <summary>
            Gets or sets the entity type qualifier value that is used to narrow the scope of the Attribute to a subset or specific instance of an EntityType.
            </summary>
            <value>
            A <see cref="T:System.String"/> that represents the value that is used to narrow the scope of the Attribute.
            </value>
        </member>
        <member name="P:Rock.Model.Attribute.Key">
            <summary>
            Gets sets the Key value  that is used to reference and call the Attribute. This property is required.
            </summary>
            <value>
            A <see cref="T:System.String"/> that represents the Key value that is used to reference and call the Attribute.
            </value>
        </member>
        <member name="P:Rock.Model.Attribute.Name">
            <summary>
            Gets or sets the Name of the Attribute. This property is required.
            </summary>
            <value>
            A <see cref="T:System.String"/> that represents the name of the Attribute.
            </value>
        </member>
        <member name="P:Rock.Model.Attribute.Description">
            <summary>
            Gets or sets the description of the Attribute.
            </summary>
            <value>
            A <see cref="T:System.String"/> that represents the description of the Attribute.
            </value>
        </member>
        <member name="P:Rock.Model.Attribute.Order">
            <summary>
            Gets or sets the display order of the attribute.
            </summary>
            <value>
            A <see cref="T:System.Int32"/> representing the display order of the Attribute.
            </value>
        </member>
        <member name="P:Rock.Model.Attribute.IsGridColumn">
            <summary>
            Gets or sets a flag indicating if this Attribute is a Grid Column?
            </summary>
            <value>
            A <see cref="T:System.Boolean"/> value that is <c>true</c> if this Attribute is a grid column; otherwise <c>false</c>
            </value>
        </member>
        <member name="P:Rock.Model.Attribute.DefaultValue">
            <summary>
            Gets or sets the Attribute's default value.
            </summary>
            <value>
            A <see cref="T:System.String"/> representing the Attribute's default value.
            </value>
        </member>
        <member name="P:Rock.Model.Attribute.IsMultiValue">
            <summary>
            Gets or sets a flag indicating if the Attribute supports multiple values.
            </summary>
            <value>
            A <see cref="T:System.Boolean"/> that is <c>true</c> if the attribute supports multiple values; otherwise <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Model.Attribute.IsRequired">
            <summary>
            Gets or sets a flag indicating if a value is required.
            </summary>
            <value>
            A <see cref="T:System.Boolean"/> value that is <c>true</c> if a value is required, otherwise <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Model.Attribute.EntityType">
            <summary>
            Gets or sets the <see cref="T:Rock.Model.EntityType"/> that this Attribute is used to configure. This property will not be populated if the Attribute is a Global (system) Attribute.
            </summary>
            <value>
            The <see cref="T:Rock.Model.EntityType"/> that this Attribute is used to configure. This property will be null if the Attribute is a Global (system) Attribute.
            </value>
        </member>
        <member name="P:Rock.Model.Attribute.AttributeQualifiers">
            <summary>
            Gets or sets a collection containing the <see cref="T:Rock.Model.AttributeQualifier">AttributeQualifiers</see> for this Attribute.
            </summary>
            <value>
            Collection of <see cref="T:Rock.Model.AttributeQualifier">AttributeQualifiers</see> for this Attribute.
            </value>
        </member>
        <member name="P:Rock.Model.Attribute.FieldType">
            <summary>
            Gets or sets the <see cref="T:Rock.Model.FieldType"/> that is used to get/capture the value of the Attribute
            </summary>
            <value>
            The <see cref="T:Rock.Model.FieldType"/> that is used to get/capture the value of the Attribute.
            </value>
        </member>
        <member name="P:Rock.Model.Attribute.Categories">
            <summary>
            Gets or sets the collection of <see cref="T:Rock.Model.Category">Categories</see> that this Attribute is associated with.
            </summary>
            <value>
            A collection of <see cref="T:Rock.Model.Category">Categories</see> that this Attribute is associated with.
            </value>
        </member>
        <member name="T:Rock.Model.AttributeConfiguration">
            <summary>
            Attribute Configuration class.
            </summary>
        </member>
        <member name="M:Rock.Model.AttributeConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.AttributeConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Rock.Model.AttributeQualifier">
            <summary>
            Represents a attribute qualifier that limits or qualifies the values that can be accepted as <see cref="T:Rock.Model.AttributeValue">AttributeValues</see>.
            </summary>
            <remarks>
            Examples this can be a <see cref="T:Rock.Model.DefinedValue"/>, SQL query, or a list of options.
            </remarks>
        </member>
        <member name="M:Rock.Model.AttributeQualifier.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Rock.Model.AttributeQualifier.IsSystem">
            <summary>
            Gets or sets a flag indicating if the AttributeQualifer is part of the Rock core system/framework.
            </summary>
            <value>
            A <see cref="T:System.Boolean"/> value that is <c>true</c> if the AttributeQualifer is part of the Rock core system/framework; otherwise <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Model.AttributeQualifier.AttributeId">
            <summary>
            Gets or sets the AttributeId of the <see cref="T:Rock.Model.Attribute"/> that this AttributeQualifier limits the values of.
            </summary>
            <value>
            A <see cref="T:System.Int32"/> that represents the AttributeId of the <see cref="T:Rock.Model.Attribute"/>.
            </value>
        </member>
        <member name="P:Rock.Model.AttributeQualifier.Key">
            <summary>
            Gets or sets the Key value that represents the type of qualifier that is being used.
            </summary>
            <value>
            A <see cref="T:System.String"/> that represents the type of qualifier that is being used.
            </value>
        </member>
        <member name="P:Rock.Model.AttributeQualifier.Value">
            <summary>
            Gets or sets the value of the AttributeQualifier
            </summary>
            <value>
            A <see cref="T:System.String"/> representing the value of the AttributeQualifier.
            </value>
        </member>
        <member name="P:Rock.Model.AttributeQualifier.Attribute">
            <summary>
            Gets or sets the <see cref="T:Rock.Model.Attribute"/> that uses this AttributeQualifier.
            </summary>
            <value>
            The <see cref="T:Rock.Model.Attribute"/> that uses this AttributeQualifier.
            </value>
        </member>
        <member name="T:Rock.Model.AttributeQualifierConfiguration">
            <summary>
            Attribute Qualifier Configuration class.
            </summary>
        </member>
        <member name="M:Rock.Model.AttributeQualifierConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.AttributeQualifierConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Rock.Model.AttributeValue">
            <summary>
            Represents a value of an <see cref="T:Rock.Model.Attribute"/>. 
            </summary>
        </member>
        <member name="M:Rock.Model.AttributeValue.PreSaveChanges(Rock.Data.DbContext,System.Data.Entity.EntityState)">
            <summary>
            Pres the save.
            </summary>
            <param name="dbContext">The database context.</param>
            <param name="state">The state.</param>
        </member>
        <member name="M:Rock.Model.AttributeValue.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Rock.Model.AttributeValue.IsSystem">
            <summary>
            Gets or sets a flag indicating if this AttributeValue is part of the Rock core system/framework.
            </summary>
            <value>
            A <see cref="T:System.Boolean"/> value that is <c>true</c> if is part of the Rock core system/framework.
            </value>
        </member>
        <member name="P:Rock.Model.AttributeValue.AttributeId">
            <summary>
            Gets or sets the AttributeId of the <see cref="T:Rock.Model.Attribute"/> that this AttributeValue provides a value for.
            </summary>
            <value>
            A <see cref="T:System.Int32"/> representing the AttributeId of the <see cref="T:Rock.Model.Attribute"/> that this AttributeValue provides a value for.
            </value>
        </member>
        <member name="P:Rock.Model.AttributeValue.EntityId">
            <summary>
            Gets or sets the Id of the entity instance that uses this AttributeValue. An <see cref="T:Rock.Model.Attribute"/> is a configuration setting, so each 
            instance of the Entity that uses the same Attribute can have a different value.  For instance a <see cref="T:Rock.Model.BlockType"/> has a declared attribute, and that attribute can be configured 
            with a different value on each <see cref="T:Rock.Model.Block"/> that implements the <see cref="T:Rock.Model.BlockType"/>. This value will either be 0 or null for global attributes or attributes that have a 
            constant across all instances of an EntityType.
            </summary>
            <value>
            A <see cref="T:System.Int32"/> that identifies the Id of the entity instance that uses this AttributeValue.
            </value>
        </member>
        <member name="P:Rock.Model.AttributeValue.Order">
            <summary>
            Gets or sets the Order of the AttributeValue. 
            </summary>
            <value>
            A <see cref="T:System.Int32"/> representing the order of AttributeValue.
            </value>
        </member>
        <member name="P:Rock.Model.AttributeValue.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>
            A <see cref="T:System.String"/> representing the value.
            </value>
        </member>
        <member name="P:Rock.Model.AttributeValue.FieldType">
            <summary>
            Gets the <see cref="T:Rock.Model.FieldType"/> that represents the type of value that is being represented by the AttributeValue, and provides a UI for the user to set the value.
            </summary>
            <value>
            The <see cref="T:Rock.Model.FieldType"/> that is represented by this Attribute Value.
            </value>
        </member>
        <member name="P:Rock.Model.AttributeValue.Attribute">
            <summary>
            Gets or sets the <see cref="T:Rock.Model.Attribute"/> that uses this AttributeValue.
            </summary>
            <value>
            The <see cref="T:Rock.Model.Attribute"/> that uses this value.
            </value>
        </member>
        <member name="T:Rock.Model.AttributeValueConfiguration">
            <summary>
            Attribute Value Configuration class.
            </summary>
        </member>
        <member name="M:Rock.Model.AttributeValueConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.AttributeValueConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Rock.Model.DefinedType">
            <summary>
            A DefinedType is a dictionary of consistent values for a particular thing in Rock. The individual items are refereed to as <see cref="T:Rock.Model.DefinedValue">DefinedValues</see> in Rock.  
            Several classic examples of DefinedTypes can be Shirt Sizes, a Country List, etc. Defined Values can be categorized, ordered and can be furthered specified by a <see cref="T:Rock.Model.FieldType"/>
            </summary>
            <remarks>
            Note: in some systems these are referred to as lookup values. The benefit of storing these values centrally is that it prevents us having to maintain <see cref="T:Rock.Model.EntityType">EntityTypes</see>
            for each defined value/lookup that you want to create.  In the case of attributes these can be created as the need arises without having to change the core base or add a plug-in just to 
            provide additional lookup data.
            </remarks>
        </member>
        <member name="M:Rock.Model.DefinedType.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this DefinedType.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this DefinedType.
            </returns>
        </member>
        <member name="P:Rock.Model.DefinedType.IsSystem">
            <summary>
            Gets or sets a flag indicating if this DefinedType is part of the Rock core system/framework. This property is required.
            </summary>
            <value>
            A <see cref="T:System.Boolean"/> that is <c>true</c> if this DefinedType is part of the Rock core system/framework; otherwise this value is <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Model.DefinedType.FieldTypeId">
            <summary>
            Gets or sets the FieldTypeId of the <see cref="T:Rock.Model.FieldType"/> that is used to set/select, and at times display the <see cref="T:Rock.Model.DefinedValue">DefinedValues</see> that are associated with
            this DefinedType. 
            </summary>
            <value>
            A <see cref="T:System.Int32"/> representing the FieldTypeId of the <see cref="T:Rock.Model.FieldType"/> that is used for DefinedType.
            </value>
        </member>
        <member name="P:Rock.Model.DefinedType.Order">
            <summary>
            Gets or sets the display order of this DefinedType.  The lower the number the higher the display priority.  This property is required.
            </summary>
            <value>
            A <see cref="T:System.Int32"/> that represents the display order of this DefinedType.
            </value>
        </member>
        <member name="P:Rock.Model.DefinedType.Category">
            <summary>
            Gets or sets the name of the category that this DefinedType belongs to.
            </summary>
            <value>
            A <see cref="T:System.String"/> representing the name of the Category.
            </value>
        </member>
        <member name="P:Rock.Model.DefinedType.Name">
            <summary>
            Gets or sets the Name of the DefinedType.
            </summary>
            <value>
            A <see cref="T:System.String"/> representing the name of the DefinedType.
            </value>
        </member>
        <member name="P:Rock.Model.DefinedType.Description">
            <summary>
            Gets or sets a user defined description of the DefinedType.
            </summary>
            <value>
            A <see cref="T:System.String"/> representing the description of the DefinedType.
            </value>
        </member>
        <member name="P:Rock.Model.DefinedType.HelpText">
            <summary>
            Gets or sets the help text for the defined type.
            </summary>
            <value>
            A <see cref="T:System.String"/> representing the help text.
            </value>
        </member>
        <member name="P:Rock.Model.DefinedType.DefinedValues">
            <summary>
            Gets or sets a collection containing the <see cref="T:Rock.Model.DefinedValue">DefinedValues</see> that belong to this DefinedType.
            </summary>
            <value>
            A collection of the <see cref="T:Rock.Model.DefinedValue">DefinedValues</see> that belong to this DefinedType.
            </value>
        </member>
        <member name="P:Rock.Model.DefinedType.FieldType">
            <summary>
            Gets or sets the <see cref="T:Rock.Model.FieldType"/> that is used to set/select, and at times display the <see cref="T:Rock.Model.DefinedValue">DefinedValues</see> that are associated with
            this DefinedType. 
            </summary>
            <value>
            The <see cref="T:Rock.Model.FieldType"/>.
            </value>
        </member>
        <member name="T:Rock.Model.DefinedTypeConfiguration">
            <summary>
            Defined Type Configuration class.
            </summary>
        </member>
        <member name="M:Rock.Model.DefinedTypeConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.DefinedTypeConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Rock.Model.DefinedValue">
            <summary>
            Represents a DefinedValue instance in Rock. These values are sortable and can be secured (based on their <see cref="P:Rock.Model.DefinedValue.ParentAuthority"/>). 
            An example of a DefinedValue for a "State List" <see cref="T:Rock.Model.DefinedType"/> is Arizona.
            </summary>
        </member>
        <member name="M:Rock.Model.DefinedValue.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this DefinedValue.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this DefinedValue.
            </returns>
        </member>
        <member name="P:Rock.Model.DefinedValue.IsSystem">
            <summary>
            Gets or sets a flag indicating if this DefinedValue is part of the Rock core system/framework. this property is required.
            </summary>
            <value>
            A <see cref="T:System.Boolean"/> that is <c>true</c> if it is part of the Rock core system/framework; otherwise <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Model.DefinedValue.DefinedTypeId">
            <summary>
            Gets or sets the DefinedTypeId of the <see cref="T:Rock.Model.DefinedType"/> that this DefinedValue belongs to. This property is required.
            </summary>
            <value>
            A <see cref="T:System.Int32"/> representing the DefinedTypeId of the <see cref="T:Rock.Model.DefinedType"/> that this DefinedValue belongs to.
            </value>
        </member>
        <member name="P:Rock.Model.DefinedValue.Order">
            <summary>
            Gets or sets the sort and display order of the DefinedValue.  This is an ascending order, so the lower the value the higher the sort priority.
            </summary>
            <value>
            A <see cref="T:System.Int32"/> representing the sort order of the DefinedValue.
            </value>
        </member>
        <member name="P:Rock.Model.DefinedValue.Name">
            <summary>
            Gets or sets the Name or the value of the DefinedValue. This property is required.
            </summary>
            <value>
            A <see cref="T:System.String"/> that represents the Name or the value of the DefinedValue.
            </value>
        </member>
        <member name="P:Rock.Model.DefinedValue.Description">
            <summary>
            Gets or sets the Description of the DefinedValue.
            </summary>
            <value>
            A <see cref="T:System.String"/> representing the description of the DefinedValue.
            </value>
        </member>
        <member name="P:Rock.Model.DefinedValue.DefinedType">
            <summary>
            Gets or sets the Defined Type that this DefinedValue belongs to.
            </summary>
            <value>
            The <see cref="T:Rock.Model.DefinedType"/> that this DefinedValue belongs to.
            </value>
        </member>
        <member name="P:Rock.Model.DefinedValue.ParentAuthority">
            <summary>
            Gets the parent security authority for this DefinedValue.
            </summary>
            <value>
            An entity that implements the <see cref="T:Rock.Security.ISecured"/> interface that this DefinedValue inherits security authority from.
            </value>
        </member>
        <member name="T:Rock.Model.DefinedValueConfiguration">
            <summary>
            Defined Value Configuration class.
            </summary>
        </member>
        <member name="M:Rock.Model.DefinedValueConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.DefinedValueConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Rock.Model.FieldType">
            <summary>
            Field Type POCO Entity.
            </summary>
        </member>
        <member name="M:Rock.Model.FieldType.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this FieldType.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this FieldType.
            </returns>
        </member>
        <member name="P:Rock.Model.FieldType.IsSystem">
            <summary>
            Gets or sets a flag indicating if this FieldType is part of of the Rock core system/framework. This property is required.
            </summary>
            <value>
            A <see cref="T:System.Boolean"/> that is <c>true</c> if this FieldType is part of the Rock core system/framework; otherwise <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Model.FieldType.Name">
            <summary>
            Gets or sets the Name of the FieldType. This property is required.
            </summary>
            <value>
            A <see cref="T:System.String"/> that represents the Name of the FieldType.
            </value>
        </member>
        <member name="P:Rock.Model.FieldType.Description">
            <summary>
            Gets or sets a user defined description of the FieldType.
            </summary>
            <value>
            A <see cref="T:System.String"/> representing the description of the FieldType.
            </value>
        </member>
        <member name="P:Rock.Model.FieldType.Assembly">
            <summary>
            Gets or sets the Assembly name of the .dll file that contains the FieldType class. This property is required.
            </summary>
            <value>
            A <see cref="T:System.String"/> that contains the Assembly name of the .dll file that contains the FieldType class.
            </value>
        </member>
        <member name="P:Rock.Model.FieldType.Class">
            <summary>
            Gets or sets the fully qualified name, with Namespace, of the FieldType class. This property is required.
            </summary>
            <value>
            A <see cref="T:System.String"/> that contains the fully qualified name of the FieldType class.
            </value>
        </member>
        <member name="T:Rock.Model.FieldTypeConfiguration">
            <summary>
            Field Type Configuration class.
            </summary>
        </member>
        <member name="M:Rock.Model.FieldTypeConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.FieldTypeConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Rock.Model.ServiceLog">
            <summary>
            Represents a log entry from when Rock makes a call to an external service.
            </summary>
        </member>
        <member name="M:Rock.Model.ServiceLog.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Rock.Model.ServiceLog.LogDateTime">
            <summary>
            Gets or sets the date and time that the log entry was created 
            </summary>
            <value>
            A <see cref="T:System.DateTime"/> representing when the log entry was created.
            </value>
        </member>
        <member name="P:Rock.Model.ServiceLog.Input">
            <summary>
            Gets or sets the data that was sent to the service.
            </summary>
            <value>
            A <see cref="T:System.String"/> containing the data that was sent to the service.
            </value>
        </member>
        <member name="P:Rock.Model.ServiceLog.Type">
            <summary>
            Gets or sets the type of service that was run
            </summary>
            <value>
            A <see cref="T:System.String"/> representing the type of service that was run.
            </value>
        </member>
        <member name="P:Rock.Model.ServiceLog.Name">
            <summary>
            Gets or sets the component name for the service.
            </summary>
            <value>
            A <see cref="T:System.String"/> representing the component name for the service.
            </value>
        </member>
        <member name="P:Rock.Model.ServiceLog.Result">
            <summary>
            Gets or sets the result that was returned from the service.
            </summary>
            <value>
            A <see cref="T:System.String"/> representing the result that was returned from the service.
            </value>
        </member>
        <member name="P:Rock.Model.ServiceLog.Success">
            <summary>
            Gets or sets a flag indicating if the service returned a successful result. This property is required.
            </summary>
            <value>
            A <see cref="T:System.Boolean"/> that is <c>true</c> if the service returned a successful result; otherwise <c>false</c>.
            </value>
        </member>
        <member name="T:Rock.Model.ServiceLogConfiguration">
            <summary>
            Service Log Configuration class.
            </summary>
        </member>
        <member name="M:Rock.Model.ServiceLogConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.ServiceLogConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Rock.Model.Location">
            <summary>
            Location Entity class. A location in Rock is any physical place. It could be a street address, building, floor, room, kiosk location, etc. A location 
            is also stackable/hierarchical. For example for a church's campus <seealso cref="T:Rock.Model.Campus"/> can have multiple buildings or facilities, 
            each building can be multi story and a story can have multiple rooms.
            </summary>
        </member>
        <member name="M:Rock.Model.Location.SetLocationPointFromLatLong(System.Double,System.Double)">
            <summary>
            Sets the location's GeoPoint from a latitude and longitude.
            </summary>
            <param name="latitude">A <see cref="T:System.Double"/> representing the latitude for this location.</param>
            <param name="longitude">A <see cref="T:System.Double"/>representing the longitude for this location.</param>
        </member>
        <member name="M:Rock.Model.Location.GoogleMapLink(System.String)">
            <summary>
            Returns a Google Maps link to use for this Location
            </summary>
            <param name="title">A <see cref="T:System.String"/> containing the parameters needed by Google Maps to display this location.</param>
            <returns>A <see cref="T:System.String"/> containing the link to Google Maps for this location.</returns>
        </member>
        <member name="M:Rock.Model.Location.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> containing the Location's address that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> containing the Location's address that represents this instance.
            </returns>
        </member>
        <member name="M:Rock.Model.Location.GetFullStreetAddress">
            <summary>
            Gets the full street address.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.Location.EncodeGooglePolygon">
            <summary>
            Encodes the polygon for Google maps
            </summary>
            <returns></returns>
        </member>
        <member name="P:Rock.Model.Location.ParentLocationId">
            <summary>
            Gets or sets the if the location's parent Location. 
            </summary>
            <value>
            An <see cref="T:System.Int32"/> representing the Id of this Location's parent Location. If this Location does not have a parent Location, this value will be null.
            </value>
        </member>
        <member name="P:Rock.Model.Location.Name">
            <summary>
            Gets or sets the Location's Name.
            </summary>
            <value>
            A <see cref="T:System.String"/> representing the Name of the Location.
            </value>
        </member>
        <member name="P:Rock.Model.Location.IsActive">
            <summary>
            Gets or sets a value indicating whether this instance is active.
            </summary>
            <value>
            A <see cref="T:System.Boolean"/> that is  <c>true</c> if this instance is active; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Model.Location.LocationTypeValueId">
            <summary>
            Gets or sets the Id of the LocationType <see cref="T:Rock.Model.DefinedValue"/> that is used to identify the type of <see cref="T:Rock.Model.Location"/>
            that this is.
            </summary>
            <value>
            An <see cref="T:System.Int32"/> referencing the Id of the LocationType <see cref="T:Rock.Model.DefinedValue"/> that identifies the type of group location that this is.
            If a LocationType <see cref="T:Rock.Model.DefinedValue"/> is not associated with this GroupLocation this value will be null.
            </value>
        </member>
        <member name="P:Rock.Model.Location.GeoPoint">
            <summary>
            Gets or sets the GeoPoint (geolocation) for the location
            </summary>
            <value>
            A <see cref="T:System.Data.Entity.Spatial.DbGeography"/> object that represents the geolocation of the Location.
            </value>
        </member>
        <member name="P:Rock.Model.Location.GeoFence">
            <summary>
            Gets or sets the geographic parameter around the a Location's Geopoint. This can also be used to define a large area
            like a neighborhood.  
            </summary>
            <remarks>
            Examples of this could be  a radius around a church campus to allow mobile check in if a person is located within a certain radius of 
            the campus, or it could be used to define the parameter of an area (i.e. neighborhood, park, etc.)
            </remarks>
            <value>
            A <see cref="T:System.Data.Entity.Spatial.DbGeography"/> object representing the parameter of a location.
            </value>
        </member>
        <member name="P:Rock.Model.Location.Street1">
            <summary>
            Gets or sets the first line of the Location's Street/Mailing Address.
            </summary>
            <value>
            A <see cref="T:System.String"/> representing the First line of the Location's Street/Mailing Address. If the Location does not have
            a Street/Mailing address, this value is null.
            </value>
        </member>
        <member name="P:Rock.Model.Location.Street2">
            <summary>
            Gets or sets the second line of the Location's Street/Mailing Address. 
            </summary>
            <value>
            A <see cref="T:System.String"/> representing the second line of the Location's Street/Mailing Address. if this Location does not have 
            Street/Mailing Address or if the address does not have a 2nd line, this value is null.
            </value>
        </member>
        <member name="P:Rock.Model.Location.City">
            <summary>
            Gets or sets the city component of the Location's Street/Mailing Address.
            </summary>
            <value>
            A <see cref="T:System.String"/> representing the city component of the Location's Street/Mailing Address. If this Location does not have
            a Street/Mailing Address this value will be null.
            </value>
        </member>
        <member name="P:Rock.Model.Location.State">
            <summary>
            Gets or sets the State component of the Location's Street/Mailing Address.
            </summary>
            <value>
            A <see cref="T:System.String"/> representing the state component of the Location's Street/Mailing Address. If this Location does not have 
            a Street/Mailing Address, this value will be null.
            </value>
        </member>
        <member name="P:Rock.Model.Location.Country">
            <summary>
            Gets or sets the country component of the Location's Street/Mailing Address. 
            </summary>
            <value>
            A <see cref="T:System.String"/> representing the country component of the Location's Street/Mailing Address. If this Location does not have a 
            Street/Mailing Address, this value will be null.
            </value>
        </member>
        <member name="P:Rock.Model.Location.Zip">
            <summary>
            Gets or sets the Zip/Postal Code component of the Location's Street/Mailing Address.
            </summary>
            <value>
            A <see cref="T:System.String"/> representing the Zip/Postal Code component of the Location's Street/Mailing Address. If this Location does not have 
            Street/Mailing Address, this value will be null.
            </value>
        </member>
        <member name="P:Rock.Model.Location.AssessorParcelId">
            <summary>
            Gets or sets the Local Assessor's parcel identification value that is linked to the location.
            </summary>
            <value>
            A <see cref="T:System.String"/> represents the local assessor's parcel Id for the location (if applicable). If this is not applicable to this location,
            the value will be null.
            </value>
        </member>
        <member name="P:Rock.Model.Location.StandardizeAttemptedDateTime">
            <summary>
            Gets or sets the date and time of the last address standardization attempt.
            </summary>
            <value>
            A <see cref="T:System.DateTime"/> representing the when the most recent address standardization attempt was made. If this is not applicable to this location,
            or if the address has not been standardized, this value will be null.
            </value>
        </member>
        <member name="P:Rock.Model.Location.StandardizeAttemptedServiceType">
            <summary>
            Gets or set the component name of the service that attempted the most recent address standardization attempt.
            </summary>
            <value>
            A <see cref="T:System.String"/> representing the component name of the service that last attempted to standardize this Location's address.
            If this is not applicable to the location or a standardization attempt has not been made, this value will be null.
            </value>
        </member>
        <member name="P:Rock.Model.Location.StandardizeAttemptedResult">
            <summary>
            Gets or sets the result code returned from the address standardization service.
            </summary>
            <value>
            A <see cref="T:System.String"/> representing the result code that was returned by the address standardization service. If an address standardization has not been attempted for this location, 
            this value will be null.
            </value>
        </member>
        <member name="P:Rock.Model.Location.StandardizedDateTime">
            <summary>
            Gets or sets the date and time that the Location's address was successfully standardized.
            </summary>
            <value>
            A <see cref="T:System.DateTime"/> representing the date and time that the Location's address was successfully standardized. If address standardization has not been attempted for this location,
            This value will be null.
            </value>
        </member>
        <member name="P:Rock.Model.Location.GeocodeAttemptedDateTime">
            <summary>
            Gets and sets the date and time that an attempt was made to geocode the Location's address.
            </summary>
            <value>
            A <see cref="T:System.DateTime"/> representing the date and time that an attempt was made to geocode the Location's address. If a geocoding has not been attempted for this location, 
            the value will be null.
            </value>
        </member>
        <member name="P:Rock.Model.Location.GeocodeAttemptedServiceType">
            <summary>
            Gets or sets the component name of the Geocoding service that attempted the most recent address Geocode attempt.
            </summary>
            <value>
            A <see cref="T:System.String"/> representing the component name of the Geocoding service that attempted the most recent address Geocode attempt. If geocoding has not been attempted 
            for this location, the value will be null.
            </value>
        </member>
        <member name="P:Rock.Model.Location.GeocodeAttemptedResult">
            <summary>
            Gets or sets the result code returned by geocoding service during the last geocode attempt.
            </summary>
            <value>
            A <see cref="T:System.String"/> representing the result code returned by the geocoding service from the most recent geocoding attempt. If geocoding has not been attempted for this location,
            the value will be null.
            </value>
        </member>
        <member name="P:Rock.Model.Location.GeocodedDateTime">
            <summary>
            Gets or sets date and time that this Location's  address has been successfully geocoded. 
            </summary>
            <value>
            A <see cref="T:System.DateTime"/> representing the date and time that the address of this location was successfully geocoded. If geocoding has not been attepted for this location or 
            the location had not been successfully geocoded this value will be null.
            </value>
        </member>
        <member name="P:Rock.Model.Location.IsGeoPointLocked">
            <summary>
            Gets or sets flag indicating if geopoint is locked (shouldn't be geocoded again)
            </summary>
            <value>
            is geo point locked.
            </value>
        </member>
        <member name="P:Rock.Model.Location.PrinterDeviceId">
            <summary>
            Gets or sets the <see cref="T:Rock.Model.Device"/> Id of the printer (if any) associated with the location.
            </summary>
            <value>
            The <see cref="T:Rock.Model.Device"/> Id of the printer that is associated with this Location. If no printer is associated with this location, this value will be null.
            </value>
        </member>
        <member name="P:Rock.Model.Location.ParentLocation">
            <summary>
            Gets or set this Location's parent Location.
            </summary>
            <value>
            A Location object representing the parent location of the current location. If this Location does not have a parent Location, this value will be null.
            </value>
        </member>
        <member name="P:Rock.Model.Location.IsNamedLocation">
            <summary>
            Gets or sets a value indicating whether this instance is a named location.
            </summary>
            <value>
            A <see cref="T:System.Boolean"/> that is <c>true</c> if this instance is a named location; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Model.Location.LocationTypeValue">
            <summary>
            Gets or sets the location type value.
            </summary>
            <value>
            The location type value.
            </value>
        </member>
        <member name="P:Rock.Model.Location.ChildLocations">
            <summary>
            Gets or sets a collection of child Locations associated that inherit for this location. This property will only return the immediate descendants of this locations.
            </summary>
            <value>
            A collection of the child Locations that are immediate descendants of this Location.  If this Location does not have any descendants, this value will be null.
            </value>
        </member>
        <member name="P:Rock.Model.Location.GroupLocations">
            <summary>
            Gets or sets a collection containing the <see cref="T:Rock.Model.GroupLocation">GroupLocations</see> that reference this Location.
            </summary>
            <value>
            A collection of <see cref="T:Rock.Model.GroupLocation"/> entities that reference this Location.
            </value>
        </member>
        <member name="P:Rock.Model.Location.PrinterDevice">
            <summary>
            Gets or sets the Attendance Printer <see cref="T:Rock.Model.Device"/> that is used at this Location.
            </summary>
            <value>
            The attendance printer that is used at this Location.
            </value>
        </member>
        <member name="T:Rock.Model.LocationConfiguration">
            <summary>
            Location Configuration class.
            </summary>
        </member>
        <member name="M:Rock.Model.LocationConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.LocationConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Rock.Model.SystemEmail">
            <summary>
            Represents a Rock email template.
            </summary>
        </member>
        <member name="M:Rock.Model.SystemEmail.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Rock.Model.SystemEmail.IsSystem">
            <summary>
            Gets or sets a flag indicating if the email template is part of the Rock core system/framework.
            </summary>
            <value>
            A <see cref="T:System.Boolean"/> value that is <c>true</c> if the EmailTemplate is part of the Rock core system/framework otherwise <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Model.SystemEmail.Category">
            <summary>
            Gets or sets a string to identify the category that the EmailTemplate belongs to.
            </summary>
            <value>
            A <see cref="T:System.String"/> representing the category that this EmailTemplate belongs to.
            </value>
            <remarks>
            There are plans to update this to implement ICategorized and <see cref="T:Rock.Model.Category"/>. See https://github.com/SparkDevNetwork/Rock/issues/142
            </remarks>
        </member>
        <member name="P:Rock.Model.SystemEmail.Title">
            <summary>
            Gets or sets the Title of the EmailTemplate 
            </summary>
            <value>
            A <see cref="T:System.String"/> representing the Title of the EmailTemplate.
            </value>
        </member>
        <member name="P:Rock.Model.SystemEmail.From">
            <summary>
            Gets or sets the From email address.
            </summary>
            <value>
            A <see cref="T:System.String"/> representing the from email address.
            </value>
        </member>
        <member name="P:Rock.Model.SystemEmail.FromName">
            <summary>
            Gets or sets from name.
            </summary>
            <value>
            From name.
            </value>
        </member>
        <member name="P:Rock.Model.SystemEmail.To">
            <summary>
            Gets or sets the To email addresses that emails using this template should be delivered to.  If there is not a predetermined distribution list, this property can 
            remain empty.
            </summary>
            <value>
            A <see cref="T:System.String"/> representing a list of email addresses that the message should be delivered to. If there is not a predetermined email list, this property will 
            be null.
            </value>
        </member>
        <member name="P:Rock.Model.SystemEmail.Cc">
            <summary>
            Gets or sets the email addresses that should be sent a CC or carbon copy of an email using this template. If there is not a predetermined distribution list, this property
            can remain empty.
            </summary>
            <value>
            A <see cref="T:System.String"/> representing a list of email addresses that should be sent a CC or carbon copy of an email that uses this template. If there is not a predetermined
            distribution list, this property will be null.
            </value>
        </member>
        <member name="P:Rock.Model.SystemEmail.Bcc">
            <summary>
            Gets or sets the email addresses that should be sent a BCC or blind carbon copy of an email using this template. If there is not a predetermined distribution list; this property 
            can remain empty.
            </summary>
            <value>
            A <see cref="T:System.String"/> representing a list of email addresses that should be sent a BCC or blind carbon copy of an email that uses this template. If there is not a predetermined
            distribution list this property will remain null.
            </value>
        </member>
        <member name="P:Rock.Model.SystemEmail.Subject">
            <summary>
            Gets or sets the subject of an email that uses this template.
            </summary>
            <value>
            A <see cref="T:System.String"/> representing the subject of an email that uses this template.
            </value>
        </member>
        <member name="P:Rock.Model.SystemEmail.Body">
            <summary>
            Gets or sets the Body template that is used for emails that use this template.
            </summary>
            <value>
            A <see cref="T:System.String"/> representing the body template for emails that use this template.
            </value>
        </member>
        <member name="T:Rock.Model.SystemEmailConfiguration">
            <summary>
            Email Template Configuration class.
            </summary>
        </member>
        <member name="M:Rock.Model.SystemEmailConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.SystemEmailConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Rock.Model.Person">
            <summary>
            Represents a person or a business in Rock.  
            </summary>
        </member>
        <member name="F:Rock.Model.Person.USER_VALUE_ENTITY">
            <summary>
            The Entity Type used for saving user values
            </summary>
        </member>
        <member name="M:Rock.Model.Person.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.Person"/> class.
            </summary>
        </member>
        <member name="M:Rock.Model.Person.ToDictionary">
            <summary>
            Creates a <see cref="T:System.Collections.Generic.Dictionary`2"/> of the Person object
            </summary>
            <returns>A <see cref="T:System.Collections.Generic.Dictionary`2"/> of the Person object.</returns>
        </member>
        <member name="M:Rock.Model.Person.PreSaveChanges(Rock.Data.DbContext,System.Data.Entity.EntityState)">
            <summary>
            Pres the save.
            </summary>
            <param name="dbContext">The database context.</param>
            <param name="state">The state.</param>
        </member>
        <member name="M:Rock.Model.Person.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> containing the Person's FullName that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> containing the Person's FullName that represents this instance.
            </returns>
        </member>
        <member name="M:Rock.Model.Person.GetPhotoUrl(System.Nullable{System.Int32},Rock.Model.Gender,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Returns a URL for the person's photo.
            </summary>
            <param name="photoId">The photo identifier.</param>
            <param name="gender">The gender.</param>
            <param name="maxWidth">The maximum width.</param>
            <param name="maxHeight">The maximum height.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.Person.GetPhotoImageTag(Rock.Model.Person,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String)">
            <summary>
            Gets the photo image tag.
            </summary>
            <param name="person">The person.</param>
            <param name="maxWidth">The maximum width.</param>
            <param name="maxHeight">The maximum height.</param>
            <param name="className">Name of the class.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.Person.GetPhotoImageTag(System.Nullable{System.Int32},Rock.Model.Gender,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.String)">
            <summary>
            Gets the photo image tag.
            </summary>
            <param name="photoId">The photo identifier.</param>
            <param name="gender">The gender to use if the photoId is null.</param>
            <param name="maxWidth">The maximum width (in px).</param>
            <param name="maxHeight">The maximum height (in px).</param>
            <param name="altText">The alt text to use on the image.</param>
            <param name="className">The css class name to apply to the image.</param>
            <returns>An html img tag (string) of the requested photo.</returns>
        </member>
        <member name="M:Rock.Model.Person.CreateCheckinRelationship(System.Int32,System.Int32,Rock.Model.PersonAlias)">
            <summary>
            Adds the related person to the selected person's known relationships with a role of 'Can check in' which
            is typically configured to allow check-in.  If an inverse relationship is configured for 'Can check in' 
            (i.e. 'Allow check in by'), that relationship will also be created.
            </summary>
            <param name="personId">A <see cref="T:System.Int32"/> representing the Id of the Person.</param>
            <param name="relatedPersonId">A <see cref="T:System.Int32"/> representing the Id of the related Person.</param>
            <param name="currentPersonAlias">A <see cref="T:Rock.Model.PersonAlias"/> representing the Person who is logged in.</param>
        </member>
        <member name="P:Rock.Model.Person.IsSystem">
            <summary>
            Gets or sets a flag indicating if this Person is part of the Rock core system/framework. This property is required.
            </summary>
            <value>
            A <see cref="T:System.Boolean"/> value that is <c>true</c> if this Person is part of the Rock core system/framework. This property is required.
            </value>
        </member>
        <member name="P:Rock.Model.Person.RecordTypeValueId">
            <summary>
            Gets or sets the Id of the Person Record Type <see cref="T:Rock.Model.DefinedValue"/> representing what type of Person Record this is.
            </summary>
            <value>
            A <see cref="T:System.Int32"/> representing the Id of the <see cref="T:Rock.Model.DefinedValue"/> identifying the person record type. If no value is selected this can be null.
            </value>
        </member>
        <member name="P:Rock.Model.Person.RecordStatusValueId">
            <summary>
            Gets or sets the Id of the Record Status <see cref="T:Rock.Model.DefinedValue"/> representing the status of this entity
            </summary>
            <value>
            A <see cref="T:System.Int32"/> representing the Id of the Record Status <see cref="T:Rock.Model.DefinedValue"/> representing the status of this entity.
            </value>
        </member>
        <member name="P:Rock.Model.Person.RecordStatusReasonValueId">
            <summary>
            Gets or sets the Id of the Record Status Reason <see cref="T:Rock.Model.DefinedValue"/> representing the reason why a person record status would have a set status.
            </summary>
            <value>
            A <see cref="T:System.Int32"/> representing the Id of the Record Status Reason <see cref="T:Rock.Model.DefinedValue"/> representing the reason why a person entity would have a set status.
            </value>
        </member>
        <member name="P:Rock.Model.Person.ConnectionStatusValueId">
            <summary>
            Gets or sets the Id of the Defined Value <see cref="T:Rock.Model.DefinedValue"/> representing the connection status of the Person.
            </summary>
            <value>
            A <see cref="T:System.Int32"/> representing the connection status of the Person.
            </value>
        </member>
        <member name="P:Rock.Model.Person.ReviewReasonValueId">
            <summary>
            Gets or sets the Id of the Defined Value <see cref="T:Rock.Model.DefinedValue"/> representing the reason a record needs to be reviewed.
            </summary>
            <value>
            A <see cref="T:System.Int32"/> representing the reason a record needs to be reviewed.
            </value>
        </member>
        <member name="P:Rock.Model.Person.IsDeceased">
            <summary>
            Gets or sets a flag indicating if the Person is deceased.
            </summary>
            <value>
            A <see cref="T:System.Boolean"/> value that is <c>true</c> if the Person is deceased; otherwise <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Model.Person.TitleValueId">
            <summary>
            Gets or sets Id of the (Salutation) Tile <see cref="T:Rock.Model.DefinedValue"/> that is associated with the Person
            </summary>
            <value>
            An <see cref="T:System.Int32"/> representing the Title <see cref="T:Rock.Model.DefinedValue"/> that is associated with the Person.
            </value>
        </member>
        <member name="P:Rock.Model.Person.FirstName">
            <summary>
            Gets or sets the first name of the Person.
            </summary>
            <value>
            A <see cref="T:System.String"/> representing the first name of the Person.
            </value>
        </member>
        <member name="P:Rock.Model.Person.NickName">
            <summary>
            Gets or sets the nick name of the Person.  If a nickname was not entered, the first name is used.
            </summary>
            <value>
            A <see cref="T:System.String"/> representing the nick name of the Person.
            </value>
            <remarks>
            The name that the person goes by.
            </remarks>
        </member>
        <member name="P:Rock.Model.Person.MiddleName">
            <summary>
            Gets or sets the middle name of the Person.
            </summary>
            <value>
            A <see cref="T:System.String"/> that represents the middle name of the Person.
            </value>
        </member>
        <member name="P:Rock.Model.Person.LastName">
            <summary>
            Gets or sets the last name (Sir Name) of the Person.
            </summary>
            <value>
            A <see cref="T:System.String"/> that represents the Last Name of the Person.
            </value>
        </member>
        <member name="P:Rock.Model.Person.SuffixValueId">
            <summary>
            Gets or sets the Id of the Person's name Suffix <see cref="T:Rock.Model.DefinedValue"/>.
            </summary>
            <value>
            A <see cref="T:System.Int32"/> representing the Id of the Person's name Suffix <see cref="T:Rock.Model.DefinedValue"/>. If the Person
            does not have a suffix as part of their name this value will be null.
            </value>
            <remarks>
            Examples include: Sr., Jr., III, IV, DMD,  MD, PhD, etc.
            </remarks>
        </member>
        <member name="P:Rock.Model.Person.PhotoId">
            <summary>
            Gets or sets the Id of the <see cref="T:Rock.Model.BinaryFile"/> that contains the photo of the Person.
            </summary>
            <value>
            A <see cref="T:System.Int32"/> representing the Id of the <see cref="T:Rock.Model.BinaryFile"/> containing the photo of the Person.
            </value>
        </member>
        <member name="P:Rock.Model.Person.BirthDay">
            <summary>
            Gets or sets the day of the month portion of the Person's birth date.
            </summary>
            <value>
            A <see cref="T:System.Int32"/> representing the day of the month portion of the Person's birth date. If their birth date is not known
            this value will be null.
            </value>
        </member>
        <member name="P:Rock.Model.Person.BirthMonth">
            <summary>
            Gets or sets the month portion of the Person's birth date.
            </summary>
            <value>
            A <see cref="T:System.Int32"/> representing the month portion of the Person's birth date. If the birth date is not known this value will be null.
            </value>
        </member>
        <member name="P:Rock.Model.Person.BirthYear">
            <summary>
            Gets or sets the year portion of the Person's birth date.
            </summary>
            <value>
            A <see cref="T:System.Int32"/> representing the year portion of the Person's birth date. If the birth date is not known this value will be null.
            </value>
        </member>
        <member name="P:Rock.Model.Person.Gender">
            <summary>
            Gets or sets the gender of the Person. This property is required.
            </summary>
            <value>
            A <see cref="T:Rock.Model.Gender"/> enum value representing the Person's gender.  Valid values are <c>Gender.Unknown</c> if the Person's gender is unknown,
            <c>Gender.Male</c> if the Person's gender is Male, <c>Gender.Female</c> if the Person's gender is Female.
            </value>
        </member>
        <member name="P:Rock.Model.Person.MaritalStatusValueId">
            <summary>
            Gets or sets Id of the Marital Status <see cref="T:Rock.Model.DefinedValue"/> representing the Person's martial status.
            </summary>
            <value>
            A <see cref="T:System.Int32"/> representing the Id of the Marital STatus <see cref="T:Rock.Model.DefinedValue"/> representing the Person's martial status.  This value is nullable.
            </value>
        </member>
        <member name="P:Rock.Model.Person.AnniversaryDate">
            <summary>
            Gets or sets the date of the Person's wedding anniversary.  This property is nullable if the Person is not married or their anniversary date is not known.
            </summary>
            <value>
            A <see cref="T:System.DateTime"/> representing the anniversary date of the Person's wedding. If the anniversary date is not known or they are not married this value will be null.
            </value>
        </member>
        <member name="P:Rock.Model.Person.GraduationDate">
            <summary>
            Gets or sets the date of the Person's projected or actual high school graduation date. The month and date will match the "Grade Transition Date" global attribute. This value is used to determine what grade a student is in. 
            </summary>
            <value>
            A <see cref="T:System.DateTime"/> representing the Person's projected or actual high school graduation date.  This value will be null if a Graduation Date is an adult, not known, not applicable or the 
            Person has not entered school.
            </value>
        </member>
        <member name="P:Rock.Model.Person.GivingGroupId">
            <summary>
            Gets or sets the giving group id.  If an individual would like their giving to be grouped with the rest of their family,
            this will be the id of their family group.  If they elect to contribute on their own, this value will be null.
            </summary>
            <value>
            The giving group id.
            </value>
        </member>
        <member name="P:Rock.Model.Person.Email">
            <summary>
            Gets or sets the Person's email address.
            </summary>
            <value>
            A <see cref="T:System.String"/> containing the Person's email address.
            </value>
        </member>
        <member name="P:Rock.Model.Person.IsEmailActive">
            <summary>
            Gets or sets a flag indicating if the Person's email address is active.
            </summary>
            <value>
            A <see cref="T:System.Boolean"/> value that is <c>true</c> if the email address is active, otherwise <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Model.Person.EmailNote">
            <summary>
            Gets or sets a note about the Person's email address.
            </summary>
            <value>
            A <see cref="T:System.String"/> representing a note about the Person's email address.
            </value>
        </member>
        <member name="P:Rock.Model.Person.EmailPreference">
            <summary>
            Gets or sets the email preference.
            </summary>
            <value>
            The email preference.
            </value>
        </member>
        <member name="P:Rock.Model.Person.ReviewReasonNote">
            <summary>
            Gets or sets notes about why a person profile needs to be reviewed
            </summary>
            <value>
            A <see cref="T:System.String"/> representing an Review Reason Note.
            </value>
        </member>
        <member name="P:Rock.Model.Person.InactiveReasonNote">
            <summary>
            Gets or sets the Inactive Reason Note
            </summary>
            <value>
            A <see cref="T:System.String"/> representing an Inactive Reason Note.
            </value>
        </member>
        <member name="P:Rock.Model.Person.SystemNote">
            <summary>
            Gets or sets the System Note
            </summary>
            <value>
            A <see cref="T:System.String"/> representing a System Note.
            </value>
        </member>
        <member name="P:Rock.Model.Person.ViewedCount">
            <summary>
            Gets or sets the count of the number of times that the Person has been viewed.
            </summary>
            <value>
            A <see cref="T:System.Int32"/> representing the number of times that the Person has been viewed.
            </value>
        </member>
        <member name="P:Rock.Model.Person.PrimaryAlias">
            <summary>
            Gets the primary alias.
            </summary>
            <value>
            The primary alias.
            </value>
        </member>
        <member name="P:Rock.Model.Person.PrimaryAliasId">
            <summary>
            Gets the primary alias identifier.
            </summary>
            <value>
            The primary alias identifier.
            </value>
        </member>
        <member name="P:Rock.Model.Person.FullName">
            <summary>
            Gets the Full Name of the Person using the Title FirstName LastName format.
            </summary>
            <value>
            A <see cref="T:System.String"/> representing the Full Name of a Person using the Title FirstName LastName format.
            </value>
        </member>
        <member name="P:Rock.Model.Person.FullNameReversed">
            <summary>
            Gets the full name of the Person using the LastName, FirstName format.
            </summary>
            <value>
            A <see cref="T:System.String"/> representing the full name of a Person using the LastName, FirstName format
            </value>
        </member>
        <member name="P:Rock.Model.Person.FullNameFormal">
            <summary>
            Gets the Full Name of the Person using the Title FirstName LastName format.
            </summary>
            <value>
            A <see cref="T:System.String"/> representing the Full Name of a Person using the Title FirstName LastName format.
            </value>
        </member>
        <member name="P:Rock.Model.Person.FullNameFormalReversed">
            <summary>
            Gets the full name of the Person using the LastName, FirstName format.
            </summary>
            <value>
            A <see cref="T:System.String"/> representing the full name of a Person using the LastName, FirstName format
            </value>
        </member>
        <member name="P:Rock.Model.Person.BirthdayDayOfWeek">
            <summary>
            Gets the day of the week the person's birthday falls on for the current year.
            </summary>
            <value>
            A <see cref="T:System.String"/> representing the day of the week the person's birthday falls on for the current year.
            </value>
        </member>
        <member name="P:Rock.Model.Person.BirthdayDayOfWeekShort">
            <summary>
            Gets the day of the week the person's birthday falls on for the current year as a shortened string (e.g. Wed.)
            </summary>
            <value>
            A <see cref="T:System.String"/> representing the shortened day of the week the person's birthday falls on for the current year.
            </value>
        </member>
        <member name="P:Rock.Model.Person.PhotoUrl">
            <summary>
            Gets the URL of the person's photo.
            </summary>
            <value>
            URL of the photo
            </value>
        </member>
        <member name="P:Rock.Model.Person.Users">
            <summary>
            Gets or sets a collection containing the Person's <see cref="T:Rock.Model.UserLogin">UserLogins</see>.
            </summary>
            <value>
            A collection of <see cref="T:Rock.Model.UserLogin">UserLogins</see> that belong to the Person.
            </value>
        </member>
        <member name="P:Rock.Model.Person.PhoneNumbers">
            <summary>
            Gets or sets a collection of <see cref="T:Rock.Model.PhoneNumber">PhoneNumbers</see> 
            </summary>
            <value>
            A collection of <see cref="T:Rock.Model.PhoneNumber"/> entities representing the phone numbers that are associated with this Person.
            </value>
        </member>
        <member name="P:Rock.Model.Person.Members">
            <summary>
            Gets or sets a collection of <see cref="T:Rock.Model.GroupMember">GroupMember</see> entities representing the group memberships that are associated
            with this Person.
            </summary>
            <value>
            A collection of <see cref="T:Rock.Model.GroupMember">GroupMember</see> entities representing the group memberships that are associated with
            </value>
        </member>
        <member name="P:Rock.Model.Person.Attendances">
            <summary>
            Gets or set a collection containing the Person's <see cref="T:Rock.Model.Attendance"/> history.
            </summary>
            <value>
            A collection of <see cref="T:Rock.Model.Attendance"/> entities representing the Person's attendance history.
            </value>
        </member>
        <member name="P:Rock.Model.Person.Aliases">
            <summary>
            Gets or sets the aliases for this person
            </summary>
            <value>
            The aliases.
            </value>
        </member>
        <member name="P:Rock.Model.Person.MaritalStatusValue">
            <summary>
            Gets or sets the <see cref="T:Rock.Model.DefinedValue"/> representing the Person's marital status.
            </summary>
            <value>
            A <see cref="T:Rock.Model.DefinedValue"/> representing the Person's marital status.
            </value>
        </member>
        <member name="P:Rock.Model.Person.ConnectionStatusValue">
            <summary>
            Gets or sets the <see cref="T:Rock.Model.DefinedValue"/> representing the Person's connection status
            </summary>
            <value>
            A <see cref="T:Rock.Model.DefinedValue"/> object representing the Person's connection status. 
            </value>
        </member>
        <member name="P:Rock.Model.Person.ReviewReasonValue">
            <summary>
            Gets or sets the review reason value.
            </summary>
            <value>
            The review reason value.
            </value>
        </member>
        <member name="P:Rock.Model.Person.RecordStatusValue">
            <summary>
            Gets or sets the <see cref="T:Rock.Model.DefinedValue"/> representing the record status.
            </summary>
            <value>
            A <see cref="T:Rock.Model.DefinedValue"/> object representing the record status.
            </value>
        </member>
        <member name="P:Rock.Model.Person.RecordStatusReasonValue">
            <summary>
            Gets or sets the <see cref="T:Rock.Model.DefinedValue"/> representing the Record Status Reason.
            </summary>
            <value>
            A <see cref="T:Rock.Model.DefinedValue"/> that represents the Record Status Reason (disposition)
            </value>
        </member>
        <member name="P:Rock.Model.Person.RecordTypeValue">
            <summary>
            Gets or sets the <see cref="T:Rock.Model.DefinedValue"/> representing the RecordType.
            </summary>
            <value>
            A <see cref="T:Rock.Model.DefinedValue"/> representing the record type.
            </value>
        </member>
        <member name="P:Rock.Model.Person.SuffixValue">
            <summary>
            Gets or sets the <see cref="T:Rock.Model.DefinedValue"/> representing the Person's name suffix.
            </summary>
            <value>
            A <see cref="T:Rock.Model.DefinedValue"/> representing the name suffix.
            </value>
        </member>
        <member name="P:Rock.Model.Person.TitleValue">
            <summary>
            Gets or sets the <see cref="T:Rock.Model.DefinedValue"/> representing the Person's salutation title.
            </summary>
            <value>
            A <see cref="T:Rock.Model.DefinedValue"/> object representing the Person's salutation title.
            </value>
        </member>
        <member name="P:Rock.Model.Person.Photo">
            <summary>
            Gets or sets the <see cref="T:Rock.Model.BinaryFile"/> that contains the Person's photo.
            </summary>
            <value>
            The <see cref="T:Rock.Model.BinaryFile"/> that contains the Person's photo.
            </value>
        </member>
        <member name="P:Rock.Model.Person.GivingGroup">
            <summary>
            Gets or sets the giving group.  The 
            </summary>
            <value>
            The giving group.
            </value>
        </member>
        <member name="P:Rock.Model.Person.BirthDate">
            <summary>
            Gets or sets the Person's birth date.
            </summary>
            <value>
            A <see cref="T:System.DateTime"/> representing the Person's birthdate.  If no birthdate is available, null is returned. If the year is not available then the birthdate is returned with the DateTime.MinValue.Year.
            </value>
        </member>
        <member name="P:Rock.Model.Person.Age">
            <summary>
            Gets the Person's age.
            </summary>
            <value>
            An <see cref="T:System.Int32"/> representing the person's age.  If the birthdate and age is not available then returns null.
            </value>
        </member>
        <member name="P:Rock.Model.Person.DaysToBirthday">
            <summary>
            Gets the number of days until the Person's birthday.
            </summary>
            <value>
            A <see cref="T:System.Int32"/> representing the number of days until the Person's birthday. If the person's birthdate is not available returns Int.MaxValue
            </value>
        </member>
        <member name="P:Rock.Model.Person.AgePrecise">
            <summary>
            Gets the Person's precise age (includes the fraction of the year).
            </summary>
            <value>
            A <see cref="T:System.Double"/> representing the Person's age (including fraction of year) 
            </value>
        </member>
        <member name="P:Rock.Model.Person.Grade">
            <summary>
            Gets the grade level of the person based on their high school graduation date.  Grade levels are -1 for prekindergarten, 0 for kindergarten, 1 for first grade, etc. or null if they have no graduation date or if no 'GradeTransitionDate' is configured.
            </summary>
            <value>
            The Person's grade level based on their Graduation Date. If no graduation date is provided or the GradeTransitionDate is not provided, returns null.
            </value>
        </member>
        <member name="P:Rock.Model.Person.GradeFormatted">
            <summary>
            Gets the grade string.
            </summary>
            <value>
            The grade string.
            </value>
        </member>
        <member name="P:Rock.Model.Person.ImpersonationParameter">
            <summary>
            Gets the impersonation parameter.
            </summary>
            <value>
            A <see cref="T:System.String"/> representing the impersonation parameter.
            </value>
        </member>
        <member name="P:Rock.Model.Person.ImpersonatedUser">
            <summary>
            Gets the <see cref="T:Rock.Model.UserLogin"/> of the user being impersonated.
            </summary>
            <value>
            Th <see cref="T:Rock.Model.UserLogin"/> of the user being impersonated.
            </value>
        </member>
        <member name="T:Rock.Model.PersonConfiguration">
            <summary>
            Person Configuration class.
            </summary>
        </member>
        <member name="M:Rock.Model.PersonConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.PersonConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Rock.Model.Gender">
            <summary>
            The gender of a person
            </summary>
        </member>
        <member name="F:Rock.Model.Gender.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="F:Rock.Model.Gender.Male">
            <summary>
            Male
            </summary>
        </member>
        <member name="F:Rock.Model.Gender.Female">
            <summary>
            Female
            </summary>
        </member>
        <member name="T:Rock.Model.GradeLevel">
            <summary>
            A person's possible grade levels
            </summary>
        </member>
        <member name="F:Rock.Model.GradeLevel.PreK">
            <summary>
            Kindergarten
            </summary>
        </member>
        <member name="F:Rock.Model.GradeLevel.Kindergarten">
            <summary>
            Kindergarten
            </summary>
        </member>
        <member name="F:Rock.Model.GradeLevel.First">
            <summary>
            1st Grade
            </summary>
        </member>
        <member name="F:Rock.Model.GradeLevel.Second">
            <summary>
            2nd Grade
            </summary>
        </member>
        <member name="F:Rock.Model.GradeLevel.Third">
            <summary>
            3rd Grade
            </summary>
        </member>
        <member name="F:Rock.Model.GradeLevel.Fourth">
            <summary>
            4th Grade
            </summary>
        </member>
        <member name="F:Rock.Model.GradeLevel.Fifth">
            <summary>
            5th Grade
            </summary>
        </member>
        <member name="F:Rock.Model.GradeLevel.Sixth">
            <summary>
            6th Grade
            </summary>
        </member>
        <member name="F:Rock.Model.GradeLevel.Seventh">
            <summary>
            7th Grade
            </summary>
        </member>
        <member name="F:Rock.Model.GradeLevel.Eighth">
            <summary>
            8th Grade
            </summary>
        </member>
        <member name="F:Rock.Model.GradeLevel.Ninth">
            <summary>
            9th Grade
            </summary>
        </member>
        <member name="F:Rock.Model.GradeLevel.Tenth">
            <summary>
            10th Grade
            </summary>
        </member>
        <member name="F:Rock.Model.GradeLevel.Eleventh">
            <summary>
            11th Grade
            </summary>
        </member>
        <member name="F:Rock.Model.GradeLevel.Twelfth">
            <summary>
            12th Grade
            </summary>
        </member>
        <member name="T:Rock.Model.EmailPreference">
            <summary>
            The person's email preference
            </summary>
        </member>
        <member name="F:Rock.Model.EmailPreference.EmailAllowed">
            <summary>
            Emails can be sent to person
            </summary>
        </member>
        <member name="F:Rock.Model.EmailPreference.NoMassEmails">
            <summary>
            No Mass emails should be sent to person
            </summary>
        </member>
        <member name="F:Rock.Model.EmailPreference.DoNotEmail">
            <summary>
            No emails should be sent to person
            </summary>
        </member>
        <member name="T:Rock.Model.PhoneNumber">
            <summary>
            Phone Number POCO Entity.
            </summary>
        </member>
        <member name="M:Rock.Model.PhoneNumber.PreSaveChanges(Rock.Data.DbContext,System.Data.Entity.EntityState)">
            <summary>
            Updates the formatted number prior to update.
            </summary>
            <param name="dbContext">The database context.</param>
            <param name="state">The state.</param>
        </member>
        <member name="M:Rock.Model.PhoneNumber.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> containing the Number and represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> containing the Number and represents this instance.
            </returns>
        </member>
        <member name="M:Rock.Model.PhoneNumber.DefaultCountryCode">
            <summary>
            Gets the defaults country code.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.PhoneNumber.FormattedNumber(System.String,System.String,System.Boolean)">
            <summary>
            Formats a provided string of numbers .
            </summary>
            <param name="countryCode">The country code.</param>
            <param name="number">A <see cref="T:System.String"/> containing the number to format.</param>
            <param name="includeCountryCode">if set to <c>true</c> [include country code].</param>
            <returns>
            A <see cref="T:System.String"/> containing the formatted number.
            </returns>
        </member>
        <member name="M:Rock.Model.PhoneNumber.CleanNumber(System.String)">
            <summary>
            Removes non-numeric characters from a provided number
            </summary>
            <param name="number">A <see cref="T:System.String"/> containing the phone number to clean.</param>
            <returns>A <see cref="T:System.String"/> containing the phone number with all non numeric characters removed. </returns>
        </member>
        <member name="P:Rock.Model.PhoneNumber.IsSystem">
            <summary>
            Gets or sets a flag indicating if the PhoneNumber is part of the Rock core system/framework. This property is required.
            </summary>
            <value>
            A <see cref="T:System.Boolean"/> value that is <c>true</c> if the PhoneNumber is part of the Rock core system/framework; otherwise <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Model.PhoneNumber.PersonId">
            <summary>
            Gets or sets the PersonId of the <see cref="T:Rock.Model.Person"/> that the PhoneNumber belongs to. This property is required.
            </summary>
            <value>
            A <see cref="T:System.Int32"/> representing the PersonId of the <see cref="T:Rock.Model.Person"/> that the PhoneNumber belongs to.
            </value>
        </member>
        <member name="P:Rock.Model.PhoneNumber.CountryCode">
            <summary>
            Gets or sets the country code.
            </summary>
            <value>
            The country code.
            </value>
        </member>
        <member name="P:Rock.Model.PhoneNumber.Number">
            <summary>
            Gets or sets the phone number. The number is stored without any string formatting. (i.e. (502) 555-1212 will be stored as 5025551212). This property is required.
            </summary>
            <value>
            A <see cref="T:System.String"/> representing the phone number without string formatting.
            </value>
        </member>
        <member name="P:Rock.Model.PhoneNumber.NumberFormatted">
            <summary>
            Gets or sets the formatted number. Note: value is recalculated on every add/modify of entity during context's default SaveChanges() method.
            </summary>
            <value>
            The number formatted.
            </value>
        </member>
        <member name="P:Rock.Model.PhoneNumber.Extension">
            <summary>
            Gets or sets the extension (if any) that would need to be dialed to contact the owner. 
            </summary>
            <value>
            A <see cref="T:System.String"/> representing the extensions that would need to be dialed to contact the owner. If no extension is required, this property will be null. 
            </value>
        </member>
        <member name="P:Rock.Model.PhoneNumber.NumberTypeValueId">
            <summary>
            Gets the Phone Number's Number Type <see cref="T:Rock.Model.DefinedValue"/> Id.
            </summary>
            <value>
            A <see cref="T:System.Int32"/> representing the Number Type <see cref="T:Rock.Model.DefinedValue"/> Id. If unknown, this value will be null.
            </value>
        </member>
        <member name="P:Rock.Model.PhoneNumber.IsMessagingEnabled">
            <summary>
            Gets or sets a flag indicating whether the number has been opted in for SMS
            </summary>
            <value>
              A <see cref="T:System.Boolean"/> value that is <c>true</c> if the phone number has opted in for SMS messaging; otherwise <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Model.PhoneNumber.NumberTypeValue">
            <summary>
            Gets or sets the Phone Number's NumberType <see cref="T:Rock.Model.DefinedValue"/>
            </summary>
            <value>
            The Number Type <see cref="T:Rock.Model.DefinedValue"/> of the phone number.
            </value>
        </member>
        <member name="P:Rock.Model.PhoneNumber.IsUnlisted">
            <summary>
            Gets or sets a flag indicating whether the PhoneNumber is unlisted or not.
            </summary>
            <value>
            A <see cref="T:System.Boolean"/> value that is <c>true</c> if the PhoneNumber is unlisted; otherwise <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Model.PhoneNumber.Description">
            <summary>
            Gets or sets an optional description of the PhoneNumber.
            </summary>
            <value>
            A <see cref="T:System.String"/> representing an optional description of the PhoneNumber.
            </value>
        </member>
        <member name="P:Rock.Model.PhoneNumber.Person">
            <summary>
            Gets or sets the <see cref="T:Rock.Model.Person"/> who the PhoneNumber belongs to.
            </summary>
            <value>
            The <see cref="T:Rock.Model.Person"/> that the phone number belongs to.
            </value>
        </member>
        <member name="P:Rock.Model.PhoneNumber.NumberFormattedWithCountryCode">
            <summary>
            Gets the number formatted with country code.
            </summary>
            <value>
            The number formatted with country code.
            </value>
        </member>
        <member name="T:Rock.Model.PhoneNumberConfiguration">
            <summary>
            Phone Number Configuration class.
            </summary>
        </member>
        <member name="M:Rock.Model.PhoneNumberConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.PhoneNumberConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Rock.Field.ConfigurationValue">
            <summary>
            The Name, Description and Value of an field type's configuration items
            </summary>
        </member>
        <member name="M:Rock.Field.ConfigurationValue.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Field.ConfigurationValue"/> class.
            </summary>
        </member>
        <member name="M:Rock.Field.ConfigurationValue.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Field.ConfigurationValue"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Rock.Field.ConfigurationValue.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Field.ConfigurationValue"/> class.
            </summary>
            <param name="name">The name (used as the heading label when rendering markup).</param>
            <param name="description">The description.</param>
            <param name="value">The value.</param>
        </member>
        <member name="P:Rock.Field.ConfigurationValue.Name">
            <summary>
            Gets or sets the name. The name is used as the field label heading.
            </summary>
            <value>
            The name/label to use as the field label heading.
            </value>
        </member>
        <member name="P:Rock.Field.ConfigurationValue.Description">
            <summary>
            Gets or sets the description.
            </summary>
            <value>
            The description.
            </value>
        </member>
        <member name="P:Rock.Field.ConfigurationValue.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="T:Rock.Field.Types.SelectMultiFieldType">
            <summary>
            Field Type used to display a list of options as checkboxes.  Value is saved as a | delimited list
            </summary>
        </member>
        <member name="M:Rock.Field.Types.SelectMultiFieldType.ConfigurationKeys">
            <summary>
            Returns a list of the configuration keys
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.SelectMultiFieldType.ConfigurationControls">
            <summary>
            Creates the HTML controls required to configure this type of field
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.SelectMultiFieldType.ConfigurationValues(System.Collections.Generic.List{System.Web.UI.Control})">
            <summary>
            Gets the configuration value.
            </summary>
            <param name="controls">The controls.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.SelectMultiFieldType.SetConfigurationValues(System.Collections.Generic.List{System.Web.UI.Control},System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue})">
            <summary>
            Sets the configuration value.
            </summary>
            <param name="controls"></param>
            <param name="configurationValues"></param>
        </member>
        <member name="M:Rock.Field.Types.SelectMultiFieldType.EditControl(System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.String)">
            <summary>
            Creates the control(s) neccessary for prompting user for a new value
            </summary>
            <param name="configurationValues">The configuration values.</param>
            <param name="id"></param>
            <returns>
            The control
            </returns>
        </member>
        <member name="M:Rock.Field.Types.SelectMultiFieldType.GetEditValue(System.Web.UI.Control,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue})">
            <summary>
            Reads new values entered by the user for the field
            </summary>
            <param name="control">Parent control that controls were added to in the CreateEditControl() method</param>
            <param name="configurationValues"></param>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.SelectMultiFieldType.SetEditValue(System.Web.UI.Control,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.String)">
            <summary>
            Sets the value.
            </summary>
            <param name="control">The control.</param>
            <param name="configurationValues"></param>
            <param name="value">The value.</param>
        </member>
        <member name="T:Rock.Field.Types.PersonFieldType">
            <summary>
            Field used to save and display a person
            </summary>
        </member>
        <member name="M:Rock.Field.Types.PersonFieldType.FormatValue(System.Web.UI.Control,System.String,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.Boolean)">
            <summary>
            Returns the field's current value(s)
            </summary>
            <param name="parentControl">The parent control.</param>
            <param name="value">Information about the value</param>
            <param name="configurationValues">The configuration values.</param>
            <param name="condensed">Flag indicating if the value should be condensed (i.e. for use in a grid column)</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.PersonFieldType.EditControl(System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.String)">
            <summary>
            Creates the control(s) neccessary for prompting user for a new value
            </summary>
            <param name="configurationValues">The configuration values.</param>
            <param name="id"></param>
            <returns>
            The control
            </returns>
        </member>
        <member name="M:Rock.Field.Types.PersonFieldType.GetEditValue(System.Web.UI.Control,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue})">
            <summary>
            Reads new values entered by the user for the field (as PersonAlias.Guid)
            </summary>
            <param name="control">Parent control that controls were added to in the CreateEditControl() method</param>
            <param name="configurationValues">The configuration values.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.PersonFieldType.SetEditValue(System.Web.UI.Control,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.String)">
            <summary>
            Sets the value (as PersonAlias.Guid)
            </summary>
            <param name="control">The control.</param>
            <param name="configurationValues">The configuration values.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Rock.Field.Types.PersonFieldType.GetEditValueAsEntityId(System.Web.UI.Control,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue})">
            <summary>
            Gets the edit value as the IEntity.Id
            </summary>
            <param name="control">The control.</param>
            <param name="configurationValues">The configuration values.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.PersonFieldType.SetEditValueFromEntityId(System.Web.UI.Control,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.Nullable{System.Int32})">
            <summary>
            Sets the edit value from IEntity.Id value
            </summary>
            <param name="control">The control.</param>
            <param name="configurationValues">The configuration values.</param>
            <param name="id">The identifier.</param>
        </member>
        <member name="T:Rock.Field.Types.DecimalFieldType">
            <summary>
            Field used to save and display a decimal numeric value
            </summary>
        </member>
        <member name="M:Rock.Field.Types.DecimalFieldType.IsValid(System.String,System.Boolean,System.String@)">
            <summary>
            Tests the value to ensure that it is a valid value.  If not, message will indicate why
            </summary>
            <param name="value">The value.</param>
            <param name="required">if set to <c>true</c> [required].</param>
            <param name="message">The message.</param>
            <returns>
              <c>true</c> if the specified value is valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Rock.Field.Types.DecimalFieldType.EditControl(System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.String)">
            <summary>
            Creates the control(s) neccessary for prompting user for a new value
            </summary>
            <param name="configurationValues">The configuration values.</param>
            <param name="id"></param>
            <returns>
            The control
            </returns>
        </member>
        <member name="P:Rock.Field.Types.DecimalFieldType.AlignValue">
            <summary>
            Gets the align value that should be used when displaying value
            </summary>
        </member>
        <member name="T:Rock.Field.Types.DefinedValueFieldType">
            <summary>
            Field Type used to display a dropdown list of Defined Values for a specific Defined Type
            </summary>
        </member>
        <member name="M:Rock.Field.Types.DefinedValueFieldType.FormatValue(System.Web.UI.Control,System.String,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.Boolean)">
            <summary>
            Returns the field's current value(s)
            </summary>
            <param name="parentControl">The parent control.</param>
            <param name="value">Information about the value</param>
            <param name="configurationValues">The configuration values.</param>
            <param name="condensed">Flag indicating if the value should be condensed (i.e. for use in a grid column)</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.DefinedValueFieldType.ConfigurationKeys">
            <summary>
            Returns a list of the configuration keys
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.DefinedValueFieldType.ConfigurationControls">
            <summary>
            Creates the HTML controls required to configure this type of field
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.DefinedValueFieldType.ConfigurationValues(System.Collections.Generic.List{System.Web.UI.Control})">
            <summary>
            Gets the configuration value.
            </summary>
            <param name="controls">The controls.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.DefinedValueFieldType.SetConfigurationValues(System.Collections.Generic.List{System.Web.UI.Control},System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue})">
            <summary>
            Sets the configuration value.
            </summary>
            <param name="controls"></param>
            <param name="configurationValues"></param>
        </member>
        <member name="M:Rock.Field.Types.DefinedValueFieldType.EditControl(System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.String)">
            <summary>
            Creates the control(s) neccessary for prompting user for a new value
            </summary>
            <param name="configurationValues">The configuration values.</param>
            <param name="id"></param>
            <returns>
            The control
            </returns>
        </member>
        <member name="M:Rock.Field.Types.DefinedValueFieldType.GetEditValue(System.Web.UI.Control,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue})">
            <summary>
            Reads new values entered by the user for the field
            </summary>
            <param name="control">Parent control that controls were added to in the CreateEditControl() method</param>
            <param name="configurationValues"></param>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.DefinedValueFieldType.SetEditValue(System.Web.UI.Control,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.String)">
            <summary>
            Sets the value.
            </summary>
            <param name="control">The control.</param>
            <param name="configurationValues"></param>
            <param name="value">The value.</param>
        </member>
        <member name="T:Rock.Field.Types.DefinedTypeFieldType">
            <summary>
            Field Type used to display a dropdown list of Defined Types
            </summary>
        </member>
        <member name="M:Rock.Field.Types.DefinedTypeFieldType.FormatValue(System.Web.UI.Control,System.String,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.Boolean)">
            <summary>
            Returns the field's current value(s)
            </summary>
            <param name="parentControl">The parent control.</param>
            <param name="value">Information about the value</param>
            <param name="configurationValues">The configuration values.</param>
            <param name="condensed">Flag indicating if the value should be condensed (i.e. for use in a grid column)</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.DefinedTypeFieldType.EditControl(System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.String)">
            <summary>
            Creates the control(s) neccessary for prompting user for a new value
            </summary>
            <param name="configurationValues">The configuration values.</param>
            <param name="id"></param>
            <returns>
            The control
            </returns>
        </member>
        <member name="M:Rock.Field.Types.DefinedTypeFieldType.GetEditValue(System.Web.UI.Control,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue})">
            <summary>
            Reads new values entered by the user for the field
            </summary>
            <param name="control">Parent control that controls were added to in the CreateEditControl() method</param>
            <param name="configurationValues"></param>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.DefinedTypeFieldType.SetEditValue(System.Web.UI.Control,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.String)">
            <summary>
            Sets the value.
            </summary>
            <param name="control">The control.</param>
            <param name="configurationValues"></param>
            <param name="value">The value.</param>
        </member>
        <member name="T:Rock.Field.Types.DateFieldType">
            <summary>
            Field used to save and display a date value
            </summary>
        </member>
        <member name="M:Rock.Field.Types.DateFieldType.FormatValue(System.Web.UI.Control,System.String,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.Boolean)">
            <summary>
            Formats date display
            </summary>
            <param name="parentControl">The parent control.</param>
            <param name="value">Information about the value</param>
            <param name="configurationValues">The configuration values.</param>
            <param name="condensed">Flag indicating if the value should be condensed (i.e. for use in a grid column)</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.DateFieldType.ConfigurationKeys">
            <summary>
            Returns a list of the configuration keys
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.DateFieldType.ConfigurationControls">
            <summary>
            Creates the HTML controls required to configure this type of field
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.DateFieldType.SetConfigurationValues(System.Collections.Generic.List{System.Web.UI.Control},System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue})">
            <summary>
            Sets the configuration value.
            </summary>
            <param name="controls">The controls.</param>
            <param name="configurationValues">The configuration values.</param>
        </member>
        <member name="M:Rock.Field.Types.DateFieldType.ConfigurationValues(System.Collections.Generic.List{System.Web.UI.Control})">
            <summary>
            Gets the configuration value.
            </summary>
            <param name="controls">The controls.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.DateFieldType.EditControl(System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.String)">
            <summary>
            Creates the control(s) neccessary for prompting user for a new value
            </summary>
            <param name="configurationValues">The configuration values.</param>
            <param name="id"></param>
            <returns>
            The control
            </returns>
        </member>
        <member name="M:Rock.Field.Types.DateFieldType.GetEditValue(System.Web.UI.Control,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue})">
            <summary>
            Reads new values entered by the user for the field
            </summary>
            <param name="control">Parent control that controls were added to in the CreateEditControl() method</param>
            <param name="configurationValues">The configuration values.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.DateFieldType.SetEditValue(System.Web.UI.Control,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.String)">
            <summary>
            Sets the value.
            </summary>
            <param name="control">The control.</param>
            <param name="configurationValues">The configuration values.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:Rock.Field.Types.ImageFieldType">
            <summary>
            Field used to save and display an image value
            </summary>
        </member>
        <member name="M:Rock.Field.Types.ImageFieldType.FormatValue(System.Web.UI.Control,System.String,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.Boolean)">
            <summary>
            Returns the field's current value(s)
            </summary>
            <param name="parentControl">The parent control.</param>
            <param name="value">Information about the value</param>
            <param name="configurationValues"></param>
            <param name="condensed">Flag indicating if the value should be condensed (i.e. for use in a grid column)</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.ImageFieldType.EditControl(System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.String)">
            <summary>
            Creates the control(s) neccessary for prompting user for a new value
            </summary>
            <param name="configurationValues">The configuration values.</param>
            <param name="id"></param>
            <returns>
            The control
            </returns>
        </member>
        <member name="M:Rock.Field.Types.ImageFieldType.GetEditValue(System.Web.UI.Control,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue})">
            <summary>
            Reads new values entered by the user for the field
            </summary>
            <param name="control">Parent control that controls were added to in the CreateEditControl() method</param>
            <param name="configurationValues"></param>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.ImageFieldType.SetEditValue(System.Web.UI.Control,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.String)">
            <summary>
            Sets the value.
            </summary>
            <param name="control">The control.</param>
            <param name="configurationValues"></param>
            <param name="value">The value.</param>
        </member>
        <member name="T:Rock.Field.Types.VideoFieldType">
            <summary>
            Video field type
            </summary>
        </member>
        <member name="M:Rock.Field.Types.VideoFieldType.FormatValue(System.Web.UI.Control,System.String,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.Boolean)">
            <summary>
            Returns the field's current value(s)
            </summary>
            <param name="parentControl">The parent control.</param>
            <param name="value">Information about the value</param>
            <param name="configurationValues"></param>
            <param name="condensed">Flag indicating if the value should be condensed (i.e. for use in a grid column)</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.VideoFieldType.AddLinks(System.Web.UI.Page)">
            <summary>
            Adds any required CSS or Script Links to the current page
            </summary>
            <param name="page">The page.</param>
        </member>
        <member name="T:Rock.Model.FinancialBatch">
            <summary>
            Represents a batch or collection of <see cref="T:Rock.Model.FinancialTransaction">FinancialTransactions</see> for a specified date-time range, campus (if applicable) and transaction type.  A batch 
            has a known total value of all transactions that are included in the batch.
            </summary>
        </member>
        <member name="M:Rock.Model.FinancialBatch.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this FinancialBatch.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this FinancialBatch.
            </returns>
        </member>
        <member name="P:Rock.Model.FinancialBatch.Name">
            <summary>
            Gets or sets the name of the batch.
            </summary>
            <value>
            A <see cref="T:System.String"/> that represents the name of the batch.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialBatch.BatchStartDateTime">
            <summary>
            Gets or sets the start posting date and time range of <see cref="T:Rock.Model.FinancialTransaction">FinancialTransactions</see> that are included in this batch.  
            Transactions that post on or after this date and time and before the <see cref="P:Rock.Model.FinancialBatch.BatchEndDateTime"/> can be included in this batch.
            </summary>
            <value>
            A <see cref="T:System.DateTime"/> representing the posting start date for the batch.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialBatch.BatchEndDateTime">
            <summary>
            Gets or sets end of the posting date and time range for <see cref="T:Rock.Model.FinancialTransaction">FinancialTransactions</see> that are included in this batch.
            Transactions that post before or on this date and time and after the <see cref="P:Rock.Model.FinancialBatch.BatchStartDateTime"/> can be included in this batch.
            </summary>
            <value>
            A <see cref="T:System.DateTime"/> representing the posting end date for the batch.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialBatch.Status">
            <summary>
            Gets or sets the status of the batch.
            </summary>
            <value>
            A <see cref="T:Rock.Model.BatchStatus"/> representing the status of the batch.
            When this value is <c>BatchStatus.Pending</c>  it means that transactions are still being added to the batch.
            When this value is <c>BatchStatus.Open</c> it means that all transactions have been added and are ready to be matched up.
            When this value is <c>BatchStatus.Closed</c> it means that the batch has balanced and has been closed.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialBatch.CampusId">
            <summary>
            Gets or sets the CampusId of the <see cref="T:Rock.Model.Campus"/> that this batch is associated with. If the batch is not linked
            to a campus, this value will be null.
            </summary>
            <value>
            A <see cref="T:System.Int32"/> representing the CampusId of the <see cref="T:Rock.Model.Campus"/> that this batch is associated with.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialBatch.AccountingSystemCode">
            <summary>
            Gets or sets an optional transaction code from an accounting system that batch is associated with
            </summary>
            <value>
            A <see cref="T:System.String"/> representing the Accounting System transaction code for the batch.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialBatch.ControlAmount">
            <summary>
            Gets or sets the control amount. This should match the total value of all <see cref="T:Rock.Model.FinancialTransaction">FinancialTransactions</see> that are 
            included in the batch.
            </summary>
            <value>
            A <see cref="T:System.Decimal"/> representing the control amount of the batch.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialBatch.Campus">
            <summary>
            Gets or sets the campus that this batch is associated with.
            </summary>
            <value>
            The <see cref="T:Rock.Model.Campus"/> that the batch is associated with.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialBatch.Transactions">
            <summary>
            Gets or sets a collection that contains the <see cref="T:Rock.Model.FinancialTransaction">FinancialTransactions</see> that are 
            included in the batch.
            </summary>
            <value>
            A collection that contains the <see cref="T:Rock.Model.FinancialTransaction">FinancialTransactions</see> that are included in the batch.
            </value>
        </member>
        <member name="T:Rock.Model.FinancialBatchConfiguration">
            <summary>
            Batch Configuration class.
            </summary>
        </member>
        <member name="M:Rock.Model.FinancialBatchConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.FinancialBatchConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Rock.Model.BatchStatus">
            <summary>
            The status of a batch
            </summary>
        </member>
        <member name="F:Rock.Model.BatchStatus.Pending">
            <summary>
            Pending
            In the process of scanning the checks to it
            </summary>
        </member>
        <member name="F:Rock.Model.BatchStatus.Open">
            <summary>
            Open
            Transactions are all entered and are ready to be matched
            </summary>
        </member>
        <member name="F:Rock.Model.BatchStatus.Closed">
            <summary>
            Closed
            All is well and good
            </summary>
        </member>
        <member name="T:Rock.Model.FinancialAccount">
            <summary>
            Represents an account or a fund that gifts/donations and other <see cref="T:Rock.Model.FinancialTransaction">Financial Transactions</see> are posted to.  
            FinancialAccounts are hierarchical and are orderable.
            </summary>
        </member>
        <member name="M:Rock.Model.FinancialAccount.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this FinancialAccount.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this FinancialAccount.
            </returns>
        </member>
        <member name="P:Rock.Model.FinancialAccount.ParentAccountId">
            <summary>
            Gets or sets the FinancialAccountId of the parent FinancialAccount to this FinancialAccount. If this
            FinancialAccount does not have a parent, this property will be null.
            </summary>
            <value>
            A <see cref="T:System.Int32"/> representing the FinancialAccountId of the parent FinancialAccount to this FinancialAccount. 
            This property will be null if the FinancialAccount does not have a parent.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialAccount.CampusId">
            <summary>
            Gets or sets the CampusId of the <see cref="T:Rock.Model.Campus"/> that this FinancialAccount is associated with. If this FinancialAccount is not
            associated with a <see cref="T:Rock.Model.Campus"/> this property will be null.
            </summary>
            <value>
            A <see cref="T:System.Int32"/> representing the CampusId of the <see cref="T:Rock.Model.Campus"/> that the FinancialAccount is associated with.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialAccount.Name">
            <summary>
            Gets or sets the (internal) Name of the FinancialAccount. This property is required.
            </summary>
            <value>
            A <see cref="T:System.String"/> representing the (internal) name of the FinancialAccount.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialAccount.PublicName">
            <summary>
            Gets or sets the public name of the Financial Account.
            </summary>
            <value>
            A <see cref="T:System.String"/> that represents the public name of the FinancialAccount.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialAccount.Description">
            <summary>
            Gets or sets the user defined description of the FinancialAccount.
            </summary>
            <value>
            A <see cref="T:System.String"/> representing the user defined description of the FinancialAccount.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialAccount.IsTaxDeductible">
            <summary>
            Gets or sets a flag indicating if transactions posted to this FinancialAccount are tax-deductible.
            </summary>
            <value>
            A <see cref="T:System.Boolean"/> that is <c>true</c> if transactions posted to this FinancialAccount are tax-deductible; otherwise <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialAccount.GlCode">
            <summary>
            Gets or sets the General Ledger account code for this FinancialAccount.
            </summary>
            <value>
            A <see cref="T:System.String"/> representing the General Ledger account code for this FinancialAccount.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialAccount.Order">
            <summary>
            Gets or sets the sort and display order of the FinancialAccount.  This is an ascending order, so the lower the value the higher the sort priority.
            </summary>
            <value>
            A <see cref="T:System.Int32"/> representing the sort order of the FinancialAccount.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialAccount.IsActive">
            <summary>
            Gets or sets a value indicating if this FinancialAccount is active.
            </summary>
            <value>
             A <see cref="T:System.Boolean"/> that is <c>true</c> if this FinancialAccount is active, otherwise <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialAccount.StartDate">
            <summary>
            Gets or sets the opening date for this FinancialAccount. This is the first date that transactions can be posted to this account. 
            If there isn't a start date for this account, transactions can be posted as soon as the account is created until the <see cref="P:Rock.Model.FinancialAccount.EndDate"/> (if applicable).
            </summary>
            <value>
            A <see cref="T:System.DateTime"/> representing the first day that transactions can posted to this account. If there is no start date, this property will be null.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialAccount.EndDate">
            <summary>
            Gets or sets the closing/end date for this FinancialAccount. This is the last day that transactions can be posted to this account. If there is not a end date
            for this account, transactions can be posted for an indefinite period of time.  Ongoing FinancialAccounts will not have an end date.
            </summary>
            <value>
            A <see cref="T:System.DateTime"/> representing the closing/end date for this FinancialAccounts. Transactions can be posted to this account until this date.  If this is 
            an ongoing account, this property will be null.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialAccount.AccountTypeValueId">
            <summary>
            Gets or sets the DefinedValueId of the <see cref="T:Rock.Model.DefinedValue"/> that represents the FinancialAccountType for this FinancialAccount.
            </summary>
            <value>
            A <see cref="T:System.Int32"/> representing DefinedValueId of the FinancialAccountType's <see cref="T:Rock.Model.DefinedValue"/> for this FinancialAccount.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialAccount.ParentAccount">
            <summary>
            Gets or sets the parent FinancialAccount.
            </summary>
            <value>
            A <see cref="T:System.String"/> representing the parent FinancialAccount.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialAccount.Campus">
            <summary>
            Gets or sets the campus that this FinancialAccount is associated with.
            </summary>
            <value>
            the <see cref="T:Rock.Model.Campus"/> that this FinancialAccount is associated with.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialAccount.AccountTypeValue">
            <summary>
            Gets or sets the Account Type <see cref="T:Rock.Model.DefinedValue"/> for this FinancialAccount.
            </summary>
            <value>
            The <see cref="T:Rock.Model.DefinedValue"/> that represents the AccountType for this FinancialAccount.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialAccount.ChildAccounts">
            <summary>
            Gets or sets a collection containing the FinancialAccounts that are sub accounts/child accounts of this account.  This is not a recursive search.
            </summary>
            <value>
            A collection containing all FinancialAccoutns that are sub accounts/child accounts of this account.
            </value>
        </member>
        <member name="T:Rock.Model.FinancialAccountConfiguration">
            <summary>
            Fund Configuration class.
            </summary>
        </member>
        <member name="M:Rock.Model.FinancialAccountConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.FinancialAccountConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Rock.Model.FinancialPledge">
            <summary>
            Represents a financial pledge that an individual has made to be given to the specified <see cref="T:Rock.Model.FinancialAccount"/>/fund.  This includes
            the fund that the pledge is directed to, the amount, the pledge frequency and the time period for the pledge.
            </summary>
        </member>
        <member name="M:Rock.Model.FinancialPledge.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this pledge.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this pledge.
            </returns>
        </member>
        <member name="P:Rock.Model.FinancialPledge.PersonId">
            <summary>
            Gets or sets the PersonId of the <see cref="T:Rock.Model.Person"/> who made the pledge.
            </summary>
            <value>
            A <see cref="T:System.Int32"/> representing the PersonId of the <see cref="T:Rock.Model.Person"/> who made the pledge.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialPledge.AccountId">
            <summary>
            Gets or sets the AccountId of the <see cref="T:Rock.Model.FinancialAccount"/> that the pledge is directed toward.
            </summary>
            <value>
            A <see cref="T:System.Int32"/> representing the AccountId of the <see cref="T:Rock.Model.FinancialAccount"/> that the pledge is directed toward.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialPledge.TotalAmount">
            <summary>
            Gets or sets the pledge amount that is promised to be given at the specified <see cref="P:Rock.Model.FinancialPledge.PledgeFrequencyValue"/>.
            </summary>
            <value>
            A <see cref="T:System.Decimal"/> representing the amount to be pledged at the specified frequency.
            </value>
            <remarks>
            An example is that a person pledges $100.00 to be given monthly for the next year. This value will be $100.00 and the grand total of the pledge would be $1,200.00
            </remarks>
        </member>
        <member name="P:Rock.Model.FinancialPledge.PledgeFrequencyValueId">
            <summary>
            Gets or sets the DefinedValueId of the pledge frequency <see cref="T:Rock.Model.DefinedValue"/> representing how often the pledgor is promising to give the pledge amount.
            </summary>
            <value>
            A <see cref="T:System.Int32"/> representing the pledge frequency <see cref="T:Rock.Model.DefinedValue"/>.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialPledge.StartDate">
            <summary>
            Gets or sets the start date of the pledge period.
            </summary>
            <value>
            A <see cref="T:System.DateTime"/> representing the start date of the pledge period.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialPledge.EndDate">
            <summary>
            Gets or sets the end date of the pledge period.
            </summary>
            <value>
            A <see cref="T:System.DateTime"/> representing the end date of the pledge period.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialPledge.Person">
            <summary>
            Gets or sets the <see cref="T:Rock.Model.Person"/> who is making the pledge.
            </summary>
            <value>
            The <see cref="T:Rock.Model.Person"/> who is making the pledge.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialPledge.Account">
            <summary>
            Gets or sets the <see cref="T:Rock.Model.FinancialAccount"/> or fund that the pledge is being directed toward.
            </summary>
            <value>
            The <see cref="T:Rock.Model.FinancialAccount"/> or fund that the pledge is being directed toward.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialPledge.PledgeFrequencyValue">
            <summary>
            Gets or sets the pledge frequency <see cref="T:Rock.Model.DefinedValue"/>. This is how often the <see cref="T:Rock.Model.Person"/> who is 
            making the pledge promises to give the <see cref="P:Rock.Model.FinancialPledge.TotalAmount"/>
            </summary>
            <value>
            The frequency of the pledge
            </value>
        </member>
        <member name="T:Rock.Model.FinancialPledgeConfiguration">
            <summary>
            Pledge Configuration class.
            </summary>
        </member>
        <member name="M:Rock.Model.FinancialPledgeConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.FinancialPledgeConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Rock.Model.FinancialTransaction">
            <summary>
            Represents a financial transaction in Rock.  This class implements the <c>FinancialTransactionBase</c> base class.
            </summary>
        </member>
        <member name="T:Rock.Model.FinancialTransactionBase`1">
            <summary>
            An abstracted base class for FinancialTransaction so that we can have child classes like <see cref="T:Rock.Model.FinancialTransactionRefund"/>.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Rock.Model.FinancialTransactionBase`1.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this transaction.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this transaction.
            </returns>
        </member>
        <member name="P:Rock.Model.FinancialTransactionBase`1.AuthorizedPersonId">
            <summary>
            Gets or sets the PersonId of the <see cref="T:Rock.Model.Person"/> who authorized the transaction. In the event of a gift this would be
            the giver; in the event of a purchase this would be the purchaser.
            </summary>
            <value>
            A <see cref="T:System.Int32"/> representing the PersonId of the <see cref="T:Rock.Model.Person"/> who authorized the transaction.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialTransactionBase`1.BatchId">
            <summary>
            Gets or sets BatchId of the <see cref="T:Rock.Model.FinancialBatch"/> that contains this transaction.
            </summary>
            <value>
            A <see cref="T:System.Int32"/> representing the BatchId of the <see cref="T:Rock.Model.FinancialBatch"/> that contains the transaction.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialTransactionBase`1.GatewayEntityTypeId">
            <summary>
            Gets or sets EntityTypeId of the <see cref="T:Rock.Model.EntityType"/> for the financial gateway (service) that processed this transaction.
            </summary>
            <value>
            A <see cref="T:System.Int32"/> representing the EntityTypeId of the <see cref="T:Rock.Model.EntityType"/> for the financial gateway (service) that processed this transaction.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialTransactionBase`1.TransactionDateTime">
            <summary>
            Gets or sets date and time that the transaction occurred. This is the local server time.
            </summary>
            <value>
            A <see cref="T:System.DateTime"/> representing the time that the transaction occurred. This is the local server time.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialTransactionBase`1.TransactionCode">
            <summary>
            Gets or sets the transaction code for the transaction.
            </summary>
            <value>
            A <see cref="T:System.String"/> representing the transaction code of the transaction.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialTransactionBase`1.Summary">
            <summary>
            Gets or sets a summary of the transaction.
            </summary>
            <value>
            A <see cref="T:System.String"/> representing a summary of the transaction.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialTransactionBase`1.TransactionTypeValueId">
            <summary>
            Gets or sets the DefinedValueId of the TransactionType <see cref="T:Rock.Model.DefinedValue"/> indicating
            the type of the transaction.
            </summary>
            <value>
            A <see cref="T:System.Int32"/> representing the DefinedValueId of the TransactionType <see cref="T:Rock.Model.DefinedValue"/> for this transaction.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialTransactionBase`1.CurrencyTypeValueId">
            <summary>
            Gets or sets the DefinedValueId of the currency type <see cref="T:Rock.Model.DefinedValue"/> indicating the currency that the
            transaction was made in.
            </summary>
            <value>
            A <see cref="T:System.Int32"/> representing the DefinedValueId of the CurrencyType <see cref="T:Rock.Model.DefinedValue"/> for this transaction.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialTransactionBase`1.CreditCardTypeValueId">
            <summary>
            Gets or sets the DefinedValueId of the credit card type <see cref="T:Rock.Model.DefinedValue"/> indicating the credit card brand/type that was used
            to make this transaction. This value will be null for transactions that were not made by credit card.
            </summary>
            <value>
            A <see cref="T:System.Int32"/> representing the DefinedValueId of the credit card type <see cref="T:Rock.Model.DefinedValue"/> that was used to make this transaction.
            This value value will be null for transactions that were not made by credit card.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialTransactionBase`1.SourceTypeValueId">
            <summary>
            Gets or sets the DefinedValueId of the source type <see cref="T:Rock.Model.DefinedValue"/> for this transaction. Representing the source (method) of this transaction.
            </summary>
            <value>
            A <see cref="T:System.Int32"/> representing the DefinedValueId of the source type <see cref="T:Rock.Model.DefinedValue"/> for this transaction.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialTransactionBase`1.CheckMicrEncrypted">
            <summary>
            Gets or sets an encrypted version of a scanned check's MICR information.
            Plain Text format is {routingnumber}_{accountnumber}_{checknumber}
            </summary>
            <value>
            The check micr encrypted.
            A <see cref="T:System.String"/> representing an encrypted version of a scanned check's MICR information.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialTransactionBase`1.ScheduledTransactionId">
            <summary>
            Gets or sets the ScheduledTransactionId of the <see cref="T:Rock.Model.FinancialScheduledTransaction"/> that triggered
            this transaction. If this was an ad-hoc/on demand transaction, this property will be null.
            </summary>
            <value>
            A <see cref="T:System.Int32"/> representing the ScheduledTransactionId of the <see cref="T:Rock.Model.FinancialScheduledTransaction"/>
            </value>
        </member>
        <member name="P:Rock.Model.FinancialTransactionBase`1.AuthorizedPerson">
            <summary>
            Gets or sets the the <see cref="T:Rock.Model.Person"/> who authorized the transaction. For a gift this is a the giver, for a purchase this is the purchaser.
            </summary>
            <value>
            The <see cref="T:Rock.Model.Person"/> who authorized the transaction.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialTransactionBase`1.Batch">
            <summary>
            Gets or sets the <see cref="T:Rock.Model.FinancialBatch"/> that contains the transaction.
            </summary>
            <value>
            A <see cref="T:Rock.Model.FinancialBatch"/> that contains the transaction.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialTransactionBase`1.GatewayEntityType">
            <summary>
            Gets or sets the <see cref="T:Rock.Model.EntityType"/> of the Payment Gateway service that was used to process this transaction.
            </summary>
            <value>
            The <see cref="T:Rock.Model.EntityType"/> of the payment gateway service that was used.  If this was not an electronic transaction, this value will be null.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialTransactionBase`1.TransactionTypeValue">
            <summary>
            Gets or sets the transaction type <see cref="T:Rock.Model.DefinedValue"/> indicating the type of transaction that occurred.
            </summary>
            <value>
            A <see cref="T:Rock.Model.DefinedValue"/> indicating the type of transaction that occurred.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialTransactionBase`1.CurrencyTypeValue">
            <summary>
            Gets or sets the currency type <see cref="T:Rock.Model.DefinedValue"/> indicating the type of currency that was used for this
            transaction.
            </summary>
            <value>
            A <see cref="T:Rock.Model.DefinedValue"/> indicating the type of currency that was used for the transaction.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialTransactionBase`1.CreditCardTypeValue">
            <summary>
            Gets or sets the credit card type <see cref="T:Rock.Model.DefinedValue"/> indicating the type of credit card that was used for this transaction.
            If this was not a credit card based transaction, this value will be null.
            </summary>
            <value>
            A <see cref="T:Rock.Model.DefinedValue"/> indicating the type of credit card that was used for this transaction. This value is null
            for transactions that were not made by credit card.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialTransactionBase`1.SourceTypeValue">
            <summary>
            Gets or sets the source type <see cref="T:Rock.Model.DefinedValue"/> indicating where the transaction originated from; the source of the transaction.
            </summary>
            <value>
            A <see cref="T:Rock.Model.DefinedValue"/> indicating where the transaction originated from; the source of the transaction.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialTransactionBase`1.Refund">
            <summary>
            Gets or sets the <see cref="T:Rock.Model.FinancialTransactionRefund">refund</see> transaction that is associated with this transaction. If this transaction is not a refund transaction this value will be null.
            </summary>
            <value>
            The <see cref="T:Rock.Model.FinancialTransactionRefund">refund transaction</see> associated with this transaction. This will be null if the transaction
            is not a refund transaction.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialTransactionBase`1.ScheduledTransaction">
            <summary>
            Gets or sets the <see cref="T:Rock.Model.FinancialScheduledTransaction">Scheduled Transaction</see> that initiated this transaction.
            </summary>
            <value>
            The <see cref="T:Rock.Model.FinancialScheduledTransaction"/> that initiated this transaction.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialTransactionBase`1.TransactionDetails">
            <summary>
            Gets or sets the <see cref="T:Rock.Model.FinancialTransactionDetail">Transaction Detail</see> line items for this transaction.
            </summary>
            <value>
            A collection containing the <see cref="T:Rock.Model.FinancialTransactionDetail"/> line items for this transaction.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialTransactionBase`1.Images">
            <summary>
            Gets or sets a collection containing any <see cref="T:Rock.Model.FinancialTransactionImage">images</see> associated with this transaction. An example of this
            would be a scanned image of a check.
            </summary>
            <value>
            A collection of <see cref="T:Rock.Model.FinancialTransactionImage">FinancialTransactionImages</see> associated with this transaction.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialTransactionBase`1.TotalAmount">
            <summary>
            Gets the total amount.
            </summary>
            <value>
            The total amount.
            </value>
        </member>
        <member name="T:Rock.Model.FinancialTransactionScannedCheck">
            <summary>
            Special Class to use when uploading a FinancialTransaction from a Scanned Check thru the Rest API.
            The Rest Client can't be given access to the DataEncryptionKey, so they'll upload it (using SSL)
            with the plain text CheckMicr and the Rock server will encrypt prior to saving to database
            </summary>
        </member>
        <member name="P:Rock.Model.FinancialTransactionScannedCheck.ScannedCheckMicr">
            <summary>
            Gets or sets the scanned check MICR.
            </summary>
            <value>
            The scanned check MICR.
            </value>
        </member>
        <member name="T:Rock.Model.FinancialTransactionConfiguration">
            <summary>
            Transaction Configuration class.
            </summary>
        </member>
        <member name="M:Rock.Model.FinancialTransactionConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.FinancialTransactionConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Rock.Model.FinancialTransactionDetail">
            <summary>
            Represents a transaction detail line item for a <see cref="T:Rock.Model.FinancialTransaction"/> in Rock.
            </summary>
        </member>
        <member name="M:Rock.Model.FinancialTransactionDetail.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this detail item.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this detail item.
            </returns>
        </member>
        <member name="P:Rock.Model.FinancialTransactionDetail.TransactionId">
            <summary>
            Gets or sets the TransactionId of the <see cref="T:Rock.Model.FinancialTransaction"/> that this 
            detail item is a part of.
            </summary>
            <value>
            A <see cref="T:System.Int32"/> representing the TransactionDetailId of the <see cref="T:Rock.Model.FinancialTransaction"/>
            that this detail item is a part of.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialTransactionDetail.AccountId">
            <summary>
            Gets or sets the AccountId of the <see cref="T:Rock.Model.FinancialAccount"/>/fund that the <see cref="P:Rock.Model.FinancialTransactionDetail.Amount"/> of this 
            detail line item should be credited towards.
            </summary>
            <value>
            A <see cref="T:System.Int32"/> representing the <see cref="T:Rock.Model.FinancialAccount"/>/fund that is affected by this
            transaction detail.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialTransactionDetail.IsNonCash">
            <summary>
            Gets or sets a value indicating whether this is a non-cash detail.
            </summary>
            <value>
              <c>true</c> if non-cash; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialTransactionDetail.Amount">
            <summary>
            Gets or sets the amount of the transaction detail.
            </summary>
            <value>
            A <see cref="T:System.Decimal"/> representing the amount of the transaction detail.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialTransactionDetail.Summary">
            <summary>
            Gets or sets the summary of the transaction detail.
            </summary>
            <value>
            A <see cref="T:System.String"/> representing the summary of the transaction detail.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialTransactionDetail.EntityTypeId">
            <summary>
            Gets or sets the entity.
            </summary>
            <value>
            The entity.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialTransactionDetail.EntityId">
            <summary>
            Gets or sets the entity id.
            </summary>
            <value>
            The entity id.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialTransactionDetail.Transaction">
            <summary>
            Gets or sets the <see cref="T:Rock.Model.FinancialTransaction"/> that this detail item belongs to.
            </summary>
            <value>
            The <see cref="T:Rock.Model.FinancialTransaction"/> that this detail item belongs to.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialTransactionDetail.Account">
            <summary>
            Gets or sets the <see cref="T:Rock.Model.FinancialAccount"/> that is affected by this detail line item.
            </summary>
            <value>
            The <see cref="T:Rock.Model.FinancialAccount"/> that is affected by this detail line item.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialTransactionDetail.EntityType">
            <summary>
            Gets or sets the type of the entity.
            </summary>
            <value>
            The type of the entity.
            </value>
        </member>
        <member name="T:Rock.Model.FinancialTransactionDetailConfiguration">
            <summary>
            TransactionDetail Configuration class
            </summary>
        </member>
        <member name="M:Rock.Model.FinancialTransactionDetailConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.FinancialTransactionDetailConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Rock.Model.Group">
            <summary>
            Represents A collection of <see cref="T:Rock.Model.Person"/> entities. This can be a family, small group, Bible study, security group,  etc. Groups can be hierarchical.
            </summary>
            <remarks>
            In Rock any collection or defined subset of people are considered a group.
            </remarks>
        </member>
        <member name="M:Rock.Model.Group.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> containing the Name of the Group that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> containing the Name of the Group that represents this instance.
            </returns>
        </member>
        <member name="P:Rock.Model.Group.IsSystem">
            <summary>
            Gets or sets a flag indicating if this Group is a part of the Rock core system/framework. This property is required.
            </summary>
            <value>
            A <see cref="T:System.Boolean"/> value that is <c>true</c> if this Group is part of the Rock core system/framework; otherwise <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Model.Group.ParentGroupId">
            <summary>
            Gets or sets the Id of the Group's Parent Group.
            </summary>
            <value>
            An <see cref="T:System.Int32"/> representing the Id of the Group's Parent Group.
            </value>
        </member>
        <member name="P:Rock.Model.Group.GroupTypeId">
            <summary>
            Gets or sets the Id of the <see cref="T:Rock.Model.GroupType"/> that this Group is a member belongs to. This property is required.
            </summary>
            <value>
            An <see cref="T:System.Int32"/> representing the Id of the <see cref="T:Rock.Model.GroupType"/> that this group is a member of.
            </value>
        </member>
        <member name="P:Rock.Model.Group.CampusId">
            <summary>
            Gets or sets the Id of the <see cref="T:Rock.Model.Campus"/> that this Group is associated with.
            </summary>
            <value>
            A <see cref="T:System.Int32"/> representing the Id of the <see cref="T:Rock.Model.Campus"/> that the Group is associated with. If the group is not 
            associated with a campus, this value is null.
            </value>
        </member>
        <member name="P:Rock.Model.Group.Name">
            <summary>
            Gets or sets the Name of the Group. This property is required.
            </summary>
            <value>
            A <see cref="T:System.String"/> representing the name of the Group. 
            </value>
        </member>
        <member name="P:Rock.Model.Group.Description">
            <summary>
            Gets or sets the optional description of the group.
            </summary>
            <value>
            A <see cref="T:System.String"/> representing the description of the group.
            </value>
        </member>
        <member name="P:Rock.Model.Group.IsSecurityRole">
            <summary>
            Gets or sets a flag indicating if this Group is a Security Role. This value is required.
            </summary>
            <value>
            A <see cref="T:System.Boolean"/> value that is <c>true</c> if this Group is a security role, otherwise <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Model.Group.IsActive">
            <summary>
            Gets or sets a flag indicating if this is an active group. This value is required.
            </summary>
            <value>
            A <see cref="T:System.Boolean"/> value that is <c>true</c> if this group is active, otherwise <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Model.Group.Order">
            <summary>
            Gets or sets the display order of the group in the group list and group hierarchy. The lower the number the higher the 
            display priority this group has. This property is required.
            </summary>
            <value>
            A <see cref="T:System.Int32"/> representing the display order of the group.
            </value>
        </member>
        <member name="P:Rock.Model.Group.ParentGroup">
            <summary>
            Gets or sets this parent Group of this Group.
            </summary>
            <value>
            A <see cref="T:Rock.Model.Group"/> representing the Group's parent group. If this Group does not have a parent, the value will be null.
            </value>
        </member>
        <member name="P:Rock.Model.Group.GroupType">
            <summary>
            Gets or sets the <see cref="T:Rock.Model.GroupType"/> that this Group is a member of.
            </summary>
            <value>
            The <see cref="T:Rock.Model.GroupType"/> that this Group is a member of.
            </value>
        </member>
        <member name="P:Rock.Model.Group.Campus">
            <summary>
            Gets or sets the <see cref="T:Rock.Model.Campus"/> that this Group is associated with.
            </summary>
            <value>
            The <see cref="T:Rock.Model.Campus"/> that this Group is associated with.
            </value>
        </member>
        <member name="P:Rock.Model.Group.Groups">
            <summary>
            Gets or sets a collection the Groups that are children of this group.
            </summary>
            <value>
            A collection of Groups that are children of this group.
            </value>
        </member>
        <member name="P:Rock.Model.Group.Members">
            <summary>
            Gets or sets a collection containing the <see cref="T:Rock.Model.GroupMember">GroupMembers</see> who are associated with the Group.
            </summary>
            <value>
            A collection of <see cref="T:Rock.Model.GroupMember">GroupMembers</see> who are associated with the Group.
            </value>
        </member>
        <member name="P:Rock.Model.Group.GroupLocations">
            <summary>
            Gets or Sets the <see cref="T:Rock.Model.GroupLocation">GroupLocations</see> that are associated with the Group.
            </summary>
            <value>
            The <see cref="T:Rock.Model.GroupLocation">GroupLocations</see> that are associated with the Group.
            </value>
        </member>
        <member name="P:Rock.Model.Group.ParentAuthority">
            <summary>
            Gets the securable object that security permissions should be inherited from.  If block is located on a page
            security will be inherited from the page, otherwise it will be inherited from the site.
            </summary>
            <value>
            The parent authority. If the block is located on the page, security will be
            inherited from the page, otherwise it will be inherited from the site.
            </value>
        </member>
        <member name="T:Rock.Model.GroupConfiguration">
            <summary>
            Group Configuration class.
            </summary>
        </member>
        <member name="M:Rock.Model.GroupConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.GroupConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Rock.Model.GroupParentCircularReferenceException">
            <summary>
            Represents a circular reference exception. This occurs when a group is set as a parent of a group that is higher in the group hierarchy. 
            </summary>
            <remarks>
             An example of this is when a child group is set as the parent of it's parent group.
            </remarks>
        </member>
        <member name="M:Rock.Model.GroupParentCircularReferenceException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.GroupParentCircularReferenceException"/> class.
            </summary>
        </member>
        <member name="T:Rock.Model.GroupTypeRoleService">
            <summary>
            GroupTypeRole Service class
            </summary>
            <summary>
            The data access/service class for <see cref="T:Rock.Model.GroupTypeRole"/> entity object types.
            </summary>
        </member>
        <member name="M:Rock.Model.GroupTypeRoleService.#ctor(Rock.Data.RockContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.GroupTypeRoleService"/> class
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Rock.Model.GroupTypeRoleService.CanDelete(Rock.Model.GroupTypeRole,System.String@)">
            <summary>
            Determines whether this instance can delete the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="errorMessage">The error message.</param>
            <returns>
              <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Rock.Model.GroupTypeRoleService.GetBySortOrder(System.Nullable{System.Int32})">
            <summary>
            Returns an enumerable collection of <see cref="T:Rock.Model.GroupTypeRole">GroupRoles</see> by SortOrder.
            </summary>
            <param name="sortOrder">A <see cref="T:System.Int32"/> representing the SortOrder to search by. This value can be null.</param>
            <returns>An enumerable collection of <see cref="T:Rock.Model.GroupTypeRole"/> with a SortOrder that matches the provided value.</returns>
        </member>
        <member name="M:Rock.Model.GroupTypeRoleService.GetByGroupTypeId(System.Int32)">
            <summary>
            Gets the by group type identifier.
            </summary>
            <param name="groupTypeId">The group type identifier.</param>
            <returns></returns>
        </member>
        <member name="T:Rock.Model.GroupTypeRoleExtensionMethods">
            <summary>
            Generated Extension Methods
            </summary>
        </member>
        <member name="M:Rock.Model.GroupTypeRoleExtensionMethods.Clone(Rock.Model.GroupTypeRole,System.Boolean)">
            <summary>
            Clones this GroupTypeRole object to a new GroupTypeRole object
            </summary>
            <param name="source">The source.</param>
            <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.GroupTypeRoleExtensionMethods.CopyPropertiesFrom(Rock.Model.GroupTypeRole,Rock.Model.GroupTypeRole)">
            <summary>
            Copies the properties from another GroupTypeRole object to this GroupTypeRole object
            </summary>
            <param name="target">The target.</param>
            <param name="source">The source.</param>
        </member>
        <member name="T:Rock.Model.GroupService">
            <summary>
            Group Service class
            </summary>
            <summary>
            Data access/service class for <see cref="T:Rock.Model.Group"/> objects.
            </summary>
        </member>
        <member name="M:Rock.Model.GroupService.#ctor(Rock.Data.RockContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.GroupService"/> class
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Rock.Model.GroupService.CanDelete(Rock.Model.Group,System.String@)">
            <summary>
            Determines whether this instance can delete the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="errorMessage">The error message.</param>
            <returns>
              <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Rock.Model.GroupService.GetByGroupTypeId(System.Int32)">
            <summary>
            Returns an enumerable collection of <see cref="T:Rock.Model.Group"/> entities that by their <see cref="T:Rock.Model.GroupType"/> Id.
            </summary>
            <param name="groupTypeId">An <see cref="T:System.Int32"/> representing the Id of the <see cref="T:Rock.Model.GroupType"/> that they belong to.</param>
            <returns>An enumerable collection of <see cref="T:Rock.Model.Group">Groups</see> belong to a specific <see cref="T:Rock.Model.GroupType"/>.</returns>
        </member>
        <member name="M:Rock.Model.GroupService.GetByGuid(System.Guid)">
            <summary>
            Returns the <see cref="T:Rock.Model.Group"/> containing a Guid property that matches the provided value.
            </summary>
            <param name="guid">A <see cref="T:System.Guid"/> to find a <see cref="T:Rock.Model.Group"/> by.</param>
            <returns>The <see cref="T:Rock.Model.Group"/> who's Guid property matches the provided value.  If no match is found, returns null.</returns>
        </member>
        <member name="M:Rock.Model.GroupService.GetByIsSecurityRole(System.Boolean)">
            <summary>
            Returns an enumerable collection of <see cref="T:Rock.Model.Group">Groups</see> by their IsSecurityRole flag.
            </summary>
            <param name="isSecurityRole">A <see cref="T:System.Boolean"/> representing the IsSecurityRole flag value to search by.</param>
            <returns>An enumerable collection of <see cref="T:Rock.Model.Group">Groups</see> that contains a IsSecurityRole flag that matches the provided value.</returns>
        </member>
        <member name="M:Rock.Model.GroupService.GetByParentGroupId(System.Nullable{System.Int32})">
            <summary>
            Returns a collection of <see cref="T:Rock.Model.Group">Groups</see> by the Id of it's parent <see cref="T:Rock.Model.Group"/>. 
            </summary>
            <param name="parentGroupId">A <see cref="T:System.Int32"/> representing the Id of the parent <see cref="T:Rock.Model.Group"/> to search by. This value
            is nullable and a null value will search for <see cref="T:Rock.Model.Group">Groups</see> that do not inherit from other groups.</param>
            <returns>An enumerable collection of <see cref="T:Rock.Model.Group">Groups</see> who's ParentGroupId matches the provided value.</returns>
        </member>
        <member name="M:Rock.Model.GroupService.GetByParentGroupIdAndName(System.Nullable{System.Int32},System.String)">
            <summary>
            Returns an enumerable collection of <see cref="T:Rock.Model.Group">Groups</see> by the Id of their parent <see cref="T:Rock.Model.Group"/> and by the Group's name.
            </summary>
            <param name="parentGroupId">An <see cref="T:System.Int32"/> representing the Id of the parent <see cref="T:Rock.Model.Group"/> to search by.</param>
            <param name="name">A <see cref="T:System.String"/> containing the Name of the <see cref="T:Rock.Model.Group"/> to search by.</param>
            <returns>An enumerable collection of <see cref="T:Rock.Model.Group">Groups</see> who's ParentGroupId and Name matches the provided values.</returns>
        </member>
        <member name="M:Rock.Model.GroupService.GetNavigationChildren(System.Int32,System.Int32,System.Boolean,System.String)">
            <summary>
            Gets the navigation children.
            </summary>
            <param name="id">The identifier.</param>
            <param name="rootGroupId">The root group identifier.</param>
            <param name="limitToSecurityRoleGroups">if set to <c>true</c> [limit to security role groups].</param>
            <param name="groupTypeIds">The group type ids.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.GroupService.GetAllDescendents(System.Int32)">
            <summary>
            Returns an enumerable collection of <see cref="T:Rock.Model.Group">Groups</see> that are descendants of a specified group.
            </summary>
            <param name="parentGroupId">An <see cref="T:System.Int32"/> representing the Id of the <see cref="T:Rock.Model.Group"/> to retrieve descendants for.</param>
            <returns>An enumerable collection of <see cref="T:Rock.Model.Group">Groups</see> that are descendants of referenced group.</returns>
        </member>
        <member name="M:Rock.Model.GroupService.SaveNewFamily(Rock.Data.RockContext,Rock.Model.Person,System.Nullable{System.Int32},System.Boolean)">
            <summary>
            Adds the person to a new family record
            </summary>
            <param name="rockContext">The rock context.</param>
            <param name="person">The person.</param>
            <param name="campusId">The campus identifier.</param>
            <param name="savePersonAttributes">if set to <c>true</c> [save person attributes].</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.GroupService.SaveNewFamily(Rock.Data.RockContext,System.Collections.Generic.List{Rock.Model.GroupMember},System.Nullable{System.Int32},System.Boolean)">
            <summary>
            Saves the new family.
            </summary>
            <param name="rockContext">The rock context.</param>
            <param name="familyMembers">The family members.</param>
            <param name="campusId">The campus identifier.</param>
            <param name="savePersonAttributes">if set to <c>true</c> [save person attributes].</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.GroupService.AddNewFamilyAddress(Rock.Data.RockContext,Rock.Model.Group,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Adds the new family address.
            </summary>
            <param name="rockContext">The rock context.</param>
            <param name="family">The family.</param>
            <param name="locationTypeGuid">The location type unique identifier.</param>
            <param name="street1">The street1.</param>
            <param name="street2">The street2.</param>
            <param name="city">The city.</param>
            <param name="state">The state.</param>
            <param name="zip">The zip.</param>
        </member>
        <member name="M:Rock.Model.GroupService.Delete(Rock.Model.Group)">
            <summary>
            Deletes a specified group. Returns a boolean flag indicating if the deletion was successful.
            </summary>
            <param name="item">The <see cref="T:Rock.Model.Group"/> to delete.</param>
            <returns>
            A <see cref="T:System.Boolean"/> that indicates if the <see cref="T:Rock.Model.Group"/> was deleted successfully.
            </returns>
        </member>
        <member name="T:Rock.Model.GroupExtensionMethods">
            <summary>
            Generated Extension Methods
            </summary>
        </member>
        <member name="M:Rock.Model.GroupExtensionMethods.Clone(Rock.Model.Group,System.Boolean)">
            <summary>
            Clones this Group object to a new Group object
            </summary>
            <param name="source">The source.</param>
            <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.GroupExtensionMethods.CopyPropertiesFrom(Rock.Model.Group,Rock.Model.Group)">
            <summary>
            Copies the properties from another Group object to this Group object
            </summary>
            <param name="target">The target.</param>
            <param name="source">The source.</param>
        </member>
        <member name="T:Rock.Model.GroupTypeRole">
            <summary>
            Represents a role that a <see cref="T:Rock.Model.GroupMember"/> can have in a <see cref="T:Rock.Model.Group"/>.  In Rock each member of a group has one 
            or more <see cref="T:Rock.Model.GroupTypeRole">GroupRoles</see> assigned to them (for instance the leader of a group can have both a leader and member role). Examples
            of roles include leader, member, team leader, coach, host, etc.
            </summary>
        </member>
        <member name="M:Rock.Model.GroupTypeRole.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> containing Name of the GroupRole that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> containing the Name of the GroupRole that represents this instance.
            </returns>
        </member>
        <member name="P:Rock.Model.GroupTypeRole.IsSystem">
            <summary>
            Gets or sets a flag indicating if this GroupRole is part of the Rock core system/framework. This property is required.
            </summary>
            <value>
            A <see cref="T:System.Boolean"/> value that is <c>true</c> if this GroupRole is part of the Rock core system/framework; otherwise <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Model.GroupTypeRole.GroupTypeId">
            <summary>
            Gets or sets the Id of the <see cref="T:Rock.Model.GroupType"/> that this GroupRole belongs to. This property is required.
            </summary>
            <value>
            An <see cref="T:System.Int32"/> representing the Id of the <see cref="T:Rock.Model.GroupType"/> that this GroupRole belongs to.
            </value>
        </member>
        <member name="P:Rock.Model.GroupTypeRole.Name">
            <summary>
            Gets or sets the Name of the GroupRole. This property is required.
            </summary>
            <value>
            A <see cref="T:System.String"/> representing the Name of the GroupRole.
            </value>
        </member>
        <member name="P:Rock.Model.GroupTypeRole.Description">
            <summary>
            Gets or sets the user defined description of the GroupRole. This property is required.
            </summary>
            <value>
            A <see cref="T:System.String"/> representing the user defined description of the GroupRole.
            </value>
        </member>
        <member name="P:Rock.Model.GroupTypeRole.Order">
            <summary>
            Gets or sets the sort order position of the GroupRole.  The lower the SortOrder the higher the GroupRole shows in lists/controls.  
            </summary>
            <value>
            A <see cref="T:System.Int32"/> representing the sort order of the GroupRole.
            </value>
        </member>
        <member name="P:Rock.Model.GroupTypeRole.MaxCount">
            <summary>
            Gets or sets the maximum count of <see cref="T:Rock.Model.GroupMember">GroupMembers</see> that a <see cref="T:Rock.Model.Group"/> can have who 
            belong to this GroupRole.
            </summary>
            <value>
            A <see cref="T:System.Int32"/> representing the maximum count of <see cref="T:Rock.Model.GroupMember">GroupMembers</see> that a <see cref="T:Rock.Model.Group"/> can have
            who belong to this GroupRole. If there isn't a maximum, this value is null.
            </value>
        </member>
        <member name="P:Rock.Model.GroupTypeRole.MinCount">
            <summary>
            Gets or sets the minimum count of <see cref="T:Rock.Model.GroupMember">GroupMembers</see> that a <see cref="T:Rock.Model.Group"/> can have who belong to this GroupRole.
            </summary>
            <value>
            The min count of <see cref="T:Rock.Model.GroupMember">GroupMebers</see> that a <see cref="T:Rock.Model.Group"/> can have who belong to this GroupRole. If there is no minimum
            this value is null.
            </value>
        </member>
        <member name="P:Rock.Model.GroupTypeRole.IsLeader">
            <summary>
            Gets or sets a flag indicating if this is a group leader role.  
            </summary>
            <value>
            A <see cref="T:System.Boolean"/> value that is <c>true</c> if this is a GroupLeader role; otherwise <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Model.GroupTypeRole.GroupType">
            <summary>
            Gets or sets the <see cref="T:Rock.Model.GroupType"/> that this GroupRole belongs to.
            </summary>
            <value>
            The <see cref="T:Rock.Model.GroupType"/> that this GroupRole belongs to.
            </value>
        </member>
        <member name="T:Rock.Model.GroupRoleConfiguration">
            <summary>
            Group Role Configuration class.
            </summary>
        </member>
        <member name="M:Rock.Model.GroupRoleConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.GroupRoleConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Rock.Model.GroupType">
            <summary>
            Represents a type or category of <see cref="T:Rock.Model.Group">Groups</see> in Rock.  A GroupType is also used to configure how Groups that belong to a GroupType will operate
            and how they will interact with other components of Rock.
            </summary>
        </member>
        <member name="M:Rock.Model.GroupType.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.GroupType"/> class.
            </summary>
        </member>
        <member name="M:Rock.Model.GroupType.PreSaveChanges(Rock.Data.DbContext,System.Data.Entity.EntityState)">
            <summary>
            Pres the save.
            </summary>
            <param name="dbContext">The database context.</param>
            <param name="state">The state.</param>
        </member>
        <member name="M:Rock.Model.GroupType.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> containing the Name of the GroupType that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> containing the name of the GroupType that represents this instance.
            </returns>
        </member>
        <member name="P:Rock.Model.GroupType.IsSystem">
            <summary>
            Gets or sets a flag indicating if this GroupType is part of the Rock core system/framework.  This property is required.
            </summary>
            <value>
            A <see cref="T:System.Boolean"/> that is <c>true</c> if this GroupType is part of the Rock core system/framework.
            </value>
        </member>
        <member name="P:Rock.Model.GroupType.Name">
            <summary>
            Gets or sets the Name of the GroupType. This property is required.
            </summary>
            <value>
            A <see cref="T:System.String"/> representing the Name of the GroupType.
            </value>
        </member>
        <member name="P:Rock.Model.GroupType.Description">
            <summary>
            Gets or sets the Description of the GroupType.
            </summary>
            <value>
            A <see cref="T:System.String"/> representing the description of the GroupType.
            </value>
        </member>
        <member name="P:Rock.Model.GroupType.GroupTerm">
            <summary>
            Gets or sets the term that a <see cref="T:Rock.Model.Group"/> belonging to this <see cref="T:Rock.Model.GroupType"/> is called.
            </summary>
            <value>
            A <see cref="T:System.String"/> representing the term that a <see cref="T:Rock.Model.Group"/> belonging to this <see cref="T:Rock.Model.GroupType"/> is called.
            </value>
            <remarks>
            Examples of GroupTerms include: group, community, class, family, etc.
            </remarks>
        </member>
        <member name="P:Rock.Model.GroupType.GroupMemberTerm">
            <summary>
            Gets or sets the term that a <see cref="T:Rock.Model.GroupMember"/> of a <see cref="T:Rock.Model.Group"/> that belongs to this GroupType is called.
            </summary>
            <value>
            A <see cref="T:System.String"/> that represents the term that a <see cref="T:Rock.Model.GroupMember"/> of a <see cref="T:Rock.Model.Group"/> belonging to this 
            GroupType is called.
            </value>
            <example>
            Examples of GroupMemberTerms include: member, attendee, team member, student, etc.
            </example>
        </member>
        <member name="P:Rock.Model.GroupType.DefaultGroupRoleId">
            <summary>
            Gets or sets the Id of the <see cref="T:Rock.Model.GroupTypeRole"/> that a <see cref="T:Rock.Model.GroupMember"/> of a <see cref="T:Rock.Model.Group"/> belonging to this GroupType is given by default.
            </summary>
            <value>
            A <see cref="T:System.Int32"/> representing the Id of the <see cref="T:Rock.Model.GroupTypeRole"/> that a <see cref="T:Rock.Model.GroupMember"/> of a <see cref="T:Rock.Model.Group"/> belonging to this GroupType is given by default.
            </value>
        </member>
        <member name="P:Rock.Model.GroupType.AllowMultipleLocations">
            <summary>
            Gets or sets a flag indicating if <see cref="T:Rock.Model.Group">Groups</see> of this type are allowed to have multiple locations.
            </summary>
            <value>
            A <see cref="T:System.Boolean"/> value that is <c>true</c> if a <see cref="T:Rock.Model.Group"/> of this GroupType are allowed to have multiple locations; otherwise <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Model.GroupType.ShowInGroupList">
            <summary>
            Gets or sets a flag indicating if a <see cref="T:Rock.Model.Group"/> of this GroupType will be shown in the group list.
            </summary>
            <value>
              A <see cref="T:System.Boolean"/> value that is <c>true</c> if a <see cref="T:Rock.Model.Group"/> of this GroupType will be shown in the GroupList; otherwise <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Model.GroupType.ShowInNavigation">
            <summary>
            Gets or sets a flag indicating if this GroupType and its <see cref="T:Rock.Model.Group">Groups</see> are shown in Navigation.
            If false, this GroupType will be hidden navigation controls, such as TreeViews and Menus
            </summary>
            <remarks>
             Navigation controls include objects lie menus and treeview controls.
            </remarks>
            <value>
            A <see cref="T:System.Boolean"/> value that is <c>true</c> if this GroupType and Groups should be displayed in Navigation controls.
            </value>
        </member>
        <member name="P:Rock.Model.GroupType.IconCssClass">
            <summary>
            Gets or sets the icon CSS class name for a font vector based icon.
            </summary>
            <value>
            A <see cref="T:System.String"/> representing the CSS class name of a font based icon.
            </value>
        </member>
        <member name="P:Rock.Model.GroupType.TakesAttendance">
            <summary>
            Gets or sets a flag indicating if a <see cref="T:Rock.Model.Group"/> of this GroupType supports taking attendance.
            </summary>
            <value>
            A <see cref="T:System.Boolean"/> representing if a <see cref="T:Rock.Model.Group"/> of this GroupType supports taking attendance.
            </value>
        </member>
        <member name="P:Rock.Model.GroupType.AttendanceRule">
            <summary>
            Gets or sets the <see cref="T:Rock.Model.AttendanceRule"/> that indicates how attendance is managed a <see cref="T:Rock.Model.Group"/> of this GroupType
            </summary>
            <value>
            The <see cref="T:Rock.Model.AttendanceRule"/> that indicates how attendance is manged for a <see cref="T:Rock.Model.Group"/> of this GroupType.
            </value>
            <example>
            The available options are:
            AttendanceRule.None -&gt; A <see cref="T:Rock.Model.Person"/> does not have to previously belong to the <see cref="T:Rock.Model.Group"/> that they are checking into, and they will not be automatically added.
            AttendanceRule.AddOnCheckin -&gt; If a <see cref="T:Rock.Model.Person"/> does not belong to the <see cref="T:Rock.Model.Group"/> that they are checking into, they will be automatically added with the default
            <see cref="T:Rock.Model.GroupTypeRole"/> upon check in.
            </example>
        </member>
        <member name="P:Rock.Model.GroupType.AttendancePrintTo">
            <summary>
            Gets or sets the <see cref="T:Rock.Model.PrintTo"/> indicating the type of  location of where attendee labels for <see cref="T:Rock.Model.Group">Groups</see> of this GroupType should print.
            </summary>
            <value>
            A <see cref="T:Rock.Model.PrintTo"/> enum value indicating how and where attendee labels for <see cref="T:Rock.Model.Group">Groups</see> of this GroupType should print.
            </value>
            <remarks>
            The available options include:
            PrintTo.Default -&gt; print to the default printer.
            PrintTo.Kiosk -&gt; print to the printer associated with the kiosk.
            PrintTo.Location -&gt; print to the location
            </remarks>
        </member>
        <member name="P:Rock.Model.GroupType.Order">
            <summary>
            Gets or sets the order for this GroupType. This is used for display and priority purposes, the lower the number the higher the priority, or the higher the GroupType is displayed. This property is required.
            </summary>
            <value>
            A <see cref="T:System.Int32"/> representing the display/priority order for this GroupType.
            </value>
        </member>
        <member name="P:Rock.Model.GroupType.InheritedGroupTypeId">
            <summary>
            Gets or sets the Id of the GroupType to inherit settings and properties from. This is essentially copying the values, but they can be overridden.
            </summary>
            <value>A <see cref="T:System.Int32"/> representing the Id of a GroupType to inherit properties and values from.</value>
        </member>
        <member name="P:Rock.Model.GroupType.LocationSelectionMode">
            <summary>
            Gets or sets selection mode that the Location Picker should use when adding locations to groups of this type
            </summary>
            <value>
            The <see cref="T:Rock.Web.UI.Controls.LocationPickerMode"/> to use when adding location(s) to <see cref="T:Rock.Model.Group">Groups</see>
            of this GroupType. This can be one or more of the following values
            </value>
            <remarks>
            Available options include one or more of the following:
                GroupLocationPickerMode.Location -&gt; A named location.
                GroupLocationPickerMode.Address -&gt; Selection by address (i.e. 7007 W Happy Valley Rd Peoria, AZ 85383)
                GroupLocationPickerMode.Point -&gt; A geographic point (i.e. 38.229336, -85.542045)
                GroupLocationPickerMode.Polygon -&gt; A geographic polygon.
                GroupLocationPickerMode.GroupMember -&gt; A group members's address
            </remarks>
        </member>
        <member name="P:Rock.Model.GroupType.GroupTypePurposeValueId">
            <summary>
            Gets or sets Id of the <see cref="T:Rock.Model.DefinedValue"/> that represents the purpose of the GroupType.
            </summary>
            <value>
            An <see cref="T:System.Int32"/> representing the Id of the <see cref="T:Rock.Model.DefinedValue"/> that represents the purpose of the GroupType.
            </value>
        </member>
        <member name="P:Rock.Model.GroupType.Groups">
            <summary>
            Gets or sets a collection of the <see cref="T:Rock.Model.Group">Groups</see> that belong to this GroupType.
            </summary>
            <value>
            A collection containing a collection of the <see cref="T:Rock.Model.Group">Groups</see> that belong to this GroupType.
            </value>
        </member>
        <member name="P:Rock.Model.GroupType.ChildGroupTypes">
            <summary>
            Gets or sets the collection of GroupTypes that inherit from this GroupType.
            </summary>
            <value>
            A collection of the GroupTypes that inherit from this groupType.
            </value>
        </member>
        <member name="P:Rock.Model.GroupType.ParentGroupTypes">
            <summary>
            Gets or sets a collection containing the GroupTypes that this GroupType inherits from.
            </summary>
            <value>
            A collection containing the GroupTypes that this GroupType inherits from.
            </value>
        </member>
        <member name="P:Rock.Model.GroupType.Roles">
            <summary>
            Gets or sets a collection containing the <see cref="T:Rock.Model.GroupTypeRole">GroupRoles</see> that this GroupType utilizes.
            </summary>
            <value>
            A collection containing the <see cref="T:Rock.Model.GroupTypeRole"/>GroupRoles that are associated with this GroupType.
            </value>
        </member>
        <member name="P:Rock.Model.GroupType.LocationTypes">
            <summary>
            Gets or sets a collection of the <see cref="T:Rock.Model.GroupTypeLocationType">GroupTypeLocationTypes</see> that are associated with this GroupType.
            </summary>
            <value>
            A collection of the <see cref="T:Rock.Model.GroupTypeLocationType">GroupTypeLocationTypes</see> that are associated with this GroupType.
            </value>
        </member>
        <member name="P:Rock.Model.GroupType.DefaultGroupRole">
            <summary>
            Gets or sets the default <see cref="T:Rock.Model.GroupTypeRole"/> for <see cref="T:Rock.Model.GroupMember">GroupMembers</see> who belong to a 
            <see cref="T:Rock.Model.Group"/> of this GroupType.
            </summary>
            <value>
            The default <see cref="T:Rock.Model.GroupTypeRole"/> for <see cref="T:Rock.Model.GroupMember">GroupMembers</see> who belong to a <see cref="T:Rock.Model.Group"/>
            of this GroupType.
            </value>
        </member>
        <member name="P:Rock.Model.GroupType.GroupTypePurposeValue">
            <summary>
            Gets or sets the <see cref="T:Rock.Model.DefinedValue"/> that represents the purpose of the GroupType.
            </summary>
            <value>
            A <see cref="T:Rock.Model.DefinedValue"/> that represents the the purpose of the GroupType.
            </value>
        </member>
        <member name="P:Rock.Model.GroupType.GroupCount">
            <summary>
            Gets a count of <see cref="T:Rock.Model.Group">Groups</see> that belong to this GroupType.
            </summary>
            <value>
            A <see cref="T:System.Int32"/> representing the number of <see cref="T:Rock.Model.Group">Groups</see> that belong to this GroupType.
            </value>
        </member>
        <member name="P:Rock.Model.GroupType.GroupQuery">
            <summary>
            Gets a queryable collection of <see cref="T:Rock.Model.Group">Groups</see> that belong to this GroupType.
            </summary>
            <value>
            A queryable collection of <see cref="T:Rock.Model.Group">Groups</see> that belong to this GroupType.
            </value>
        </member>
        <member name="P:Rock.Model.GroupType.InheritedGroupType">
            <summary>
            Gets or sets the <see cref="T:Rock.Model.GroupType"/> that this GroupType is inheriting settings and properties from. 
            This is similar to a parent or a template GroupType.
            </summary>
            <value>The <see cref="T:Rock.Model.GroupType"/> that this GroupType is inheriting settings and properties from.</value>
        </member>
        <member name="T:Rock.Model.GroupTypeConfiguration">
            <summary>
            Group Type Configuration class.
            </summary>
        </member>
        <member name="M:Rock.Model.GroupTypeConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.GroupTypeConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Rock.Model.AttendanceRule">
            <summary>
            Represents and indicates the  attendance rule to use when a <see cref="T:Rock.Model.Person"/> checks in to a <see cref="T:Rock.Model.Group"/> of this <see cref="T:Rock.Model.GroupType"/>
            </summary>
        </member>
        <member name="F:Rock.Model.AttendanceRule.None">
            <summary>
            None, person does not need to belong to the group, and they will not automatically 
            be added to the group
            </summary>
        </member>
        <member name="F:Rock.Model.AttendanceRule.AddOnCheckIn">
            <summary>
            Person will be added to the group whenever they check-in
            </summary>
        </member>
        <member name="F:Rock.Model.AttendanceRule.AlreadyBelongs">
            <summary>
            User must already belong to the group before they will be allowed to check-in
            </summary>
        </member>
        <member name="T:Rock.Model.GroupLocationPickerMode">
            <summary>
            Represents and indicates the type of location picker to use when setting a location for a group and/or when searching for group(s)
            </summary>
        </member>
        <member name="F:Rock.Model.GroupLocationPickerMode.None">
            <summary>
            The none
            </summary>
        </member>
        <member name="F:Rock.Model.GroupLocationPickerMode.Address">
            <summary>
            An Address
            </summary>
        </member>
        <member name="F:Rock.Model.GroupLocationPickerMode.Named">
            <summary>
            A Named location (Building, Room)
            </summary>
        </member>
        <member name="F:Rock.Model.GroupLocationPickerMode.Point">
            <summary>
            A Geographic point (Latitude/Longitude)
            </summary>
        </member>
        <member name="F:Rock.Model.GroupLocationPickerMode.Polygon">
            <summary>
            A Geographic Polygon
            </summary>
        </member>
        <member name="F:Rock.Model.GroupLocationPickerMode.GroupMember">
            <summary>
            A Group Member's address
            </summary>
        </member>
        <member name="F:Rock.Model.GroupLocationPickerMode.All">
            <summary>
            All
            </summary>
        </member>
        <member name="T:Rock.Model.GroupTypeService">
            <summary>
            GroupType Service class
            </summary>
            <summary>
            Data access/service class for <see cref="T:Rock.Model.GroupType"/> objects.
            </summary>
        </member>
        <member name="M:Rock.Model.GroupTypeService.#ctor(Rock.Data.RockContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.GroupTypeService"/> class
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Rock.Model.GroupTypeService.CanDelete(Rock.Model.GroupType,System.String@)">
            <summary>
            Determines whether this instance can delete the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="errorMessage">The error message.</param>
            <returns>
              <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Rock.Model.GroupTypeService.GetByDefaultGroupRoleId(System.Nullable{System.Int32})">
            <summary>
            Returns an enumerable collection of <see cref="T:Rock.Model.GroupType"/> entities by the Id of their <see cref="T:Rock.Model.GroupTypeRole"/>.
            </summary>
            <param name="defaultGroupRoleId">An <see cref="T:System.Int32"/> representing the Id of the <see cref="T:Rock.Model.GroupTypeRole"/> to search by.</param>
            <returns>An enumerable collection of <see cref="T:Rock.Model.GroupType">GroupTypes</see> that use the provided <see cref="T:Rock.Model.GroupTypeRole"/> as the 
            default GroupRole for their member Groups.</returns>
        </member>
        <member name="M:Rock.Model.GroupTypeService.GetChildGroupTypes(System.Int32)">
            <summary>
            Gets the child group types.
            </summary>
            <param name="groupTypeId">The group type identifier.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.GroupTypeService.GetParentGroupTypes(System.Int32)">
            <summary>
            Gets the parent group types.
            </summary>
            <param name="groupTypeId">The group type identifier.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.GroupTypeService.GetAllAssociatedDescendents(System.Int32)">
            <summary>
            Returns an enumerable collection of <see cref="T:Rock.Model.GroupType">GroupType</see> that are descendants of a specified group type.
            WARNING: This will fail if their is a circular reference in the GroupTypeAssociation table.
            </summary>
            <param name="parentGroupTypeId">The parent group type identifier.</param>
            <returns>
            An enumerable collection of <see cref="T:Rock.Model.GroupType">GroupType</see>.
            </returns>
        </member>
        <member name="M:Rock.Model.GroupTypeService.Delete(Rock.Model.GroupType)">
            <summary>
            Deletes the specified item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="T:Rock.Model.GroupTypeExtensionMethods">
            <summary>
            Generated Extension Methods
            </summary>
        </member>
        <member name="M:Rock.Model.GroupTypeExtensionMethods.Clone(Rock.Model.GroupType,System.Boolean)">
            <summary>
            Clones this GroupType object to a new GroupType object
            </summary>
            <param name="source">The source.</param>
            <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.GroupTypeExtensionMethods.CopyPropertiesFrom(Rock.Model.GroupType,Rock.Model.GroupType)">
            <summary>
            Copies the properties from another GroupType object to this GroupType object
            </summary>
            <param name="target">The target.</param>
            <param name="source">The source.</param>
        </member>
        <member name="T:Rock.Model.GroupMember">
            <summary>
            Represents a member of a group in Rock. A group member is a <see cref="T:Rock.Model.Person"/> who has a relationship with a <see cref="T:Rock.Model.Group"/>.
            </summary>
        </member>
        <member name="M:Rock.Model.GroupMember.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Rock.Model.GroupMember.IsSystem">
            <summary>
            Gets or sets a flag indicating if this GroupMember is part of the Rock core system/framework. This property is required.
            </summary>
            <value>
            A <see cref="T:System.Boolean"/> value that is <c>true</c> if this GroupMember is a part of the Rock core system/framework; otherwise <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Model.GroupMember.GroupId">
            <summary>
            Gets or sets the Id of the <see cref="T:Rock.Model.Group"/> that this GroupMember is associated with. This property is required.
            </summary>
            <value>
            An <see cref="T:System.Int32"/> representing the Id of the <see cref="T:Rock.Model.Group"/> that the GroupMember is associated with.
            </value>
        </member>
        <member name="P:Rock.Model.GroupMember.PersonId">
            <summary>
            Gets or sets the Id of the <see cref="T:Rock.Model.Person"/> that is represented by the GroupMember. This property is required.
            </summary>
            <value>
            An <see cref="T:System.Int32"/> representing the Id of the <see cref="T:Rock.Model.Person"/> who is reprensented by the GroupMember.
            </value>
        </member>
        <member name="P:Rock.Model.GroupMember.GroupRoleId">
            <summary>
            Gets or sets the Id of the GroupMember's <see cref="P:Rock.Model.GroupMember.GroupRole"/> in the <see cref="T:Rock.Model.Group"/>. This property is required.
            </summary>
            <value>
            An <see cref="T:System.Int32"/> representing the Id of the <see cref="T:Rock.Model.GroupTypeRole"/> that the Group Member is in.
            </value>
        </member>
        <member name="P:Rock.Model.GroupMember.GroupMemberStatus">
            <summary>
            Gets or sets the GroupMember's status in the Group. This value is required.
            </summary>
            <value>
            A <see cref="T:Rock.Model.GroupMemberStatus"/> enum value that represents the GroupMember's status in the group.  A <c>GroupMemberStatus.Active</c> indicates that the GroupMember is active,
            A <c>GroupMemberStatus.Inactive</c> value indicates that the GroupMember is not active, otherwise their GroupMemberStatus will be <c>GroupMemberStatus.Pending</c>.
            </value>
        </member>
        <member name="P:Rock.Model.GroupMember.Person">
            <summary>
            Gets or sets the <see cref="T:Rock.Model.Person"/> representing the GroupMember.
            </summary>
            <value>
            A <see cref="T:Rock.Model.Person"/> representing the person who is the GroupMember.
            </value>
        </member>
        <member name="P:Rock.Model.GroupMember.Group">
            <summary>
            Gets or sets the <see cref="T:Rock.Model.Group"/> that the GroupMember belongs to.
            </summary>
            <value>
            A <see cref="T:Rock.Model.Group"/> representing the Group that the GroupMember is a part of.
            </value>
        </member>
        <member name="P:Rock.Model.GroupMember.GroupRole">
            <summary>
            Gets or sets the the GroupMember's role in the <see cref="T:Rock.Model.Group"/>.
            </summary>
            <value>
            A <see cref="T:Rock.Model.GroupTypeRole"/> representing the GroupMember's <see cref="T:Rock.Model.GroupTypeRole"/> in the <see cref="T:Rock.Model.Group"/>.
            </value>
        </member>
        <member name="T:Rock.Model.GroupMemberConfiguration">
            <summary>
            Member Configuration class.
            </summary>
        </member>
        <member name="M:Rock.Model.GroupMemberConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.GroupMemberConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Rock.Model.GroupMemberStatus">
            <summary>
            Represents the status of a <see cref="T:Rock.Model.GroupMember"/> in a <see cref="T:Rock.Model.Group"/>.
            </summary>
        </member>
        <member name="F:Rock.Model.GroupMemberStatus.Inactive">
            <summary>
            The <see cref="T:Rock.Model.GroupMember"/> is not an active member of the <see cref="T:Rock.Model.Group"/>.
            </summary>
        </member>
        <member name="F:Rock.Model.GroupMemberStatus.Active">
            <summary>
            The <see cref="T:Rock.Model.GroupMember"/> is an active member of the <see cref="T:Rock.Model.Group"/>.
            </summary>
        </member>
        <member name="F:Rock.Model.GroupMemberStatus.Pending">
            <summary>
            The <see cref="T:Rock.Model.GroupMember">GroupMember's</see> membership in the <see cref="T:Rock.Model.Group"/> is pending.
            </summary>
        </member>
        <member name="T:Rock.Model.GroupMemberService">
            <summary>
            GroupMember Service class
            </summary>
            <summary>
            The data access/service class for <see cref="T:Rock.Model.GroupMember"/> entity objects. 
            </summary>
        </member>
        <member name="M:Rock.Model.GroupMemberService.#ctor(Rock.Data.RockContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.GroupMemberService"/> class
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Rock.Model.GroupMemberService.CanDelete(Rock.Model.GroupMember,System.String@)">
            <summary>
            Determines whether this instance can delete the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="errorMessage">The error message.</param>
            <returns>
              <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Rock.Model.GroupMemberService.Queryable">
            <summary>
            Returns a queryable collection of <see cref="T:Rock.Model.GroupMember">GroupMembers</see>, excluding 
            deceased group members
            </summary>
            <returns>A queryable collection of <see cref="T:Rock.Model.GroupMember">GroupMembers.</see></returns>
        </member>
        <member name="M:Rock.Model.GroupMemberService.Queryable(System.Boolean)">
            <summary>
            Returns a queryable collection of <see cref="T:Rock.Model.GroupMember">GroupMember's</see>.
            </summary>
            <param name="includeDeceased">A <see cref="T:System.Boolean"/> value indicating if deceased members should be included in the results. If <c>true</c> deceased members will
            be included, otherwise <c>false</c>.</param>
            <returns>A queryable collection of <see cref="T:Rock.Model.GroupMember"/></returns>
        </member>
        <member name="M:Rock.Model.GroupMemberService.Queryable(System.String)">
            <summary>
            Returns a collection of all <see cref="T:Rock.Model.GroupMember">GroupMembers</see> with eager loading of properties specfied in includes
            </summary>
            <param name="includes">The includes.</param>
            <returns>Returns a queryable collection of <see cref="T:Rock.Model.GroupMember">GroupMembers</see> with specified properties eagerly loaded</returns>
        </member>
        <member name="M:Rock.Model.GroupMemberService.Queryable(System.String,System.Boolean)">
            <summary>
            Returns a queryable collection of all <see cref="T:Rock.Model.GroupMember">GroupMembers</see> with eager loading of properties specfied in includes
            </summary>
            <param name="includes">A <see cref="T:System.String"/> containing a list of properties to be eagerly loaded.</param>
            <param name="includeDeceased">A <see cref="T:System.Boolean"/> value indicating if deceased <see cref="T:Rock.Model.GroupMember">GroupMembers</see> should be included. If <c>true</c> 
            deceased group members will be included, if <c>false</c> deceased group members will not be included. This parameter defaults to false.</param>
            <returns>A queryable collection of <see cref="T:Rock.Model.GroupMember">GroupMembers</see> with specified properties eagerly loaded.</returns>
        </member>
        <member name="M:Rock.Model.GroupMemberService.GetByGroupId(System.Int32,System.Boolean)">
            <summary>
            Returns a queryable collection of <see cref="T:Rock.Model.GroupMember">GroupMembers</see> who are members of a specific group.
            </summary>
            <param name="groupId">A <see cref="T:System.Int32"/> representing the Id of a <see cref="T:Rock.Model.Group"/> to search by.</param>
            <param name="includeDeceased">A <see cref="T:System.Boolean"/> value indicating if deceased <see cref="T:Rock.Model.GroupMember">GroupMembers</see> should be included. If <c>true</c> 
            deceased group members will be included, if <c>false</c> deceased group members will not be included. This parameter defaults to false.</param>
            <returns>
            A queryable collection of <see cref="T:Rock.Model.GroupMember">GroupMembers</see> who belong to the specified group.
            </returns>
        </member>
        <member name="M:Rock.Model.GroupMemberService.GetByGroupIdAndPersonId(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Returns a collection of <see cref="T:Rock.Model.GroupMember">GroupMembers</see> by the Id of the <see cref="T:Rock.Model.Group"/>, the Id of the <see cref="T:Rock.Model.Person"/>.
            </summary>
            <param name="groupId">An <see cref="T:System.Int32"/> representing the Id of the <see cref="T:Rock.Model.Group"/> to search by.</param>
            <param name="personId">An <see cref="T:System.Int32"/> representing the Id of the <see cref="T:Rock.Model.Person"/> to search by.</param>
            <param name="includeDeceased">A <see cref="T:System.Boolean"/> value indicating if deceased <see cref="T:Rock.Model.GroupMember">GroupMembers</see> should be included. If <c>true</c> 
            deceased group members will be included, if <c>false</c> deceased group members will not be included. This parameter defaults to false.</param>
            <returns>A queryable collection of <see cref="T:Rock.Model.GroupMember">GroupMembers</see> who match the criteria.</returns>
        </member>
        <member name="M:Rock.Model.GroupMemberService.GetByGroupIdAndPersonIdAndGroupRoleId(System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Returns the first <see cref="T:Rock.Model.GroupMember"/> that mathces the Id of the <see cref="T:Rock.Model.Group"/>,
            the Id of the <see cref="T:Rock.Model.Person"/>, and the Id fo the <see cref="T:Rock.Model.GroupTypeRole"/>
            </summary>
            <param name="groupId">An <see cref="T:System.Int32"/> representing the Id of the <see cref="T:Rock.Model.Group"/> to search by.</param>
            <param name="personId">An <see cref="T:System.Int32"/> representing the Id of the <see cref="T:Rock.Model.Person"/> to search by.</param>
            <param name="groupRoleId">A <see cref="T:System.Int32"/> representing the Id of the <see cref="T:Rock.Model.GroupTypeRole"/> to search by.</param>
            <param name="includeDeceased">A <see cref="T:System.Boolean"/> value indicating if deceased <see cref="T:Rock.Model.GroupMember">GroupMembers</see> should be included. If <c>true</c> 
            deceased group members will be included, if <c>false</c> deceased group members will not be included. This parameter defaults to false.</param>
            <returns>The first <see cref="T:Rock.Model.GroupMember"/> that matches the search criteria. If no results found returns null.</returns>
            <remarks>
            In theory a maximum of one result should be returned, since there is a unique constraint on GroupId, PersonId, and GroupRoleId.
            </remarks>
        </member>
        <member name="M:Rock.Model.GroupMemberService.GetByGroupRoleId(System.Int32,System.Boolean)">
            <summary>
            Returns a queryable collection of <see cref="T:Rock.Model.GroupMember">GroupMembers</see> by the Id of the <see cref="T:Rock.Model.GroupTypeRole"/> that the member belongs to.
            </summary>
            <param name="groupRoleId">An <see cref="T:System.Int32"/> representing the Id of the <see cref="T:Rock.Model.GroupTypeRole"/> to search by.</param>
            <param name="includeDeceased">A <see cref="T:System.Boolean"/> value indicating if deceased <see cref="T:Rock.Model.GroupMember">GroupMembers</see> should be included. If <c>true</c> 
            deceased group members will be included, if <c>false</c> deceased group members will not be included. This parameter defaults to false.</param>
            <returns>A queryable collection of <see cref="T:Rock.Model.GroupMember"/> who are members of the specified <see cref="T:Rock.Model.GroupTypeRole"/>.</returns>
        </member>
        <member name="M:Rock.Model.GroupMemberService.GetByPersonId(System.Int32)">
            <summary>
            Returns a queryable collection of <see cref="T:Rock.Model.GroupMember"/> entities associated with a <see cref="T:Rock.Model.Person"/> by the Person's PersonId
            </summary>
            <param name="personId">An <see cref="T:System.Int32"/> representing the Id of the <see cref="T:Rock.Model.Person"/> to search by.</param>
            <returns>A queryable collection of <see cref="T:Rock.Model.GroupMember"/> entities associated with the specified <see cref="T:Rock.Model.Person"/></returns>
        </member>
        <member name="M:Rock.Model.GroupMemberService.GetFirstNames(System.Int32,System.Boolean)">
            <summary>
            Returns an enumerable collection of <see cref="T:System.String"/> objects representing the first names of each person in a <see cref="T:Rock.Model.Group"/> ordered by group role, age, and gender
            </summary>
            <param name="groupId">A <see cref="T:System.Int32"/> representing the Id of the <see cref="T:Rock.Model.Group"/>.</param>
            <param name="includeDeceased">A <see cref="T:System.Boolean"/> value indicating if deceased <see cref="T:Rock.Model.GroupMember">GroupMembers</see> should be included. If <c>true</c> 
            deceased group members will be included, if <c>false</c> deceased group members will not be included. This parameter defaults to false.</param>
            <returns>An enumerable collection of <see cref="T:System.String"/> objects containing the first names of each person in the group.</returns>
        </member>
        <member name="M:Rock.Model.GroupMemberService.GetPersonIdsByHomeAddress(System.String)">
            <summary>
            Gets a list of <see cref="T:System.Int32"/> PersonIds who's home address matches the given search value.
            </summary>
            <param name="partialHomeAddress">a partial address search string</param>
            <returns>A querable list of <see cref="T:System.Int32"/> PersonIds</returns>
        </member>
        <member name="M:Rock.Model.GroupMemberService.GetInverseRelationship(Rock.Model.GroupMember,System.Boolean,Rock.Model.PersonAlias)">
            <summary>
            Gets the inverse relationship.
            Returns the <see cref="T:Rock.Model.GroupMember"/> who has an inverse relationship to the provided <see cref="T:Rock.Model.GroupMember"/>.
            </summary>
            <param name="groupMember">A <see cref="T:Rock.Model.GroupMember"/> representing the person to find the inverse relationship for.</param>
            <param name="createGroup">A <see cref="T:System.Boolean"/> flag indicating if a new <see cref="T:Rock.Model.Group"/> can be created 
            for the person with the inverse relationship. </param>
            <param name="personAlias">The alias of the <see cref="T:Rock.Model.Person"/> who has the inverse relationship.</param>
            <returns>
            A <see cref="T:Rock.Model.GroupMember"/> representing the <see cref="T:Rock.Model.Person"/> with the inverse relationship.
            </returns>
            <remarks>
            In Rock, examples of inverse relationships include: Parent/Child, Can Check In/Check in By, Sibling/Sibling, Grandparent/Grandchild, etc.
            </remarks>
        </member>
        <member name="T:Rock.Model.GroupMemberExtensionMethods">
            <summary>
            Generated Extension Methods
            </summary>
        </member>
        <member name="M:Rock.Model.GroupMemberExtensionMethods.Clone(Rock.Model.GroupMember,System.Boolean)">
            <summary>
            Clones this GroupMember object to a new GroupMember object
            </summary>
            <param name="source">The source.</param>
            <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.GroupMemberExtensionMethods.CopyPropertiesFrom(Rock.Model.GroupMember,Rock.Model.GroupMember)">
            <summary>
            Copies the properties from another GroupMember object to this GroupMember object
            </summary>
            <param name="target">The target.</param>
            <param name="source">The source.</param>
        </member>
        <member name="T:Rock.Model.GroupLocation">
            <summary>
            Represents a <see cref="T:Rock.Model.Location"/> that is associated with a <see cref="T:Rock.Model.Group"/>.
            </summary>
            <remarks>
            In Rock a <see cref="T:Rock.Model.Group"/> is defined any party or collection of <see cref="T:Rock.Model.Person">Persons</see>.  Examples of GroupLocaitons
            could include a Person/Family's address, a Business' address, a church campus, a room where a Bible study meets.  Pretty much, it is any place where a 
            group of people meet or are located. 
            </remarks>
        </member>
        <member name="M:Rock.Model.GroupLocation.ToString">
            <summary>
            Returns a <see cref="T:System.String"/>  that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Rock.Model.GroupLocation.GroupId">
            <summary>
            Gets or sets the Id of the <see cref="T:Rock.Model.Group"/> that that is associated with this GroupLocation. This property is required.
            </summary>
            <value>
            An <see cref="T:System.Int32"/> representing the Id of the <see cref="T:Rock.Model.Group"/> that this GroupLocation is associated with.
            </value>
        </member>
        <member name="P:Rock.Model.GroupLocation.LocationId">
            <summary>
            Gets or sets the Id of the <see cref="T:Rock.Model.Location"/> that is associated with this GroupLocation. This property is required.
            </summary>
            <value>
            An <see cref="T:System.Int32"/> referencing the Id of the <see cref="T:Rock.Model.Location"/> that is associated with this GroupLocation. 
            </value>
        </member>
        <member name="P:Rock.Model.GroupLocation.GroupLocationTypeValueId">
            <summary>
            Gets or sets the Id of the GroupLocationType <see cref="T:Rock.Model.DefinedValue"/> that is used to identify the type of <see cref="T:Rock.Model.GroupLocation"/>
            that this is.
            </summary>
            <value>
            An <see cref="T:System.Int32"/> referencing the Id of the GroupLocationType <see cref="T:Rock.Model.DefinedValue"/> that identifies the type of group location that this is.
            If a GroupLocationType <see cref="T:Rock.Model.DefinedValue"/> is not associated with this GroupLocation this value will be null.
            </value>
        </member>
        <member name="P:Rock.Model.GroupLocation.IsMailingLocation">
            <summary>
            Gets or sets a flag indicating if the <see cref="T:Rock.Model.Location"/> referenced by this GroupLocation is the mailing address/location for the <see cref="T:Rock.Model.Group"/>.  
            This field is only supported in the UI for family groups
            </summary>
            <value>
            A <see cref="T:System.Boolean"/> value that is <c>true</c> if this is the mailing address/location for this <see cref="T:Rock.Model.Group"/>.
            </value>
        </member>
        <member name="P:Rock.Model.GroupLocation.IsMappedLocation">
            <summary>
            Gets or sets a flag indicating if this is the mappable location for this 
            This field is only supported in the UI for family groups
            </summary>
            <value>
            <c>true</c> if this instance is location; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Model.GroupLocation.GroupMemberPersonId">
            <summary>
            Gets or sets the group member person identifier.  A GroupLocation can optionally be created by selecting one of the group member's locations.  If the GroupLocation is 
            created this way, the member's person id is saved with the group location
            </summary>
            <value>
            The group member person identifier.
            </value>
        </member>
        <member name="P:Rock.Model.GroupLocation.Group">
            <summary>
            Gets or sets the <see cref="T:Rock.Model.Group"/> that is associated with this GroupLocation
            </summary>
            <value>
            The <see cref="T:Rock.Model.Group"/> that is associated with this GroupLocation.
            </value>
        </member>
        <member name="P:Rock.Model.GroupLocation.Location">
            <summary>
            Gets or sets the <see cref="T:Rock.Model.Location"/> that is associated with this GroupLocation.
            </summary>
            <value>
            The <see cref="T:Rock.Model.Location"/> that is associated with this GroupLocation.
            </value>
        </member>
        <member name="P:Rock.Model.GroupLocation.GroupLocationTypeValue">
            <summary>
            Gets or sets the Location Type <see cref="T:Rock.Model.DefinedValue"/> of this GroupLocation.
            </summary>
            <value>
            The <see cref="T:Rock.Model.DefinedValue"/> that represents the type of this GroupLocation.
            </value>
        </member>
        <member name="P:Rock.Model.GroupLocation.GroupMemberPerson">
            <summary>
            Gets or sets the group member person. A GroupLocation can optionally be created by selecting one of the group member's locations.  If the GroupLocation is 
            created this way, the member is saved with the group location
            </summary>
            <value>
            The group member person.
            </value>
        </member>
        <member name="P:Rock.Model.GroupLocation.Schedules">
            <summary>
            Gets or sets a collection containing the <see cref="T:Rock.Model.Schedule">Schedules</see> that are associated with this GroupLocation.
            </summary>
            <value>
            A collection of <see cref="T:Rock.Model.Schedule"/> that are associated with this GroupLocation.
            </value>
        </member>
        <member name="T:Rock.Model.GroupLocationConfiguration">
            <summary>
            GroupLocation Configuration class
            </summary>
        </member>
        <member name="M:Rock.Model.GroupLocationConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.GroupLocationConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Rock.Jobs.RockCleanup">
            <summary>
            Job that executes routine cleanup tasks on Rock
            </summary>
        </member>
        <member name="M:Rock.Jobs.RockCleanup.#ctor">
            <summary> 
            Empty constructor for job initilization
            <para>
            Jobs require a public empty constructor so that the
            scheduler can instantiate the class whenever it needs.
            </para>
            </summary>
        </member>
        <member name="M:Rock.Jobs.RockCleanup.Execute(Quartz.IJobExecutionContext)">
            <summary> 
            Job that executes routine Rock cleanup tasks
            
            Called by the <see cref="T:Quartz.IScheduler"/> when a
            <see cref="T:Quartz.ITrigger"/> fires that is associated with
            the <see cref="T:Quartz.IJob"/>.
            </summary>
        </member>
        <member name="M:Rock.Jobs.RockCleanup.CleanCacheDirectory(System.String,System.DateTime)">
            <summary>
            Cleans expired cached files from the cache folder
            </summary>
            <param name="directoryPath">The directory path.</param>
            <param name="expirationDate">The file expiration date. Files older than this date will be deleted</param>
        </member>
        <member name="M:Rock.Jobs.RockCleanup.DeleteDirectory(System.String,System.Boolean)">
            <summary>
            Deletes the specified directory.
            </summary>
            <param name="directoryPath">The path the directory that you would like to delete.</param>
            <param name="isRetryAttempt">Is this execution a retry attempt.  If <c>true</c> then don't retry on failure.</param>
        </member>
        <member name="M:Rock.Jobs.RockCleanup.DeleteFile(System.String,System.Boolean)">
            <summary>
            Deletes the specified file.
            </summary>
            <param name="filePath">The path to the file that you would like to delete</param>
            <param name="isRetryAttempt">Indicates if this execution is a retry attempt. IF <c>true</c> don't retry on failure</param>
        </member>
        <member name="T:Rock.Search.Person.Address">
            <summary>
            Searches for people with matching address
            </summary>
        </member>
        <member name="M:Rock.Search.Person.Address.Search(System.String)">
            <summary>
            Returns a list of matching people
            </summary>
            <param name="searchterm"></param>
            <returns></returns>
        </member>
        <member name="P:Rock.Search.Person.Address.AttributeValueDefaults">
            <summary>
            Gets the attribute value defaults.
            </summary>
            <value>
            The attribute defaults.
            </value>
        </member>
        <member name="T:Rock.Search.Person.Email">
            <summary>
            Searches for people who's email matches selected term
            </summary>
        </member>
        <member name="M:Rock.Search.Person.Email.Search(System.String)">
            <summary>
            Returns a list of matching people
            </summary>
            <param name="searchterm"></param>
            <returns></returns>
        </member>
        <member name="P:Rock.Search.Person.Email.AttributeValueDefaults">
            <summary>
            Gets the attribute value defaults.
            </summary>
            <value>
            The attribute defaults.
            </value>
        </member>
        <member name="T:Rock.Search.Person.Name">
            <summary>
            Searches for people with matching names
            </summary>
        </member>
        <member name="M:Rock.Search.Person.Name.Search(System.String)">
            <summary>
            Returns a list of matching people
            </summary>
            <param name="searchterm"></param>
            <returns></returns>
        </member>
        <member name="P:Rock.Search.Person.Name.AttributeValueDefaults">
            <summary>
            Gets the attribute value defaults.
            </summary>
            <value>
            The attribute defaults.
            </value>
        </member>
        <member name="P:Rock.Search.Person.Name.ResultUrl">
            <summary>
            The url to redirect user to after they've entered search criteria
            </summary>
        </member>
        <member name="T:Rock.Search.Person.Phone">
            <summary>
            Searches for people with matching phones
            </summary>
        </member>
        <member name="M:Rock.Search.Person.Phone.Search(System.String)">
            <summary>
            Returns a list of matching people
            </summary>
            <param name="searchterm"></param>
            <returns></returns>
        </member>
        <member name="P:Rock.Search.Person.Phone.AttributeValueDefaults">
            <summary>
            Gets the attribute value defaults.
            </summary>
            <value>
            The attribute defaults.
            </value>
        </member>
        <member name="T:Rock.Search.SearchContainer">
            <summary>
            
            </summary>
        </member>
        <member name="F:Rock.Search.SearchContainer.instance">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Search.SearchContainer.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:Rock.Search.SearchContainer"/> class from being created.
            </summary>
        </member>
        <member name="M:Rock.Search.SearchContainer.GetComponent(System.Type)">
            <summary>
            Gets the component.
            </summary>
            <param name="searchComponentType">Type of the search component.</param>
            <returns></returns>
        </member>
        <member name="P:Rock.Search.SearchContainer.Instance">
            <summary>
            Gets the instance.
            </summary>
        </member>
        <member name="T:Rock.Security.SecurityActionAttribute">
            <summary>
            A class Attribute that can be used by objects that implement ISecured to add an additional security action or change the description of an action
            </summary>
        </member>
        <member name="M:Rock.Security.SecurityActionAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Security.SecurityActionAttribute"/> class.
            </summary>
            <param name="action">The action.</param>
            <param name="description">The description.</param>
        </member>
        <member name="P:Rock.Security.SecurityActionAttribute.Action">
            <summary>
            Gets or sets the action to add or change description for
            </summary>
            <value>
            The Action.
            </value>
        </member>
        <member name="P:Rock.Security.SecurityActionAttribute.Description">
            <summary>
            Gets or sets the description of the action
            </summary>
            <value>
            The description.
            </value>
        </member>
        <member name="T:Rock.Security.Authentication.ActiveDirectory">
            <summary>
            Authenticates a username using Active Directory
            </summary>
        </member>
        <member name="T:Rock.Security.AuthenticationComponent">
            <summary>
            Base class for components that perform authentication based on a username and password entered by the user
            </summary>
        </member>
        <member name="M:Rock.Security.AuthenticationComponent.Authenticate(Rock.Model.UserLogin,System.String)">
            <summary>
            Authenticates the user based on user name and password
            </summary>
            <param name="user">The user.</param>
            <param name="password">The password.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Security.AuthenticationComponent.Authenticate(System.Web.HttpRequest,System.String@,System.String@)">
            <summary>
            Authenticates the user based on a request from a third-party provider.  Will set the username and returnUrl values.
            </summary>
            <param name="request">The request.</param>
            <param name="userName">Name of the user.</param>
            <param name="returnUrl">The return URL.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Security.AuthenticationComponent.EncodePassword(Rock.Model.UserLogin,System.String)">
            <summary>
            Encodes the password.
            </summary>
            <param name="user">The user.</param>
            <param name="password">The password.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Security.AuthenticationComponent.GenerateLoginUrl(System.Web.HttpRequest)">
            <summary>
            Generates the login URL.
            </summary>
            <param name="request">The request.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Security.AuthenticationComponent.IsReturningFromAuthentication(System.Web.HttpRequest)">
            <summary>
            Tests the Http Request to determine if authentication should be tested by this 
            authentication provider.
            </summary>
            <param name="request">The request.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Security.AuthenticationComponent.ImageUrl">
            <summary>
            Gets the URL of an image that should be displayed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rock.Security.AuthenticationComponent.ChangePassword(Rock.Model.UserLogin,System.String,System.String,System.String@)">
            <summary>
            Changes the password.
            </summary>
            <param name="user">The user.</param>
            <param name="oldPassword">The old password.</param>
            <param name="newPassword">The new password.</param>
            <param name="warningMessage">The warning message.</param>
            <returns></returns>
        </member>
        <member name="P:Rock.Security.AuthenticationComponent.ServiceType">
            <summary>
            Gets the type of the service.
            </summary>
            <value>
            The type of the service.
            </value>
        </member>
        <member name="P:Rock.Security.AuthenticationComponent.RequiresRemoteAuthentication">
            <summary>
            Determines if user is directed to another site (i.e. Facebook, Gmail, Twitter, etc) to confirm approval of using
            that site's credentials for authentication.
            </summary>
            <value>
            The requires remote authentication.
            </value>
        </member>
        <member name="P:Rock.Security.AuthenticationComponent.SupportsChangePassword">
            <summary>
            Gets a value indicating whether [supports change password].
            </summary>
            <value>
            <c>true</c> if [supports change password]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Rock.Security.Authentication.ActiveDirectory.Authenticate(Rock.Model.UserLogin,System.String)">
            <summary>
            Authenticates the specified user name and password
            </summary>
            <param name="user">The user.</param>
            <param name="password">The password.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Security.Authentication.ActiveDirectory.EncodePassword(Rock.Model.UserLogin,System.String)">
            <summary>
            Encodes the password.
            </summary>
            <param name="user">The user.</param>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="M:Rock.Security.Authentication.ActiveDirectory.Authenticate(System.Web.HttpRequest,System.String@,System.String@)">
            <summary>
            Authenticates the user based on a request from a third-party provider.  Will set the username and returnUrl values.
            </summary>
            <param name="request">The request.</param>
            <param name="userName">Name of the user.</param>
            <param name="returnUrl">The return URL.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Rock.Security.Authentication.ActiveDirectory.GenerateLoginUrl(System.Web.HttpRequest)">
            <summary>
            Generates the login URL.
            </summary>
            <param name="request">The request.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Rock.Security.Authentication.ActiveDirectory.IsReturningFromAuthentication(System.Web.HttpRequest)">
            <summary>
            Tests the Http Request to determine if authentication should be tested by this
            authentication provider.
            </summary>
            <param name="request">The request.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Rock.Security.Authentication.ActiveDirectory.ImageUrl">
            <summary>
            Gets the URL of an image that should be displayed.
            </summary>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Rock.Security.Authentication.ActiveDirectory.ChangePassword(Rock.Model.UserLogin,System.String,System.String,System.String@)">
            <summary>
            Changes the password.
            </summary>
            <param name="user">The user.</param>
            <param name="oldPassword">The old password.</param>
            <param name="newPassword">The new password.</param>
            <param name="warningMessage">The warning message.</param>
            <returns></returns>
        </member>
        <member name="P:Rock.Security.Authentication.ActiveDirectory.ServiceType">
            <summary>
            Gets the type of the service.
            </summary>
            <value>
            The type of the service.
            </value>
        </member>
        <member name="P:Rock.Security.Authentication.ActiveDirectory.RequiresRemoteAuthentication">
            <summary>
            Determines if user is directed to another site (i.e. Facebook, Gmail, Twitter, etc) to confirm approval of using
            that site's credentials for authentication.
            </summary>
            <value>
            The requires remote authentication.
            </value>
        </member>
        <member name="P:Rock.Security.Authentication.ActiveDirectory.SupportsChangePassword">
            <summary>
            Gets a value indicating whether [supports change password].
            </summary>
            <value>
            <c>true</c> if [supports change password]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Rock.Security.Authentication.Database">
            <summary>
            Authenticates a username/password using the Rock database
            </summary>
        </member>
        <member name="M:Rock.Security.Authentication.Database.#cctor">
            <summary>
            Initializes the <see cref="T:Rock.Security.Authentication.Database"/> class.
            </summary>
            <exception cref="T:System.Configuration.ConfigurationErrorsException">Authentication requires a 'PasswordKey' app setting</exception>
        </member>
        <member name="M:Rock.Security.Authentication.Database.Authenticate(Rock.Model.UserLogin,System.String)">
            <summary>
            Authenticates the specified user name.
            </summary>
            <param name="user">The user.</param>
            <param name="password">The password.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Security.Authentication.Database.EncodePassword(Rock.Model.UserLogin,System.String)">
            <summary>
            Encodes the password.
            </summary>
            <param name="user">The user.</param>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="M:Rock.Security.Authentication.Database.Authenticate(System.Web.HttpRequest,System.String@,System.String@)">
            <summary>
            Authenticates the user based on a request from a third-party provider.  Will set the username and returnUrl values.
            </summary>
            <param name="request">The request.</param>
            <param name="userName">Name of the user.</param>
            <param name="returnUrl">The return URL.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Rock.Security.Authentication.Database.GenerateLoginUrl(System.Web.HttpRequest)">
            <summary>
            Generates the login URL.
            </summary>
            <param name="request">The request.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Rock.Security.Authentication.Database.IsReturningFromAuthentication(System.Web.HttpRequest)">
            <summary>
            Tests the Http Request to determine if authentication should be tested by this
            authentication provider.
            </summary>
            <param name="request">The request.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Rock.Security.Authentication.Database.ImageUrl">
            <summary>
            Gets the URL of an image that should be displayed.
            </summary>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Rock.Security.Authentication.Database.ChangePassword(Rock.Model.UserLogin,System.String,System.String,System.String@)">
            <summary>
            Changes the password.
            </summary>
            <param name="user">The user.</param>
            <param name="oldPassword">The old password.</param>
            <param name="newPassword">The new password.</param>
            <param name="warningMessage">The warning message.</param>
            <returns>
            A <see cref="T:System.Boolean"/> value that indicates if the password change was successful. <c>true</c> if successful; otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.Exception">Cannot change password on external service type</exception>
        </member>
        <member name="P:Rock.Security.Authentication.Database.ServiceType">
            <summary>
            Gets the type of the service.
            </summary>
            <value>
            The type of the service.
            </value>
        </member>
        <member name="P:Rock.Security.Authentication.Database.RequiresRemoteAuthentication">
            <summary>
            Determines if user is directed to another site (i.e. Facebook, Gmail, Twitter, etc) to confirm approval of using
            that site's credentials for authentication.
            </summary>
            <value>
            The requires remote authentication.
            </value>
        </member>
        <member name="P:Rock.Security.Authentication.Database.SupportsChangePassword">
            <summary>
            Gets a value indicating whether [supports change password].
            </summary>
            <value>
            <c>true</c> if [supports change password]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Rock.Security.Encryption">
            <summary>
            From http://stackoverflow.com/questions/202011/encrypt-decrypt-string-in-net
            </summary>
        </member>
        <member name="M:Rock.Security.Encryption.TryEncryptString(System.String,System.String@)">
            <summary>
            Tries to encrypt the string. Use this in situations where you might just want to skip encryption if it doesn't work.  
            You should use EncryptString in most cases.
            </summary>
            <param name="plainText">The plain text.</param>
            <param name="cypherText">The cypher text.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Security.Encryption.GetDataEncryptionKey">
            <summary>
            Gets the data encryption key.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rock.Security.Encryption.EncryptString(System.String)">
            <summary>
            Encrypt the given string using AES.  The string can be decrypted using 
            DecryptStringAES().  The sharedSecret parameters must match.
            </summary>
            <param name="plainText">The text to encrypt.</param>
        </member>
        <member name="M:Rock.Security.Encryption.DecryptString(System.String)">
            <summary>
            Decrypt the given string.  Assumes the string was encrypted using 
            EncryptStringAES(), using an identical sharedSecret.
            </summary>
            <param name="cipherText">The text to decrypt.</param>
        </member>
        <member name="M:Rock.Security.Encryption.ReadByteArray(System.IO.Stream)">
            <summary>
            Reads the byte array.
            </summary>
            <param name="s">The s.</param>
            <returns></returns>
            <exception cref="T:System.SystemException">
            Stream did not contain properly formatted byte array
            or
            Did not read byte array properly
            </exception>
        </member>
        <member name="T:Rock.Security.ExternalAuthentication.Facebook">
            <summary>
            Authenticates a user using Facebook
            </summary>
        </member>
        <member name="M:Rock.Security.ExternalAuthentication.Facebook.IsReturningFromAuthentication(System.Web.HttpRequest)">
            <summary>
            Tests the Http Request to determine if authentication should be tested by this
            authentication provider.
            </summary>
            <param name="request">The request.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Security.ExternalAuthentication.Facebook.GenerateLoginUrl(System.Web.HttpRequest)">
            <summary>
            Generates the login URL.
            </summary>
            <param name="request">The request.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Security.ExternalAuthentication.Facebook.Authenticate(System.Web.HttpRequest,System.String@,System.String@)">
            <summary>
            Authenticates the specified request.
            </summary>
            <param name="request">The request.</param>
            <param name="username">The username.</param>
            <param name="returnUrl">The return URL.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Security.ExternalAuthentication.Facebook.ImageUrl">
            <summary>
            Gets the URL of an image that should be displayed.
            </summary>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Rock.Security.ExternalAuthentication.Facebook.Authenticate(Rock.Model.UserLogin,System.String)">
            <summary>
            Authenticates the user based on user name and password
            </summary>
            <param name="user">The user.</param>
            <param name="password">The password.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Rock.Security.ExternalAuthentication.Facebook.EncodePassword(Rock.Model.UserLogin,System.String)">
            <summary>
            Encodes the password.
            </summary>
            <param name="user">The user.</param>
            <param name="password">The password.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Rock.Security.ExternalAuthentication.Facebook.ChangePassword(Rock.Model.UserLogin,System.String,System.String,System.String@)">
            <summary>
            Changes the password.
            </summary>
            <param name="user">The user.</param>
            <param name="oldPassword">The old password.</param>
            <param name="newPassword">The new password.</param>
            <param name="warningMessage">The warning message.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="P:Rock.Security.ExternalAuthentication.Facebook.ServiceType">
            <summary>
            Gets the type of the service.
            </summary>
            <value>
            The type of the service.
            </value>
        </member>
        <member name="P:Rock.Security.ExternalAuthentication.Facebook.RequiresRemoteAuthentication">
            <summary>
            Determines if user is directed to another site (i.e. Facebook, Gmail, Twitter, etc) to confirm approval of using
            that site's credentials for authentication.
            </summary>
            <value>
            The requires remote authentication.
            </value>
        </member>
        <member name="P:Rock.Security.ExternalAuthentication.Facebook.SupportsChangePassword">
            <summary>
            Gets a value indicating whether [supports change password].
            </summary>
            <value>
            <c>true</c> if [supports change password]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Rock.Security.GlobalDefault">
            <summary>
            A generic ISecured entity
            </summary>
        </member>
        <member name="M:Rock.Security.GlobalDefault.IsAuthorized(System.String,Rock.Model.Person)">
            <summary>
            Return <c>true</c> if the user is authorized to perform the selected action on this object.
            </summary>
            <param name="action">The action.</param>
            <param name="person">The person.</param>
            <returns>
              <c>true</c> if the specified action is authorized; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Rock.Security.GlobalDefault.IsAllowedByDefault(System.String)">
            <summary>
            If a user or role is not specifically allowed or denied to perform the selected action,
            return <c>true</c> if they should be allowed anyway or <c>false</c> if not.
            </summary>
            <param name="action">The action.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Security.GlobalDefault.IsPrivate(System.String,Rock.Model.Person)">
            <summary>
            Determines whether the specified action is private (Only the current user has access).
            </summary>
            <param name="action">The action.</param>
            <param name="person">The person.</param>
            <returns>
              <c>true</c> if the specified action is private; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Rock.Security.GlobalDefault.MakePrivate(System.String,Rock.Model.Person)">
            <summary>
            Makes the action on the current entity private (Only the current user will have access).
            </summary>
            <param name="action">The action.</param>
            <param name="person">The person.</param>
        </member>
        <member name="M:Rock.Security.GlobalDefault.MakeUnPrivate(System.String,Rock.Model.Person)">
            <summary>
            If action on the current entity is private, removes security that made it private.
            </summary>
            <param name="action">The action.</param>
            <param name="person">The person.</param>
        </member>
        <member name="M:Rock.Security.GlobalDefault.Read(System.Int32)">
            <summary>
            Reads the specified id.
            </summary>
            <param name="id">The id.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Security.GlobalDefault.ToString">
            <summary>
            Just return empty string
            </summary>
            <returns></returns>
        </member>
        <member name="P:Rock.Security.GlobalDefault.TypeId">
            <summary>
            Gets the Entity Type ID for this entity.
            </summary>
            <value>
            The type id.
            </value>
        </member>
        <member name="P:Rock.Security.GlobalDefault.TypeName">
            <summary>
            The auth entity. Classes that implement the <see cref="T:Rock.Security.ISecured"/> interface should return
            a value that is unique across all <see cref="T:Rock.Security.ISecured"/> classes.  Typically this is the
            qualified name of the class.
            </summary>
        </member>
        <member name="P:Rock.Security.GlobalDefault.Id">
            <summary>
            The Id
            </summary>
        </member>
        <member name="P:Rock.Security.GlobalDefault.ParentAuthority">
            <summary>
            A parent authority.  If a user is not specifically allowed or denied access to
            this object, Rock will check access to the parent authority specified by this property.
            </summary>
        </member>
        <member name="P:Rock.Security.GlobalDefault.SupportedActions">
            <summary>
            A dictionary of actions that this class supports and the description of each.
            </summary>
        </member>
        <member name="T:Rock.Security.AuthenticationContainer">
            <summary>
            MEF Container class for Authentication Componenets
            </summary>
        </member>
        <member name="M:Rock.Security.AuthenticationContainer.GetComponent(System.String)">
            <summary>
            Gets the component with the matching Entity Type Name
            </summary>
            <param name="entityTypeName">Name of the entity type.</param>
            <returns></returns>
        </member>
        <member name="P:Rock.Security.AuthenticationContainer.Instance">
            <summary>
            Gets the instance.
            </summary>
        </member>
        <member name="T:Rock.Services.NuGet.RockPackagePathResolver">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Services.NuGet.RockPackagePathResolver.#ctor(NuGet.IFileSystem)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Services.NuGet.RockPackagePathResolver"/> class.
            </summary>
            <param name="fileSystem">The file system.</param>
        </member>
        <member name="M:Rock.Services.NuGet.RockPackagePathResolver.GetPackageDirectory(System.String,NuGet.SemanticVersion)">
            <summary>
            Gets the package directory.
            </summary>
            <param name="packageId">The package id.</param>
            <param name="version">The version.</param>
            <returns></returns>
        </member>
        <member name="T:Rock.Services.NuGet.WebProjectManager">
            <summary>
            This is the service layer that handles installing, updating, removing Packages (aka Plugins)
            from the website / local filesystem and the Rock Quarry (our NuGet server).
            </summary>
        </member>
        <member name="M:Rock.Services.NuGet.WebProjectManager.#ctor(System.String,System.String)">
            <summary>
            Creates a WebProjectManager service.
            </summary>
            <param name="remoteSource">URL of the NuGet server API (ex, http://nuget.org/api/v2 ).</param>
            <param name="siteRoot">The physical path to the web root.</param>
        </member>
        <member name="M:Rock.Services.NuGet.WebProjectManager.ProjectManager_PackageReferenceAdded(System.Object,NuGet.PackageOperationEventArgs)">
            <summary>
            NOTE ***************************************************************************
            This event handler is needed because the current version of NuGet.Core has a bug 
            when calling WebProjectSsyte.AddReferences() method. It is passing a null stream 
            object resulting in zero byte bin files getting written.
            
            SEE: 
                http://nuget.codeplex.com/discussions/253750
                http://nuget.codeplex.com/discussions/479191
                http://nuget.codeplex.com/workitem/4029
            ********************************************************************************
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:NuGet.PackageOperationEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Rock.Services.NuGet.WebProjectManager.GetLatestRemotePackages(System.String,System.Boolean)">
            <summary>
            Gets the newest/latest package or all of them matching the given keyword search.
            </summary>
            <param name="searchTerms">a string of space delimited search terms</param>
            <param name="includeAllVersions">if true, returns all matching packages; otherwise only the latest</param>
            <returns>
            a list of packages
            </returns>
        </member>
        <member name="M:Rock.Services.NuGet.WebProjectManager.GetRemotePackages(System.String)">
            <summary>
            Gets all matching packages for the given keyword search.
            </summary>
            <param name="searchTerms">a string of space delimited search terms</param>
            <returns>a list of packages</returns>
        </member>
        <member name="M:Rock.Services.NuGet.WebProjectManager.GetInstalledPackages(System.String)">
            <summary>
            Gets all matching installed packages for the given keyword search.
            </summary>
            <param name="searchTerms">a string of space delimited search terms</param>
            <returns>a list of packages</returns>
        </member>
        <member name="M:Rock.Services.NuGet.WebProjectManager.GetInstalledPackage(System.String)">
            <summary>
            Gets the locally installed package for the given id.
            </summary>
            <param name="packageId">the Id of a package</param>
            <returns>a package</returns>
        </member>
        <member name="M:Rock.Services.NuGet.WebProjectManager.GetRemotePackage(System.String)">
            <summary>
            Gets a package for the given id from the source repository.
            </summary>
            <param name="packageId">the Id of a package</param>
            <returns>a package</returns>
        </member>
        <member name="M:Rock.Services.NuGet.WebProjectManager.InstallPackage(NuGet.IPackage)">
            <summary>
            Installs and adds a package reference to the project
            </summary>
            <returns>Warnings encountered when installing the package.</returns>
        </member>
        <member name="M:Rock.Services.NuGet.WebProjectManager.UpdatePackage(NuGet.IPackage)">
            <summary>
            Updates a package reference. Installs the package to the App_Data repository if it does not already exist.
            </summary>
            <returns>Warnings encountered when updating the package.</returns>
        </member>
        <member name="M:Rock.Services.NuGet.WebProjectManager.UninstallPackage(NuGet.IPackage,System.Boolean)">
            <summary>
            Removes a package reference and uninstalls the package
            </summary>
            <returns>Warnings encountered when uninstalling the package.</returns>
        </member>
        <member name="M:Rock.Services.NuGet.WebProjectManager.IsPackageInstalled(NuGet.IPackage)">
            <summary>
            Will let you know if this exact package is installed locally
            </summary>
            <param name="package"></param>
            <returns></returns>
        </member>
        <member name="M:Rock.Services.NuGet.WebProjectManager.IsPackageInstalled(NuGet.IPackage,System.Boolean)">
            <summary>
            Will let you know if this package is installed locally. If anyVersion is true
            it does not matter which version of the package; otherwise only returns true if
            an exact match.
            </summary>
            <param name="package"></param>
            <param name="anyVersion"></param>
            <returns></returns>
        </member>
        <member name="M:Rock.Services.NuGet.WebProjectManager.GetUpdate(NuGet.IPackage)">
            <summary>
            Gets the latest version of the given package.
            </summary>
            <param name="package">a package</param>
            <returns>a package; otherwise null if no package was found</returns>
        </member>
        <member name="M:Rock.Services.NuGet.WebProjectManager.GetUpdates(System.String)">
            <summary>
            Gets all listed versions of the given package.
            </summary>
            <param name="packageId">the Id of a package</param>
            <returns>
            a list of packages
            </returns>
        </member>
        <member name="M:Rock.Services.NuGet.WebProjectManager.PerformLoggedAction(System.Action)">
            <summary>
            Performs the logged action.
            </summary>
            <param name="action">The action.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Services.NuGet.WebProjectManager.GetPackagesRequiringLicenseAcceptance(NuGet.IPackage)">
            <summary>
            Gets the packages requiring license acceptance.
            </summary>
            <param name="package">The package.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Services.NuGet.WebProjectManager.GetPackagesRequiringLicenseAcceptance(NuGet.IPackage,NuGet.IPackageRepository,NuGet.IPackageRepository)">
            <summary>
            Gets the packages requiring license acceptance.
            </summary>
            <param name="package">The package.</param>
            <param name="localRepository">The local repository.</param>
            <param name="sourceRepository">The source repository.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Services.NuGet.WebProjectManager.GetPackageDependencies(NuGet.IPackage,NuGet.IPackageRepository,NuGet.IPackageRepository)">
            <summary>
            Gets the package dependencies.
            </summary>
            <param name="package">The package.</param>
            <param name="localRepository">The local repository.</param>
            <param name="sourceRepository">The source repository.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Services.NuGet.WebProjectManager.GetPackages(NuGet.IPackageRepository,System.String)">
            <summary>
            Gets the packages.
            </summary>
            <param name="repository">The repository.</param>
            <param name="searchTerm">The search term.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Services.NuGet.WebProjectManager.GetPackages(System.Linq.IQueryable{NuGet.IPackage},System.String)">
            <summary>
            Gets the packages.
            </summary>
            <param name="packages">The packages.</param>
            <param name="searchTerm">The search term.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Services.NuGet.WebProjectManager.GetWebRepositoryDirectory(System.String)">
            <summary>
            Gets the web repository directory.
            </summary>
            <param name="siteRoot">The site root.</param>
            <returns></returns>
        </member>
        <member name="P:Rock.Services.NuGet.WebProjectManager.LocalRepository">
            <summary>
            Represents the local NuGet package repository.
            </summary>
        </member>
        <member name="P:Rock.Services.NuGet.WebProjectManager.SourceRepository">
            <summary>
            Represents the remote/source NuGet package repository.
            </summary>
        </member>
        <member name="T:Rock.Services.NuGet.WebProjectManager.ErrorLogger">
            <summary>
            
            </summary>
        </member>
        <member name="F:Rock.Services.NuGet.WebProjectManager.ErrorLogger._errors">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Services.NuGet.WebProjectManager.ErrorLogger.Log(NuGet.MessageLevel,System.String,System.Object[])">
            <summary>
            Logs the specified level.
            </summary>
            <param name="level">The level.</param>
            <param name="message">The message.</param>
            <param name="args">The args.</param>
        </member>
        <member name="P:Rock.Services.NuGet.WebProjectManager.ErrorLogger.Errors">
            <summary>
            Gets the errors.
            </summary>
            <value>
            The errors.
            </value>
        </member>
        <member name="T:Rock.Services.NuGet.WebProjectSystem">
            <summary>
            
            </summary>
        </member>
        <member name="F:Rock.Services.NuGet.WebProjectSystem._isBindingRedirectSupported">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Services.NuGet.WebProjectSystem.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Services.NuGet.WebProjectSystem"/> class.
            </summary>
            <param name="siteRoot">The site root.</param>
        </member>
        <member name="M:Rock.Services.NuGet.WebProjectSystem.AddFrameworkReference(System.String)">
            <summary>
            Adds the framework reference.
            </summary>
            <param name="name">The name.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Rock.Services.NuGet.WebProjectSystem.AddReference(System.String,System.IO.Stream)">
            <summary>
            Adds the reference.
            </summary>
            <param name="referencePath">The reference path.</param>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:Rock.Services.NuGet.WebProjectSystem.GetReferencePath(System.String)">
            <summary>
            Gets the reference path.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Services.NuGet.WebProjectSystem.IsSupportedFile(System.String)">
            <summary>
            Determines whether [is supported file] [the specified path].
            </summary>
            <param name="path">The path.</param>
            <returns>
              <c>true</c> if [is supported file] [the specified path]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Rock.Services.NuGet.WebProjectSystem.ReferenceExists(System.String)">
            <summary>
            References the exists.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Services.NuGet.WebProjectSystem.RemoveReference(System.String)">
            <summary>
            Removes the reference.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Rock.Services.NuGet.WebProjectSystem.ResolvePath(System.String)">
            <summary>
            Resolves the path.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Services.NuGet.WebProjectSystem.GetPropertyValue(System.String)">
            <summary>
            Gets the property value.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Services.NuGet.WebProjectSystem.AddFile(System.String,System.IO.Stream)">
            <summary>
            Workaround until we get to NuGet 2.7 and to del with the
            "because it is being used by another process" dll problem.
            This method will always add the file to the filesystem.
            </summary>
            <param name="path"></param>
            <param name="stream"></param>
        </member>
        <member name="M:Rock.Services.NuGet.WebProjectSystem.FileExists(System.String)">
            <summary>
            Workaround until we get to NuGet 2.7 - Always treat the file as though it does not exist so that it will be replaced.
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Rock.Services.NuGet.WebProjectSystem.ProcessFilesToDelete(System.String)">
            <summary>
            Deletes each file listed in the App_Data/deletefile.lst and then deletes that file.
            </summary>
        </member>
        <member name="M:Rock.Services.NuGet.WebProjectSystem.ProcessXmlDocumentTransformation(System.String)">
            <summary>
            Transforms the file for the corresponding XDT file.
            </summary>
            <param name="transformFile">The transform file.</param>
            <returns>
            true if the transformation was successful; false otherwise.
            </returns>
        </member>
        <member name="M:Rock.Services.NuGet.WebProjectSystem.AddImport(System.String,NuGet.ProjectImportLocation)">
            <summary>
            Adds the import.
            </summary>
            <param name="targetFullPath">The target full path.</param>
            <param name="location">The location.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Rock.Services.NuGet.WebProjectSystem.FileExistsInProject(System.String)">
            <summary>
            Files the exists in project.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Rock.Services.NuGet.WebProjectSystem.RemoveImport(System.String)">
            <summary>
            Removes the import.
            </summary>
            <param name="targetFullPath">The target full path.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="P:Rock.Services.NuGet.WebProjectSystem.IsBindingRedirectSupported">
            <summary>
            Gets a value indicating whether this instance is binding redirect supported.
            </summary>
            <value>
            <c>true</c> if this instance is binding redirect supported; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Services.NuGet.WebProjectSystem.ProjectName">
            <summary>
            Gets the name of the project.
            </summary>
            <value>
            The name of the project.
            </value>
        </member>
        <member name="P:Rock.Services.NuGet.WebProjectSystem.TargetFramework">
            <summary>
            Gets the target framework.
            </summary>
            <value>
            The target framework.
            </value>
        </member>
        <member name="T:Rock.SystemGuid.BlockType">
            <summary>
            System Blocks.  NOTE: Some of these are referenced in Migrations to avoid string-typos.
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.BlockType.PLUGIN_MANAGER">
            <summary>
            Gets the Plugin Manager guid
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.BlockType.HTML_CONTENT">
            <summary>
            HTML Content Block Type Guid
            </summary>
        </member>
        <member name="T:Rock.SystemGuid.Site">
            <summary>
            System Site guids
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.Site.SITE_ROCK_INTERNAL">
            <summary>
            Gets the default Rock Site guid
            </summary>
        </member>
        <member name="T:Rock.SystemGuid.GroupRole">
            <summary>
            Group Role System Guids
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.GroupRole.GROUPROLE_FAMILY_MEMBER_ADULT">
            <summary>
            Gets the adult family member role
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.GroupRole.GROUPROLE_FAMILY_MEMBER_CHILD">
            <summary>
            Gets the child family member role
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.GroupRole.GROUPROLE_KNOWN_RELATIONSHIPS_OWNER">
            <summary>
            Gets the Known Relationships owner role.
            </summary>
            <value>
            The role Guid
            </value>
        </member>
        <member name="F:Rock.SystemGuid.GroupRole.GROUPROLE_KNOWN_RELATIONSHIPS_CAN_CHECK_IN">
            <summary>
            A person that can be checked in by the owner of this known relationship group
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.GroupRole.GROUPROLE_KNOWN_RELATIONSHIPS_ALLOW_CHECK_IN_BY">
            <summary>
            A person that can check in the owner of this known relationship group
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.GroupRole.GROUPROLE_KNOWN_RELATIONSHIPS_GRANDPARENT">
            <summary>
            A grandparent of the owner of this known relationship group
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.GroupRole.GROUPROLE_KNOWN_RELATIONSHIPS_GRANDCHILD">
            <summary>
            A grandchild of the owner of this known relationship group
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.GroupRole.GROUPROLE_KNOWN_RELATIONSHIPS_SIBLING">
            <summary>
            A brother or sister of the owner of this known relationship group
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.GroupRole.GROUPROLE_KNOWN_RELATIONSHIPS_INVITED">
            <summary>
            A person that was first invited by the owner of this known relationship group
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.GroupRole.GROUPROLE_KNOWN_RELATIONSHIPS_INVITED_BY">
            <summary>
            The person that first invited the owner of this known relationship group
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.GroupRole.GROUPROLE_KNOWN_RELATIONSHIPS_STEP_CHILD">
            <summary>
            A step child of the owner of this known relationship group
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.GroupRole.GROUPROLE_KNOWN_RELATIONSHIPS_STEP_PARENT">
            <summary>
            A step parent of the owner of this known relationship group
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.GroupRole.GROUPROLE_KNOWN_RELATIONSHIPS_CHILD">
            <summary>
            An adult child of the owner of this known relationship group
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.GroupRole.GROUPROLE_KNOWN_RELATIONSHIPS_PARENT">
            <summary>
            The parent of the owner of this known relationship group
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.GroupRole.GROUPROLE_KNOWN_RELATIONSHIPS_PREVIOUS_SPOUSE">
            <summary>
            Role to identify former spouses after divorce.
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.GroupRole.GROUPROLE_KNOWN_RELATIONSHIPS_BUSINESS_CONTACT">
            <summary>
            Role to identify contacts related to a business.
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.GroupRole.GROUPROLE_KNOWN_RELATIONSHIPS_BUSINESS">
            <summary>
            A role to identify the business a person owns.
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.GroupRole.GROUPROLE_KNOWN_RELATIONSHIPS_PRINCIPLE">
            <summary>
            A role to identify the owner of a business.
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.GroupRole.GROUPROLE_IMPLIED_RELATIONSHIPS_OWNER">
            <summary>
            Gets the Implied Relationships owner role.
            </summary>
            <value>
            The role Guid.
            </value>
        </member>
        <member name="F:Rock.SystemGuid.GroupRole.GROUPROLE_IMPLIED_RELATIONSHIPS_RELATED">
            <summary>
            Gets the Implied Relationships related role.
            </summary>
            <value>
            The role Guid.
            </value>
        </member>
        <member name="T:Rock.SystemGuid.DefinedValue">
            <summary>
            Static Guids used by the Rock application
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.DefinedValue.COMMUNICATION_CHANNEL_EMAIL">
            <summary>
            Email communication
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.DefinedValue.CHECKIN_SEARCH_TYPE_PHONE_NUMBER">
             <summary>
             Phone number search type
            
             </summary>
        </member>
        <member name="F:Rock.SystemGuid.DefinedValue.CHECKIN_SEARCH_TYPE_BARCODE">
            <summary>
            Barcode Search Type
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.DefinedValue.CHECKIN_SEARCH_TYPE_NAME">
            <summary>
            Name Search Type
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.DefinedValue.DEVICE_TYPE_CHECKIN_KIOSK">
            <summary>
            Check-in Kiosk device type
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.DefinedValue.DEVICE_TYPE_GIVING_KIOSK">
            <summary>
            Giving Kiosk device type
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.DefinedValue.DEVICE_TYPE_PRINTER">
            <summary>
            Printer device type
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.DefinedValue.CURRENCY_TYPE_CASH">
            <summary>
            Cash
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.DefinedValue.CURRENCY_TYPE_CHECK">
            <summary>
            Check
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.DefinedValue.CURRENCY_TYPE_CREDIT_CARD">
            <summary>
            Credit Card
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.DefinedValue.CURRENCY_TYPE_ACH">
            <summary>
            ACH
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.DefinedValue.TRANSACTION_TYPE_CONTRIBUTION">
            <summary>
            A Contribution Transaction
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.DefinedValue.TRANSACTION_TYPE_EVENT_REGISTRATION">
            <summary>
            An Event Registration Transaction
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.DefinedValue.TRANSACTION_IMAGE_TYPE_CHECK_FRONT">
            <summary>
            Front of Check
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.DefinedValue.TRANSACTION_IMAGE_TYPE_CHECK_BACK">
            <summary>
            Back of Check
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.DefinedValue.TRANSACTION_IMAGE_TYPE_ENVELOPE_FRONT">
            <summary>
            Front of Envelope
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.DefinedValue.TRANSACTION_IMAGE_TYPE_ENVELOPE_BACK">
            <summary>
            Back of Envelope
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.DefinedValue.GROUP_LOCATION_TYPE_HOME">
            <summary>
            Home location type
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.DefinedValue.GROUP_LOCATION_TYPE_WORK">
            <summary>
            Work Record Type
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.DefinedValue.GROUP_LOCATION_TYPE_PREVIOUS">
            <summary>
            Previous Location Type
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.DefinedValue.GROUP_LOCATION_TYPE_MEETING_LOCATION">
            <summary>
            Meeting Location Type
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.DefinedValue.GROUPTYPE_PURPOSE_CHECKIN_TEMPLATE">
            <summary>
            Group Type Purpose of Check-in Template
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.DefinedValue.GROUPTYPE_PURPOSE_CHECKIN_FILTER">
            <summary>
            Group Type Purpose of Check-in Filter
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.DefinedValue.TRANSACTION_FREQUENCY_ONE_TIME">
            <summary>
            One Time
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.DefinedValue.TRANSACTION_FREQUENCY_WEEKLY">
            <summary>
            Weekly
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.DefinedValue.TRANSACTION_FREQUENCY_BIWEEKLY">
            <summary>
            Every two weeks
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.DefinedValue.TRANSACTION_FREQUENCY_TWICEMONTHLY">
            <summary>
            Twice a month
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.DefinedValue.TRANSACTION_FREQUENCY_MONTHLY">
            <summary>
            Monthly
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.DefinedValue.TRANSACTION_FREQUENCY_QUARTERLY">
            <summary>
            Monthly
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.DefinedValue.TRANSACTION_FREQUENCY_TWICEYEARLY">
            <summary>
            Twice a year (every 6 months)
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.DefinedValue.TRANSACTION_FREQUENCY_YEARLY">
            <summary>
            Yearly
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.DefinedValue.NOTE_TYPE_MANUAL_NOTE">
            <summary>
            Manually entered note.
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.DefinedValue.METRIC_SOURCE_VALUE_TYPE_DATAVIEW">
            <summary>
            Metric values come from a dataview
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.DefinedValue.METRIC_SOURCE_VALUE_TYPE_MANUAL">
            <summary>
            Metric values are entered manually
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.DefinedValue.METRIC_SOURCE_VALUE_TYPE_SQL">
            <summary>
            Metric values are populated from custom sql
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.DefinedValue.PERSON_MARITAL_STATUS_MARRIED">
            <summary>
            Marital Status of Married
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.DefinedValue.PERSON_MARITAL_STATUS_SINGLE">
            <summary>
            Marital Status of Single
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.DefinedValue.PERSON_PHONE_TYPE_MOBILE">
            <summary>
            Person Mobile Phone
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.DefinedValue.PERSON_PHONE_TYPE_HOME">
            <summary>
            Person Home Phone
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.DefinedValue.PERSON_PHONE_TYPE_WORK">
            <summary>
            Person Home Phone
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.DefinedValue.PERSON_RECORD_STATUS_ACTIVE">
            <summary>
            Active Record Status
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.DefinedValue.PERSON_RECORD_STATUS_INACTIVE">
            <summary>
            Inactive Record Status
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.DefinedValue.PERSON_RECORD_STATUS_PENDING">
            <summary>
            Pending Record Status
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.DefinedValue.PERSON_RECORD_TYPE_PERSON">
            <summary>
            Person Record Type
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.DefinedValue.PERSON_RECORD_TYPE_BUSINESS">
            <summary>
            Business Record Type
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.DefinedValue.PERSON_CONNECTION_STATUS_MEMBER">
            <summary>
            Member Person Connection Status
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.DefinedValue.PERSON_CONNECTION_STATUS_ATTENDEE">
            <summary>
            Attendee Person Connection Status
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.DefinedValue.PERSON_CONNECTION_STATUS_VISITOR">
            <summary>
            Visitor Person Connection Status
            TODO: some places have B91BA046-BC1E-400C-B85D-638C1F4E0CE2
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.DefinedValue.PERSON_REVIEW_REASON_SELF_INACTIVATED">
            <summary>
            Member Person Connection Status
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.DefinedValue.MAP_STYLE_GOOGLE">
            <summary>
            Google map style
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.DefinedValue.MAP_STYLE_ROCK">
            <summary>
            The standard Rock map style
            </summary>
        </member>
        <member name="T:Rock.SystemGuid.GroupType">
            <summary>
            System Group Types
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.GroupType.GROUPTYPE_SECURITY_ROLE">
            <summary>
            Security Role group type guid
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.GroupType.GROUPTYPE_FAMILY">
            <summary>
            Family group type guid
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.GroupType.GROUPTYPE_EVENTATTENDEES">
            <summary>
            Event Attendees group type guid
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.GroupType.GROUPTYPE_KNOWN_RELATIONSHIPS">
            <summary>
            Know relationship group type guid
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.GroupType.GROUPTYPE_IMPLIED_RELATIONSHIPS">
            <summary>
            Implied relationship group type guid
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.GroupType.GROUPTYPE_SERVING_TEAM">
            <summary>
            Serving Team group type guid
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.GroupType.GROUPTYPE_SMALL_GROUP_SECTION">
            <summary>
            Small Group Section group type guid
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.GroupType.GROUPTYPE_SMALL_GROUP">
            <summary>
            Small Group group type guid
            </summary>
        </member>
        <member name="T:Rock.SystemGuid.FieldType">
            <summary>
            System Blocks.  NOTE: Some of these are referenced in Migrations to avoid string-typos.
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.FieldType.BINARY_FILE">
            <summary>
            Binary File field type
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.FieldType.BINARY_FILE_TYPE">
            <summary>
            Binary File Type field type
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.FieldType.BOOLEAN">
            <summary>
            Boolean field type
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.FieldType.CAMPUS">
            <summary>
            Campus field type
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.FieldType.CAMPUSES">
            <summary>
            Campuses field type
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.FieldType.CATEGORIES">
            <summary>
            Categories field type
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.FieldType.CATEGORY">
            <summary>
            Category field type
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.FieldType.CODE_EDITOR">
            <summary>
            Code Editor field type
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.FieldType.COLOR">
            <summary>
            Color field type
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.FieldType.COMMUNICATION_TEMPLATE">
            <summary>
            Communication Template field type
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.FieldType.COMPONENT">
            <summary>
            Component field type
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.FieldType.COMPONENTS">
            <summary>
            Components field type
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.FieldType.DATE">
            <summary>
            Date field type
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.FieldType.DATE_RANGE">
            <summary>
            Date Range field type
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.FieldType.DAY_OF_WEEK">
            <summary>
            Day Of Week field type
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.FieldType.DAYS_OF_WEEK">
            <summary>
            Days Of Week field type
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.FieldType.DECIMAL">
            <summary>
            Decimal field type
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.FieldType.DECIMAL_RANGE">
            <summary>
            Decimal Range field type
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.FieldType.DEFINED_TYPE">
            <summary>
            Defined Type field type
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.FieldType.DEFINED_VALUE">
            <summary>
            Defined Value field type
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.FieldType.EMAIL_TEMPLATE">
            <summary>
            Email Template field type
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.FieldType.ENTITYTYPE">
            <summary>
            EntityType field type
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.FieldType.FILE">
            <summary>
            File field type
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.FieldType.FINANCIAL_ACCOUNT">
            <summary>
            Financial Account field type
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.FieldType.FINANCIAL_ACCOUNTS">
            <summary>
            Financial Accounts field type
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.FieldType.GROUP">
            <summary>
            Group field type
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.FieldType.GROUP_LOCATION_TYPE">
            <summary>
            Group Location Type field type
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.FieldType.GROUP_ROLE">
            <summary>
            Group Role field type
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.FieldType.GROUP_TYPE">
            <summary>
            Group Type field type
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.FieldType.GROUP_TYPES">
            <summary>
            Group Types field type
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.FieldType.HTML">
            <summary>
            Html field type
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.FieldType.IMAGE">
            <summary>
            Image field type
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.FieldType.INTEGER">
            <summary>
            Integer field type
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.FieldType.INTEGER_RANGE">
            <summary>
            Integer Range field type
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.FieldType.KEY_VALUE_LIST">
            <summary>
            Key Value List field type
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.FieldType.LOCATION">
            <summary>
            Location field type
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.FieldType.MEMO">
            <summary>
            Memo field type
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.FieldType.MULTI_SELECT">
            <summary>
            Multi-Select field type
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.FieldType.PAGE_REFERENCE">
            <summary>
            Page Reference field type
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.FieldType.PERSON">
            <summary>
            Person field type
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.FieldType.PERSON_BADGES">
            <summary>
            Person Badges field type
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.FieldType.REMOTE_AUTHS">
            <summary>
            Remote Auths field type
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.FieldType.SINGLE_SELECT">
            <summary>
            Single-Select field type
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.FieldType.SITE">
            <summary>
            Site field type
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.FieldType.TEXT">
            <summary>
            Text field type
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.FieldType.TIME">
            <summary>
            Time field type
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.FieldType.VIDEO">
            <summary>
            Video field type
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.FieldType.WORKFLOW_TYPE">
            <summary>
            Workflow Type field type
            </summary>
        </member>
        <member name="T:Rock.SystemGuid.Group">
            <summary>
            System Groups
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.Group.GROUP_ADMINISTRATORS">
            <summary>
            Gets the administrator group guid
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.Group.GROUP_STAFF_MEMBERS">
            <summary>
            Gets the staff member group guid
            </summary>
        </member>
        <member name="T:Rock.SystemGuid.DefinedType">
            <summary>
            Static Guids used by the Rock application
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.DefinedType.COMMUNICATION_CHANNEL">
            <summary>
            The types of communication supported (i.e. email, sms, twitter, app-push, etc)
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.DefinedType.COMMUNICATION_SMS_FROM">
            <summary>
            The list of values that SMS messages can be sent from.  Depending on provider, these may
            be phone numbers or short codes
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.DefinedType.COMMUNICATION_PHONE_COUNTRY_CODE">
            <summary>
            The list of phone country code formats and how to format their numbers 
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.DefinedType.CHECKIN_SEARCH_TYPE">
            <summary>
            Guid for check-in search type
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.DefinedType.DEVICE_TYPE">
            <summary>
            Guid for Device Type
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.DefinedType.EXTERNAL_APPLICATION">
            <summary>
            Guid for External Application
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.DefinedType.FINANCIAL_ACCOUNT_TYPE">
            <summary>
            Guid for Financial Currency Type
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.DefinedType.FINANCIAL_CURRENCY_TYPE">
            <summary>
            Guid for Financial Currency Type
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.DefinedType.FINANCIAL_CREDIT_CARD_TYPE">
            <summary>
            Guid for Financial Credit Card Type
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.DefinedType.FINANCIAL_FREQUENCY">
            <summary>
            Guid for Financial Frequency 
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.DefinedType.FINANCIAL_SOURCE_TYPE">
            <summary>
            Guid for Financial Source Type
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.DefinedType.FINANCIAL_TRANSACTION_REFUND_REASON">
            <summary>
            Guid for Financial Transaction Type
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.DefinedType.FINANCIAL_TRANSACTION_IMAGE_TYPE">
            <summary>
            Guid for Financial transaction image type
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.DefinedType.FINANCIAL_TRANSACTION_TYPE">
            <summary>
            Guid for Financial Transaction Type
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.DefinedType.GROUP_LOCATION_TYPE">
            <summary>
            Guid for the types of Group Locations (such as Home, Main Office, etc)
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.DefinedType.GROUPTYPE_PURPOSE">
            <summary>
            Guid for GroupType Purpose
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.DefinedType.LOCATION_ADDRESS_STATE">
            <summary>
            Guid for the types of States that can be tied to a Location's address.
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.DefinedType.LOCATION_TYPE">
            <summary>
            Guid for the types of named locations (such as Campus, Building, Room, etc)
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.DefinedType.MARKETING_CAMPAIGN_AUDIENCE_TYPE">
            <summary>
            Guid for Marketing Campaign Audience Type
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.DefinedType.METRIC_SOURCE_TYPE">
            <summary>
            Metric Source Type
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.DefinedType.PERSON_RECORD_TYPE">
            <summary>
            Guid for the types of Person Records (such as person, business, etc.)
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.DefinedType.PERSON_RECORD_STATUS">
            <summary>
            Guid for the types of Person Record Statuses (such as active, inactive, pending, etc.)
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.DefinedType.PERSON_RECORD_STATUS_REASON">
            <summary>
            Guid for the types of Person Record Status Reasons (such as deceased, moved, etc.)
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.DefinedType.PERSON_CONNECTION_STATUS">
            <summary>
            Guid for the person'S connection status (such as member, attendee, participant, etc.)
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.DefinedType.PERSON_REVIEW_REASON">
            <summary>
            Guid for the reasons a person record needs to be reviewed
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.DefinedType.PERSON_TITLE">
            <summary>
            Guid for the types of Person Titles (such as Mr., Mrs., Dr., etc.)
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.DefinedType.PERSON_SUFFIX">
            <summary>
            Guid for the types of Person Suffixes (such as Jr., Sr., etc.)
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.DefinedType.PERSON_MARITAL_STATUS">
            <summary>
            Guid for the types of Person Marital Statuses (such as Married, Single, Divorced, Widowed, etc.)
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.DefinedType.PERSON_PHONE_TYPE">
            <summary>
            Guid for the types of Person phone numbers (such as Primary, Secondary, etc.)
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.DefinedType.PERSON_ABILITY_LEVEL_TYPE">
            <summary>
            Guid for the types of possible check-in system ability levels (such as Infant, Crawler, etc.)
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.DefinedType.MAP_STYLES">
            <summary>
            Guid for the types of map styles
            </summary>
        </member>
        <member name="T:Rock.SystemGuid.Page">
            <summary>
            System Pages.  NOTE: Some of these are referenced in Migrations to avoid string-typos.
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.Page.PLUGIN_SETTINGS">
            <summary>
            Gets the Plugin Settings guid
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.Page.PLUGIN_MANAGER">
            <summary>
            Gets the Plugin Manager guid
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.Page.CKEDITOR_ROCKFILEBROWSER_PLUGIN_FRAME">
            <summary>
            The ckeditor rockfilebrowser plugin frame
            </summary>
        </member>
        <member name="T:Rock.Transactions.AuditTransaction">
            <summary>
            Writes entity audits 
            </summary>
        </member>
        <member name="M:Rock.Transactions.AuditTransaction.Execute">
            <summary>
            Execute method to write transaction to the database.
            </summary>
        </member>
        <member name="P:Rock.Transactions.AuditTransaction.Audits">
            <summary>
            Gets or sets the audits.
            </summary>
            <value>
            The audits.
            </value>
        </member>
        <member name="T:Rock.Transactions.WorkflowTriggerTransaction">
            <summary>
            Writes any entity chnages that are configured to be tracked
            </summary>
        </member>
        <member name="M:Rock.Transactions.WorkflowTriggerTransaction.Execute">
            <summary>
            Execute method to write transaction to the database.
            </summary>
        </member>
        <member name="P:Rock.Transactions.WorkflowTriggerTransaction.Trigger">
            <summary>
            Gets or sets the workflow trigger.
            </summary>
            <value>
            The workflow trigger.
            </value>
        </member>
        <member name="P:Rock.Transactions.WorkflowTriggerTransaction.Entity">
            <summary>
            Gets or sets the entity.
            </summary>
            <value>
            The entity.
            </value>
        </member>
        <member name="P:Rock.Transactions.WorkflowTriggerTransaction.PersonAlias">
            <summary>
            Gets or sets the person id.
            </summary>
            <value>
            The person id.
            </value>
        </member>
        <member name="T:Rock.Transactions.UserLastActivityTransaction">
            <summary>
            Tracks when a person is viewed.
            </summary>
        </member>
        <member name="M:Rock.Transactions.UserLastActivityTransaction.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Transactions.UserLastActivityTransaction"/> class.
            </summary>
        </member>
        <member name="M:Rock.Transactions.UserLastActivityTransaction.Execute">
            <summary>
            Execute method to write transaction to the database.
            </summary>
        </member>
        <member name="P:Rock.Transactions.UserLastActivityTransaction.UserId">
            <summary>
            Gets or sets the user id.
            </summary>
            <value>
            The user id.
            </value>
        </member>
        <member name="P:Rock.Transactions.UserLastActivityTransaction.LastActivityDate">
            <summary>
            Gets or sets the last activity date.
            </summary>
            <value>
            The last activity date.
            </value>
        </member>
        <member name="P:Rock.Transactions.UserLastActivityTransaction.SessionUserId">
            <summary>
            Gets or sets the rock user id in session.
            </summary>
            <value>
            The rock user id in session.
            </value>
        </member>
        <member name="P:Rock.Transactions.UserLastActivityTransaction.IsOnLine">
            <summary>
            Gets or sets a value indicating whether [is on line].
            </summary>
            <value>
              <c>true</c> if [is on line]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Rock.Transactions.PersonViewTransaction">
            <summary>
            Tracks when a person is viewed.
            </summary>
        </member>
        <member name="M:Rock.Transactions.PersonViewTransaction.Execute">
            <summary>
            Execute method to write transaction to the database.
            </summary>
        </member>
        <member name="P:Rock.Transactions.PersonViewTransaction.ViewerPersonAliasId">
            <summary>
            Gets or sets the viewer person id.
            </summary>
            <value>
            The viewer person id.
            </value>
        </member>
        <member name="P:Rock.Transactions.PersonViewTransaction.TargetPersonAliasId">
            <summary>
            Gets or sets the target person id.
            </summary>
            <value>
            The target person id.
            </value>
        </member>
        <member name="P:Rock.Transactions.PersonViewTransaction.IPAddress">
            <summary>
            Gets or sets the IP address that requested the page.
            </summary>
            <value>
            IP Address.
            </value>
        </member>
        <member name="P:Rock.Transactions.PersonViewTransaction.Source">
            <summary>
            Gets or sets the source of the view (site id or application name)
            </summary>
            <value>
            Source.
            </value>
        </member>
        <member name="P:Rock.Transactions.PersonViewTransaction.DateTimeViewed">
            <summary>
            Gets or sets the DateTime the person was viewed.
            </summary>
            <value>
            Date Viewed.
            </value>
        </member>
        <member name="T:Rock.Transactions.PageViewTransaction">
            <summary>
            Tracks when a page is viewed.
            </summary>
        </member>
        <member name="M:Rock.Transactions.PageViewTransaction.Execute">
            <summary>
            Execute method to write transaction to the database.
            </summary>
        </member>
        <member name="P:Rock.Transactions.PageViewTransaction.PageId">
            <summary>
            Gets or sets the Page Id.
            </summary>
            <value>
            Page Id.
            </value>
        </member>
        <member name="P:Rock.Transactions.PageViewTransaction.SiteId">
            <summary>
            Gets or sets the Site Id.
            </summary>
            <value>
            Site Id.
            </value>
        </member>
        <member name="P:Rock.Transactions.PageViewTransaction.PersonAliasId">
            <summary>
            Gets or sets the Person Id.
            </summary>
            <value>
            Person Id.
            </value>
        </member>
        <member name="P:Rock.Transactions.PageViewTransaction.DateViewed">
            <summary>
            Gets or sets the DateTime the page was viewed.
            </summary>
            <value>
            Date Viewed.
            </value>
        </member>
        <member name="P:Rock.Transactions.PageViewTransaction.IPAddress">
            <summary>
            Gets or sets the IP address that requested the page.
            </summary>
            <value>
            IP Address.
            </value>
        </member>
        <member name="P:Rock.Transactions.PageViewTransaction.UserAgent">
            <summary>
            Gets or sets the browser vendor and version.
            </summary>
            <value>
            IP Address.
            </value>
        </member>
        <member name="P:Rock.Transactions.PageViewTransaction.SessionId">
            <summary>
            Gets or sets the session id.
            </summary>
            <value>
            Session Id.
            </value>
        </member>
        <member name="P:Rock.Transactions.PageViewTransaction.Url">
            <summary>
            Gets or sets the query string.
            </summary>
            <value>
            Query String.
            </value>
        </member>
        <member name="P:Rock.Transactions.PageViewTransaction.PageTitle">
            <summary>
            Gets or sets the page title.
            </summary>
            <value>
            Page Title.
            </value>
        </member>
        <member name="T:Rock.Transactions.RockQueue">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Transactions.RockQueue.#cctor">
            <summary>
            Initializes the <see cref="T:Rock.Transactions.RockQueue"/> class.
            </summary>
        </member>
        <member name="P:Rock.Transactions.RockQueue.TransactionQueue">
            <summary>
            Gets or sets the transaction queue.
            </summary>
            <value>
            The transaction queue.
            </value>
        </member>
        <member name="T:Rock.SystemGuid.SystemEmail">
            <summary>
            System Email Templates
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.SystemEmail.SECURITY_FORGOT_USERNAME">
            <summary>
            Gets the template guid for the Forgot Username email
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.SystemEmail.SECURITY_ACCOUNT_CREATED">
            <summary>
            Gets the template guid for the Account Created email
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.SystemEmail.SECURITY_CONFIRM_ACCOUNT">
            <summary>
            Gets the template guid for the Confirm Account email
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.SystemEmail.CONFIG_EXCEPTION_NOTIFICATION">
            <summary>
            Gets the template guid for the Exception Notification email
            </summary>
        </member>
        <member name="T:Rock.Model.WorkflowActivityType">
            <summary>
            Represents a WorkflowActivityType or set of <see cref="T:Rock.Model.WorkflowActionType">ActionsTypes</see> that are executed/performed as part of a <see cref="T:Rock.Model.WorkflowType"/>
            </summary>
        </member>
        <member name="M:Rock.Model.WorkflowActivityType.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this WorkflowActivityType.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this WorkflowActivityType.
            </returns>
        </member>
        <member name="P:Rock.Model.WorkflowActivityType.IsActive">
            <summary>
            Gets or sets a flag indicating if this WorkflowActivityType is active.
            </summary>
            <value>
            A <see cref="T:System.Boolean"/> value that is <c>true</c> if the WorkflowActivityType is active; otherwise <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Model.WorkflowActivityType.WorkflowTypeId">
            <summary>
            Gets or sets the WorkflowTypeId of the <see cref="T:Rock.Model.WorkflowType"/> that this WorkflowActivityType belongs to.
            </summary>
            <value>
            A <see cref="T:System.Int32"/> representing the WorkflowTypeId of the <see cref="T:Rock.Model.WorkflowType"/> that this WorkflowActivityType belongs to.
            </value>
        </member>
        <member name="P:Rock.Model.WorkflowActivityType.Name">
            <summary>
            Gets or sets the friendly Name of this WorkflowActivityType. This property is required.
            </summary>
            <value>
            A <see cref="T:System.String"/> representing the friendly name of this WorkflowActivityType
            </value>
        </member>
        <member name="P:Rock.Model.WorkflowActivityType.Description">
            <summary>
            Gets or sets the description or summary about this WorkflowActivityType.
            </summary>
            <value>
            A <see cref="T:System.String"/> containing a description or summary about this WorkflowActivityType.
            </value>
        </member>
        <member name="P:Rock.Model.WorkflowActivityType.IsActivatedWithWorkflow">
            <summary>
            Gets or sets a value indicating if this WorkflowActivityType is activated with the workflow.
            </summary>
            <value>
            A <see cref="T:System.Boolean"/> value that is <c>true</c> if this instance is activated with workflow; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Model.WorkflowActivityType.Order">
            <summary>
            Gets or sets the order that this WorkflowActivityType will be executed in the WorkflowType's process. 
            </summary>
            <value>
            A <see cref="T:System.Int32"/> indicating the order that this Activity will be executed in the Workflow.
            </value>
        </member>
        <member name="P:Rock.Model.WorkflowActivityType.WorkflowType">
            <summary>
            Gets or sets the <see cref="T:Rock.Model.WorkflowType"/> that runs this WorkflowActivityType.
            </summary>
            <value>
            The <see cref="T:Rock.Model.WorkflowType"/> that runs this WorkflowActivityType.
            </value>
        </member>
        <member name="P:Rock.Model.WorkflowActivityType.ActionTypes">
            <summary>
            Gets or sets a collection containing the <see cref="T:Rock.Model.WorkflowActionType">WorkflowActionTypes</see> that are 
            performed by this WorkflowActivityType.
            </summary>
            <value>
            The action types.
            </value>
        </member>
        <member name="P:Rock.Model.WorkflowActivityType.ParentAuthority">
            <summary>
            Gets the parent security authority for this WorkflowActivityType. 
            </summary>
            <value>
            An entity object implementing the  <see cref="T:Rock.Security.ISecured"/> interface, representing the parent security authority.
            </value>
        </member>
        <member name="T:Rock.Model.WorkflowActivityTypeConfiguration">
            <summary>
            ActivityType Configuration class.
            </summary>
        </member>
        <member name="M:Rock.Model.WorkflowActivityTypeConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.WorkflowActivityTypeConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Rock.Model.WorkflowActionType">
            <summary>
            Represents an <see cref="T:Rock.Model.WorkflowActionType"/> (action or task) that is performed as part of a <see cref="T:Rock.Model.WorkflowActionType"/>.
            </summary>
        </member>
        <member name="M:Rock.Model.WorkflowActionType.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Rock.Model.WorkflowActionType.ActivityTypeId">
            <summary>
            Gets or sets the ActivityTypeId of the <see cref="T:Rock.Model.WorkflowActivityType"/> that performs this Action Type.
            </summary>
            <value>
            The activity type id.
            </value>
        </member>
        <member name="P:Rock.Model.WorkflowActionType.Name">
            <summary>
            Gets or sets the friendly name of the ActionType
            </summary>
            <value>
            A <see cref="T:System.String"/> representing the name of the ActionType.
            </value>
        </member>
        <member name="P:Rock.Model.WorkflowActionType.Order">
            <summary>
            Gets or sets the order of the ActionType in the <see cref="T:Rock.Model.WorkflowActivityType"/>
            </summary>
            <value>
            Order.
            </value>
        </member>
        <member name="P:Rock.Model.WorkflowActionType.EntityTypeId">
            <summary>
            Gets or sets the EntityTypeId of the <see cref="T:Rock.Model.EntityType"/> that the action is operating against.
            </summary>
            <value>
            A <see cref="T:System.Int32"/> representing the EntityTypeId of the <see cref="T:Rock.Model.EntityType"/> that the action is operating against.
            </value>
        </member>
        <member name="P:Rock.Model.WorkflowActionType.IsActionCompletedOnSuccess">
            <summary>
            Gets or sets a value indicating whether this instance is action completed on success.
            </summary>
            <value>
            A <see cref="T:System.Boolean"/> value that is <c>true</c> if this instance is action completed on success; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Model.WorkflowActionType.IsActivityCompletedOnSuccess">
            <summary>
            Gets or sets a value indicating whether this instance is activity completed on success.
            </summary>
            <value>
            A <see cref="T:System.Boolean"/> that is <c>true</c> if this instance is activity completed on success; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Model.WorkflowActionType.ActivityType">
            <summary>
            Gets or sets the <see cref="T:Rock.Model.WorkflowActivityType"/> that performs this ActionType.
            </summary>
            <value>
            The <see cref="T:Rock.Model.WorkflowActivityType"/> that performs this ActionType.
            </value>
        </member>
        <member name="P:Rock.Model.WorkflowActionType.EntityType">
            <summary>
            Gets or sets the <see cref="T:Rock.Model.EntityType"/> of that this ActionType is running against.
            </summary>
            <value>
            The type of the entity.
            </value>
        </member>
        <member name="P:Rock.Model.WorkflowActionType.WorkflowAction">
            <summary>
            Gets the <see cref="T:Rock.Workflow.ActionComponent"/>
            </summary>
            <value>
            The <see cref="T:Rock.Workflow.ActionComponent"/>
            </value>
        </member>
        <member name="P:Rock.Model.WorkflowActionType.WorkflowForm">
            <summary>
            Gets or sets the workflow form.
            </summary>
            <value>
            The workflow form.
            </value>
        </member>
        <member name="P:Rock.Model.WorkflowActionType.ParentAuthority">
            <summary>
            Gets the parent security authority for this ActionType.
            </summary>
            <value>
            The parent security authority for this ActionType.
            </value>
        </member>
        <member name="T:Rock.Model.WorkflowActionTypeConfiguration">
            <summary>
            ActionType Configuration class.
            </summary>
        </member>
        <member name="M:Rock.Model.WorkflowActionTypeConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.WorkflowActionTypeConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Rock.Model.WorkflowActivity">
            <summary>
            Represents a persisted WorkflowActivity in Rock
            </summary>
        </member>
        <member name="M:Rock.Model.WorkflowActivity.Process(System.Object,System.Collections.Generic.List{System.String}@)">
            <summary>
            Processes this WorkflowAction
            </summary>
            <param name="entity">The entity that work is being performed against.</param>
            <param name="errorMessages">A <see cref="T:System.Collections.Generic.List`1"/> that will contain any error messages that are 
            returned while processing this WorkflowActivity</param>
            <returns>A <see cref="T:System.Boolean"/> vlaue that is <c>true</c> if the WorkflowActivity processes successfully; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Rock.Model.WorkflowActivity.AddLogEntry(System.String)">
            <summary>
            Adds a <see cref="T:Rock.Model.WorkflowLog"/> entry.
            </summary>
            <param name="logEntry">A <see cref="T:System.String"/> representing the body of the log entry.</param>
        </member>
        <member name="M:Rock.Model.WorkflowActivity.MarkComplete">
            <summary>
            Marks this WorkflowActivity as complete.
            </summary>
        </member>
        <member name="M:Rock.Model.WorkflowActivity.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this WorkflowActivity.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this WorkflowActivity.
            </returns>
        </member>
        <member name="M:Rock.Model.WorkflowActivity.AddSystemLogEntry(System.String)">
            <summary>
            Logs a system event to the <see cref="T:Rock.Model.WorkflowLog"/>
            </summary>
            <param name="logEntry">A <see cref="T:System.String"/> representing the log entry.</param>
        </member>
        <member name="M:Rock.Model.WorkflowActivity.Activate(Rock.Model.WorkflowActivityType,Rock.Model.Workflow)">
            <summary>
            Activates the specified WorkflowActivity
            </summary>
            <param name="activityType">The <see cref="T:Rock.Model.WorkflowActivityType"/> to activate.</param>
            <param name="workflow">The persisted <see cref="T:Rock.Model.Workflow"/> instance that this Workflow activity belongs to.</param>
            <returns>The activated <see cref="T:Rock.Model.WorkflowActivity"/>.</returns>
        </member>
        <member name="P:Rock.Model.WorkflowActivity.WorkflowId">
            <summary>
            Gets or sets the WorkflowId of the <see cref="T:Rock.Model.Workflow"/> instance that is performing this WorkflowActivity.
            </summary>
            <value>
            A <see cref="T:System.String"/> representing the WorkflowId of the <see cref="T:Rock.Model.Workflow"/> instance that is performing this WorkflowActivity.
            </value>
        </member>
        <member name="P:Rock.Model.WorkflowActivity.ActivityTypeId">
            <summary>
            Gets or sets the ActivityTypeId of the <see cref="T:Rock.Model.WorkflowActivityType"/> that is being executed.
            </summary>
            <value>
            A <see cref="T:System.Int32"/> representing the ActivityTypeID of the <see cref="T:Rock.Model.WorkflowActivity"/> that is being performed.
            </value>
        </member>
        <member name="P:Rock.Model.WorkflowActivity.ActivatedDateTime">
            <summary>
            Gets or sets the date and time that this WorkflowActivity was activated.
            </summary>
            <value>
            A <see cref="T:System.DateTime"/> representing the date and time that this WorkflowActivity was activated.
            </value>
        </member>
        <member name="P:Rock.Model.WorkflowActivity.LastProcessedDateTime">
            <summary>
            Gets or sets the date and time that this WorkflowActivity was last processed.
            </summary>
            <value>
            A <see cref="T:System.DateTime"/> representing the date and time that this WorkflowActivity was last processed.
            </value>
        </member>
        <member name="P:Rock.Model.WorkflowActivity.CompletedDateTime">
            <summary>
            Gets or sets the date and time that this WorkflowActivity completed.
            </summary>
            <value>
            A <see cref="T:System.DateTime"/> representing the date and time that this WorkflowActivity completed.
            </value>
        </member>
        <member name="P:Rock.Model.WorkflowActivity.Workflow">
            <summary>
            Gets or sets the <see cref="T:Rock.Model.Workflow"/> instance that is performing this WorkflowActivity.
            </summary>
            <value>
            The <see cref="T:Rock.Model.Workflow"/> instance that is performing this WorkflowActivity.
            </value>
        </member>
        <member name="P:Rock.Model.WorkflowActivity.ActivityType">
            <summary>
            Gets or sets the <see cref="T:Rock.Model.WorkflowActivityType"/> that is being performed by this WorkflowActivity instance.
            </summary>
            <value>
            The <see cref="T:Rock.Model.WorkflowActivityType"/> that is being performed by this WorkflowActivity instance.
            </value>
        </member>
        <member name="P:Rock.Model.WorkflowActivity.IsActive">
            <summary>
            Gets a value indicating whether this WorkflowActivity instance is active.
            </summary>
            <value>
             A <see cref="T:System.Boolean"/> value that is <c>true</c> if this instance is active; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Model.WorkflowActivity.Actions">
            <summary>
            Gets or sets a collection containing the <see cref="T:Rock.Model.WorkflowAction">WorkflowActions</see> that are run by this WorkflowActivity.
            </summary>
            <value>
            A collection containing the <see cref="T:Rock.Model.WorkflowAction">WorkflowActions</see> that are being run by this WorkflowActivity.
            </value>
        </member>
        <member name="P:Rock.Model.WorkflowActivity.ActiveActions">
            <summary>
            Gets an enumerable collection containing the active <see cref="T:Rock.Model.WorkflowAction">WorkflowActions</see> for this WorkflowActivity, ordered by their order property.
            </summary>
            <value>
            An enumerable collection containing the active <see cref="T:Rock.Model.WorkflowAction">WorkflowActions</see> for this WorkflowActivity.
            </value>
        </member>
        <member name="P:Rock.Model.WorkflowActivity.ParentAuthority">
            <summary>
            Gets the parent security authority for this WorkflowAction.
            </summary>
            <value>
            The parent security authority for this Workflow action.
            </value>
        </member>
        <member name="T:Rock.Model.WorkflowActivityConfiguration">
            <summary>
            WorkflowActivity Configuration class.
            </summary>
        </member>
        <member name="M:Rock.Model.WorkflowActivityConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.WorkflowActivityConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Rock.Model.WorkflowAction">
            <summary>
            Represents a persisted WorkflowAction in Rock.
            </summary>
        </member>
        <member name="M:Rock.Model.WorkflowAction.Process(System.Object,System.Collections.Generic.List{System.String}@)">
            <summary>
            Processes this WorkflowAction.
            </summary>
            <param name="entity">The entity that the WorkflowAction is operating against.</param>
            <param name="errorMessages">A <see cref="T:System.Collections.Generic.List`1"/> that will contain any error messages that occur while processing the WorkflowAction.</param>
            <returns>A <see cref="T:System.Boolean"/> value that is <c>true</c> if the process completed successfully; otherwise <c>false</c>.</returns>
            <exception cref="T:System.SystemException"></exception>
        </member>
        <member name="M:Rock.Model.WorkflowAction.AddLogEntry(System.String)">
            <summary>
            Adds a <see cref="T:Rock.Model.WorkflowLog"/> entry.
            </summary>
            <param name="logEntry">A <see cref="T:System.String"/> representing the  log entry.</param>
        </member>
        <member name="M:Rock.Model.WorkflowAction.MarkComplete">
            <summary>
            Marks this WorkflowAction as complete.
            </summary>
        </member>
        <member name="M:Rock.Model.WorkflowAction.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this WorkflowAction.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this WorkflowAction..
            </returns>
        </member>
        <member name="M:Rock.Model.WorkflowAction.AddSystemLogEntry(System.String)">
            <summary>
            Logs a system event.
            </summary>
            <param name="logEntry">A <see cref="T:System.String"/>representing the log entry.</param>
        </member>
        <member name="M:Rock.Model.WorkflowAction.Activate(Rock.Model.WorkflowActionType,Rock.Model.WorkflowActivity)">
            <summary>
            Activates the specified <see cref="T:Rock.Model.WorkflowAction"/>.
            </summary>
            <param name="actionType">The <see cref="T:Rock.Model.WorkflowActionType"/> to be activated.</param>
            <param name="activity">The <see cref="T:Rock.Model.WorkflowActivity"/> that this WorkflowAction belongs to..</param>
            <returns>The <see cref="T:Rock.Model.WorkflowAction"/></returns>
        </member>
        <member name="P:Rock.Model.WorkflowAction.ActivityId">
            <summary>
            Gets or sets the WorkflowActivityId of the <see cref="T:Rock.Model.WorkflowActivity"/> that this WorkflowAction is a part of.
            </summary>
            <value>
            A <see cref="T:System.Int32"/> represents the WorflowActivityId that this WorkflowAction is a part of.
            </value>
        </member>
        <member name="P:Rock.Model.WorkflowAction.ActionTypeId">
            <summary>
            Gets or sets the ActionTypeId of the <see cref="T:Rock.Model.WorkflowAction"/> that is being executed by this instance.
            </summary>
            <value>
            A <see cref="T:System.Int32"/> representing the ActionTypeId of the <see cref="T:Rock.Model.WorkflowActionType"/> that is being executed on this instance.
            </value>
        </member>
        <member name="P:Rock.Model.WorkflowAction.LastProcessedDateTime">
            <summary>
            Gets or sets the date and time that this WorkflowAction was last processed.
            </summary>
            <value>
            A <see cref="T:System.DateTime"/> representing the date and time that this WorkflowAction was last processed.
            </value>
        </member>
        <member name="P:Rock.Model.WorkflowAction.CompletedDateTime">
            <summary>
            Gets or sets the date and time that the WorkflowAction completed.
            </summary>
            <value>
            A <see cref="T:System.DateTime"/> representing the date and time that the WorkflowAction completed.
            </value>
        </member>
        <member name="P:Rock.Model.WorkflowAction.FormAction">
            <summary>
            If ActionType is a UserEntryForm Gets or sets the form action.
            </summary>
            <value>
            The form action.
            </value>
        </member>
        <member name="P:Rock.Model.WorkflowAction.Activity">
            <summary>
            Gets or sets the <see cref="T:Rock.Model.WorkflowActivity"/> that contains the WorkflowAction.
            </summary>
            <value>
            The <see cref="T:Rock.Model.WorkflowActivity"/> that contains this WorkflowAction.
            </value>
        </member>
        <member name="P:Rock.Model.WorkflowAction.ActionType">
            <summary>
            Gets or sets the <see cref="T:Rock.Model.WorkflowActionType"/> that is being executed by this WorkflowAction.
            </summary>
            <value>
            The <see cref="T:Rock.Model.WorkflowActionType"/> that is being executed.
            </value>
        </member>
        <member name="P:Rock.Model.WorkflowAction.IsActive">
            <summary>
            Gets a value indicating whether this WorkflowAction is active.
            </summary>
            <value>
              <c>true</c> if this WorkflowAction is active; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Model.WorkflowAction.ParentAuthority">
            <summary>
            Gets the parent security authority for this WorkflowAction.
            </summary>
            <value>
            The parent security authority for this WorkflowAction.
            </value>
        </member>
        <member name="T:Rock.Model.WorkflowActionConfiguration">
            <summary>
            Action Configuration class.
            </summary>
        </member>
        <member name="M:Rock.Model.WorkflowActionConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.WorkflowActionConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Rock.Jobs.ProcessWorkflows">
            <summary>
            Job to process the persisted active workflows
            </summary>
        </member>
        <member name="M:Rock.Jobs.ProcessWorkflows.#ctor">
            <summary> 
            Empty constructor for job initilization
            <para>
            Jobs require a public empty constructor so that the
            scheduler can instantiate the class whenever it needs.
            </para>
            </summary>
        </member>
        <member name="M:Rock.Jobs.ProcessWorkflows.Execute(Quartz.IJobExecutionContext)">
            <summary>
            Called by the <see cref="T:Quartz.IScheduler"/> when a <see cref="T:Quartz.ITrigger"/>
            fires that is associated with the <see cref="T:Quartz.IJob"/>.
            </summary>
            <param name="context">The execution context.</param>
            <remarks>
            The implementation may wish to set a  result object on the
            JobExecutionContext before this method exits.  The result itself
            is meaningless to Quartz, but may be informative to
            <see cref="T:Quartz.IJobListener"/>s or
            <see cref="T:Quartz.ITriggerListener"/>s that are watching the job's
            execution.
            </remarks>
        </member>
        <member name="T:Rock.Workflow.Action.CompleteWorkflow">
            <summary>
            Marks a workflow as complete
            </summary>
        </member>
        <member name="M:Rock.Workflow.Action.CompleteWorkflow.Execute(Rock.Model.WorkflowAction,System.Object,System.Collections.Generic.List{System.String}@)">
            <summary>
            Executes the specified workflow.
            </summary>
            <param name="action">The action.</param>
            <param name="entity">The entity.</param>
            <param name="errorMessages">The error messages.</param>
            <returns></returns>
        </member>
        <member name="T:Rock.Workflow.Action.ActivateActivity">
            <summary>
            Activates a new activity for a given activity type
            </summary>
        </member>
        <member name="M:Rock.Workflow.Action.ActivateActivity.Execute(Rock.Model.WorkflowAction,System.Object,System.Collections.Generic.List{System.String}@)">
            <summary>
            Executes the specified workflow.
            </summary>
            <param name="action">The action.</param>
            <param name="entity">The entity.</param>
            <param name="errorMessages">The error messages.</param>
            <returns></returns>
        </member>
        <member name="T:Rock.Workflow.Action.SendEmail">
            <summary>
            Sends email
            </summary>
        </member>
        <member name="M:Rock.Workflow.Action.SendEmail.Execute(Rock.Model.WorkflowAction,System.Object,System.Collections.Generic.List{System.String}@)">
            <summary>
            Executes the specified workflow.
            </summary>
            <param name="action">The action.</param>
            <param name="entity">The entity.</param>
            <param name="errorMessages">The error messages.</param>
            <returns></returns>
        </member>
        <member name="T:Rock.Workflow.Action.SetStatus">
            <summary>
            Sets a workflow status
            </summary>
        </member>
        <member name="M:Rock.Workflow.Action.SetStatus.Execute(Rock.Model.WorkflowAction,System.Object,System.Collections.Generic.List{System.String}@)">
            <summary>
            Executes the specified workflow.
            </summary>
            <param name="action">The action.</param>
            <param name="entity">The entity.</param>
            <param name="errorMessages">The error messages.</param>
            <returns></returns>
        </member>
        <member name="T:Rock.Model.WorkflowService">
            <summary>
            Service/Data access class for <see cref="T:Rock.Model.Workflow"/> entity objects
            </summary>
            <summary>
            Workflow Service class
            </summary>
        </member>
        <member name="M:Rock.Model.WorkflowService.Activate(Rock.Model.WorkflowType,System.String)">
            <summary>
            Activates a new <see cref="T:Rock.Model.Workflow"/> instance.
            </summary>
            <param name="workflowType">The <see cref="T:Rock.Model.WorkflowType"/> to be activated.</param>
            <param name="name">A <see cref="T:System.String"/> representing the name of the <see cref="T:Rock.Model.Workflow"/> instance.</param>
            <returns>
            The activated <see cref="T:Rock.Model.Workflow"/> instance
            </returns>
        </member>
        <member name="M:Rock.Model.WorkflowService.Process(Rock.Model.Workflow,System.Collections.Generic.List{System.String}@)">
            <summary>
            Processes the specified <see cref="T:Rock.Model.Workflow"/>
            </summary>
            <param name="workflow">The <see cref="T:Rock.Model.Workflow"/> instance to process.</param>
            <param name="errorMessages">A <see cref="T:System.Collections.Generic.List`1"/> that contains any error messages that were returned while processing the <see cref="T:Rock.Model.Workflow"/>.</param>
        </member>
        <member name="M:Rock.Model.WorkflowService.GetActive">
            <summary>
            Gets the active <see cref="T:Rock.Model.Workflow">Workflows</see>.
            </summary>
            <returns>A queryable collection of active <see cref="T:Rock.Model.Workflow"/>entities ordered by LastProcessedDate.</returns>
        </member>
        <member name="M:Rock.Model.WorkflowService.#ctor(Rock.Data.RockContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.WorkflowService"/> class
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Rock.Model.WorkflowService.CanDelete(Rock.Model.Workflow,System.String@)">
            <summary>
            Determines whether this instance can delete the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="errorMessage">The error message.</param>
            <returns>
              <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Rock.Workflow.WorkflowActionContainer">
            <summary>
            MEF Container class for WorkflowAction Componenets
            </summary>
        </member>
        <member name="M:Rock.Workflow.WorkflowActionContainer.GetComponent(System.String)">
            <summary>
            Gets the component with the matching Entity Type Name
            </summary>
            <param name="entityTypeName">Name of the entity type.</param>
            <returns></returns>
        </member>
        <member name="P:Rock.Workflow.WorkflowActionContainer.Instance">
            <summary>
            Gets the instance.
            </summary>
        </member>
        <member name="T:Rock.Model.WorkflowLogService">
            <summary>
            WorkflowLog Service class
            </summary>
        </member>
        <member name="M:Rock.Model.WorkflowLogService.#ctor(Rock.Data.RockContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.WorkflowLogService"/> class
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Rock.Model.WorkflowLogService.CanDelete(Rock.Model.WorkflowLog,System.String@)">
            <summary>
            Determines whether this instance can delete the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="errorMessage">The error message.</param>
            <returns>
              <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Rock.Model.WorkflowLogExtensionMethods">
            <summary>
            Generated Extension Methods
            </summary>
        </member>
        <member name="M:Rock.Model.WorkflowLogExtensionMethods.Clone(Rock.Model.WorkflowLog,System.Boolean)">
            <summary>
            Clones this WorkflowLog object to a new WorkflowLog object
            </summary>
            <param name="source">The source.</param>
            <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.WorkflowLogExtensionMethods.CopyPropertiesFrom(Rock.Model.WorkflowLog,Rock.Model.WorkflowLog)">
            <summary>
            Copies the properties from another WorkflowLog object to this WorkflowLog object
            </summary>
            <param name="target">The target.</param>
            <param name="source">The source.</param>
        </member>
        <member name="T:Rock.Model.WorkflowExtensionMethods">
            <summary>
            Generated Extension Methods
            </summary>
        </member>
        <member name="M:Rock.Model.WorkflowExtensionMethods.Clone(Rock.Model.Workflow,System.Boolean)">
            <summary>
            Clones this Workflow object to a new Workflow object
            </summary>
            <param name="source">The source.</param>
            <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.WorkflowExtensionMethods.CopyPropertiesFrom(Rock.Model.Workflow,Rock.Model.Workflow)">
            <summary>
            Copies the properties from another Workflow object to this Workflow object
            </summary>
            <param name="target">The target.</param>
            <param name="source">The source.</param>
        </member>
        <member name="T:Rock.Model.WorkflowTypeService">
            <summary>
            WorkflowType Service class
            </summary>
        </member>
        <member name="M:Rock.Model.WorkflowTypeService.#ctor(Rock.Data.RockContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.WorkflowTypeService"/> class
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Rock.Model.WorkflowTypeService.CanDelete(Rock.Model.WorkflowType,System.String@)">
            <summary>
            Determines whether this instance can delete the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="errorMessage">The error message.</param>
            <returns>
              <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Rock.Model.WorkflowTypeExtensionMethods">
            <summary>
            Generated Extension Methods
            </summary>
        </member>
        <member name="M:Rock.Model.WorkflowTypeExtensionMethods.Clone(Rock.Model.WorkflowType,System.Boolean)">
            <summary>
            Clones this WorkflowType object to a new WorkflowType object
            </summary>
            <param name="source">The source.</param>
            <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.WorkflowTypeExtensionMethods.CopyPropertiesFrom(Rock.Model.WorkflowType,Rock.Model.WorkflowType)">
            <summary>
            Copies the properties from another WorkflowType object to this WorkflowType object
            </summary>
            <param name="target">The target.</param>
            <param name="source">The source.</param>
        </member>
        <member name="T:Rock.Model.WorkflowLog">
            <summary>
            Represents a WorkflowLog entry of a <see cref="T:Rock.Model.Workflow"/> instance event.
            </summary>
        </member>
        <member name="M:Rock.Model.WorkflowLog.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this WorkflowLog.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this WorkflowLog.
            </returns>
        </member>
        <member name="P:Rock.Model.WorkflowLog.WorkflowId">
            <summary>
            Gets or sets the WorkflowId of the <see cref="T:Rock.Model.Workflow"/> instance that is being logged.
            </summary>
            <value>
            A <see cref="T:System.Int32"/> representing the WorkflowId of the <see cref="T:Rock.Model.Workflow"/> instance that is being logged.
            </value>
        </member>
        <member name="P:Rock.Model.WorkflowLog.LogDateTime">
            <summary>
            Gets or sets the date and time that the WorkflowLog entry was created. This property is required.
            </summary>
            <value>
            A <see cref="T:System.DateTime"/> representing the date and time that this WorkflowLog entry was created.
            </value>
        </member>
        <member name="P:Rock.Model.WorkflowLog.LogText">
            <summary>
            Gets or sets the body/text of the WorkflowLog entry. This property is required.
            </summary>
            <value>
            A <see cref="T:System.String"/> representing the body/text of the WorkflowLog entry.
            </value>
        </member>
        <member name="P:Rock.Model.WorkflowLog.Workflow">
            <summary>
            Gets or sets the <see cref="T:Rock.Model.Workflow"/> instance that is being logged.
            </summary>
            <value>
            The <see cref="T:Rock.Model.Workflow"/> that is being logged.
            </value>
        </member>
        <member name="T:Rock.Model.WorkflowLogConfiguration">
            <summary>
            WorkflowLog Configuration class.
            </summary>
        </member>
        <member name="M:Rock.Model.WorkflowLogConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.WorkflowLogConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Rock.Model.Workflow">
            <summary>
            Represents a persisted <see cref="T:Rock.Model.Workflow"/> execution/instance in Rock.
            </summary>
        </member>
        <member name="M:Rock.Model.Workflow.Process(System.Collections.Generic.List{System.String}@)">
            <summary>
            Processes this Workflow instance.
            </summary>
            <returns>A <see cref="T:System.Boolean"/> value that is <c>true</c> if the Workflow processed successfully; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Rock.Model.Workflow.Process(System.Object,System.Collections.Generic.List{System.String}@)">
            <summary>
            Processes this instance.
            </summary>
            <param name="entity">The entity that work is being performed against.</param>
            <param name="errorMessages">A <see cref="T:System.Collections.Generic.List`1"/> that will contain and any error messages that occur
            while the Workflow is being processed.</param>
            <returns>A <see cref="T:System.Boolean"/> that is <c>true</c> if the workflow processed sucessfully.</returns>
        </member>
        <member name="M:Rock.Model.Workflow.AddLogEntry(System.String)">
            <summary>
            Adds a <see cref="T:Rock.Model.WorkflowLog"/> entry.
            </summary>
            <param name="logEntry">A <see cref="T:System.String"/>containing the log entry.</param>
        </member>
        <member name="M:Rock.Model.Workflow.MarkComplete">
            <summary>
            Marks this Workflow as complete.
            </summary>
        </member>
        <member name="M:Rock.Model.Workflow.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Rock.Model.Workflow.ProcessActivity(System.DateTime,System.Object,System.Collections.Generic.List{System.String}@)">
            <summary>
            Processes the activity.
            </summary>
            <param name="processStartTime">A <see cref="T:System.DateTime"/> that represents the process start time.</param>
            <param name="entity">The entity.</param>
            <param name="errorMessages">A <see cref="T:System.Collections.Generic.List`1"/> containing error messages for any 
             errors that occurred while the activity was being processed..</param>
            <returns>A <see cref="T:System.Boolean"/> value that is <c>true</c> if the activity processed successfully; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Rock.Model.Workflow.AddSystemLogEntry(System.String)">
            <summary>
            adds a system log entry
            </summary>
            <param name="logEntry">A <see cref="T:System.String"/> containing the log entry.</param>
        </member>
        <member name="M:Rock.Model.Workflow.Activate(Rock.Model.WorkflowType,System.String)">
            <summary>
            Activates the specified <see cref="T:Rock.Model.WorkflowType"/>.
            </summary>
            <param name="workflowType">The <see cref="T:Rock.Model.WorkflowType"/>  being activated.</param>
            <param name="name">A <see cref="T:System.String"/> representing the name of the <see cref="T:Rock.Model.Workflow"/> instance.</param>
            <returns>The <see cref="T:Rock.Model.Workflow"/> instance.</returns>
        </member>
        <member name="P:Rock.Model.Workflow.WorkflowTypeId">
            <summary>
            Gets or sets the WorkflowTypeId of the <see cref="T:Rock.Model.WorkflowType"/> that this Workflow instance is executing.
            </summary>
            <value>
            A <see cref="T:System.Int32"/> representing the WorkflowTypeId fo the <see cref="T:Rock.Model.WorkflowType"/> that is being executed.
            </value>
        </member>
        <member name="P:Rock.Model.Workflow.Name">
            <summary>
            Gets or sets a friendly name for this Workflow instance. This property is required.
            </summary>
            <value>
            A <see cref="T:System.String"/> representing a friendly name of this Workflow instance.
            </value>
        </member>
        <member name="P:Rock.Model.Workflow.Description">
            <summary>
            Gets or sets a description or summary about this Workflow instance.
            </summary>
            <value>
            A <see cref="T:System.String"/> representing the description or summary about this Workflow instance.
            </value>
        </member>
        <member name="P:Rock.Model.Workflow.Status">
            <summary>
            Gets or sets the status of this Workflow instance. This property is required.
            </summary>
            <value>
            A <see cref="T:System.String"/> representing the status of this Workflow instance.
            </value>
        </member>
        <member name="P:Rock.Model.Workflow.IsProcessing">
            <summary>
            Gets or sets a flag indicating whether this instance is processing.
            </summary>
            <value>
            A <see cref="T:System.Boolean"/> value that is <c>true</c> if this instance is processing; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Model.Workflow.ActivatedDateTime">
            <summary>
            Gets or sets the date and time that this Workflow instance was activated.
            </summary>
            <value>
            A <see cref="T:System.DateTime"/> that represents the date and time that this Workflow instance was activated.
            </value>
        </member>
        <member name="P:Rock.Model.Workflow.LastProcessedDateTime">
            <summary>
            Gets or sets the date and time that the Workflow was last processed.
            </summary>
            <value>
            A <see cref="T:System.DateTime"/> that represents when the Workflow was last processed.
            </value>
        </member>
        <member name="P:Rock.Model.Workflow.CompletedDateTime">
            <summary>
            Gets or sets the date and time that the Workflow completed.
            </summary>
            <value>
            A <see cref="T:System.DateTime"/> representing the date and time that the Workflow completed.
            </value>
        </member>
        <member name="P:Rock.Model.Workflow.WorkflowType">
            <summary>
            Gets or sets the <see cref="T:Rock.Model.WorkflowType"/> that is being executed in this persisted Workflow instance.
            </summary>
            <value>
            The <see cref="T:Rock.Model.WorkflowType"/> that is being executed in this persisted Workflow instance.
            </value>
        </member>
        <member name="P:Rock.Model.Workflow.IsActive">
            <summary>
            Gets a flag indicating whether this Workflow instance is active.
            </summary>
            <value>
             A <see cref="T:System.Boolean"/> value that is <c>true</c> if this Workflow instance is active; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Model.Workflow.Activities">
            <summary>
            Gets or sets a collection containing all the <see cref="T:Rock.Model.WorkflowActivity">WorkflowActivities</see> that are a part of this Workflow instance.
            </summary>
            <value>
            A collection containing the <see cref="T:Rock.Model.WorkflowActivity">WorkflowActivities</see> that are a part of this Workflow instance.
            </value>
        </member>
        <member name="P:Rock.Model.Workflow.ActiveActivities">
            <summary>
            Gets an enumerable collection of the Active <see cref="T:Rock.Model.WorkflowActivity">WorkflowActivities</see> for this Workflow instance, ordered by their order value.
            </summary>
            <value>
            The active activities.
            </value>
        </member>
        <member name="P:Rock.Model.Workflow.HasActiveActivities">
            <summary>
            Gets a flag indicating whether this instance has active activities.
            </summary>
            <value>
            A <see cref="T:System.Boolean"/> value that is <c>true</c> if this instance has active activities; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Model.Workflow.LogEntries">
            <summary>
            Gets or sets a collection containing the <see cref="T:Rock.Model.WorkflowLog"/> entries for this Workflow instance.
            </summary>
            <value>
            A collection containing the <see cref="T:Rock.Model.WorkflowLog"/> entries for this Workflow instance.
            </value>
        </member>
        <member name="P:Rock.Model.Workflow.ParentAuthority">
            <summary>
            Gets the parent security authority for this Workflow instance.
            </summary>
            <value>
            The parent authority for this Workflow instance.
            </value>
        </member>
        <member name="T:Rock.Model.WorkflowConfiguration">
            <summary>
            Workflow Configuration class.
            </summary>
        </member>
        <member name="M:Rock.Model.WorkflowConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.WorkflowConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Rock.Model.WorkflowType">
            <summary>
            WorkflowType POCO Entity.
            Represents a WorkflowType or workflow definition in Rock. WorkflowTypes are categorizable and orderable, through the implementation of <see cref="T:Rock.Data.ICategorized"/>
            and <see cref="T:Rock.Data.IOrdered"/> respectively. A WorkFlowType is a predetermined set of steps or <see cref="T:Rock.Model.WorkflowActivityType">activities</see>
            to be performed by the system, by a user or a combination of the two. A workflow can be used for any process that can have multiple steps that need to be performed in 
            a specific and constant order, and can have divergent paths based on input or data.  A workflow can either be persisted to the database, 
            for long running workflows, or non persisted (see <see cref="T:Rock.Model.Workflow"/>for real-time processes (i.e. a wizard or triggered job).  A workflow can be triggered by a user/process
            performing an action or an entity being updated (through <see cref="T:Rock.Model.WorkflowTrigger">WorkflowTriggers</see>).
            </summary>
        </member>
        <member name="M:Rock.Model.WorkflowType.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this WorkflowType.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this WorkflowType.
            </returns>
        </member>
        <member name="P:Rock.Model.WorkflowType.IsSystem">
            <summary>
            Gets or sets a flag indicating if this WorkflowType is part of the Rock core system/framework.
            </summary>
            <value>
            A <see cref="T:System.Boolean"/> that is <c>true</c> if the WorkflowType is part of the Rock core system/framework; otherwise <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Model.WorkflowType.IsActive">
            <summary>
            Gets or sets a flag indicating if this WorkflowType is active.
            </summary>
            <value>
            A <see cref="T:System.Boolean"/> that is <c>true</c> if the WorkflowType is active; otherwise <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Model.WorkflowType.Name">
            <summary>
            Gets or sets the friendly Name of the WorkflowType. This property is required.
            </summary>
            <value>
            A <see cref="T:System.String"/> representing the friendly Name of the WorkflowType.
            </value>
        </member>
        <member name="P:Rock.Model.WorkflowType.Description">
            <summary>
            Gets or sets a user defined description or summary about the WorkflowType.
            </summary>
            <value>
            A <see cref="T:System.String"/> representing a description/summary of the WorkflowType.
            </value>
        </member>
        <member name="P:Rock.Model.WorkflowType.CategoryId">
            <summary>
            Gets or sets the CategoryId of the <see cref="T:Rock.Model.Category"/> that this WorkflowType belongs to. 
            </summary>
            <value>
            A <see cref="T:System.Int32"/> representing the CategoryId of the <see cref="T:Rock.Model.Category"/> that the WorkflowType belongs to. 
            If the WorkflowType does not belong to a category, this value will be null.
            </value>
        </member>
        <member name="P:Rock.Model.WorkflowType.Order">
            <summary>
            Gets or sets the display order of the WorkFlowType, the lower the number the higher up that the WorkflowType will display in the workflow list. This
            property is required.
            </summary>
            <value>
            A <see cref="T:System.Int32"/> representing the display order of the WorkflowType.  
            </value>
        </member>
        <member name="P:Rock.Model.WorkflowType.WorkTerm">
            <summary>
            Gets or sets the work term for the WorkflowType. This is the action that is being performed by this WorkflowType. This property is required.
            </summary>
            <value>
            A <see cref="T:System.String"/> representing the WorkItem that is being performed by this WorkflowType
            </value>
        </member>
        <member name="P:Rock.Model.WorkflowType.ProcessingIntervalSeconds">
            <summary>
            Gets or sets the minimum length of time, in seconds, before a persisted <see cref="T:Rock.Model.Workflow"/> instance that implements this 
            WorkflowType can be re-executed.
            </summary>
            <value>
            A <see cref="T:System.Int32"/> representing the minimum length of time, in seconds, that must pass before the same persisted <see cref="T:Rock.Model.Workflow"/> instance
            that implements this WorkflowType can be re-executed.
            </value>
        </member>
        <member name="P:Rock.Model.WorkflowType.IsPersisted">
            <summary>
            Gets or sets a value indicating whether <see cref="T:Rock.Model.Workflow"/> instances of this WorkflowType are persisted.
            </summary>
            <value>
            A <see cref="T:System.Boolean"/> value that is <c>true</c> if <see cref="T:Rock.Model.Workflow"/> instances of this WorkflowType are persisted; otherwise <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Model.WorkflowType.LoggingLevel">
            <summary>
            Gets or sets the logging level.
            Gets or sets the <see cref="T:Rock.Model.WorkflowLoggingLevel"/> indicating the level of detail that should be logged when instances of this WorkflowType are executed.
            </summary>
            <value>
            A <see cref="T:Rock.Model.WorkflowLoggingLevel"/> value indicating the level of detail that should be logged when instances of this WorkflowType are executed.
            When <c>WorkflowLoggingLevel.None</c> no details of the Workflow instance's execution will be logged.
            When <c>WorkflowLoggingLevel.Workflow</c> only workflow events will be logged (i.e. begin and end).
            When <c>WorkflowLoggingLevel.Activity</c> workflow and activity events will be logged.
            When <c>WorkflowLoggingLevel.Action</c> workflow, activity and action events will be logged.
            </value>
        </member>
        <member name="P:Rock.Model.WorkflowType.Category">
            <summary>
            Gets or sets the <see cref="T:Rock.Model.Category"/> that this WorkflowType belongs to.
            </summary>
            <value>
            Teh <see cref="T:Rock.Model.Category"/> that this WorkflowType belongs to.
            </value>
        </member>
        <member name="P:Rock.Model.WorkflowType.ActivityTypes">
            <summary>
            Gets or sets a collection containing  the <see cref="T:Rock.Model.WorkflowActivityType">ActivityTypes</see> that will be executed/performed as part of this WorkflowType.
            </summary>
            <value>
            A collection of <see cref="T:Rock.Model.WorkflowActivityType">ActivityTypes</see> that are executed/performed as part of this WorkflowType.
            </value>
        </member>
        <member name="T:Rock.Model.WorkflowTypeConfiguration">
            <summary>
            WorkflowType Configuration class.
            </summary>
        </member>
        <member name="M:Rock.Model.WorkflowTypeConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.WorkflowTypeConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Rock.Model.WorkflowLoggingLevel">
            <summary>
            The level of details to log
            </summary>
        </member>
        <member name="F:Rock.Model.WorkflowLoggingLevel.None">
            <summary>
            Don't log any details
            </summary>
        </member>
        <member name="F:Rock.Model.WorkflowLoggingLevel.Workflow">
            <summary>
            Log workflow events
            </summary>
        </member>
        <member name="F:Rock.Model.WorkflowLoggingLevel.Activity">
            <summary>
            Log workflow and activity events
            </summary>
        </member>
        <member name="F:Rock.Model.WorkflowLoggingLevel.Action">
            <summary>
            Log workflow, activity, and action events
            </summary>
        </member>
        <member name="T:Rock.Model.ServiceJob">
            <summary>
            Represents a scheduled job/routine in Rock. A job class can have multiple ServiceJob instances associated with it in the event that it has different attributes or 
            has multiple schedules.  For more information on how to create a job see https://github.com/SparkDevNetwork/Rock/wiki/Rock-Jobs
            </summary>
        </member>
        <member name="M:Rock.Model.ServiceJob.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this Job.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this Job.
            </returns>
        </member>
        <member name="P:Rock.Model.ServiceJob.IsSystem">
            <summary>
            Gets or sets a flag indicating if this Job is part of the Rock core system/framework
            </summary>
            <value>
            A <see cref="T:System.Boolean"/> value that is <c>true</c> if the Job is part of the Rock core system/framework;
            otherwise <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Model.ServiceJob.IsActive">
            <summary>
            Gets or sets a flag indicating if the Job is active.
            </summary>
            <value>
            A <see cref="T:System.Boolean"/> value that is <c>true</c> if the Job is active; otherwise <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Model.ServiceJob.Name">
            <summary>
            Gets or sets the friendly Name of the Job. This property is required.
            </summary>
            <value>
            A <see cref="T:System.String"/> containing the friendly Name of the Job.
            </value>
        </member>
        <member name="P:Rock.Model.ServiceJob.Description">
            <summary>
            Gets or sets a user defined description of the Job.
            </summary>
            <value>
            A <see cref="T:System.String"/> representing the description of the Job.
            </value>
        </member>
        <member name="P:Rock.Model.ServiceJob.Assembly">
            <summary>
            Gets or sets the Assembly name of the .dll file that contains the job class.
            </summary>
            <value>
            A <see cref="T:System.String"/> that contains the Assembly name of the .dll file that contains the job class.
            </value>
        </member>
        <member name="P:Rock.Model.ServiceJob.Class">
            <summary>
            Gets or sets the fully qualified class name with Namespace of the Job class. This property is required.
            </summary>
            <value>
            A <see cref="T:System.String"/> containing the fully qualified class name with Namespace of the Job class.
            </value>
        </member>
        <member name="P:Rock.Model.ServiceJob.CronExpression">
            <summary>
            Gets or sets the Cron Expression that is used to schedule the Job. This property is required.
            </summary>
            <value>
            A <see cref="T:System.String"/> that contains the Cron expression that is used to determine the schedule for the job.
            </value>
            <remarks>
            See  http://www.quartz-scheduler.org/documentation/quartz-1.x/tutorials/crontrigger for the syntax.
            </remarks>
        </member>
        <member name="P:Rock.Model.ServiceJob.LastSuccessfulRunDateTime">
            <summary>
            Gets or sets the date and time that the Job last completed successfully.
            </summary>
            <value>
            A <see cref="T:System.DateTime"/> representing the date and time of the last time that the Job completed successfully
            </value>
        </member>
        <member name="P:Rock.Model.ServiceJob.LastRunDateTime">
            <summary>
            Gets or sets the date and time that the job last ran.
            </summary>
            <value>
            A <see cref="T:System.DateTime"/> that represents the last time that the job ran.
            </value>
        </member>
        <member name="P:Rock.Model.ServiceJob.LastRunDurationSeconds">
            <summary>
            Gets or set the amount of time, in seconds, that it took the job to run the last time that it ran.
            </summary>
            <value>
            A <see cref="T:System.Int32"/> representing the amount of time, in seconds, that it took the job to run the last time that it ran.
            </value>
        </member>
        <member name="P:Rock.Model.ServiceJob.LastStatus">
            <summary>
            Gets or sets the completion status that was returned by the Job the last time that it ran.
            </summary>
            <value>
            A <see cref="T:System.String"/> containing the status that was returned by the Job the last time that it ran.
            </value>
        </member>
        <member name="P:Rock.Model.ServiceJob.LastStatusMessage">
            <summary>
            Gets or sets the status message that was returned the last time that the job was run. In most cases this will be used
            in the event of an exception to return the exception message.
            </summary>
            <value>
            A <see cref="T:System.String"/> representing the Status Message that returned the last time that the job ran.
            </value>
        </member>
        <member name="P:Rock.Model.ServiceJob.LastRunSchedulerName">
            <summary>
            Gets or sets the name of the scheduler that the job ran under the last time that it ran. In most cases this 
            is used to determine if the was run by the IIS or Windows service.
            </summary>
            <value>
            A <see cref="T:System.String"/> representing the name of the Scheduler that the job ran under the last time that it was run.
            </value>
        </member>
        <member name="P:Rock.Model.ServiceJob.NotificationEmails">
            <summary>
            Gets or sets a comma delimited list of email address that should receive notification emails for this job. Notification
            emails are sent to these email addresses based on the completion status of the Job and the <see cref="P:Rock.Model.ServiceJob.NotificationStatus"/>
            property of this job.
            </summary>
            <value>
            A <see cref="T:System.String"/> representing a list of email addresses that should receive notifications for this job.
            </value>
        </member>
        <member name="P:Rock.Model.ServiceJob.NotificationStatus">
            <summary>
            Gets or sets the NotificationStatus for this job, this property determines when notification emails should be sent to the <see cref="P:Rock.Model.ServiceJob.NotificationEmails"/>
            that are associated with this Job
            </summary>
            <value>
            An <see cref="T:Rock.Model.JobNotificationStatus"/> that indicates when notification emails should be sent for this job. 
            When this value is <c>JobNotificationStatus.All</c> a notification email will be sent when the Job completes with any completion status.
            When this value is <c>JobNotificationStatus.Success</c> a notification email will be sent when the Job has completed successfully.
            When this value is <c>JobNotificationStatus.Error</c> a notification email will be sent when the Job completes with an error status.
            When this value is <c>JobNotificationStatus.None</c> notifications will not be sent when the Job completes with any status.
            </value>
        </member>
        <member name="T:Rock.Model.ServiceJobConfiguration">
            <summary>
            Job Configuration class.
            </summary>
        </member>
        <member name="M:Rock.Model.ServiceJobConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.ServiceJobConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Rock.Model.JobNotificationStatus">
            <summary>
            An enum that represents when a Job notification status should be sent.
            </summary>
        </member>
        <member name="F:Rock.Model.JobNotificationStatus.All">
            <summary>
            Notifications should be sent when a job completes with any notification status.
            </summary>
        </member>
        <member name="F:Rock.Model.JobNotificationStatus.Success">
            <summary>
            Notification should be sent when the job has completed successfully.
            </summary>
            
        </member>
        <member name="F:Rock.Model.JobNotificationStatus.Error">
            <summary>
            Notification should be sent when the job has completed with an error status.
            </summary>
        </member>
        <member name="F:Rock.Model.JobNotificationStatus.None">
            <summary>
            Notifications should not be sent when this job completes with any status.
            </summary>
        </member>
        <member name="T:Rock.Web.Cache.AttributeCache">
            <summary>
            Information about an attribute that is required by the rendering engine.
            This information will be cached by Rock. 
            
            NOTE: Because this attribute object is cached and shared by all entities 
            using the attribute, a particlar instance's values are not included as a 
            property of this attribute object.
            </summary>
        </member>
        <member name="M:Rock.Web.Cache.AttributeCache.CopyFromModel(Rock.Model.Attribute)">
            <summary>
            Copies from model.
            </summary>
            <param name="attribute">The attribute.</param>
        </member>
        <member name="M:Rock.Web.Cache.AttributeCache.CopyFromModel(Rock.Model.Attribute,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Copies from model.
            </summary>
            <param name="attribute">The attribute.</param>
            <param name="qualifiers">The qualifiers.</param>
        </member>
        <member name="M:Rock.Web.Cache.AttributeCache.AddControl(System.Web.UI.ControlCollection,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Adds the control.
            </summary>
            <param name="controls">The controls.</param>
            <param name="value">The value.</param>
            <param name="validationGroup">The validation group.</param>
            <param name="setValue">if set to <c>true</c> [set value].</param>
            <param name="setId">if set to <c>true</c> [set id].</param>
        </member>
        <member name="M:Rock.Web.Cache.AttributeCache.GetControl(System.Web.UI.Control)">
            <summary>
            Gets the field control from the control that was added using the CreateControl method
            </summary>
            <param name="attributeControl">The attribute control.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.Cache.AttributeCache.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Rock.Web.Cache.AttributeCache.IsAuthorized(System.String,Rock.Model.Person)">
            <summary>
            Return <c>true</c> if the user is authorized to perform the selected action on this object.
            </summary>
            <param name="action">The action.</param>
            <param name="person">The person.</param>
            <returns>
              <c>true</c> if the specified action is authorized; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Rock.Web.Cache.AttributeCache.IsAllowedByDefault(System.String)">
            <summary>
            If a user or role is not specifically allowed or denied to perform the selected action,
            return <c>true</c> if they should be allowed anyway or <c>false</c> if not.
            </summary>
            <param name="action">The action.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.Cache.AttributeCache.IsPrivate(System.String,Rock.Model.Person)">
            <summary>
            Determines whether the specified action is private (Only the current user has access).
            </summary>
            <param name="action">The action.</param>
            <param name="person">The person.</param>
            <returns>
              <c>true</c> if the specified action is private; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Rock.Web.Cache.AttributeCache.MakePrivate(System.String,Rock.Model.Person)">
            <summary>
            Makes the action on the current entity private (Only the current user will have access).
            </summary>
            <param name="action">The action.</param>
            <param name="person">The person.</param>
        </member>
        <member name="M:Rock.Web.Cache.AttributeCache.MakeUnPrivate(System.String,Rock.Model.Person)">
            <summary>
            If action on the current entity is private, removes security that made it private.
            </summary>
            <param name="action">The action.</param>
            <param name="person">The person.</param>
        </member>
        <member name="M:Rock.Web.Cache.AttributeCache.Read(System.Int32)">
            <summary>
            Returns Attribute object from cache.  If attribute does not already exist in cache, it
            will be read and added to cache
            </summary>
            <param name="id">The id of the Attribute to read</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.Cache.AttributeCache.Read(System.Guid)">
            <summary>
            Reads the specified GUID.
            </summary>
            <param name="guid">The GUID.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.Cache.AttributeCache.Read(Rock.Model.Attribute)">
            <summary>
            Adds Attribute model to cache, and returns cached object
            </summary>
            <param name="attributeModel">The attributeModel to cache</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.Cache.AttributeCache.Read(Rock.Model.Attribute,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Adds Attribute model to cache, and returns cached object.  
            </summary>
            <param name="attributeModel">The attribute model.</param>
            <param name="qualifiers">The qualifiers.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.Cache.AttributeCache.Flush(System.Int32)">
            <summary>
            Removes attribute from cache
            </summary>
            <param name="id">The id of the attribute to remove from cache</param>
        </member>
        <member name="P:Rock.Web.Cache.AttributeCache.Id">
            <summary>
            Gets or sets the id.
            </summary>
            <value>
            The id.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.AttributeCache.Guid">
            <summary>
            Gets or sets the GUID.
            </summary>
            <value>
            The GUID.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.AttributeCache.IsSystem">
            <summary>
            Gets or sets a value indicating whether this instance is system.
            </summary>
            <value>
              <c>true</c> if this instance is system; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.AttributeCache.FieldTypeId">
            <summary>
            Gets or sets the field type id.
            </summary>
            <value>
            The field type id.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.AttributeCache.EntityTypeId">
            <summary>
            Gets or sets the entity type id.
            </summary>
            <value>
            The entity type id.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.AttributeCache.EntityTypeQualifierColumn">
            <summary>
            Gets or sets the entity type qualifier column.
            </summary>
            <value>
            The entity type qualifier column.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.AttributeCache.EntityTypeQualifierValue">
            <summary>
            Gets or sets the entity type qualifier value.
            </summary>
            <value>
            The entity type qualifier value.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.AttributeCache.Key">
            <summary>
            Gets or sets the key.
            </summary>
            <value>
            The key.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.AttributeCache.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.AttributeCache.Description">
            <summary>
            Gets or sets the description.
            </summary>
            <value>
            The description.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.AttributeCache.Order">
            <summary>
            Gets or sets the order.
            </summary>
            <value>
            The order.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.AttributeCache.IsGridColumn">
            <summary>
            Gets or sets a value indicating whether this instance is grid column.
            </summary>
            <value>
            <c>true</c> if this instance is grid column; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.AttributeCache.DefaultValue">
            <summary>
            Gets or sets the default value.
            </summary>
            <value>
            The default value.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.AttributeCache.IsMultiValue">
            <summary>
            Gets or sets a value indicating whether this instance is multi value.
            </summary>
            <value>
            <c>true</c> if this instance is multi value; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.AttributeCache.IsRequired">
            <summary>
            Gets or sets a value indicating whether this instance is required.
            </summary>
            <value>
            <c>true</c> if this instance is required; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.AttributeCache.FieldType">
            <summary>
            Gets the type of the field.
            </summary>
            <value>
            The type of the field.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.AttributeCache.QualifierValues">
            <summary>
            Gets the qualifier values if any have been defined for the attribute
            </summary>
        </member>
        <member name="P:Rock.Web.Cache.AttributeCache.Categories">
            <summary>
            Gets the categories.
            </summary>
            <value>
            The categories.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.AttributeCache.TypeId">
            <summary>
            Gets the Entity Type ID for this entity.
            </summary>
            <value>
            The type id.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.AttributeCache.TypeName">
            <summary>
            The auth entity. Classes that implement the <see cref="T:Rock.Security.ISecured"/> interface should return
            a value that is unique across all <see cref="T:Rock.Security.ISecured"/> classes.  Typically this is the
            qualified name of the class.
            </summary>
        </member>
        <member name="P:Rock.Web.Cache.AttributeCache.ParentAuthority">
            <summary>
            A parent authority.  If a user is not specifically allowed or denied access to
            this object, Rock will check access to the parent authority specified by this property.
            </summary>
        </member>
        <member name="P:Rock.Web.Cache.AttributeCache.SupportedActions">
            <summary>
            A dictionary of actions that this class supports and the description of each.
            </summary>
        </member>
        <member name="T:Rock.Web.Cache.BlockTypeCache">
            <summary>
            Information about a block type that is required by the rendering engine.
            This information will be cached by the engine
            </summary>
        </member>
        <member name="M:Rock.Web.Cache.BlockTypeCache.CopyFromModel(Rock.Data.IEntity)">
            <summary>
            Copies from model.
            </summary>
            <param name="model">The model.</param>
        </member>
        <member name="M:Rock.Web.Cache.BlockTypeCache.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Rock.Web.Cache.BlockTypeCache.Read(System.Int32)">
            <summary>
            Returns Block Type object from cache.  If block does not already exist in cache, it
            will be read and added to cache
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.Cache.BlockTypeCache.Read(System.Guid)">
            <summary>
            Reads the specified GUID.
            </summary>
            <param name="guid">The GUID.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.Cache.BlockTypeCache.Read(Rock.Model.BlockType)">
            <summary>
            Reads the specified block type model.
            </summary>
            <param name="blockTypeModel">The block type model.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.Cache.BlockTypeCache.Flush(System.Int32)">
            <summary>
            Removes block type from cache
            </summary>
            <param name="id"></param>
        </member>
        <member name="P:Rock.Web.Cache.BlockTypeCache.IsSystem">
            <summary>
            Gets or sets a value indicating whether this instance is system.
            </summary>
            <value>
              <c>true</c> if this instance is system; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.BlockTypeCache.Path">
            <summary>
            Gets or sets the path.
            </summary>
            <value>
            The path.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.BlockTypeCache.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.BlockTypeCache.Description">
            <summary>
            Gets or sets the description.
            </summary>
            <value>
            The description.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.BlockTypeCache.IsInstancePropertiesVerified">
            <summary>
            Gets a value indicating whether the <see cref="T:Rock.Attribute.TextFieldAttribute"/> attributes have been
            verified for the block type.  If not, Rock will create and/or update the attributes associated with the block.
            </summary>
            <value>
            <c>true</c> if attributes have already been verified; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.BlockTypeCache.CheckedSecurityActions">
            <summary>
            Gets or sets a value indicating whether [checked security actions].
            </summary>
            <value>
            <c>true</c> if [checked security actions]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.BlockTypeCache.SecurityActions">
            <summary>
            Gets or sets the security actions that were defined by a SecurityActionAttribute on the block type
            </summary>
            <value>
            The security actions.
            </value>
        </member>
        <member name="T:Rock.Web.Cache.BlockCache">
            <summary>
            Information about a block that is required by the rendering engine.
            This information will be cached by the engine
            </summary>
        </member>
        <member name="M:Rock.Web.Cache.BlockCache.CopyFromModel(Rock.Data.IEntity)">
            <summary>
            Copies from model.
            </summary>
            <param name="model">The model.</param>
        </member>
        <member name="M:Rock.Web.Cache.BlockCache.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Rock.Web.Cache.BlockCache.Read(System.Int32)">
            <summary>
            Returns Block object from cache.  If block does not already exist in cache, it
            will be read and added to cache
            </summary>
            <param name="id">The id.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.Cache.BlockCache.Read(System.Guid)">
            <summary>
            Reads the specified GUID.
            </summary>
            <param name="guid">The GUID.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.Cache.BlockCache.Read(Rock.Model.Block)">
            <summary>
            Adds Block model to cache, and returns cached object
            </summary>
            <param name="blockModel">The block model.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.Cache.BlockCache.Flush(System.Int32)">
            <summary>
            Removes block from cache
            </summary>
            <param name="id"></param>
        </member>
        <member name="P:Rock.Web.Cache.BlockCache.IsSystem">
            <summary>
            Gets or sets a value indicating whether this instance is system.
            </summary>
            <value>
              <c>true</c> if this instance is system; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.BlockCache.PageId">
            <summary>
            Gets or sets the page id.
            </summary>
            <value>
            The page id.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.BlockCache.LayoutId">
            <summary>
            Gets or sets the layout id.
            </summary>
            <value>
            The layout id.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.BlockCache.BlockTypeId">
            <summary>
            Gets or sets the block type id.
            </summary>
            <value>
            The block type id.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.BlockCache.Zone">
            <summary>
            Gets or sets the zone.
            </summary>
            <value>
            The zone.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.BlockCache.Order">
            <summary>
            Gets or sets the order.
            </summary>
            <value>
            The order.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.BlockCache.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.BlockCache.CssClass">
            <summary>
            Gets or sets the CSS class.
            </summary>
            <value>
            The CSS class.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.BlockCache.PreHtml">
            <summary>
            Gets or sets the pre HTML.
            </summary>
            <value>
            The pre HTML.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.BlockCache.PostHtml">
            <summary>
            Gets or sets the post HTML.
            </summary>
            <value>
            The post HTML.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.BlockCache.OutputCacheDuration">
            <summary>
            Gets or sets the duration of the output cache.
            </summary>
            <value>
            The duration of the output cache.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.BlockCache.Page">
            <summary>
            Gets the page.
            </summary>
        </member>
        <member name="P:Rock.Web.Cache.BlockCache.Layout">
            <summary>
            Gets the <see cref="P:Rock.Web.Cache.BlockCache.Layout"/> object for the block.
            </summary>
        </member>
        <member name="P:Rock.Web.Cache.BlockCache.BlockType">
            <summary>
            Gets the block type
            </summary>
        </member>
        <member name="P:Rock.Web.Cache.BlockCache.ParentAuthority">
            <summary>
            Gets the parent authority.
            </summary>
            <value>
            The parent authority.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.BlockCache.BlockLocation">
            <summary>
            Gets the block location.
            </summary>
            <value>
            The block location.
            </value>
        </member>
        <member name="T:Rock.Security.Role">
            <summary>
            Information about a Role that is required by the rendering engine.
            This information will be cached by the engine
            </summary>
        </member>
        <member name="M:Rock.Security.Role.#ctor">
            <summary>
            Use Static Read() method to instantiate a new Role object
            </summary>
        </member>
        <member name="M:Rock.Security.Role.IsUserInRole(System.String)">
            <summary>
            Is user in role
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:Rock.Security.Role.CacheKey(System.Int32)">
            <summary>
            Caches the key.
            </summary>
            <param name="id">The id.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Security.Role.Read(System.Int32)">
            <summary>
            Returns Role object from cache.  If role does not already exist in cache, it
            will be read and added to cache
            </summary>
            <param name="id">The id.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Security.Role.AllRoles">
            <summary>
            Returns a list of all the possible Roles
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rock.Security.Role.Flush(System.Int32)">
            <summary>
            Removes role from cache
            </summary>
            <param name="id">The id.</param>
        </member>
        <member name="P:Rock.Security.Role.Id">
            <summary>
            Gets the id.
            </summary>
        </member>
        <member name="P:Rock.Security.Role.Name">
            <summary>
            Gets the name.
            </summary>
        </member>
        <member name="P:Rock.Security.Role.Users">
            <summary>
            Gets the users that belong to the role
            </summary>
        </member>
        <member name="T:Rock.Web.Cache.CampusCache">
            <summary>
            Information about a campus that is required by the rendering engine.
            This information will be cached by the engine
            </summary>
        </member>
        <member name="M:Rock.Web.Cache.CampusCache.CopyFromModel(Rock.Data.IEntity)">
            <summary>
            Copies from model.
            </summary>
            <param name="model">The model.</param>
        </member>
        <member name="M:Rock.Web.Cache.CampusCache.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Rock.Web.Cache.CampusCache.CacheKey(System.Int32)">
            <summary>
            Gets the cache key for the selected campu id.
            </summary>
            <param name="id">The campus id.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.Cache.CampusCache.Read(System.Int32)">
            <summary>
            Returns Campus object from cache.  If campus does not already exist in cache, it
            will be read and added to cache
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.Cache.CampusCache.Read(System.Guid)">
            <summary>
            Reads the specified GUID.
            </summary>
            <param name="guid">The GUID.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.Cache.CampusCache.Read(Rock.Model.Campus)">
            <summary>
            Adds Campus model to cache, and returns cached object
            </summary>
            <param name="campusModel"></param>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.Cache.CampusCache.Flush(System.Int32)">
            <summary>
            Removes campus from cache
            </summary>
            <param name="id"></param>
        </member>
        <member name="P:Rock.Web.Cache.CampusCache.IsSystem">
            <summary>
            Gets or sets a value indicating whether this instance is system.
            </summary>
            <value>
              <c>true</c> if this instance is system; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.CampusCache.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.CampusCache.ShortCode">
            <summary>
            Gets or sets the short code.
            </summary>
            <value>
            The short code.
            </value>
        </member>
        <member name="T:Rock.Web.Cache.EntityTypeCache">
            <summary>
            Information about a entityType that is required by the rendering engine.
            This information will be cached by the engine
            </summary>
        </member>
        <member name="M:Rock.Web.Cache.EntityTypeCache.GetEntityType">
            <summary>
            Gets the type of the entity.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.Cache.EntityTypeCache.CopyFromModel(Rock.Model.EntityType)">
            <summary>
            Copies from model.
            </summary>
            <param name="entityType">Type of the entity.</param>
        </member>
        <member name="M:Rock.Web.Cache.EntityTypeCache.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Rock.Web.Cache.EntityTypeCache.GetId(System.Type)">
            <summary>
            Gets the id.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.Cache.EntityTypeCache.GetId(System.String)">
            <summary>
            Gets the id.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.Cache.EntityTypeCache.Read(System.Type)">
            <summary>
            Reads the specified type.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.Cache.EntityTypeCache.Read(System.String)">
            <summary>
            Returns EntityType object from cache.  If entityBlockType does not already exist in cache, it
            will be read and added to cache
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.Cache.EntityTypeCache.Read(System.String,System.Boolean)">
            <summary>
            Reads the specified name.
            </summary>
            <param name="name">The name.</param>
            <param name="createNew">if set to <c>true</c> [create new].</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.Cache.EntityTypeCache.Read(System.Int32)">
            <summary>
            Returns EntityType object from cache.  If entityBlockType does not already exist in cache, it
            will be read and added to cache
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.Cache.EntityTypeCache.Read(System.Guid)">
            <summary>
            Reads the specified GUID.
            </summary>
            <param name="guid">The GUID.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.Cache.EntityTypeCache.Read(Rock.Model.EntityType)">
            <summary>
            Reads the specified field type model.
            </summary>
            <param name="entityTypeModel">The field type model.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.Cache.EntityTypeCache.Flush(System.Int32)">
            <summary>
            Removes entityType from cache
            </summary>
            <param name="id"></param>
        </member>
        <member name="P:Rock.Web.Cache.EntityTypeCache.Id">
            <summary>
            Gets or sets the id.
            </summary>
            <value>
            The id.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.EntityTypeCache.Guid">
            <summary>
            Gets or sets the GUID.
            </summary>
            <value>
            The GUID.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.EntityTypeCache.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.EntityTypeCache.AssemblyName">
            <summary>
            Gets or sets the name of the assembly.
            </summary>
            <value>
            The name of the assembly.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.EntityTypeCache.FriendlyName">
            <summary>
            Gets or sets the name of the friendly.
            </summary>
            <value>
            The name of the friendly.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.EntityTypeCache.IsEntity">
            <summary>
            Gets or sets a value indicating whether this instance is entity.
            </summary>
            <value>
              <c>true</c> if this instance is entity; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.EntityTypeCache.IsSecured">
            <summary>
            Gets or sets a value indicating whether this instance is secured.
            </summary>
            <value>
            <c>true</c> if this instance is secured; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.EntityTypeCache.SingleValueFieldTypeId">
            <summary>
            Gets or sets the single value field type identifier.
            </summary>
            <value>
            The single value field type identifier.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.EntityTypeCache.SingleValueFieldType">
            <summary>
            Gets the type of the single value field.
            </summary>
            <value>
            The type of the single value field.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.EntityTypeCache.MultiValueFieldTypeId">
            <summary>
            Gets or sets the multi value field type identifier.
            </summary>
            <value>
            The multi value field type identifier.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.EntityTypeCache.MultiValueFieldType">
            <summary>
            Gets the type of the multi value field.
            </summary>
            <value>
            The type of the multi value field.
            </value>
        </member>
        <member name="T:Rock.Web.Cache.DefinedTypeCache">
            <summary>
            Information about a definedType that is required by the rendering engine.
            This information will be cached by the engine
            </summary>
        </member>
        <member name="M:Rock.Web.Cache.DefinedTypeCache.CopyFromModel(Rock.Data.IEntity)">
            <summary>
            Copies from model.
            </summary>
            <param name="model">The model.</param>
        </member>
        <member name="M:Rock.Web.Cache.DefinedTypeCache.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Rock.Web.Cache.DefinedTypeCache.Read(System.Int32)">
            <summary>
            Returns DefinedType object from cache.  If definedType does not already exist in cache, it
            will be read and added to cache
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.Cache.DefinedTypeCache.Read(System.Guid)">
            <summary>
            Reads the specified GUID.
            </summary>
            <param name="guid">The GUID.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.Cache.DefinedTypeCache.Read(Rock.Model.DefinedType)">
            <summary>
            Reads the specified defined type model.
            </summary>
            <param name="definedTypeModel">The defined type model.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.Cache.DefinedTypeCache.Flush(System.Int32)">
            <summary>
            Removes definedType from cache
            </summary>
            <param name="id"></param>
        </member>
        <member name="P:Rock.Web.Cache.DefinedTypeCache.IsSystem">
            <summary>
            Gets or sets a value indicating whether this instance is system.
            </summary>
            <value>
              <c>true</c> if this instance is system; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.DefinedTypeCache.FieldTypeId">
            <summary>
            Gets or sets the field type id.
            </summary>
            <value>
            The field type id.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.DefinedTypeCache.Order">
            <summary>
            Gets or sets the order.
            </summary>
            <value>
            The order.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.DefinedTypeCache.Category">
            <summary>
            Gets or sets the category.
            </summary>
            <value>
            The category.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.DefinedTypeCache.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.DefinedTypeCache.Description">
            <summary>
            Gets or sets the description.
            </summary>
            <value>
            The description.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.DefinedTypeCache.FieldType">
            <summary>
            Gets the type of the field.
            </summary>
            <value>
            The type of the field.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.DefinedTypeCache.DefinedValues">
            <summary>
            Gets the defined values.
            </summary>
            <value>
            The defined values.
            </value>
        </member>
        <member name="T:Rock.Web.Cache.DefinedValueCache">
            <summary>
            Information about a definedValue that is required by the rendering engine.
            This information will be cached by the engine
            </summary>
        </member>
        <member name="M:Rock.Web.Cache.DefinedValueCache.CopyFromModel(Rock.Data.IEntity)">
            <summary>
            Copies the model property values to the DTO properties
            </summary>
            <param name="model">The model.</param>
        </member>
        <member name="M:Rock.Web.Cache.DefinedValueCache.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Rock.Web.Cache.DefinedValueCache.Read(System.Int32)">
            <summary>
            Returns DefinedValue object from cache.  If definedValue does not already exist in cache, it
            will be read and added to cache
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.Cache.DefinedValueCache.Read(System.String)">
            <summary>
            Reads the specified GUID.
            </summary>
            <param name="guid">The GUID.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.Cache.DefinedValueCache.Read(System.Guid)">
            <summary>
            Reads the specified GUID.
            </summary>
            <param name="guid">The GUID.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.Cache.DefinedValueCache.Read(Rock.Model.DefinedValue)">
            <summary>
            Reads the specified defined value model.
            </summary>
            <param name="definedValueModel">The defined value model.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.Cache.DefinedValueCache.Flush(System.Int32)">
            <summary>
            Removes definedValue from cache
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:Rock.Web.Cache.DefinedValueCache.GetName(System.Nullable{System.Int32})">
            <summary>
            Gets the name of the defined value given an id
            </summary>
            <param name="id">The identifier.</param>
            <returns></returns>
        </member>
        <member name="P:Rock.Web.Cache.DefinedValueCache.IsSystem">
            <summary>
            Gets or sets a value indicating whether this instance is system.
            </summary>
            <value>
              <c>true</c> if this instance is system; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.DefinedValueCache.DefinedTypeId">
            <summary>
            Gets or sets the defined type id.
            </summary>
            <value>
            The defined type id.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.DefinedValueCache.Order">
            <summary>
            Gets or sets the order.
            </summary>
            <value>
            The order.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.DefinedValueCache.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.DefinedValueCache.Description">
            <summary>
            Gets or sets the description.
            </summary>
            <value>
            The description.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.DefinedValueCache.DefinedType">
            <summary>
            Gets the type of the field.
            </summary>
            <value>
            The type of the field.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.DefinedValueCache.ParentAuthority">
            <summary>
            Gets the parent authority.
            </summary>
            <value>
            The parent authority.
            </value>
        </member>
        <member name="T:Rock.Web.Cache.GlobalAttributesCache">
            <summary>
            Global Attributes
            This information will be cached by the engine
            </summary>
        </member>
        <member name="M:Rock.Web.Cache.GlobalAttributesCache.#ctor">
            <summary>
            Use Static Read() method to instantiate a new Global Attributes object
            </summary>
        </member>
        <member name="M:Rock.Web.Cache.GlobalAttributesCache.GetValue(System.String)">
            <summary>
            Gets the Global Attribute values for the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.Cache.GlobalAttributesCache.SetValue(System.String,System.String,System.Boolean)">
            <summary>
            Sets the value.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <param name="saveValue">if set to <c>true</c> [save value].</param>
        </member>
        <member name="M:Rock.Web.Cache.GlobalAttributesCache.Read">
            <summary>
            Returns Global Attributes from cache.  If they are not already in cache, they
            will be read and added to cache
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.Cache.GlobalAttributesCache.Flush">
            <summary>
            Removes Global Attributes from cache
            </summary>
        </member>
        <member name="M:Rock.Web.Cache.GlobalAttributesCache.GetMergeFields(Rock.Model.Person)">
            <summary>
            Gets the global attribute values as merge fields for dotLiquid merging.
            </summary>
            <param name="currentPerson">The current person.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.Cache.GlobalAttributesCache.ResolveConfigValue(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Resolves the config value.
            </summary>
            <param name="value">The value.</param>
            <param name="configValues">The config values.</param>
            <returns></returns>
        </member>
        <member name="P:Rock.Web.Cache.GlobalAttributesCache.Attributes">
            <summary>
            Gets or sets the attributes.  Used to iterate all values when merging possible merge fields
            </summary>
            <value>
            The attributes.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.GlobalAttributesCache.AttributeValues">
            <summary>
            Gets or sets the attribute values.
            </summary>
            <value>
            The attribute values.
            </value>
        </member>
        <member name="T:Rock.Web.Cache.FieldTypeCache">
            <summary>
            Information about a fieldType that is required by the rendering engine.
            This information will be cached by the engine
            </summary>
        </member>
        <member name="M:Rock.Web.Cache.FieldTypeCache.CopyFromModel(Rock.Data.IEntity)">
            <summary>
            Copies from model.
            </summary>
            <param name="model">The model.</param>
        </member>
        <member name="M:Rock.Web.Cache.FieldTypeCache.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Rock.Web.Cache.FieldTypeCache.All">
            <summary>
            All the field types
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.Cache.FieldTypeCache.Read(System.Int32)">
            <summary>
            Returns FieldType object from cache.  If fieldType does not already exist in cache, it
            will be read and added to cache
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.Cache.FieldTypeCache.Read(System.String)">
            <summary>
            Reads the specified GUID.
            </summary>
            <param name="guid">The GUID.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.Cache.FieldTypeCache.Read(System.Guid)">
            <summary>
            Reads the specified GUID.
            </summary>
            <param name="guid">The GUID.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.Cache.FieldTypeCache.Read(Rock.Model.FieldType)">
            <summary>
            Reads the specified field type model.
            </summary>
            <param name="fieldTypeModel">The field type model.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.Cache.FieldTypeCache.Flush(System.Int32)">
            <summary>
            Removes fieldType from cache
            </summary>
            <param name="id"></param>
        </member>
        <member name="P:Rock.Web.Cache.FieldTypeCache.IsSystem">
            <summary>
            Gets or sets a value indicating whether this instance is system.
            </summary>
            <value>
              <c>true</c> if this instance is system; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.FieldTypeCache.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.FieldTypeCache.Description">
            <summary>
            Gets or sets the description.
            </summary>
            <value>
            The description.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.FieldTypeCache.Assembly">
            <summary>
            Gets or sets the assembly.
            </summary>
            <value>
            The assembly.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.FieldTypeCache.Class">
            <summary>
            Gets or sets the class.
            </summary>
            <value>
            The class.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.FieldTypeCache.Field">
            <summary>
            Gets the field 
            </summary>
        </member>
        <member name="T:Rock.Web.Cache.SiteCache">
            <summary>
            Information about a site that is required by the rendering engine.
            This information will be cached by the engine
            </summary>
        </member>
        <member name="M:Rock.Web.Cache.SiteCache.CopyFromModel(Rock.Data.IEntity)">
            <summary>
            Copies from model.
            </summary>
            <param name="model">The model.</param>
        </member>
        <member name="M:Rock.Web.Cache.SiteCache.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Rock.Web.Cache.SiteCache.RedirectToDefaultPage">
            <summary>
            Redirects to default page.
            </summary>
        </member>
        <member name="M:Rock.Web.Cache.SiteCache.RedirectToLoginPage(System.Boolean)">
            <summary>
            Redirects to login page.
            </summary>
        </member>
        <member name="M:Rock.Web.Cache.SiteCache.RedirectToRegistrationPage">
            <summary>
            Redirects to registration page.
            </summary>
        </member>
        <member name="M:Rock.Web.Cache.SiteCache.RedirectToPageNotFoundPage">
            <summary>
            Redirects to registration page.
            </summary>
        </member>
        <member name="M:Rock.Web.Cache.SiteCache.Read(System.Int32)">
            <summary>
            Returns Site object from cache.  If site does not already exist in cache, it
            will be read and added to cache
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.Cache.SiteCache.Read(System.Guid)">
            <summary>
            Reads the specified GUID.
            </summary>
            <param name="guid">The GUID.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.Cache.SiteCache.Read(Rock.Model.Site)">
            <summary>
            Adds Site model to cache, and returns cached object
            </summary>
            <param name="siteModel"></param>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.Cache.SiteCache.Flush(System.Int32)">
            <summary>
            Removes site from cache
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:Rock.Web.Cache.SiteCache.GetSiteByDomain(System.String)">
            <summary>
            Returns site based on domain
            </summary>
            <param name="host">The host.</param>
            <returns></returns>
        </member>
        <member name="P:Rock.Web.Cache.SiteCache.IsSystem">
            <summary>
            Gets or sets a value indicating whether this instance is system.
            </summary>
            <value>
              <c>true</c> if this instance is system; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.SiteCache.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.SiteCache.Description">
            <summary>
            Gets or sets the description.
            </summary>
            <value>
            The description.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.SiteCache.Theme">
            <summary>
            Gets or sets the theme.
            </summary>
            <value>
            The theme.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.SiteCache.DefaultPageId">
            <summary>
            Gets or sets the default page id.
            </summary>
            <value>
            The default page id.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.SiteCache.DefaultPageRouteId">
            <summary>
            Gets or sets the default page route unique identifier.
            </summary>
            <value>
            The default page route unique identifier.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.SiteCache.DefaultPageReference">
            <summary>
            Gets the default page reference.
            </summary>
            <value>
            The default page reference.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.SiteCache.PageNotFoundPageId">
            <summary>
            Gets or sets the 404 page id.
            </summary>
            <value>
            The 404 page id.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.SiteCache.PageNotFoundPageRouteId">
            <summary>
            Gets or sets the 404 page route unique identifier.
            </summary>
            <value>
            The 404 page route unique identifier.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.SiteCache.PageNotFoundPageReference">
            <summary>
            Gets the page not found page reference.
            </summary>
            <value>
            The page not found page reference.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.SiteCache.LoginPageId">
            <summary>
            Gets or sets the login page id.
            </summary>
            <value>
            The login page id.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.SiteCache.LoginPageRouteId">
            <summary>
            Gets or sets the login page route id.
            </summary>
            <value>
            The login page route id.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.SiteCache.LoginPageReference">
            <summary>
            Gets the login page reference.
            </summary>
            <value>
            The login page reference.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.SiteCache.RegistrationPageId">
            <summary>
            Gets or sets the registration page id.
            </summary>
            <value>
            The registration page id.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.SiteCache.RegistrationPageRouteId">
            <summary>
            Gets or sets the registration page route id.
            </summary>
            <value>
            The registration page route id.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.SiteCache.RegistrationPageReference">
            <summary>
            Gets the registration page reference.
            </summary>
            <value>
            The registration page reference.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.SiteCache.ErrorPage">
            <summary>
            Gets or sets the error page.
            </summary>
            <value>
            The error page.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.SiteCache.GoogleAnalyticsCode">
            <summary>
            Gets or sets the google analytics code.
            </summary>
            <value>
            The google analytics code.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.SiteCache.FacebookAppId">
            <summary>
            Gets or sets the facebook app id.
            </summary>
            <value>
            The facebook app id.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.SiteCache.FacebookAppSecret">
            <summary>
            Gets or sets the facebook app secret.
            </summary>
            <value>
            The facebook app secret.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.SiteCache.DefaultPage">
            <summary>
            Gets the default page.
            </summary>
        </member>
        <member name="T:Rock.Web.Cache.PageCache">
            <summary>
            Information about a page that is required by the rendering engine.
            This information will be cached by the engine
            </summary>
        </member>
        <member name="M:Rock.Web.Cache.PageCache.CopyFromModel(Rock.Data.IEntity)">
            <summary>
            Copies from model.
            </summary>
            <param name="model">The model.</param>
        </member>
        <member name="M:Rock.Web.Cache.PageCache.DisplayInNav(Rock.Model.Person)">
            <summary>
              <c>true</c> or <c>false</c> value of whether the page can be displayed in a navigation menu
            based on the <see cref="P:Rock.Web.Cache.PageCache.DisplayInNavWhen"/> property value and the security of the currently logged in user
            </summary>
            <param name="person">The person.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.Cache.PageCache.GetPageHierarchy">
            <summary>
            Gets all the pages in the current hierarchy
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.Cache.PageCache.FlushBlocks">
            <summary>
            Flushes the cached block instances.
            </summary>
        </member>
        <member name="M:Rock.Web.Cache.PageCache.FlushChildPages">
            <summary>
            Flushes the cached child pages.
            </summary>
        </member>
        <member name="M:Rock.Web.Cache.PageCache.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Rock.Web.Cache.PageCache.MenuXml(Rock.Model.Person)">
            <summary>
            Returns XML for a page menu.  XML will be 1 level deep
            </summary>
            <param name="person">The person.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.Cache.PageCache.MenuXml(System.Int32,Rock.Model.Person,Rock.Web.Cache.PageCache,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Specialized.NameValueCollection)">
            <summary>
            Returns XML for a page menu.
            </summary>
            <param name="levelsDeep">The page levels deep.</param>
            <param name="person">The person.</param>
            <param name="currentPage">The current page.</param>
            <param name="parameters">The parameters.</param>
            <param name="queryString">The query string.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.Cache.PageCache.MenuXmlElement(System.Int32,Rock.Model.Person,Rock.Web.Cache.PageCache,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Specialized.NameValueCollection)">
            <summary>
            Menus the XML element.
            </summary>
            <param name="levelsDeep">The levels deep.</param>
            <param name="person">The person.</param>
            <param name="currentPage">The current page.</param>
            <param name="parameters">The parameters.</param>
            <param name="queryString">The query string.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.Cache.PageCache.GetMenuProperties(Rock.Model.Person)">
            <summary>
            Gets the menu properties.
            </summary>
            <param name="person">The person.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.Cache.PageCache.GetMenuProperties(System.Int32,Rock.Model.Person,System.Collections.Generic.List{System.Int32},System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Specialized.NameValueCollection)">
            <summary>
            Gets the menu properties.
            </summary>
            <param name="levelsDeep">The levels deep.</param>
            <param name="person">The person.</param>
            <param name="currentPageHeirarchy">The current page heirarchy.</param>
            <param name="parameters">The parameters.</param>
            <param name="queryString">The query string.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.Cache.PageCache.FormatPath(System.String,System.String)">
            <summary>
            Formats the page url based on the selected theme and layout
            </summary>
            <param name="theme"></param>
            <param name="layout"></param>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.Cache.PageCache.CacheKey(System.Int32)">
            <summary>
            Gets the cache key for the selected page id.
            </summary>
            <param name="pageId">The page id.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.Cache.PageCache.Read(System.Int32)">
            <summary>
            Returns Page object from cache.  If page does not already exist in cache, it
            will be read and added to cache
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.Cache.PageCache.Read(System.Guid)">
            <summary>
            Reads the specified GUID.
            </summary>
            <param name="guid">The GUID.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.Cache.PageCache.Read(Rock.Model.Page)">
            <summary>
            Adds Page model to cache, and returns cached object
            </summary>
            <param name="pageModel"></param>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.Cache.PageCache.Flush(System.Int32)">
            <summary>
            Removes page from cache
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:Rock.Web.Cache.PageCache.FlushLayout(System.Int32)">
            <summary>
            Flushes all the pages that use a specific layout.
            </summary>
        </member>
        <member name="M:Rock.Web.Cache.PageCache.FlushLayoutBlocks(System.Int32)">
            <summary>
            Flushes the block instances for all the pages that use a specific layout.
            </summary>
        </member>
        <member name="P:Rock.Web.Cache.PageCache.InternalName">
            <summary>
            Gets or sets the internal name to use when administering this page
            </summary>
            <value>
            A <see cref="T:System.String"/> that represents the internal name of the Page.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.PageCache.PageTitle">
            <summary>
            Gets or sets the title of the of the Page to use as the page caption, in menu's, breadcrumb display etc.
            </summary>
            <value>
            A <see cref="T:System.String"/> that represents the page title of the Page.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.PageCache.BrowserTitle">
            <summary>
            Gets or sets the browser title to use for the page
            </summary>
            <value>
            The browser title.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.PageCache.ParentPageId">
            <summary>
            Gets or sets the parent page id.
            </summary>
            <value>
            The parent page id.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.PageCache.IsSystem">
            <summary>
            Gets or sets a value indicating whether this instance is system.
            </summary>
            <value>
              <c>true</c> if this instance is system; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.PageCache.LayoutId">
            <summary>
            Gets or sets the layout id.
            </summary>
            <value>
            The layout id.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.PageCache.RequiresEncryption">
            <summary>
            Gets or sets a value indicating whether [requires encryption].
            </summary>
            <value>
              <c>true</c> if [requires encryption]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.PageCache.EnableViewState">
            <summary>
            Gets or sets a value indicating whether [enable view state].
            </summary>
            <value>
              <c>true</c> if [enable view state]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.PageCache.PageDisplayTitle">
            <summary>
            Gets or sets a value indicating whether [page display title].
            </summary>
            <value>
              <c>true</c> if [page display title]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.PageCache.PageDisplayBreadCrumb">
            <summary>
            Gets or sets a value indicating whether [page display breadcrumb].
            </summary>
            <value>
            <c>true</c> if [page display breadcrumb]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.PageCache.PageDisplayIcon">
            <summary>
            Gets or sets a value indicating whether [page display icon].
            </summary>
            <value>
              <c>true</c> if [page display icon]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.PageCache.PageDisplayDescription">
            <summary>
            Gets or sets a value indicating whether [page display description].
            </summary>
            <value>
            <c>true</c> if [page display description]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.PageCache.DisplayInNavWhen">
            <summary>
            Gets or sets the display in nav when.
            </summary>
            <value>
            The display in nav when.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.PageCache.MenuDisplayDescription">
            <summary>
            Gets or sets a value indicating whether [menu display description].
            </summary>
            <value>
            <c>true</c> if [menu display description]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.PageCache.MenuDisplayIcon">
            <summary>
            Gets or sets a value indicating whether [menu display icon].
            </summary>
            <value>
              <c>true</c> if [menu display icon]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.PageCache.MenuDisplayChildPages">
            <summary>
            Gets or sets a value indicating whether [menu display child pages].
            </summary>
            <value>
            <c>true</c> if [menu display child pages]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.PageCache.BreadCrumbDisplayName">
            <summary>
            Gets or sets a value indicating whether [breadcrumb display name].
            </summary>
            <value>
            <c>true</c> if [breadcrumb display name]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.PageCache.BreadCrumbDisplayIcon">
            <summary>
            Gets or sets a value indicating whether [breadcrumb display icon].
            </summary>
            <value>
            <c>true</c> if [breadcrumb display icon]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.PageCache.IconCssClass">
            <summary>
            Gets or sets the icon CSS class.
            </summary>
            <value>
            The icon CSS class.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.PageCache.Order">
            <summary>
            Gets or sets the order.
            </summary>
            <value>
            The order.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.PageCache.OutputCacheDuration">
            <summary>
            Gets or sets the duration of the output cache.
            </summary>
            <value>
            The duration of the output cache.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.PageCache.Description">
            <summary>
            Gets or sets the description.
            </summary>
            <value>
            The description.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.PageCache.KeyWords">
            <summary>
            Gets or sets the key words.
            </summary>
            <value>
            The key words.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.PageCache.HeaderContent">
            <summary>
            Gets or sets html content to add to the page header area of the page when rendered.
            </summary>
            <value>
            The content of the header.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.PageCache.IconFileId">
            <summary>
            Gets or sets the icon file id.
            </summary>
            <value>
            The icon file id.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.PageCache.IncludeAdminFooter">
            <summary>
            Gets or sets a value indicating whether [include admin footer].
            </summary>
            <value>
              <c>true</c> if [include admin footer]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.PageCache.ParentPage">
            <summary>
            Gets the parent page.
            </summary>
            <value>
            The parent page.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.PageCache.Layout">
            <summary>
            Gets the <see cref="T:Rock.Model.Site"/> object for the page.
            </summary>
        </member>
        <member name="P:Rock.Web.Cache.PageCache.Pages">
            <summary>
            Gets a List of child <see cref="T:Rock.Web.Cache.PageCache"/> objects.
            </summary>
        </member>
        <member name="P:Rock.Web.Cache.PageCache.Blocks">
            <summary>
            Gets a List of all the <see cref="T:Rock.Web.Cache.BlockCache"/> objects configured for the page and the page's layout.
            </summary>
        </member>
        <member name="P:Rock.Web.Cache.PageCache.PageContexts">
            <summary>
            Gets or sets the page contexts that have been defined for the page
            </summary>
            <value>
            The page contexts.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.PageCache.PageRoutes">
            <summary>
            Gets or sets the page routes.
            </summary>
            <value>
            The page routes.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.PageCache.ParentAuthority">
            <summary>
            Gets the parent authority.
            </summary>
            <value>
            The parent authority.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.PageCache.BreadCrumbText">
            <summary>
            Gets the bread crumb text.
            </summary>
            <value>
            The bread crumb text.
            </value>
        </member>
        <member name="T:Rock.Web.Cache.PageCache.PageRouteInfo">
            <summary>
            Helper class for PageRoute information
            </summary>
        </member>
        <member name="F:Rock.Web.Cache.PageCache.PageRouteInfo.Id">
            <summary>
            The id
            </summary>
        </member>
        <member name="F:Rock.Web.Cache.PageCache.PageRouteInfo.Guid">
            <summary>
            The GUID
            </summary>
        </member>
        <member name="F:Rock.Web.Cache.PageCache.PageRouteInfo.Route">
            <summary>
            The route
            </summary>
        </member>
        <member name="T:Rock.Web.UI.ContextAwareAttribute">
            <summary>
            Custom attribute used to decorate Rock Blocks that require context.  If entity type is not 
            included in the attribute, a block property will automatically be added for user to set 
            the entity type when block is placed on a page
            </summary>
        </member>
        <member name="M:Rock.Web.UI.ContextAwareAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Web.UI.ContextAwareAttribute"/> class.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.ContextAwareAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Web.UI.ContextAwareAttribute"/> class.
            </summary>
            <param name="entityType">Type of the entity.</param>
        </member>
        <member name="P:Rock.Web.UI.ContextAwareAttribute.EntityType">
            <summary>
            Gets or sets the type of the entity.
            </summary>
            <value>
            The type of the entity.
            </value>
        </member>
        <member name="P:Rock.Web.UI.ContextAwareAttribute.DefaultParameterName">
            <summary>
            Gets the default name of the parameter.
            </summary>
            <value>
            The default name of the parameter.
            </value>
        </member>
        <member name="T:Rock.Web.UI.Controls.CampusesPicker">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.CampusesPicker.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Web.UI.Controls.CampusPicker"/> class.
            </summary>
        </member>
        <member name="P:Rock.Web.UI.Controls.CampusesPicker.Campuses">
            <summary>
            Gets or sets the campuses.
            </summary>
            <value>
            The campuses.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.CampusesPicker.AvailableCampusIds">
            <summary>
            Gets the available campus ids.
            </summary>
            <value>
            The available campus ids.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.CampusesPicker.SelectedCampusIds">
            <summary>
            Gets the selected campus ids.
            </summary>
            <value>
            The selected campus ids.
            </value>
        </member>
        <member name="T:Rock.Web.UI.Controls.ModalAlert">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.ModalAlert.Show(System.String,Rock.Web.UI.Controls.ModalAlertType)">
            <summary>
            Shows the specified message.
            </summary>
            <param name="message">The message.</param>
            <param name="alertType">Type of the message.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.ModalAlert.Hide">
            <summary>
            Hides this instance.
            </summary>
        </member>
        <member name="P:Rock.Web.UI.Controls.ModalAlert.ScriptKey">
            <summary>
            Gets the script key.
            </summary>
            <value>
            The script key.
            </value>
        </member>
        <member name="T:Rock.Web.UI.Controls.ModalAlertType">
            <summary>
            
            </summary>
        </member>
        <member name="F:Rock.Web.UI.Controls.ModalAlertType.Alert">
            <summary>
            
            </summary>
        </member>
        <member name="F:Rock.Web.UI.Controls.ModalAlertType.Information">
            <summary>
            
            </summary>
        </member>
        <member name="F:Rock.Web.UI.Controls.ModalAlertType.Warning">
            <summary>
            
            </summary>
        </member>
        <member name="T:Rock.Web.UI.Controls.ModalDialog">
            <summary>
            A Modal Popup Dialog Window
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.ModalDialog.OnInit(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Init"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.ModalDialog.CreateChildControls">
            <summary>
            Called by the ASP.NET page framework to notify server controls that use composition-based implementation to create any child controls they contain in preparation for posting back or rendering.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.ModalDialog.OnPreRender(System.EventArgs)">
            <summary>
            Raises the <see cref="E:PreRender"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.ModalDialog.SaveLink_ServerClick(System.Object,System.EventArgs)">
            <summary>
            Handles the ServerClick event of the SaveLink control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:Rock.Web.UI.Controls.ModalDialog.Title">
            <summary>
            Gets or sets the title.
            </summary>
            <value>
            The title.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.ModalDialog.SubTitle">
            <summary>
            Gets or sets the subtitle.
            </summary>
            <value>
            The subtitle.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.ModalDialog.SaveButtonText">
            <summary>
            Gets or sets the save button text.
            </summary>
            <value>The save button text.</value>
        </member>
        <member name="P:Rock.Web.UI.Controls.ModalDialog.ValidationGroup">
            <summary>
            Gets or sets the validation group.
            </summary>
            <value>
            The validation group.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.ModalDialog.Content">
            <summary>
            The content of the popup.
            </summary>
        </member>
        <member name="E:Rock.Web.UI.Controls.ModalDialog.SaveClick">
            <summary>
            Occurs when the save button is clicked.
            </summary>
        </member>
        <member name="T:Rock.Web.UI.Controls.RockRadioButtonList">
            <summary>
            A <see cref="T:System.Web.UI.WebControls.TextBox"/> control with an associated label.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.RockRadioButtonList.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Web.UI.Controls.RockRadioButtonList"/> class.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.RockRadioButtonList.OnLoad(System.EventArgs)">
            <summary>
            Handles the <see cref="E:System.Web.UI.Control.Load" /> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs" /> object that contains event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.RockRadioButtonList.CreateChildControls">
            <summary>
            Called by the ASP.NET page framework to notify server controls that use composition-based implementation to create any child controls they contain in preparation for posting back or rendering.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.RockRadioButtonList.RenderControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            Outputs server control content to a provided <see cref="T:System.Web.UI.HtmlTextWriter" /> object and stores tracing information about the control if tracing is enabled.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter" /> object that receives the control content.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.RockRadioButtonList.RenderBaseControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders the base control.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="P:Rock.Web.UI.Controls.RockRadioButtonList.Label">
            <summary>
            Gets or sets the label text.
            </summary>
            <value>
            The label text.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.RockRadioButtonList.Help">
            <summary>
            Gets or sets the help text.
            </summary>
            <value>
            The help text.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.RockRadioButtonList.Required">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Rock.Web.UI.Controls.RockTextBox"/> is required.
            </summary>
            <value>
              <c>true</c> if required; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.RockRadioButtonList.RequiredErrorMessage">
            <summary>
            Gets or sets the required error message.  If blank, the LabelName name will be used
            </summary>
            <value>
            The required error message.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.RockRadioButtonList.IsValid">
            <summary>
            Gets a value indicating whether this instance is valid.
            </summary>
            <value>
              <c>true</c> if this instance is valid; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.RockRadioButtonList.HelpBlock">
            <summary>
            Gets or sets the help block.
            </summary>
            <value>
            The help block.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.RockRadioButtonList.RequiredFieldValidator">
            <summary>
            Gets or sets the required field validator.
            </summary>
            <value>
            The required field validator.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.RockRadioButtonList.ValidationGroup">
            <summary>
            Gets or sets the group of controls for which the control that is derived from the <see cref="T:System.Web.UI.WebControls.ListControl" /> class causes validation when it posts back to the server.
            </summary>
            <returns>The group of controls for which the derived <see cref="T:System.Web.UI.WebControls.ListControl" /> causes validation when it posts back to the server. The default is an empty string ("").</returns>
        </member>
        <member name="T:Rock.Web.UI.Controls.EnumField">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.EnumField.FormatDataValue(System.Object,System.Boolean)">
            <summary>
            Formats the specified field value for a cell in the <see cref="T:System.Web.UI.WebControls.BoundField" /> object.
            </summary>
            <param name="dataValue">The field value to format.</param>
            <param name="encode">true to encode the value; otherwise, false.</param>
            <returns>
            The field value converted to the format specified by <see cref="P:System.Web.UI.WebControls.BoundField.DataFormatString" />.
            </returns>
        </member>
        <member name="T:Rock.Web.UI.Controls.DateTimeField">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.DateTimeField.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Web.UI.Controls.DateTimeField"/> class.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.DateTimeField.Initialize(System.Boolean,System.Web.UI.Control)">
            <summary>
            Initializes the <see cref="T:System.Web.UI.WebControls.BoundField" /> object.
            </summary>
            <param name="enableSorting">true if sorting is supported; otherwise, false.</param>
            <param name="control">The data control that owns the <see cref="T:System.Web.UI.WebControls.BoundField" />.</param>
            <returns>
            false in all cases.
            </returns>
        </member>
        <member name="M:Rock.Web.UI.Controls.DateTimeField.FormatDataValue(System.Object,System.Boolean)">
            <summary>
            Formats the specified field value for a cell in the <see cref="T:System.Web.UI.WebControls.BoundField" /> object.
            </summary>
            <param name="dataValue">The field value to format.</param>
            <param name="encode">true to encode the value; otherwise, false.</param>
            <returns>
            The field value converted to the format specified by <see cref="P:System.Web.UI.WebControls.BoundField.DataFormatString" />.
            </returns>
        </member>
        <member name="P:Rock.Web.UI.Controls.DateTimeField.FormatAsElapsedTime">
            <summary>
            Gets or sets a value indicating whether value should be displayed as an elapsed time (i.e. "3 days ago").
            </summary>
            <value>
            <c>true</c> if [format as elapsed time]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Rock.Web.UI.Controls.DateField">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.DateField.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Web.UI.Controls.DateField"/> class.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.DateField.Initialize(System.Boolean,System.Web.UI.Control)">
            <summary>
            Initializes the <see cref="T:System.Web.UI.WebControls.BoundField" /> object.
            </summary>
            <param name="enableSorting">true if sorting is supported; otherwise, false.</param>
            <param name="control">The data control that owns the <see cref="T:System.Web.UI.WebControls.BoundField" />.</param>
            <returns>
            false in all cases.
            </returns>
        </member>
        <member name="M:Rock.Web.UI.Controls.DateField.FormatDataValue(System.Object,System.Boolean)">
            <summary>
            Formats the specified field value for a cell in the <see cref="T:System.Web.UI.WebControls.BoundField" /> object.
            </summary>
            <param name="dataValue">The field value to format.</param>
            <param name="encode">true to encode the value; otherwise, false.</param>
            <returns>
            The field value converted to the format specified by <see cref="P:System.Web.UI.WebControls.BoundField.DataFormatString" />.
            </returns>
        </member>
        <member name="P:Rock.Web.UI.Controls.DateField.FormatAsElapsedTime">
            <summary>
            Gets or sets a value indicating whether value should be displayed as an elapsed time (i.e. "3 days ago").
            </summary>
            <value>
            <c>true</c> if [format as elapsed time]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Rock.Web.UI.Controls.GridFilter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.GridFilter.OnInit(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.Init" /> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs" /> object that contains the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.GridFilter.CreateChildControls">
            <summary>
            Called by the ASP.NET page framework to notify server controls that use composition-based implementation to create any child controls they contain in preparation for posting back or rendering.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.GridFilter.lbFilter_Click(System.Object,System.EventArgs)">
            <summary>
            Handles the Click event of the lbFilter control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.GridFilter.RenderControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            Outputs server control content to a provided <see cref="T:System.Web.UI.HtmlTextWriter" /> object and stores tracing information about the control if tracing is enabled.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter" /> object that receives the control content.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.GridFilter.RenderChildren(System.Web.UI.HtmlTextWriter)">
            <summary>
            Outputs the content of a server control's children to a provided <see cref="T:System.Web.UI.HtmlTextWriter" /> object, which writes the content to be rendered on the client.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter" /> object that receives the rendered content.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.GridFilter.GetUserPreference(System.String)">
            <summary>
            Gets the user preference for a given key if it exists
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.UI.Controls.GridFilter.SaveUserPreference(System.String,System.String)">
            <summary>
            Adds or updates an item in the User Preferences dictionary
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="E:Rock.Web.UI.Controls.GridFilter.ApplyFilterClick">
            <summary>
            Occurs when user applies a filter.
            </summary>
        </member>
        <member name="E:Rock.Web.UI.Controls.GridFilter.DisplayFilterValue">
            <summary>
            Occurs when grid filter displays an existing filter value.  Key and Value can be 
            updated to a more human-readable form if needed.
            </summary>
        </member>
        <member name="T:Rock.Web.UI.Controls.GridFilter.DisplayFilterValueArgs">
            <summary>
            Argument for DisplayFilterValue event
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.GridFilter.DisplayFilterValueArgs.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Web.UI.Controls.GridFilter.DisplayFilterValueArgs"/> class.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="P:Rock.Web.UI.Controls.GridFilter.DisplayFilterValueArgs.Key">
            <summary>
            Gets or sets the key.
            </summary>
            <value>
            The key.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.GridFilter.DisplayFilterValueArgs.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="T:Rock.Web.UI.Controls.RockLiteral">
            <summary>
            A <see cref="T:System.Web.UI.WebControls.Literal"/> control with an associated label.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.RockLiteral.RenderControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders a label and <see cref="T:System.Web.UI.WebControls.TextBox"/> control to the specified <see cref="T:System.Web.UI.HtmlTextWriter"/> object.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter"/> that receives the rendered output.</param>
        </member>
        <member name="P:Rock.Web.UI.Controls.RockLiteral.Label">
            <summary>
            Gets or sets the label text.
            </summary>
            <value>
            The label text.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.RockLiteral.CssClass">
            <summary>
            Gets or sets the CSS class.
            </summary>
            <value>
            The CSS class.
            </value>
        </member>
        <member name="T:Rock.Web.UI.Controls.ModalIFrameDialog">
            <summary>
            A Modal Popup Dialog Window
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.ModalIFrameDialog.OnInit(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Init"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.ModalIFrameDialog.CreateChildControls">
            <summary>
            Called by the ASP.NET page framework to notify server controls that use composition-based implementation to create any child controls they contain in preparation for posting back or rendering.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.ModalIFrameDialog.OnPreRender(System.EventArgs)">
            <summary>
            Raises the <see cref="E:PreRender"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Rock.Web.UI.Controls.ImageUploader">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.ImageUploader.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Web.UI.Controls.ImageUploader"/> class.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.ImageUploader.CreateChildControls">
            <summary>
            Called by the ASP.NET page framework to notify server controls that use composition-based implementation to create any child controls they contain in preparation for posting back or rendering.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.ImageUploader.RenderControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            Outputs server control content to a provided <see cref="T:System.Web.UI.HtmlTextWriter" /> object and stores tracing information about the control if tracing is enabled.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter" /> object that receives the control content.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.ImageUploader.RenderBaseControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            This is where you implment the simple aspects of rendering your control.  The rest
            will be handled by calling RenderControlHelper's RenderControl() method.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.ImageUploader.RegisterStartupScript">
            <summary>
            Registers the startup script.
            </summary>
        </member>
        <member name="P:Rock.Web.UI.Controls.ImageUploader.Label">
            <summary>
            Gets or sets the label text.
            </summary>
            <value>
            The label text.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.ImageUploader.Help">
            <summary>
            Gets or sets the help text.
            </summary>
            <value>
            The help text.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.ImageUploader.Required">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Rock.Web.UI.Controls.RockTextBox"/> is required.
            </summary>
            <value>
              <c>true</c> if required; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.ImageUploader.RequiredErrorMessage">
            <summary>
            Gets or sets the required error message.  If blank, the LabelName name will be used
            </summary>
            <value>
            The required error message.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.ImageUploader.ValidationGroup">
            <summary>
            Gets or sets an optional validation group to use.
            </summary>
            <value>
            The validation group.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.ImageUploader.IsValid">
            <summary>
            Gets a value indicating whether this instance is valid.
            </summary>
            <value>
              <c>true</c> if this instance is valid; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.ImageUploader.HelpBlock">
            <summary>
            Gets or sets the help block.
            </summary>
            <value>
            The help block.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.ImageUploader.RequiredFieldValidator">
            <summary>
            Gets or sets the required field validator.
            </summary>
            <value>
            The required field validator.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.ImageUploader.BinaryFileId">
            <summary>
            Gets or sets a value indicating whether [display required indicator].
            </summary>
            <value>
                <c>true</c> if [display required indicator]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.ImageUploader.BinaryFileTypeGuid">
            <summary>
            Gets or sets the binary file type GUID.
            </summary>
            <value>
            The binary file type GUID.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.ImageUploader.IsBinaryFile">
            <summary>
            Gets or sets a value indicating whether [is binary file].
            </summary>
            <value>
              <c>true</c> if [is binary file]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.ImageUploader.RootFolder">
            <summary>
            Gets or sets the root folder.
            </summary>
            <value>
            The root folder.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.ImageUploader.SubmitFunctionClientScript">
            <summary>
            Gets or sets the submit function client script.
            </summary>
            <value>
            The submit function client script.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.ImageUploader.DoneFunctionClientScript">
            <summary>
            Gets or sets the done function client script.
            </summary>
            <value>
            The done function client script.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.ImageUploader.NoPictureUrl">
            <summary>
            Gets or sets the picture URL to use when there is no image selected
            </summary>
            <value>
            The no picture URL.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.ImageUploader.Enabled">
            <summary>
            Gets or sets a value indicating whether the Web server control is enabled.
            </summary>
            <returns>true if control is enabled; otherwise, false. The default is true.</returns>
        </member>
        <member name="T:Rock.Web.UI.Controls.PageTitle">
            <summary>
            Renders the title of a page
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.PageTitle.RenderControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            Outputs server control content to a provided <see cref="T:System.Web.UI.HtmlTextWriter" /> object and stores tracing information about the control if tracing is enabled.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter" /> object that receives the control content.</param>
        </member>
        <member name="T:Rock.Web.UI.Controls.FieldTypeList">
            <summary>
            A composite control that renders a label, dropdownlist, and datavalidation control for a specific field of a data model
            </summary>
        </member>
        <member name="T:Rock.Web.UI.Controls.DataDropDownList">
            <summary>
            A composite control that renders a label, dropdownlist, and datavalidation control for a specific field of a data model
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.DataDropDownList.ShowErrorMessage(System.String)">
            <summary>
            Shows the error message.
            </summary>
            <param name="errorMessage">The error message.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.DataDropDownList.CreateChildControls">
            <summary>
            Called by the ASP.NET page framework to notify server controls that use composition-based implementation to create any child controls they contain in preparation for posting back or rendering.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.DataDropDownList.RenderDataValidator(System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders any data validators.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="P:Rock.Web.UI.Controls.DataDropDownList.SourceTypeName">
            <summary>
            Gets or sets the name of the assembly qualified name of the entity that is being validated
            </summary>
            <value>
            The name of the assembly qualified type name.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.DataDropDownList.PropertyName">
            <summary>
            Gets or sets the name of the entity property.
            </summary>
            <value>
            The name of the entity property.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.DataDropDownList.ValidationGroup">
            <summary>
            Gets or sets the group of controls for which the control that is derived from the <see cref="T:System.Web.UI.WebControls.ListControl" /> class causes validation when it posts back to the server.
            </summary>
            <returns>The group of controls for which the derived <see cref="T:System.Web.UI.WebControls.ListControl" /> causes validation when it posts back to the server. The default is an empty string ("").</returns>
        </member>
        <member name="P:Rock.Web.UI.Controls.DataDropDownList.IsValid">
            <summary>
            Gets a value indicating whether this instance is valid.
            </summary>
            <value>
              <c>true</c> if this instance is valid; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Rock.Web.UI.Controls.FieldTypeList.CreateChildControls">
            <summary>
            Called by the ASP.NET page framework to notify server controls that use composition-based implementation to create any child controls they contain in preparation for posting back or rendering.
            </summary>
        </member>
        <member name="T:Rock.Web.UI.Controls.GridActions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.GridActions.#ctor(Rock.Web.UI.Controls.Grid)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Web.UI.Controls.GridActions"/> class.
            </summary>
            <param name="parentGrid">The parent grid.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.GridActions.OnInit(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.Init" /> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs" /> object that contains the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.GridActions.RenderControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            Outputs server control content to a provided <see cref="T:System.Web.UI.HtmlTextWriter" /> object and stores tracing information about the control if tracing is enabled.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter" /> object that receives the control content.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.GridActions.RecreateChildControls">
            <summary>
            Recreates the child controls in a control derived from <see cref="T:System.Web.UI.WebControls.CompositeControl"/>.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.GridActions.RenderBeginTag(System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders the HTML opening tag of the control to the specified writer. This method is used primarily by control developers.
            </summary>
            <param name="writer">A <see cref="T:System.Web.UI.HtmlTextWriter"/> that represents the output stream to render HTML content on the client.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.GridActions.RenderEndTag(System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders the HTML closing tag of the control to the specified writer. This method is used primarily by control developers.
            </summary>
            <param name="writer">A <see cref="T:System.Web.UI.HtmlTextWriter"/> that represents the output stream to render HTML content on the client.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.GridActions.CreateChildControls">
            <summary>
            Called by the ASP.NET page framework to notify server controls that use composition-based implementation to create any child controls they contain in preparation for posting back or rendering.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.GridActions.lb_PreRender(System.Object,System.EventArgs)">
            <summary>
            Handles the PreRender event of the linkbutton controls.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.GridActions.lbMerge_Click(System.Object,System.EventArgs)">
            <summary>
            Handles the Click event of the lbAdd control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.GridActions.lbCommunicate_Click(System.Object,System.EventArgs)">
            <summary>
            Handles the Click event of the lbAdd control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.GridActions.lbAdd_Click(System.Object,System.EventArgs)">
            <summary>
            Handles the Click event of the lbAdd control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.GridActions.lbExcelExport_Click(System.Object,System.EventArgs)">
            <summary>
            Handles the Click event of the lbExcelExport control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:Rock.Web.UI.Controls.GridActions.ShowCommunicate">
            <summary>
            Gets or sets a value indicating whether [show communicate].
            </summary>
            <value>
              <c>true</c> if [show communicate]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.GridActions.ShowAdd">
            <summary>
            Gets or sets a value indicating whether [show add].
            </summary>
            <value>
              <c>true</c> if [show add]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.GridActions.ShowExcelExport">
            <summary>
            Gets or sets a value indicating whether [show excel export].
            </summary>
            <value>
              <c>true</c> if [show excel export]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.GridActions.ClientAddScript">
            <summary>
            Gets or sets the client add script.
            </summary>
            <value>
            The client add script.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.GridActions.ClientExcelExportScript">
            <summary>
            Gets or sets the client excel export script.
            </summary>
            <value>
            The client excel export script.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.GridActions.TagKey">
            <summary>
            Gets the <see cref="T:System.Web.UI.HtmlTextWriterTag"/> value that corresponds to this Web server control. This property is used primarily by control developers.
            </summary>
            <returns>One of the <see cref="T:System.Web.UI.HtmlTextWriterTag"/> enumeration values.</returns>
        </member>
        <member name="E:Rock.Web.UI.Controls.GridActions.MergeClick">
            <summary>
            Occurs when merge action is clicked.
            </summary>
        </member>
        <member name="E:Rock.Web.UI.Controls.GridActions.CommunicateClick">
            <summary>
            Occurs when communicate action is clicked.
            </summary>
        </member>
        <member name="E:Rock.Web.UI.Controls.GridActions.AddClick">
            <summary>
            Occurs when add action is clicked.
            </summary>
        </member>
        <member name="E:Rock.Web.UI.Controls.GridActions.ExcelExportClick">
            <summary>
            Occurs when add action is clicked.
            </summary>
        </member>
        <member name="T:Rock.Web.UI.Controls.SearchField">
            <summary>
            A <see cref="T:System.Web.UI.WebControls.TextBox"/> control with an associated label.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.SearchField.OnInit(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.Init" /> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs" /> object that contains the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.SearchField.RenderControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            Outputs server control content to a provided <see cref="T:System.Web.UI.HtmlTextWriter" /> object and stores tracing information about the control if tracing is enabled.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter" /> object that receives the control content.</param>
        </member>
        <member name="T:Rock.Web.UI.Controls.Zone">
            <summary>
            Defines a Rock Zone on a page
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.Zone.OnInit(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.Init"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> object that contains the event data.</param>
        </member>
        <member name="P:Rock.Web.UI.Controls.Zone.Name">
            <summary>
            Gets or sets the help tip.
            </summary>
            <value>
            The help tip.
            </value>
        </member>
        <member name="T:Rock.Web.UI.DialogPage">
            <summary>
            
            </summary>
        </member>
        <member name="T:Rock.Web.UI.RockPage">
            <summary>
            RockPage is the base abstract class that all page templates in Rock should inherit from
            </summary>
        </member>
        <member name="F:Rock.Web.UI.RockPage.UserName">
            <summary>
            The full name of the currently logged in user
            </summary>
        </member>
        <member name="M:Rock.Web.UI.RockPage.FindRockControls(System.Web.UI.ControlCollection)">
            <summary>
            Recurses the page's <see cref="T:System.Web.UI.ControlCollection"/> looking for any <see cref="T:Rock.Web.UI.Controls.Zone"/> controls
            </summary>
            <param name="controls">A <see cref="T:System.Web.UI.ControlCollection"/> containing the page's controls.</param>
        </member>
        <member name="M:Rock.Web.UI.RockPage.FindZone(System.String)">
            <summary>
            Find the <see cref="T:Rock.Web.UI.Controls.Zone"/> for the specified zone name.  Looks in the
            <see cref="P:Rock.Web.UI.RockPage.Zones"/> property to see if it has been defined.  If an existing zone 
            <see cref="T:Rock.Web.UI.Controls.Zone"/> cannot be found, the <see cref="T:System.Web.UI.HtmlControls.HtmlForm"/> control
            is returned
            </summary>
            <param name="zoneName">A <see cref="T:System.String"/> representing the name of the zone.</param>
            <returns>The <see cref="T:System.Web.UI.Control"/> for the zone, if the zone is not found, the form control is returned.</returns>
        </member>
        <member name="M:Rock.Web.UI.RockPage.InitializeCulture">
            <summary>
            Initializes the page's culture to use the culture specified by the browser ("auto")
            </summary>
        </member>
        <member name="M:Rock.Web.UI.RockPage.OnInit(System.EventArgs)">
            <summary>
            Loads all of the configured blocks for the current page into the control tree
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Rock.Web.UI.RockPage.OnLoad(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.Load"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> object that contains the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.RockPage.OnSaveStateComplete(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Page.SaveStateComplete" /> event after the page state has been saved to the persistence medium.
            </summary>
            <param name="e">A <see cref="T:System.EventArgs" /> object containing the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.RockPage.SetPage(Rock.Web.Cache.PageCache)">
            <summary>
            Sets the page.
            </summary>
            <param name="pageCache">The <see cref="T:Rock.Web.Cache.PageCache"/>.</param>
        </member>
        <member name="M:Rock.Web.UI.RockPage.GetAttributeValue(System.String)">
            <summary>
            Returns the current page's first value for the selected attribute
            If the attribute doesn't exist, null is returned
            </summary>
            <param name="key">A <see cref="T:System.String"/> representing the argument key.</param>
            <returns>A <see cref="T:System.String"/> representing the first attribute value, if the attribute doesn't exist, null is returned.</returns>
        </member>
        <member name="M:Rock.Web.UI.RockPage.GetAttributeValues(System.String)">
            <summary>
            Returns the current page's values for the selected attribute.
            If the attribute doesn't exist an empty list is returned.
            </summary>
            <param name="key"> A <see cref="T:System.String"/> representing the key of the selected attribute
            </param>
            <returns>A <see cref="T:System.Collections.Generic.List`1"/> containing the attribute values for specified key or an empty list if none exists</returns>
        </member>
        <member name="M:Rock.Web.UI.RockPage.AddCSSLink(System.String,System.Boolean)">
            <summary>
            Adds a new CSS link that will be added to the page header prior to the page being rendered
            </summary>
            <param name="href">A <see cref="T:System.String"/> representing the path to css file.  Should be relative to layout template.  Will be resolved at runtime.</param>
            <param name="fingerprint">if set to <c>true</c> [fingerprint].</param>
        </member>
        <member name="M:Rock.Web.UI.RockPage.AddCSSLink(System.String,System.String,System.Boolean)">
            <summary>
            Adds the CSS link to the page
            </summary>
            <param name="href">A <see cref="T:System.String"/> representing the path to css file.  Should be relative to layout template.  Will be resolved at runtime</param>
            <param name="mediaType">A <see cref="T:System.String"/> representing the type of the media to use for the css link.</param>
            <param name="fingerprint">if set to <c>true</c> [fingerprint].</param>
        </member>
        <member name="M:Rock.Web.UI.RockPage.AddMetaTag(System.Web.UI.HtmlControls.HtmlMeta)">
            <summary>
            Adds a meta tag to the page header prior to the page being rendered
            </summary>
            <param name="htmlMeta">The <see cref="T:System.Web.UI.HtmlControls.HtmlMeta"/> tag.</param>
        </member>
        <member name="M:Rock.Web.UI.RockPage.AddHtmlLink(System.Web.UI.HtmlControls.HtmlLink)">
            <summary>
            Adds a new Html link that will be added to the page header prior to the page being rendered.
            </summary>
            <param name="htmlLink">The <see cref="T:System.Web.UI.HtmlControls.HtmlLink"/>.</param>
        </member>
        <member name="M:Rock.Web.UI.RockPage.AddScriptLink(System.String,System.Boolean)">
            <summary>
            Adds a new script tag to the page header prior to the page being rendered.
            </summary>
            <param name="path">A <see cref="T:System.String"/> representing the path to the script link.</param>
            <param name="fingerprint">if set to <c>true</c> [fingerprint].</param>
        </member>
        <member name="M:Rock.Web.UI.RockPage.AddGoogleAnalytics(System.String)">
            <summary>
            Adds the google analytics script
            </summary>
            <param name="code">The GoogleAnalyticsCode.</param>
        </member>
        <member name="M:Rock.Web.UI.RockPage.HideSecondaryBlocks(Rock.Web.UI.RockBlock,System.Boolean)">
            <summary>
            Hides any secondary blocks.
            </summary>
            <param name="caller">The <see cref="T:Rock.Web.UI.RockBlock"/> that is the caller</param>
            <param name="hidden">A <see cref="T:System.Boolean"/> value that signifies if secondary blocks should be hidden.</param>
        </member>
        <member name="M:Rock.Web.UI.RockPage.LogException(System.Exception)">
            <summary>
            Logs the exception.
            </summary>
            <param name="ex">The <see cref="T:System.Exception"/> to log.</param>
        </member>
        <member name="M:Rock.Web.UI.RockPage.AddHistory(System.String,System.String,System.String)">
            <summary>
            Adds a history point to the ScriptManager.
            Note: ScriptManager's EnableHistory property must be set to True
            </summary>
            <param name="key">A <see cref="T:System.String"/> representing the key to use for the history point.</param>
            <param name="state">A <see cref="T:System.String"/> representing any state information to store for the history point.</param>
            <param name="title">A <see cref="T:System.String"/> representing the title to be used by the browser, will use an empty string by default.</param>
        </member>
        <member name="M:Rock.Web.UI.RockPage.ResolveRockUrl(System.String)">
            <summary>
            Returns a resolved Rock URL.  Similar to 
            <see cref="T:System.Web.UI.Control">System.Web.UI.Control's</see>
            <c>ResolveUrl</c> method except that you can prefix
            a url with '~~' to indicate a virtual path to Rock's current theme root folder.
            </summary>
            <param name="url">A <see cref="T:System.String"/> representing the URL to resolve.</param>
            <returns>
            A <see cref="T:System.String"/> with the resolved URL.
            </returns>
        </member>
        <member name="M:Rock.Web.UI.RockPage.ResolveRockUrlIncludeRoot(System.String)">
            <summary>
            Resolves the rock URL and includes root.
            </summary>
            <param name="url">The URL.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.UI.RockPage.ResolveRockUrl(System.String,System.Boolean)">
            <summary>
            Resolves the rock URL.
            </summary>
            <param name="url">The URL.</param>
            <param name="fingerprint">if set to <c>true</c> [fingerprint].</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.UI.RockPage.GetCurrentContext(Rock.Web.Cache.EntityTypeCache)">
            <summary>
            Gets the current context object for a given entity type.
            </summary>
            <param name="entity">The <see cref="T:Rock.Web.Cache.EntityTypeCache"/> containing a reference to the entity.</param>
            <returns>An object that implements the <see cref="T:Rock.Data.IEntity"/> interface referencing the context object. </returns>
        </member>
        <member name="M:Rock.Web.UI.RockPage.AddConfigurationUpdateTrigger(System.Web.UI.UpdatePanel)">
            <summary>
            Adds an update trigger for when the block instance properties are updated.
            </summary>
            <param name="updatePanel">The <see cref="T:System.Web.UI.UpdatePanel"/> to add the <see cref="T:System.Web.UI.AsyncPostBackTrigger"/> to.</param>
        </member>
        <member name="M:Rock.Web.UI.RockPage.AddPopupControls">
            <summary>
            Adds the popup controls.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.RockPage.AddTriggerPanel">
            <summary>
            Adds the config elements.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.RockPage.AddZoneConfigElements">
            <summary>
            Adds the config elements.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.RockPage.AddBlockConfig(Rock.Web.UI.Controls.HtmlGenericContainer,Rock.Web.UI.RockBlock,Rock.Web.Cache.BlockCache,System.Boolean,System.Boolean)">
            <summary>
            Adds the block config.
            </summary>
            <param name="blockWrapper">A <see cref="T:Rock.Web.UI.Controls.HtmlGenericContainer"/> representing the block wrapper.</param>
            <param name="blockControl">The <see cref="T:Rock.Web.UI.RockBlock">block</see> control.</param>
            <param name="block">The block.</param>
            <param name="canAdministrate">
                A <see cref="T:System.Boolean"/> value that is <c>true</c> if the block can be administered/configured; otherwise <c>false</c>.
            </param>
            <param name="canEdit">A <see cref="T:System.Boolean"/> that is <c>true</c> if the block can be edited; otherwise <c>false</c>.</param>
        </member>
        <member name="M:Rock.Web.UI.RockPage.AddBlockMove">
            <summary>
            Adds a control to move the block to another zone on the page.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.RockPage.SaveSharedItem(System.String,System.Object)">
            <summary>
            Used to save an item to the current HTTPRequests items collection.  This is useful if multiple blocks
            on the same page will need access to the same object.  The first block can read the object and save
            it using this method for the other blocks to reference
            </summary>
            <param name="key">A <see cref="T:System.String"/> representing the item's key</param>
            <param name="item">The <see cref="T:System.Object"/> to save.</param>
        </member>
        <member name="M:Rock.Web.UI.RockPage.GetSharedItem(System.String)">
            <summary>
            Retrieves an item from the current HTTPRequest items collection.  This is useful to retrieve an object
            that was saved by a previous block on the same page.
            </summary>
            <param name="key">A <see cref="T:System.String"/> representing the object's key value.</param>
            <returns>The shared <see cref="T:System.Object"/>, if a match for the key is not found, a null value will be returned.</returns>
        </member>
        <member name="M:Rock.Web.UI.RockPage.PageParameter(System.String)">
            <summary>
            Checks the page's RouteData values and then the query string for a
            parameter matching the specified name, and if found returns the string
            value
            </summary>
            <param name="name">A <see cref="T:System.String"/> representing the name of the page parameter.</param>
            <returns>A <see cref="T:System.String"/> containing the parameter value; otherwise an empty string.</returns>
        </member>
        <member name="M:Rock.Web.UI.RockPage.PageParameter(Rock.Web.PageReference,System.String)">
            <summary>
            Checks the page reference's parms and querystring for a
            parameter matching the specified name, and if found returns the string
            </summary>
            <param name="pageReference">The <see cref="T:Rock.Web.PageReference"/>.</param>
            <param name="name">A <see cref="T:System.String"/> containing the name of the parameter.</param>
            <returns>A <see cref="T:System.String"/> containing the value.</returns>
        </member>
        <member name="M:Rock.Web.UI.RockPage.PageParameters">
            <summary>
            Gets the page route and query string parameters
            </summary>
            <returns>A <see cref="T:System.Collections.Generic.Dictionary`2"/> containing the page route and query string value, the Key is the is the paramter name/key and the object is the value.</returns>
        </member>
        <member name="M:Rock.Web.UI.RockPage.AddCSSLink(System.Web.UI.Page,System.String,System.Boolean)">
            <summary>
            Adds a new CSS link that will be added to the page header prior to the page being rendered
            </summary>
            <param name="page">The <see cref="T:System.Web.UI.Page"/>.</param>
            <param name="href">A <see cref="T:System.String"/> representing the path to css file.  Should be relative to layout template.  Will be resolved at runtime</param>
            <param name="fingerprint">if set to <c>true</c> [fingerprint].</param>
        </member>
        <member name="M:Rock.Web.UI.RockPage.AddCSSLink(System.Web.UI.Page,System.String,System.String,System.Boolean)">
            <summary>
            Adds the CSS link to the page
            </summary>
            <param name="page">The <see cref="T:System.Web.UI.Page"/>.</param>
            <param name="href">A <see cref="T:System.String"/> representing the path to css file.  Should be relative to layout template.  Will be resolved at runtime</param>
            <param name="mediaType">A <see cref="T:System.String"/> representing the type of the media to use for the css link.</param>
            <param name="fingerprint">if set to <c>true</c> [fingerprint].</param>
        </member>
        <member name="M:Rock.Web.UI.RockPage.AddMetaTag(System.Web.UI.Page,System.Web.UI.HtmlControls.HtmlMeta)">
            <summary>
            Adds a meta tag to the page
            </summary>
            <param name="page">The <see cref="T:System.Web.UI.Page"/>.</param>
            <param name="htmlMeta">A <see cref="T:System.String"/>representing the HTML meta tag.</param>
        </member>
        <member name="M:Rock.Web.UI.RockPage.HtmlMetaExists(System.Web.UI.Page,System.Web.UI.HtmlControls.HtmlMeta)">
            <summary>
            Returns a flag indicating if a meta tag exists on the page.
            </summary>
            <param name="page">The <see cref="T:System.Web.UI.Page"/>.</param>
            <param name="newMeta">The <see cref="T:System.Web.UI.HtmlControls.HtmlMeta"/> tag to check for..</param>
            <returns>A <see cref="T:System.Boolean"/> that is <c>true</c> if the meta tag already exists; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Rock.Web.UI.RockPage.AddHtmlLink(System.Web.UI.Page,System.Web.UI.HtmlControls.HtmlLink,System.String)">
            <summary>
            Adds a new Html link that will be added to the page header prior to the page being rendered
            </summary>
            <param name="page">The <see cref="T:System.Web.UI.Page"/>.</param>
            <param name="htmlLink">The <see cref="T:System.Web.UI.HtmlControls.HtmlLink"/> to add to the page.</param>
            <param name="contentPlaceHolderId">A <see cref="T:System.String"/> representing the Id of the content placeholder to add the link to.</param>
        </member>
        <member name="M:Rock.Web.UI.RockPage.HtmlLinkExists(System.Web.UI.Control,System.Web.UI.HtmlControls.HtmlLink)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> flag indicating if a specified parent control contains the specified HtmlLink.
            </summary>
            <param name="parentControl">The <see cref="T:System.Web.UI.Control"/> to search for the HtmlLink.</param>
            <param name="newLink">The <see cref="T:System.Web.UI.HtmlControls.HtmlLink"/> to search for.</param>
            <returns>A <see cref="T:System.Boolean"/> value that is <c>true</c> if if the HtmlLink exists in the parent control; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Rock.Web.UI.RockPage.AddScriptLink(System.Web.UI.Page,System.String,System.Boolean)">
            <summary>
            Adds a new script tag to the page header prior to the page being rendered
            </summary>
            <param name="page">The <see cref="T:System.Web.UI.Page"/>.</param>
            <param name="path">A <see cref="T:System.String"/> representing the path to script file.  Should be relative to layout template.  Will be resolved at runtime.</param>
            <param name="fingerprint">if set to <c>true</c> [fingerprint].</param>
        </member>
        <member name="M:Rock.Web.UI.RockPage.AddScriptToHead(System.Web.UI.Page,System.String,System.Boolean)">
            <summary>
            Adds the script to head.
            </summary>
            <param name="page">The page.</param>
            <param name="script">The script.</param>
            <param name="AddScriptTags">if set to <c>true</c> [add script tags].</param>
        </member>
        <member name="M:Rock.Web.UI.RockPage.GetUserPreference(System.String)">
            <summary>
            Returns a user preference for the current user and given key.
            </summary>
            <param name="key">A <see cref="T:System.String"/> representing the key to the user preference.</param>
            <returns>A <see cref="T:System.String"/> representing the specified user preference value, if a match is not found an empty string will be returned.</returns>
        </member>
        <member name="M:Rock.Web.UI.RockPage.GetUserPreferences(System.String)">
            <summary>
            Returns the preference values for the current user that start with a given key.
            </summary>
            <param name="keyPrefix">A <see cref="T:System.String"/> representing the key prefix. Preference values, for the current user, with a key that begins with this value will be included.</param>
            <returns>A <see cref="T:System.Collections.Generic.Dictionary`2"/> containing  the current user's preference values containing a key that begins with the specified value. 
            Each <see cref="T:System.Collections.Generic.KeyValuePair`2"/> contains a key that represents the user preference key and a value that contains the user preference value associated 
            with that key.
            </returns>
        </member>
        <member name="M:Rock.Web.UI.RockPage.SetUserPreference(System.String,System.String)">
            <summary>
            Sets a user preference value for the specified key. If the key already exists, the value will be updated,
            if it is a new key it will be added.
            </summary>
            <param name="key">A <see cref="T:System.String"/> representing the name of the key.</param>
            <param name="value">A <see cref="T:System.String"/> representing the preference value.</param>
        </member>
        <member name="M:Rock.Web.UI.RockPage.SessionUserPreferences">
            <summary>
            Returns the current user's preferences, if they have previously been loaded into the session, they
            will be retrieved from there, otherwise they will be retrieved from the database, added to session and 
            then returned
            </summary>
            <returns>A <see cref="T:System.Collections.Generic.Dictionary`2"/> containing the user preferences 
            for the current user. If the current user is anonymous or unknown an empty dictionary will be returned.</returns>
        </member>
        <member name="M:Rock.Web.UI.RockPage.trigger_Click(System.Object,System.EventArgs)">
            <summary>
            Handles the Click event of the trigger control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.RockPage.OnBlockUpdated(System.Int32)">
            <summary>
            Called when a block's properties are updated.
            </summary>
            <param name="blockId">The block identifier.</param>
        </member>
        <member name="M:Rock.Web.UI.RockPage.scriptManager_Navigate(System.Object,System.Web.UI.HistoryEventArgs)">
            <summary>
            Handles the Navigate event of the scriptManager control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Web.UI.HistoryEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:Rock.Web.UI.RockPage.ModelContext">
            <summary>
            Gets a dictionary of the current context items (models).
            </summary>
        </member>
        <member name="P:Rock.Web.UI.RockPage.PageId">
            <summary>
            Gets the current <see cref="T:Rock.Model.Page">Page's</see> logical Rock Page Id.
            </summary>
            <value>
            A <see cref="T:System.Int32"/> representing the PageId of the current logical <see cref="T:Rock.Model.Page"/>.
            </value>
        </member>
        <member name="P:Rock.Web.UI.RockPage.BrowserTitle">
            <summary>
            Gets or sets the browser title.
            </summary>
            <value>
            The browser title.
            </value>
        </member>
        <member name="P:Rock.Web.UI.RockPage.PageTitle">
            <summary>
            Gets or sets the template title.
            </summary>
            <value>
            The template title.
            </value>
        </member>
        <member name="P:Rock.Web.UI.RockPage.Title">
            <summary>
            Gets the title for the page and sets both the browser and template title
            </summary>
            <returns>The title of the page.</returns>
        </member>
        <member name="P:Rock.Web.UI.RockPage.Guid">
            <summary>
            Gets the current <see cref="T:Rock.Model.Page">Page's</see> logical Rock Page Guid.
            </summary>
            <value>
            A <see cref="T:System.Guid"/> representing the Guid identifier for the current logical <see cref="T:Rock.Model.Page"/>
            </value>
        </member>
        <member name="P:Rock.Web.UI.RockPage.Layout">
            <summary>
            Gets the current <see cref="T:Rock.Model.Page">Page's</see> layout.
            </summary>
            <value>
            The <see cref="T:Rock.Web.Cache.LayoutCache"/> representing the current <see cref="T:Rock.Model.Page">Page's</see> layout.
            </value>
        </member>
        <member name="P:Rock.Web.UI.RockPage.Site">
            <summary>
            Gets the <see cref="T:Rock.Model.Site"/> that the current <see cref="T:Rock.Model.Page"/> is on.
            </summary>
            <value>
            A <see cref="T:Rock.Web.Cache.SiteCache"/> representing the <see cref="T:Rock.Model.Site"/> that the current <see cref="T:Rock.Model.Page"/>
            is on.
            </value>
        </member>
        <member name="P:Rock.Web.UI.RockPage.PageReference">
            <summary>
            Gets or sets the current <see cref="T:Rock.Web.PageReference"/>
            </summary>
            <value>
            The current <see cref="T:Rock.Web.PageReference"/>.
            </value>
        </member>
        <member name="P:Rock.Web.UI.RockPage.Zones">
            <summary>
            Public gets and privately sets the content areas on a layout page that blocks can be added to.
            </summary>
            <value>
            A <see cref="T:System.Collections.Generic.Dictionary`2"/> representing the content
            areas on the page that content can be added to. Each <see cref="T:System.Collections.Generic.KeyValuePair`2"/>
            has a Key representing the <see cref="T:Rock.Web.UI.Controls.Zone">Zone's</see> ZoneKey and a value containing
            a <see cref="T:System.Collections.Generic.Dictionary`2"/> with the key referencing the <see cref="T:Rock.Web.UI.Controls.Zone">Zone's</see>
            friendly name and the <see cref="T:Rock.Web.UI.Controls.Zone"/>.
            </value>
            <remarks>
            The Dictionary's key is the zonekey and the KeyValuePair is a combination
            of the friendly zone name and the zone control
            </remarks>
        </member>
        <member name="P:Rock.Web.UI.RockPage.BreadCrumbs">
            <summary>
            Publicly Gets and privately sets a list containing the Page's <see cref="T:Rock.Web.UI.BreadCrumb">BreadCrumbs</see>
            </summary>
            <value>
            A <see cref="T:System.Collections.Generic.List`1"/> containing the <see cref="T:Rock.Web.UI.BreadCrumb">BreadCrumbs</see>
            for this Page.
            </value>
        </member>
        <member name="P:Rock.Web.UI.RockPage.CurrentUser">
            <summary>
            Publicly gets and privately sets the currently logged in user.
            </summary>
            <value>
            The <see cref="T:Rock.Model.UserLogin"/> of the currently logged in user.
            </value>
        </member>
        <member name="P:Rock.Web.UI.RockPage.CurrentPerson">
            <summary>
            Publicly gets the current <see cref="T:Rock.Model.Person"/>.  This is either the currently logged in user, or if the user
            has not logged in, it may also be an impersonated person determined from using the encrypted
            person key.
            </summary>
            <value>
            A <see cref="T:Rock.Model.Person"/> representing the currently logged in person or impersonated person.
            </value>
        </member>
        <member name="P:Rock.Web.UI.RockPage.CurrentPersonAlias">
            <summary>
            Gets the current person alias.
            </summary>
            <value>
            The current person alias.
            </value>
        </member>
        <member name="P:Rock.Web.UI.RockPage.CurrentPersonId">
            <summary>
            The Person ID of the currently logged in user.  Returns null if there is not a user logged in
            </summary>
            <value>
            A <see cref="T:System.Int32"/> representing the PersonId of the <see cref="T:Rock.Model.Person"/> 
            who is logged in as the current user. If a user is not logged in.
            </value>
        </member>
        <member name="P:Rock.Web.UI.RockPage.RockBlocks">
            <summary>
            Gets the all the <see cref="T:Rock.Web.UI.RockBlock">RockBlocks</see> on the Page.
            </summary>
            <value>
            A <see cref="T:System.Collections.Generic.List`1"/> containing all the <see cref="T:Rock.Web.UI.RockBlock">RockBlocks</see> on the page.
            </value>
        </member>
        <member name="E:Rock.Web.UI.RockPage.BlockUpdated">
            <summary>
            Occurs when a block's properties are updated.
            </summary>
        </member>
        <member name="E:Rock.Web.UI.RockPage.PageNavigate">
            <summary>
            Occurs when the ScriptManager detects a history change. This allows UpdatePanels to work when the
            browser's back button is pressed.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.DialogPage.FireSave(System.Object,System.EventArgs)">
            <summary>
            Fires the save.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:Rock.Web.UI.DialogPage.SubTitle">
            <summary>
            An optional subtitle
            </summary>        
        </member>
        <member name="E:Rock.Web.UI.DialogPage.OnSave">
            <summary>
            Occurs when [on save].
            </summary>
        </member>
        <member name="T:Rock.Web.UI.PageNavigateEventHandler">
            <summary>
            Delegate used for the ScriptManager's Navigate Event
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Web.UI.HistoryEventArgs"/> instance containing the history data.</param>
        </member>
        <member name="T:Rock.Web.UI.BlockUpdatedEventArgs">
            <summary>
            Event Argument used when block properties are updated
            </summary>
        </member>
        <member name="T:Rock.Web.UI.JsonResult">
            <summary>
            JSON Object used for client/server communication
            </summary>
        </member>
        <member name="M:Rock.Web.UI.JsonResult.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Web.UI.JsonResult"/> class.
            </summary>
            <param name="action">A <see cref="T:System.String"/>representing the action.</param>
            <param name="result">A <see cref="T:System.Object"/> representing the result.</param>
        </member>
        <member name="M:Rock.Web.UI.JsonResult.Serialize">
            <summary>
            Serializes this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> representing a serialized version of this instance.</returns>
        </member>
        <member name="P:Rock.Web.UI.JsonResult.Action">
            <summary>
            Gets or sets the action.
            </summary>
            <value>
            A <see cref="T:System.String"/> representing the Action.
            </value>
        </member>
        <member name="P:Rock.Web.UI.JsonResult.Result">
            <summary>
            Gets or sets the result.
            </summary>
            <value>
            The return <see cref="T:System.Object"/>
            </value>
        </member>
        <member name="T:Rock.Attribute.TextFieldAttribute">
            <summary>
            A class Attribute that can be used by any oject that inherits from <see cref="T:Rock.Attribute.IHasAttributes"/> to specify what attributes it needs.  The 
            Framework provides methods in the <see cref="T:Rock.Attribute.Helper"/> class to create, read, and update the attributes
            </summary>
            <remarks>
            If using a custom <see cref="T:Rock.Field.IFieldType"/> make sure that the fieldtype has been added to Rock.
            </remarks>
        </member>
        <member name="M:Rock.Attribute.TextFieldAttribute.#ctor(System.String,System.String,System.Boolean,System.String,System.String,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Attribute.TextFieldAttribute"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="description">The description.</param>
            <param name="required">if set to <c>true</c> [required].</param>
            <param name="defaultValue">The default value.</param>
            <param name="category">The category.</param>
            <param name="order">The order.</param>
            <param name="key">The key.</param>
        </member>
        <member name="T:Rock.Web.RockRouteHandler">
            <summary>
            Rock custom route handler
            </summary>
        </member>
        <member name="M:Rock.Web.RockRouteHandler.System#Web#Routing#IRouteHandler#GetHttpHandler(System.Web.Routing.RequestContext)">
            <summary>
            Determine the logical page being requested by evaluating the routedata, or querystring and
            then loading the appropriate layout (ASPX) page
            </summary>
            <param name="requestContext"></param>
            <returns></returns>
        </member>
        <member name="T:Rock.Web.HttpHandlerError">
            <summary>
            Handler used when an error occurrs
            </summary>
        </member>
        <member name="M:Rock.Web.HttpHandlerError.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Web.HttpHandlerError"/> class.
            </summary>
            <param name="statusCode">The status code.</param>
        </member>
        <member name="M:Rock.Web.HttpHandlerError.ProcessRequest(System.Web.HttpContext)">
            <summary>
            Enables processing of HTTP Web requests by a custom HttpHandler that implements the <see cref="T:System.Web.IHttpHandler"/> interface.
            </summary>
            <param name="context">An <see cref="T:System.Web.HttpContext"/> object that provides references to the intrinsic server objects (for example, Request, Response, Session, and Server) used to service HTTP requests.</param>
        </member>
        <member name="P:Rock.Web.HttpHandlerError.StatusCode">
            <summary>
            Gets the status code.
            </summary>
        </member>
        <member name="P:Rock.Web.HttpHandlerError.IsReusable">
            <summary>
            Gets a value indicating whether another request can use the <see cref="T:System.Web.IHttpHandler"/> instance.
            </summary>
            <returns>true if the <see cref="T:System.Web.IHttpHandler"/> instance is reusable; otherwise, false.</returns>
        </member>
        <member name="T:Rock.Security.Authorization">
            <summary>
            Static class for managing authorizations
            </summary>
        </member>
        <member name="F:Rock.Security.Authorization.VIEW">
            <summary>
            Authorization to view object
            </summary>
        </member>
        <member name="F:Rock.Security.Authorization.EDIT">
            <summary>
            Authorization to edit object ( add, set properties, delete, etc )
            </summary>
        </member>
        <member name="F:Rock.Security.Authorization.ADMINISTRATE">
            <summary>
            Authorization to administer object ( add child object, set security, etc)
            </summary>
        </member>
        <member name="F:Rock.Security.Authorization.APPROVE">
            <summary>
            Authorization to approve object (html, prayer, ads, etc)
            </summary>
        </member>
        <member name="M:Rock.Security.Authorization.SetAuthCookie(System.String,System.Boolean,System.Boolean)">
            <summary>
            Sets the auth cookie.
            </summary>
            <param name="userName">Name of the user.</param>
            <param name="isPersisted">if set to <c>true</c> [is persisted].</param>
            <param name="IsImpersonated">if set to <c>true</c> [is impersonated].</param>
        </member>
        <member name="M:Rock.Security.Authorization.Load(Rock.Data.RockContext)">
            <summary>
            Load the static Authorizations object
            </summary>
        </member>
        <member name="M:Rock.Security.Authorization.ReloadAction(System.Int32,System.Int32,System.String)">
            <summary>
            Reloads the authorizations for the specified entity and action.
            </summary>
            <param name="entityTypeId">The entity type id.</param>
            <param name="entityId">The entity id.</param>
            <param name="action">The action.</param>
        </member>
        <member name="M:Rock.Security.Authorization.Flush">
            <summary>
            Clear the static Authorizations object
            </summary>
        </member>
        <member name="M:Rock.Security.Authorization.Authorized(Rock.Security.ISecured,System.String,Rock.Model.SpecialRole)">
            <summary>
            Evaluates whether a selected user is allowed to perform the selected action on the selected
            entity.
            </summary>
            <param name="entity">The entity.</param>
            <param name="action">The action.</param>
            <param name="specialRole">The special role.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Security.Authorization.Authorized(Rock.Security.ISecured,System.String,Rock.Model.Person)">
            <summary>
            Evaluates whether a selected person is allowed to perform the selected action on the selected
            entity.
            </summary>
            <param name="entity">The entity.</param>
            <param name="action">The action.</param>
            <param name="person">The person.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Security.Authorization.IsPrivate(Rock.Security.ISecured,System.String,Rock.Model.Person)">
            <summary>
            Determines whether the specified entity is private. Entity is considered private if only the current user 
            has access.  In this scenario, the first rule would give current user access, and second rule would deny 
            all users.
            </summary>
            <param name="entity">The entity.</param>
            <param name="action">The action.</param>
            <param name="person">The person.</param>
            <returns>
              <c>true</c> if the specified entity is private; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Rock.Security.Authorization.MakePrivate(Rock.Security.ISecured,System.String,Rock.Model.Person)">
            <summary>
            Makes the entity private by setting up two authorization rules, one granting the selected person, and
            then another that denies all other users.
            </summary>
            <param name="entity">The entity.</param>
            <param name="action">The action.</param>
            <param name="person">The person.</param>
        </member>
        <member name="M:Rock.Security.Authorization.MakeUnPrivate(Rock.Security.ISecured,System.String,Rock.Model.Person)">
            <summary>
            Removes that two authorization rules that made the entity private.
            </summary>
            <param name="entity">The entity.</param>
            <param name="action">The action.</param>
            <param name="person">The person.</param>
        </member>
        <member name="M:Rock.Security.Authorization.AllowPerson(Rock.Security.ISecured,System.String,Rock.Model.Person)">
            <summary>
            Updates authorization rules for the entity so that the current person is allowed to perform the specified action.
            </summary>
            <param name="entity">The entity.</param>
            <param name="action">The action.</param>
            <param name="person">The person.</param>
        </member>
        <member name="M:Rock.Security.Authorization.AuthRules(System.Int32,System.Int32,System.String)">
            <summary>
            Returns the authorization rules for the specified entity and action.
            </summary>
            <param name="entityTypeId">The entity type id.</param>
            <param name="entityId">The entity id.</param>
            <param name="action">The action.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Security.Authorization.EncodeEntityTypeName(System.Type)">
            <summary>
            Encodes the entity type name for use in a URL
            </summary>
            <param name="iSecuredType">Type of the item to secure.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Security.Authorization.EncodeEntityTypeName(System.String)">
            <summary>
            Encodes the entity type name for use in a URL
            </summary>
            <param name="assemblyQualifiedName">Assembly name of the item to secure.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Security.Authorization.DecodeEntityTypeName(System.String)">
            <summary>
            Decodes the entity type name.
            </summary>
            <param name="encodedTypeName">Name of the encoded type.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Security.Authorization.CopyAuthorization(Rock.Security.ISecured,Rock.Security.ISecured,Rock.Data.RockContext)">
            <summary>
            Copies the authorizations from one <see cref="T:Rock.Security.ISecured"/> object to another
            </summary>
            <param name="sourceEntity">The source entity.</param>
            <param name="targetEntity">The target entity.</param>
            <param name="rockContext">The rock context.</param>
            <remarks>
            If a rockContext value is included, this method will save any previous changes made to the context
            </remarks>
        </member>
        <member name="M:Rock.Security.Authorization.FindAuthRules(Rock.Security.ISecured)">
            <summary>
            Finds the auth rules.
            </summary>
            <param name="securableObject">The securable object.</param>
            <returns></returns>
        </member>
        <member name="P:Rock.Security.Authorization.Authorizations">
            <summary>
            Authorizations is a static variable for storing all authorizations.  It uses multiple Dictionary objects similiar 
            to a multi-dimensional array to store information.  The first dimension is the entity type id, second is the entity
            ID, third is the action, and the fourth dimension is a list of AuthRules for the action.
            </summary>
        </member>
        <member name="T:Rock.Security.AuthRule">
            <summary>
            Lightweight class to store if a particular user or role is allowed or denied access
            </summary>
        </member>
        <member name="M:Rock.Security.AuthRule.#ctor(System.Int32,System.Nullable{System.Int32},System.String,Rock.Model.SpecialRole,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Security.AuthRule"/> class.
            </summary>
            <param name="id">The id.</param>
            <param name="entityId">The entity id.</param>
            <param name="allowOrDeny">Allow or Deny ("A" or "D").</param>
            <param name="specialRole">The special role.</param>
            <param name="personId">The person id.</param>
            <param name="groupId">The group id.</param>
            <param name="order">The order.</param>
        </member>
        <member name="M:Rock.Security.AuthRule.#ctor(Rock.Model.Auth)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Security.AuthRule"/> class.
            </summary>
            <param name="auth">The auth.</param>
        </member>
        <member name="P:Rock.Security.AuthRule.Id">
            <summary>
            Gets or sets the id.
            </summary>
            <value>
            The id.
            </value>
        </member>
        <member name="P:Rock.Security.AuthRule.EntityId">
            <summary>
            Gets or sets the entity id.
            </summary>
            <value>
            The entity id.
            </value>
        </member>
        <member name="P:Rock.Security.AuthRule.AllowOrDeny">
            <summary>
            Gets or sets a value indicating if this is an allow or deny rule.  Acceptable values are "A" or "D".
            </summary>
            <value>
            The allow or deny.
            </value>
        </member>
        <member name="P:Rock.Security.AuthRule.SpecialRole">
            <summary>
            Gets or sets the special role.
            </summary>
            <value>
            The special role.
            </value>
        </member>
        <member name="P:Rock.Security.AuthRule.PersonId">
            <summary>
            Gets or sets the person id.
            </summary>
            <value>
            The person id.
            </value>
        </member>
        <member name="P:Rock.Security.AuthRule.GroupId">
            <summary>
            Gets or sets the group id.
            </summary>
            <value>
            The group id.
            </value>
        </member>
        <member name="P:Rock.Security.AuthRule.Order">
            <summary>
            Gets or sets the order.
            </summary>
            <value>
            The order.
            </value>
        </member>
        <member name="P:Rock.Security.AuthRule.DisplayName">
            <summary>
            Gets the display name.
            </summary>
        </member>
        <member name="T:Rock.Web.UI.Controls.SecurityField">
            <summary>
            <see cref="T:Rock.Web.UI.Controls.Grid"/> Column for editing the security of an item in a row in a grid
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.SecurityField.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Web.UI.Controls.SecurityField"/> class.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.SecurityField.Initialize(System.Boolean,System.Web.UI.Control)">
            <summary>
            Performs basic instance initialization for a data control field.
            </summary>
            <param name="sortingEnabled">A value that indicates whether the control supports the sorting of columns of data.</param>
            <param name="control">The data control that owns the <see cref="T:System.Web.UI.WebControls.DataControlField"/>.</param>
            <returns>
            Always returns false.
            </returns>
        </member>
        <member name="P:Rock.Web.UI.Controls.SecurityField.EntityTypeId">
            <summary>
            Gets or sets the entity type id.
            </summary>
            <value>
            The entity type id.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.SecurityField.TitleField">
            <summary>
            Gets or sets the field that contains the title.
            </summary>
            <value>
            The title.
            </value>
        </member>
        <member name="T:Rock.Web.UI.Controls.SecurityFieldTemplate">
            <summary>
            Template used by the <see cref="T:Rock.Web.UI.Controls.SecurityField"/> control
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.SecurityFieldTemplate.#ctor(System.Web.UI.Page,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Web.UI.Controls.SecurityFieldTemplate"/> class.
            </summary>
            <param name="page">The page.</param>
            <param name="entityTypeId">The entity type id.</param>
            <param name="titleField">The title field.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.SecurityFieldTemplate.InstantiateIn(System.Web.UI.Control)">
            <summary>
            When implemented by a class, defines the <see cref="T:System.Web.UI.Control"/> object that child controls and templates belong to. These child controls are in turn defined within an inline template.
            </summary>
            <param name="container">The <see cref="T:System.Web.UI.Control"/> object to contain the instances of controls from the inline template.</param>
        </member>
        <member name="P:Rock.Web.UI.Controls.SecurityFieldTemplate.TitleField">
            <summary>
            Gets or sets the title field
            </summary>
            <value>
            The title field
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.SecurityFieldTemplate.EntityTypeId">
            <summary>
            Gets or sets the entity type id.
            </summary>
            <value>
            The entity type id.
            </value>
        </member>
        <member name="T:Rock.Web.UI.Controls.ReorderField">
            <summary>
            <see cref="T:Rock.Web.UI.Controls.Grid"/> Column for reordering rows in a grid
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.ReorderField.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Web.UI.Controls.ReorderField"/> class.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.ReorderField.Initialize(System.Boolean,System.Web.UI.Control)">
            <summary>
            Performs basic instance initialization for a data control field.
            </summary>
            <param name="sortingEnabled">A value that indicates whether the control supports the sorting of columns of data.</param>
            <param name="control">The data control that owns the <see cref="T:System.Web.UI.WebControls.DataControlField"/>.</param>
            <returns>
            Always returns false.
            </returns>
        </member>
        <member name="T:Rock.Web.UI.Controls.ReorderFieldTemplate">
            <summary>
            Template used by the <see cref="T:Rock.Web.UI.Controls.ReorderField"/> control
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.ReorderFieldTemplate.InstantiateIn(System.Web.UI.Control)">
            <summary>
            When implemented by a class, defines the <see cref="T:System.Web.UI.Control"/> object that child controls and templates belong to. These child controls are in turn defined within an inline template.
            </summary>
            <param name="container">The <see cref="T:System.Web.UI.Control"/> object to contain the instances of controls from the inline template.</param>
        </member>
        <member name="T:Rock.Web.UI.Controls.EditField">
            <summary>
            <see cref="T:Rock.Web.UI.Controls.Grid"/> Column for editing a row in a grid
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.EditField.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Web.UI.Controls.EditField"/> class.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.EditField.Initialize(System.Boolean,System.Web.UI.Control)">
            <summary>
            Performs basic instance initialization for a data control field.
            </summary>
            <param name="sortingEnabled">A value that indicates whether the control supports the sorting of columns of data.</param>
            <param name="control">The data control that owns the <see cref="T:System.Web.UI.WebControls.DataControlField"/>.</param>
            <returns>
            Always returns false.
            </returns>
        </member>
        <member name="M:Rock.Web.UI.Controls.EditField.editFieldTemplate_LinkButtonClick(System.Object,Rock.Web.UI.Controls.RowEventArgs)">
            <summary>
            Handles the LinkButtonClick event of the editFieldTemplate control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:Rock.Web.UI.Controls.RowEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.EditField.OnClick(Rock.Web.UI.Controls.RowEventArgs)">
            <summary>
            Raises the <see cref="E:Click"/> event.
            </summary>
            <param name="e">The <see cref="T:Rock.Web.UI.Controls.RowEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:Rock.Web.UI.Controls.EditField.ParentGrid">
            <summary>
            Gets the parent grid.
            </summary>
            <value>
            The parent grid.
            </value>
        </member>
        <member name="E:Rock.Web.UI.Controls.EditField.Click">
            <summary>
            Occurs when [click].
            </summary>
        </member>
        <member name="T:Rock.Web.UI.Controls.EditFieldTemplate">
            <summary>
            Template used by the <see cref="T:Rock.Web.UI.Controls.EditField"/> control
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.EditFieldTemplate.InstantiateIn(System.Web.UI.Control)">
            <summary>
            When implemented by a class, defines the <see cref="T:System.Web.UI.Control"/> object that child controls and templates belong to. These child controls are in turn defined within an inline template.
            </summary>
            <param name="container">The <see cref="T:System.Web.UI.Control"/> object to contain the instances of controls from the inline template.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.EditFieldTemplate.lbEdit_Click(System.Object,System.EventArgs)">
            <summary>
            Handles the Click event of the lbEdit control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:Rock.Web.UI.Controls.EditFieldTemplate.ParentGrid">
            <summary>
            Gets or sets the parent grid.
            </summary>
            <value>
            The parent grid.
            </value>
        </member>
        <member name="E:Rock.Web.UI.Controls.EditFieldTemplate.LinkButtonClick">
            <summary>
            Occurs when [link button click].
            </summary>
        </member>
        <member name="T:Rock.Web.UI.Controls.DeleteField">
            <summary>
            <see cref="T:Rock.Web.UI.Controls.Grid"/> Column for deleting a row in a grid
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.DeleteField.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Web.UI.Controls.DeleteField"/> class.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.DeleteField.Initialize(System.Boolean,System.Web.UI.Control)">
            <summary>
            Performs basic instance initialization for a data control field.
            </summary>
            <param name="sortingEnabled">A value that indicates whether the control supports the sorting of columns of data.</param>
            <param name="control">The data control that owns the <see cref="T:System.Web.UI.WebControls.DataControlField"/>.</param>
            <returns>
            Always returns false.
            </returns>
        </member>
        <member name="M:Rock.Web.UI.Controls.DeleteField.deleteFieldTemplate_LinkButtonClick(System.Object,Rock.Web.UI.Controls.RowEventArgs)">
            <summary>
            Handles the LinkButtonClick event of the deleteFieldTemplate control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:Rock.Web.UI.Controls.RowEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.DeleteField.OnClick(Rock.Web.UI.Controls.RowEventArgs)">
            <summary>
            Raises the <see cref="E:Click"/> event.
            </summary>
            <param name="e">The <see cref="T:Rock.Web.UI.Controls.RowEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:Rock.Web.UI.Controls.DeleteField.ParentGrid">
            <summary>
            Gets the parent grid.
            </summary>
            <value>
            The parent grid.
            </value>
        </member>
        <member name="E:Rock.Web.UI.Controls.DeleteField.Click">
            <summary>
            Occurs when [click].
            </summary>
        </member>
        <member name="T:Rock.Web.UI.Controls.DeleteFieldTemplate">
            <summary>
            Template used by the <see cref="T:Rock.Web.UI.Controls.DeleteField"/> control
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.DeleteFieldTemplate.InstantiateIn(System.Web.UI.Control)">
            <summary>
            When implemented by a class, defines the <see cref="T:System.Web.UI.Control"/> object that child controls and templates belong to. These child controls are in turn defined within an inline template.
            </summary>
            <param name="container">The <see cref="T:System.Web.UI.Control"/> object to contain the instances of controls from the inline template.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.DeleteFieldTemplate.lbDelete_DataBinding(System.Object,System.EventArgs)">
            <summary>
            Handles the DataBinding event of the lbDelete control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.DeleteFieldTemplate.lbDelete_Click(System.Object,System.EventArgs)">
            <summary>
            Handles the Click event of the lbDelete control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:Rock.Web.UI.Controls.DeleteFieldTemplate.ParentGrid">
            <summary>
            Gets or sets the parent grid.
            </summary>
            <value>
            The parent grid.
            </value>
        </member>
        <member name="E:Rock.Web.UI.Controls.DeleteFieldTemplate.LinkButtonClick">
            <summary>
            Occurs when [link button click].
            </summary>
        </member>
        <member name="T:Rock.Web.UI.Controls.Grid">
            <summary>
            Rock Grid Control
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.Grid.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Web.UI.Controls.Grid"/> class.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.Grid.OnInit(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.Init"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.Grid.OnLoad(System.EventArgs)">
            <summary>
            Handles the <see cref="E:System.Web.UI.Control.Load" /> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs" /> object that contains event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.Grid.OnPreRender(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.PreRender"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.Grid.RenderControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            Outputs server control content to a provided <see cref="T:System.Web.UI.HtmlTextWriter" /> object and stores tracing information about the control if tracing is enabled.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter" /> object that receives the control content.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.Grid.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            TODO: Added this override to prevent the default behavior of rending a grid with a table inside
            and div element.  The div may be needed for paging when grid is not used in an update panel
            so if wierd errors start happening, this could be the culprit.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter" /> used to render the server control content on the client's browser.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.Grid.CreateChildTable">
            <summary>
            Creates a new child table.
            </summary>
            <returns>
            Always returns a new <see cref="T:System.Web.UI.WebControls.Table" /> that represents the child table.
            </returns>
        </member>
        <member name="M:Rock.Web.UI.Controls.Grid.CreateChildControls(System.Collections.IEnumerable,System.Boolean)">
            <summary>
            Creates the control hierarchy used to render the <see cref="T:System.Web.UI.WebControls.GridView"/> control using the specified data source.
            </summary>
            <param name="dataSource">An <see cref="T:System.Collections.IEnumerable"/> that contains the data source for the <see cref="T:System.Web.UI.WebControls.GridView"/> control.</param>
            <param name="dataBinding">true to indicate that the child controls are bound to data; otherwise, false.</param>
            <returns>
            The number of rows created.
            </returns>
            <exception cref="T:System.Web.HttpException">
              <paramref name="dataSource"/> returns a null <see cref="T:System.Web.UI.DataSourceView"/>.-or-<paramref name="dataSource"/> does not implement the <see cref="T:System.Collections.ICollection"/> interface and cannot return a <see cref="P:System.Web.UI.DataSourceSelectArguments.TotalRowCount"/>. -or-<see cref="P:System.Web.UI.WebControls.GridView.AllowPaging"/> is true and <paramref name="dataSource"/> does not implement the <see cref="T:System.Collections.ICollection"/> interface and cannot perform data source paging.-or-<paramref name="dataSource"/> does not implement the <see cref="T:System.Collections.ICollection"/> interface and <paramref name="dataBinding"/> is set to false.</exception>
        </member>
        <member name="M:Rock.Web.UI.Controls.Grid.OnDataBinding(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.DataBinding" /> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs" /> object that contains the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.Grid.OnDataBound(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.WebControls.BaseDataBoundControl.DataBound"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> object that contains the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.Grid.Grid_Sorting(System.Object,System.Web.UI.WebControls.GridViewSortEventArgs)">
            <summary>
            Handles the Sorting event of the Grid control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Web.UI.WebControls.GridViewSortEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.Grid.OnRowCreated(System.Web.UI.WebControls.GridViewRowEventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.WebControls.GridView.RowCreated" /> event.
            </summary>
            <param name="e">A <see cref="T:System.Web.UI.WebControls.GridViewRowEventArgs" /> that contains event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.Grid.OnRowDataBound(System.Web.UI.WebControls.GridViewRowEventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.WebControls.GridView.RowDataBound"/> event.
            </summary>
            <param name="e">A <see cref="T:System.Web.UI.WebControls.GridViewRowEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.Grid.OnRowCommand(System.Web.UI.WebControls.GridViewCommandEventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.WebControls.GridView.RowCommand" /> event.
            </summary>
            <param name="e">A <see cref="T:System.Web.UI.WebControls.GridViewCommandEventArgs" /> that contains event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.Grid.pagerTemplate_ItemsPerPageClick(System.Object,Rock.Web.UI.Controls.NumericalEventArgs)">
            <summary>
            Handles the ItemsPerPageClick event of the pagerTemplate control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:Rock.Web.UI.Controls.NumericalEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.Grid.pagerTemplate_NavigateClick(System.Object,Rock.Web.UI.Controls.NumericalEventArgs)">
            <summary>
            Handles the NavigateClick event of the pagerTemplate control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:Rock.Web.UI.Controls.NumericalEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.Grid.Actions_MergeClick(System.Object,System.EventArgs)">
            <summary>
            Handles the MergeClick event of the Actions control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.Grid.Actions_CommunicateClick(System.Object,System.EventArgs)">
            <summary>
            Handles the CommunicateClick event of the Actions control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.Grid.Actions_ExcelExportClick(System.Object,System.EventArgs)">
            <summary>
            Handles the ExcelExportClick event of the Actions control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.Grid.CreatePreviewColumns(System.Type)">
            <summary>
            Creates grid columns by reflecting on the properties of a type.  If any of the properties
            have the [Previewable] attribute, columns will only be created for those properties
            </summary>
            <param name="modelType">Type of the model.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.Grid.GetPreviewColumns(System.Type)">
            <summary>
            Gets the preview columns.
            </summary>
            <param name="modelType">Type of the model.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.UI.Controls.Grid.System#Web#UI#IPostBackEventHandler#RaisePostBackEvent(System.String)">
            <summary>
            Raises the appropriate events for the <see cref="T:System.Web.UI.WebControls.GridView"/> control when it posts back to the server.
            </summary>
            <param name="eventArgument">The event argument from which to create a <see cref="T:System.Web.UI.WebControls.CommandEventArgs"/> for the event or events that are raised.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.Grid.OnGridReorder(Rock.Web.UI.Controls.GridReorderEventArgs)">
            <summary>
            Raises the <see cref="E:GridReorder"/> event.
            </summary>
            <param name="e">The <see cref="T:Rock.Web.UI.Controls.GridReorderEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.Grid.OnGridRebind(System.EventArgs)">
            <summary>
            Raises the <see cref="E:GridRebind"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.Grid.OnRowSelected(Rock.Web.UI.Controls.RowEventArgs)">
            <summary>
            Raises the <see cref="E:RowSelected"/> event.
            </summary>
            <param name="e">The <see cref="T:Rock.Web.UI.Controls.RowEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.Grid.GetGridField(System.Type)">
            <summary>
            Gets the grid field.
            </summary>
            <param name="propertyType">Type of the property.</param>
            <returns></returns>
        </member>
        <member name="P:Rock.Web.UI.Controls.Grid.IsDeleteEnabled">
            <summary>
            Gets or sets a value indicating whether [delete enabled].
            </summary>
            <value>
              <c>true</c> if [delete enabled]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.Grid.ShowConfirmDeleteDialog">
            <summary>
            Gets or sets a value indicating whether [show confirm delete dialog].
            </summary>
            <value>
            <c>true</c> if [show confirm delete dialog]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.Grid.RowItemText">
            <summary>
            Gets or sets the name of the row item.
            </summary>
            <value>
            The name of the row item.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.Grid.EmptyDataText">
            <summary>
            Gets or sets the text to display in the empty data row rendered when a <see cref="T:System.Web.UI.WebControls.GridView" /> control is bound to a data source that does not contain any records.
            </summary>
            <returns>The text to display in the empty data row. The default is an empty string (""), which indicates that this property is not set.</returns>
        </member>
        <member name="P:Rock.Web.UI.Controls.Grid.HideDeleteButtonForIsSystem">
            <summary>
            Gets or sets a value indicating whether [hide delete button for is system].
            </summary>
            <value>
            <c>true</c> if [hide delete button for is system]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.Grid.RowClickEnabled">
            <summary>
            Gets or sets a value indicating whether [row click enabled].
            </summary>
            <value>
              <c>true</c> if [row click enabled]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.Grid.DisplayType">
            <summary>
            Gets or sets the display type.
            </summary>
            <value>
            The display type.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.Grid.SortProperty">
            <summary>
            Gets the sort property.
            </summary>
        </member>
        <member name="P:Rock.Web.UI.Controls.Grid.CommunicateMergeFields">
            <summary>
            Gets or sets a list of datasource field/properties that can optionally be included as additional 
            merge fields when a new communication is created from the grid.  NOTE: A side affect of using 
            additional merge fields is that user will not be able to add additional recipients to the 
            communication after it is created from the grid
            </summary>
            <value>
            The communicate merge fields.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.Grid.PersonIdField">
            <summary>
            Gets or sets the Person Id field.
            Default is NULL, which indicates that this grid does not reference Person records
            </summary>
            <value>
            The Person Id field.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.Grid.TooltipField">
            <summary>
            Gets or sets the description field.  If specified, the description will be 
            added as a tooltip (title) attribute on the row
            </summary>
            <value>
            The description field.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.Grid.MergePageRoute">
            <summary>
            Gets or sets the merge page route.
            </summary>
            <value>
            The merge page route.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.Grid.CommunicationPageRoute">
            <summary>
            Gets or sets the new communication page route.
            </summary>
            <value>
            The new communication page route.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.Grid.SelectedKeys">
            <summary>
            Gets the selected keys for the first multiple selection mode SelectField column
            </summary>
            <value>
            The selected keys.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.Grid.ActionRow">
            <summary>
            Gets the action row.
            </summary>
        </member>
        <member name="P:Rock.Web.UI.Controls.Grid.Actions">
            <summary>
            Gets the actions control
            </summary>
        </member>
        <member name="P:Rock.Web.UI.Controls.Grid.ShowActionRow">
            <summary>
            Gets or sets a value indicating whether the action row should be displayed.
            </summary>
            <value>
              <c>true</c> if action row should be displayed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="E:Rock.Web.UI.Controls.Grid.GridReorder">
            <summary>
            Occurs when [grid reorder].
            </summary>
        </member>
        <member name="E:Rock.Web.UI.Controls.Grid.GridRebind">
            <summary>
            Occurs when [grid rebind].
            </summary>
        </member>
        <member name="E:Rock.Web.UI.Controls.Grid.RowSelected">
            <summary>
            Occurs when [row click].
            </summary>
        </member>
        <member name="T:Rock.Web.UI.Controls.GridReorderEventHandler">
            <summary>
            Delegate used for raising the grid reorder event
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:Rock.Web.UI.Controls.GridReorderEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Rock.Web.UI.Controls.GridRebindEventHandler">
            <summary>
            Delegate used for raising the grid rebind event
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Rock.Web.UI.Controls.PageNavigationEventHandler">
            <summary>
            Delegate used for raising the grid items per page changed event
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:Rock.Web.UI.Controls.NumericalEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Rock.Web.UI.Controls.NumericalEventArgs">
            <summary>
            Items Per RockPage Event Argument
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.NumericalEventArgs.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Web.UI.Controls.NumericalEventArgs"/> class.
            </summary>
            <param name="number">The number.</param>
        </member>
        <member name="P:Rock.Web.UI.Controls.NumericalEventArgs.Number">
            <summary>
            Gets the items per page.
            </summary>
        </member>
        <member name="T:Rock.Web.UI.Controls.GridReorderEventArgs">
            <summary>
            Grid Reorder Event Argument
            </summary>
        </member>
        <member name="F:Rock.Web.UI.Controls.GridReorderEventArgs._cancel">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.GridReorderEventArgs.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Web.UI.Controls.GridReorderEventArgs"/> class.
            </summary>
            <param name="dataKey">The data key.</param>
            <param name="oldIndex">The old index.</param>
            <param name="newIndex">The new index.</param>
        </member>
        <member name="P:Rock.Web.UI.Controls.GridReorderEventArgs.DataKey">
            <summary>
            Gets the data key.
            </summary>
        </member>
        <member name="P:Rock.Web.UI.Controls.GridReorderEventArgs.OldIndex">
            <summary>
            Gets the old index.
            </summary>
        </member>
        <member name="P:Rock.Web.UI.Controls.GridReorderEventArgs.NewIndex">
            <summary>
            Gets the new index.
            </summary>
        </member>
        <member name="P:Rock.Web.UI.Controls.GridReorderEventArgs.Cancel">
            <summary>
            Gets or sets a value indicating whether the reorder event should be cancelled
            </summary>
            <value>
              <c>true</c> if cancelled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Rock.Web.UI.Controls.JsonResult">
            <summary>
            JSON Result  
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.JsonResult.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Web.UI.Controls.JsonResult"/> class.
            </summary>
            <param name="action">The action.</param>
            <param name="cancel">if set to <c>true</c> [cancel].</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.JsonResult.#ctor(System.String,System.Boolean,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Web.UI.Controls.JsonResult"/> class.
            </summary>
            <param name="action">The action.</param>
            <param name="cancel">if set to <c>true</c> [cancel].</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.JsonResult.Serialize">
            <summary>
            Serializes this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Rock.Web.UI.Controls.SortProperty">
            <summary>
            Class for saving sort expression
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.SortProperty.#ctor(System.Web.UI.WebControls.GridViewSortEventArgs)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Web.UI.Controls.SortProperty"/> class.
            </summary>
            <param name="e">The <see cref="T:System.Web.UI.WebControls.GridViewSortEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:Rock.Web.UI.Controls.SortProperty.Direction">
            <summary>
            Gets or sets the direction.
            </summary>
            <value>
            The direction.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.SortProperty.DirectionString">
            <summary>
            Gets the direction as an ASC or DESC string.
            </summary>
            <value>
            The direction string.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.SortProperty.Property">
            <summary>
            Gets or sets the property name
            </summary>
            <value>
            The property.
            </value>
        </member>
        <member name="T:Rock.Web.UI.Controls.PagerTemplate">
            <summary>
            Template used for the pager row in the <see cref="T:Rock.Web.UI.Controls.Grid"/> control
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.PagerTemplate.InstantiateIn(System.Web.UI.Control)">
            <summary>
            When implemented by a class, defines the <see cref="T:System.Web.UI.Control"/> object that child controls and templates belong to. These child controls are in turn defined within an inline template.
            </summary>
            <param name="container">The <see cref="T:System.Web.UI.Control"/> object to contain the instances of controls from the inline template.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.PagerTemplate.SetNavigation(System.Int32,System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Set the RockPage Navigation Display
            </summary>
            <param name="pageCount">The number of total pages</param>
            <param name="pageIndex">The current page index</param>
            <param name="pageSize">The number of items on each page</param>
            <param name="itemCount">The item count.</param>
            <param name="rowItemText">The row item text.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.PagerTemplate.lbPage_Click(System.Object,System.EventArgs)">
            <summary>
            Handles the Click event of the lbPage control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.PagerTemplate.lbItems_Click(System.Object,System.EventArgs)">
            <summary>
            Handles the Click event of the lbPageSize control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.PagerTemplate.Dispose">
            <summary>
            Dispose object
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.PagerTemplate.Dispose(System.Boolean)">
            <summary>
            Dispose
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="E:Rock.Web.UI.Controls.PagerTemplate.NavigateClick">
            <summary>
            Occurs when [navigate click].
            </summary>
        </member>
        <member name="E:Rock.Web.UI.Controls.PagerTemplate.ItemsPerPageClick">
            <summary>
            Occurs when [page click].
            </summary>
        </member>
        <member name="T:Rock.Web.UI.Controls.GridDisplayType">
            <summary>
            
            </summary>
        </member>
        <member name="F:Rock.Web.UI.Controls.GridDisplayType.Full">
            <summary>
            The full
            </summary>
        </member>
        <member name="F:Rock.Web.UI.Controls.GridDisplayType.Light">
            <summary>
            The light
            </summary>
        </member>
        <member name="T:Rock.Web.UI.Controls.BoolField">
            <summary>
            <see cref="T:Rock.Web.UI.Controls.Grid"/> Column to display a boolean value.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.BoolField.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Web.UI.Controls.BoolField"/> class.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.BoolField.FormatDataValue(System.Object,System.Boolean)">
            <summary>
            Formats the specified field value for a cell in the <see cref="T:System.Web.UI.WebControls.BoundField"/> object.
            </summary>
            <param name="dataValue">The field value to format.</param>
            <param name="encode">true to encode the value; otherwise, false.</param>
            <returns>
            The field value converted to the format specified by <see cref="P:System.Web.UI.WebControls.BoundField.DataFormatString"/>.
            </returns>
        </member>
        <member name="T:Rock.Web.UI.Controls.HtmlGenericContainer">
            <summary>
            An HtmlGenericContainer that implements the INamingContainer interface
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.HtmlGenericContainer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Web.UI.Controls.HtmlGenericContainer"/> class.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.HtmlGenericContainer.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Web.UI.Controls.HtmlGenericContainer"/> class.
            </summary>
            <param name="tag">The name of the element for which this instance of the class is created.</param>
            <param name="cssClass">The CSS class.</param>
        </member>
        <member name="P:Rock.Web.UI.Controls.HtmlGenericContainer.CssClass">
            <summary>
            Gets or sets the CSS class.
            </summary>
            <value>
            The CSS class.
            </value>
        </member>
        <member name="T:Rock.Web.UI.Controls.NotificationBox">
            <summary>
            Displays a standard warning or error message box
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.NotificationBox.RenderControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            Outputs server control content to a provided <see cref="T:System.Web.UI.HtmlTextWriter" /> object and stores tracing information about the control if tracing is enabled.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter" /> object that receives the control content.</param>
        </member>
        <member name="P:Rock.Web.UI.Controls.NotificationBox.Title">
            <summary>
            Gets or sets the title (title is inline with the message text but is bold).
            </summary>
            <value>
            The title.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.NotificationBox.Heading">
            <summary>
            Gets or sets the heading (heading is on it's own line at the top)
            </summary>
            <value>
            The heading.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.NotificationBox.NotificationBoxType">
            <summary>
            Gets or sets the type of the notification box.
            </summary>
            <value>
            The type of the notification box.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.NotificationBox.Dismissable">
            <summary>
            Gets or sets a value indicating whether [dismissable].
            </summary>
            <value>
              <c>true</c> if [dismissable]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.NotificationBox.Details">
            <summary>
            Gets or sets the details.
            </summary>
            <value>
            The details.
            </value>
        </member>
        <member name="T:Rock.Web.UI.Controls.NotificationBoxType">
            <summary>
            The type of notification box to display
            </summary>
        </member>
        <member name="F:Rock.Web.UI.Controls.NotificationBoxType.Info">
            <summary>
            Display an information box
            </summary>
        </member>
        <member name="F:Rock.Web.UI.Controls.NotificationBoxType.Warning">
            <summary>
            Display a warning box
            </summary>
        </member>
        <member name="F:Rock.Web.UI.Controls.NotificationBoxType.Danger">
            <summary>
            Display an error box
            </summary>
        </member>
        <member name="F:Rock.Web.UI.Controls.NotificationBoxType.Success">
            <summary>
            Display a success box
            </summary>
        </member>
        <member name="T:Rock.Web.UI.Controls.RowEventArgs">
            <summary>
            Event argument used by the <see cref="T:Rock.Web.UI.Controls.Grid"/> events
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.RowEventArgs.#ctor(System.Web.UI.WebControls.GridViewRow)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Web.UI.Controls.RowEventArgs"/> class.
            </summary>
            <param name="row">The row.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.RowEventArgs.#ctor(System.Int32,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Web.UI.Controls.RowEventArgs"/> class.
            </summary>
            <param name="rowIndex">Index of the row.</param>
            <param name="rowKeyValue">The row key value.</param>
        </member>
        <member name="P:Rock.Web.UI.Controls.RowEventArgs.RowIndex">
            <summary>
            Gets the index of the row that fired the event
            </summary>
            <value>
            The index of the row.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.RowEventArgs.RowKeyValue">
            <summary>
            Gets the row key value.  
            Usually the Id value of the data in the row
            Cast this to an Int (or use RowKeyId) if your datakey is an integer
            </summary>
            <value>
            The row key value.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.RowEventArgs.RowKeyValues">
            <summary>
            Gets the row key values
            Use this if your datarow has multiple keys (rare)
            </summary>
            <value>
            The row key values.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.RowEventArgs.RowKeyId">
            <summary>
            Gets the row key id
            Usually the Id value of the data in the row
            </summary>
            <value>
            The row key id.
            </value>
        </member>
        <member name="T:Rock.ExtensionMethods">
            <summary>
            Extension Methods
            </summary>
        </member>
        <member name="M:Rock.ExtensionMethods.ToJson(System.Object)">
            <summary>
            Converts object to JSON string
            </summary>
            <param name="obj">Object.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.ExtensionMethods.GetPropertyValue(System.Object,System.String)">
            <summary>
            Gets the property value.
            </summary>
            <param name="rootObj">The root obj.</param>
            <param name="propertyPathName">Name of the property path.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.ExtensionMethods.ToStringSafe(System.Object)">
            <summary>
            Safely ToString() this item, even if it's null.
            </summary>
            <param name="obj">an object</param>
            <returns>The ToString or the empty string if the item is null.</returns>
        </member>
        <member name="M:Rock.ExtensionMethods.LiquidizeChildren(System.Object)">
            <summary>
            Liquidizes the children.
            </summary>
            <param name="liquidObject">The liquid object.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.ExtensionMethods.GetFriendlyTypeName(System.Type)">
            <summary>
            Gets the name of the friendly type.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.ExtensionMethods.RemoveSpecialCharacters(System.String)">
            <summary>
            Removed special characters from strings.
            </summary>
            <param name="str">The identifier.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.ExtensionMethods.SplitCase(System.String)">
            <summary>
            Splits a Camel or Pascal cased identifier into seperate words.
            </summary>
            <param name="str">The identifier.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.ExtensionMethods.SplitDelimitedValues(System.String,System.Boolean)">
            <summary>
            Returns a string array that contains the substrings in this string that are delimited by any combination of whitespace, comma, semi-colon, or pipe characters
            </summary>
            <param name="str">The string.</param>
            <param name="whitespace">if set to <c>true</c> whitespace will be treated as a delimiter</param>
            <returns></returns>
        </member>
        <member name="M:Rock.ExtensionMethods.ReplaceCaseInsensitive(System.String,System.String,System.String)">
            <summary>
            Replaces every instance of oldValue (regardless of case) with the newValue.
            from http://www.codeproject.com/Articles/10890/Fastest-C-Case-Insenstive-String-Replace
            </summary>
            <param name="str">The source string.</param>
            <param name="oldValue">The value to replace.</param>
            <param name="newValue">The value to insert.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.ExtensionMethods.ReplaceWhileExists(System.String,System.String,System.String)">
            <summary>
            Replaces every instance of oldValue with newValue.  Will continue to replace
            values after each replace until the oldValue does not exist.
            </summary>
            <param name="str">The source string.</param>
            <param name="oldValue">The value to replace.</param>
            <param name="newValue">The value to insert.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Rock.ExtensionMethods.EscapeQuotes(System.String)">
            <summary>
            Adds escape character for quotes in a string
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Rock.ExtensionMethods.Quoted(System.String,System.String)">
            <summary>
            Adds Quotes around the specified string and escapes any quotes that are already in the string
            </summary>
            <param name="str">The string.</param>
            <param name="QuoteChar">The quote character.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.ExtensionMethods.Left(System.String,System.Int32)">
            <summary>
            Returns the specified number of characters, starting at the left side of the string.
            </summary>
            <param name="str">The string.</param>
            <param name="length">The desired length.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.ExtensionMethods.Truncate(System.String,System.Int32)">
            <summary>
            Truncates a string after a max length and adds ellipsis.  Truncation will occur at first space prior to maxLength
            </summary>
            <param name="str"></param>
            <param name="maxLength"></param>
            <returns></returns>
        </member>
        <member name="M:Rock.ExtensionMethods.Pluralize(System.String)">
            <summary>
            Pluralizes the specified string.
            </summary>
            <param name="str">The string to pluralize.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.ExtensionMethods.Singularize(System.String)">
            <summary>
            Singularizes the specified string.
            </summary>
            <param name="str">The string to singularize.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.ExtensionMethods.AsNumeric(System.String)">
            <summary>
            Removes any non-numeric characters
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="F:Rock.ExtensionMethods.trueStrings">
            <summary>
            The true strings for AsBoolean and AsBooleanOrNull
            </summary>
        </member>
        <member name="M:Rock.ExtensionMethods.AsBoolean(System.String,System.Boolean)">
            <summary>
            Returns True for 'True', 'Yes', 'T', 'Y', '1' (case-insensitive)
            </summary>
            <param name="str">The string.</param>
            <param name="resultIfNullOrEmpty">if set to <c>true</c> [result if null or empty].</param>
            <returns></returns>
        </member>
        <member name="M:Rock.ExtensionMethods.AsBooleanOrNull(System.String)">
            <summary>
            Returns True for 'True', 'Yes', 'T', 'Y', '1' (case-insensitive), null for emptystring/null
            </summary>
            <param name="str">The string.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.ExtensionMethods.AsInteger(System.String,System.Boolean)">
            <summary>
            Attempts to convert string to integer.  Returns null if unsuccessful.
            </summary>
            <param name="str">The STR.</param>
            <param name="emptyStringAsZero">if set to <c>true</c> [empty string as zero].</param>
            <returns></returns>
        </member>
        <member name="M:Rock.ExtensionMethods.AsGuid(System.String)">
            <summary>
            Attempts to convert string to Guid.  Returns Guid.Empty if unsuccessful.
            </summary>
            <param name="str">The STR.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.ExtensionMethods.IsEmpty(System.Guid)">
            <summary>
            Determines whether the specified unique identifier is Guid.Empty.
            </summary>
            <param name="guid">The unique identifier.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.ExtensionMethods.AsDecimal(System.String,System.Boolean)">
            <summary>
            Attempts to convert string to decimal.  Returns null if unsuccessful.
            </summary>
            <param name="str">The string.</param>
            <param name="emptyStringAsZero">if set to <c>true</c> [empty string as zero].</param>
            <returns></returns>
        </member>
        <member name="M:Rock.ExtensionMethods.AsDouble(System.String,System.Boolean)">
            <summary>
            Attempts to convert string to double.  Returns null if unsuccessful.
            </summary>
            <param name="str">The string.</param>
            <param name="emptyStringAsZero">if set to <c>true</c> [empty string as zero].</param>
            <returns></returns>
        </member>
        <member name="M:Rock.ExtensionMethods.AsDateTime(System.String)">
            <summary>
            Attempts to convert string to DateTime.  Returns null if unsuccessful.
            </summary>
            <param name="str">The string.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.ExtensionMethods.AsTimeSpan(System.String)">
            <summary>
            Attempts to convert string to TimeSpan.  Returns null if unsuccessful.
            </summary>
            <param name="str">The string.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.ExtensionMethods.ResolveMergeFields(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Use DotLiquid to resolve any merge codes within the content using the values
            in the mergeObjects.
            </summary>
            <param name="content">The content.</param>
            <param name="mergeObjects">The merge objects.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.ExtensionMethods.FormatAsHtmlTitle(System.String)">
            <summary>
            Converts string to a HTML title "<span class='first-word'>first-word</span> rest of string"
            </summary>
            <param name="str">The STR.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.ExtensionMethods.ConvertCrLfToHtmlBr(System.String)">
            <summary>
            Converts CR (carriage return) LF (line feed) to non-encoded html breaks (br).
            </summary>
            <param name="str">a string that contains CR LF</param>
            <returns>a string with CRLF replaced with html <code>br</code></returns>
        </member>
        <member name="M:Rock.ExtensionMethods.EncodeHtml(System.String)">
            <summary>
            HTML Encodes the string
            </summary>
            <param name="str">The string.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.ExtensionMethods.SanitizeHtml(System.String,System.Boolean)">
            <summary>
            Sanitizes the HTML by removing tags.  If Scrict is true, all html tags will be removed, if false, only a blacklist of specific XSS dangerous tags and attribute values are removed.
            </summary>
            <param name="html">The HTML.</param>
            <param name="strict">if set to <c>true</c> [strict].</param>
            <returns></returns>
        </member>
        <member name="M:Rock.ExtensionMethods.ScrubHtmlAndConvertCrLfToBr(System.String)">
            <summary>
            Scrubs any html from the string but converts carriage returns into html &lt;br/&gt; suitable for web display.
            </summary>
            <param name="str">a string that may contain unsanitized html and carriage returns</param>
            <returns>a string that has been scrubbed of any html with carriage returns converted to html br</returns>
        </member>
        <member name="M:Rock.ExtensionMethods.IsValidEmail(System.String)">
            <summary>
            Returns true if the given string is a valid email address.
            </summary>
            <param name="email">The string to validate</param>
            <returns>true if valid email, false otherwise</returns>
        </member>
        <member name="M:Rock.ExtensionMethods.AsType``1(System.String)">
            <summary>
            Converts the value to Type, or if unsuccessful, returns the default value of Type.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.ExtensionMethods.Masked(System.String)">
            <summary>
            Maskeds the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.ExtensionMethods.EnsureTrailingBackslash(System.String)">
            <summary>
            Ensures the trailing backslash. Handy when combining folder paths.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.ExtensionMethods.EnsureTrailingForwardslash(System.String)">
            <summary>
            Ensures the trailing forward slash. Handy when combining url paths.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.ExtensionMethods.IfEmpty(System.String,System.String)">
            <summary>
            Evaluates string and if null or empty returns nullValue instead
            </summary>
            <param name="value">The value.</param>
            <param name="nullValue">The null value.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.ExtensionMethods.DefinedValue(System.Nullable{System.Int32})">
            <summary>
            Gets the Defined Value name associated with this id
            </summary>
            <param name="id">The id.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.ExtensionMethods.Bit(System.Boolean)">
            <summary>
            A numeric 1 or 0
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:Rock.ExtensionMethods.ToYesNo(System.Boolean)">
            <summary>
            To the yes no.
            </summary>
            <param name="value">if set to <c>true</c> [value].</param>
            <returns></returns>
        </member>
        <member name="M:Rock.ExtensionMethods.ToTrueFalse(System.Boolean)">
            <summary>
            To the true false.
            </summary>
            <param name="value">if set to <c>true</c> [value].</param>
            <returns></returns>
        </member>
        <member name="M:Rock.ExtensionMethods.FromTrueFalse(System.String)">
            <summary>
            Froms the true false.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.ExtensionMethods.Age(System.Nullable{System.DateTime})">
            <summary>
            Returns the age at the current date
            </summary>
            <param name="start"></param>
            <returns></returns>
        </member>
        <member name="M:Rock.ExtensionMethods.Age(System.DateTime)">
            <summary>
            Returns the age at the current date
            </summary>
            <param name="start"></param>
            <returns></returns>
        </member>
        <member name="M:Rock.ExtensionMethods.TotalMonths(System.DateTime,System.DateTime)">
            <summary>
            The total months.
            </summary>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.ExtensionMethods.TotalYears(System.DateTime,System.DateTime)">
            <summary>
            The total years.
            </summary>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.ExtensionMethods.ToElapsedString(System.Nullable{System.DateTime},System.Boolean,System.Boolean)">
            <summary>
            Returns a friendly elapsed time string.
            </summary>
            <param name="dateTime">The date time.</param>
            <param name="condensed">if set to <c>true</c> [condensed].</param>
            <param name="includeTime">if set to <c>true</c> [include time].</param>
            <returns></returns>
        </member>
        <member name="M:Rock.ExtensionMethods.ToElapsedString(System.DateTime,System.Boolean,System.Boolean)">
            <summary>
            Returns a friendly elapsed time string.
            </summary>
            <param name="dateTime">The date time.</param>
            <param name="condensed">if set to <c>true</c> [condensed].</param>
            <param name="includeTime">if set to <c>true</c> [include time].</param>
            <returns></returns>
        </member>
        <member name="M:Rock.ExtensionMethods.ToRelativeDateString(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
            <summary>
            Returns a string in FB style relative format (x seconds ago, x minutes ago, about an hour ago, etc.).
            or if max days has already passed in FB datetime format (February 13 at 11:28am or November 5, 2011 at 1:57pm)
            </summary>
            <param name="dateTime">the datetime to convert to relative time.</param>
            <param name="maxDays">maximum number of days before formatting in FB date-time format (ex. November 5, 2011 at 1:57pm)</param>
            <returns></returns>
        </member>
        <member name="M:Rock.ExtensionMethods.ToRelativeDateString(System.DateTime,System.Nullable{System.Int32})">
            <summary>
            Returns a string in relative format (x seconds ago, x minutes ago, about an hour ago, in x seconds,
            in x minutes, in about an hour, etc.) or if time difference is greater than max days in long format (February
            13 at 11:28am or November 5, 2011 at 1:57pm)
            </summary>
            <param name="dateTime">the datetime to convert to relative time.</param>
            <param name="maxDays">maximum number of days before formatting in long format (ex. November 5, 2011 at 1:57pm) </param>
            <returns></returns>
        </member>
        <member name="M:Rock.ExtensionMethods.ToJavascriptMilliseconds(System.DateTime)">
            <summary>
            Converts the date to an Epoch of milliseconds since 1970/1/1
            </summary>
            <param name="dateTime">The date time.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.ExtensionMethods.ToTimeString(System.TimeSpan)">
            <summary>
            Returns a TimeSpan to HH:MM AM/PM.
            Examples: 1:45 PM, 12:01 AM
            </summary>
            <param name="timespan">The timespan.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.ExtensionMethods.LoadControl(System.Web.UI.Control,System.String,System.Object[])">
            <summary>
            Loads a user control using the constructor with the parameters specified.
            </summary>
            <param name="control">The control.</param>
            <param name="userControlPath">The user control path.</param>
            <param name="constructorParameters">The constructor parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.ExtensionMethods.RockBlock(System.Web.UI.Control)">
            <summary>
            Gets the parent RockBlock.
            </summary>
            <param name="control">The control.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.ExtensionMethods.ParentUpdatePanel(System.Web.UI.Control)">
            <summary>
            Parents the update panel.
            </summary>
            <param name="control">The control.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.ExtensionMethods.GetControlListRecursive``1(System.Web.UI.ControlCollection,System.Collections.Generic.List{``0})">
            <summary>
            Gets all controls of Type recursively
            http://stackoverflow.com/questions/7362482/c-sharp-get-all-web-controls-on-page
            </summary>
            <typeparam name="T"></typeparam>
            <param name="controlCollection">The control collection.</param>
            <param name="resultCollection">The result collection.</param>
        </member>
        <member name="M:Rock.ExtensionMethods.ControlsOfTypeRecursive``1(System.Web.UI.Control)">
            <summary>
            Gets all controls of Type recursively
            http://stackoverflow.com/questions/7362482/c-sharp-get-all-web-controls-on-page
            </summary>
            <typeparam name="T"></typeparam>
            <param name="control">The control.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.ExtensionMethods.AddCssClass(System.Web.UI.WebControls.WebControl,System.String)">
            <summary>
            Adds a CSS class name to a web control
            </summary>
            <param name="webControl">The web control.</param>
            <param name="className">Name of the class.</param>
        </member>
        <member name="M:Rock.ExtensionMethods.RemoveCssClass(System.Web.UI.WebControls.WebControl,System.String)">
            <summary>
            Removes a CSS class name from a web control.
            </summary>
            <param name="webControl">The web control.</param>
            <param name="className">Name of the class.</param>
        </member>
        <member name="M:Rock.ExtensionMethods.AddCssClass(System.Web.UI.HtmlControls.HtmlControl,System.String)">
            <summary>
            Adds a CSS class name to an html control
            </summary>
            <param name="htmlControl">The html control.</param>
            <param name="className">Name of the class.</param>
        </member>
        <member name="M:Rock.ExtensionMethods.RemoveCssClass(System.Web.UI.HtmlControls.HtmlControl,System.String)">
            <summary>
            Removes a CSS class name from an html control.
            </summary>
            <param name="htmlControl">The html control.</param>
            <param name="className">Name of the class.</param>
        </member>
        <member name="M:Rock.ExtensionMethods.SetValues(System.Web.UI.WebControls.CheckBoxList,System.Collections.Generic.List{System.String})">
            <summary>
            Sets the values.
            </summary>
            <param name="checkBoxList">The check box list.</param>
            <param name="values">The values.</param>
        </member>
        <member name="M:Rock.ExtensionMethods.SetValues(System.Web.UI.WebControls.CheckBoxList,System.Collections.Generic.List{System.Int32})">
            <summary>
            Sets the values.
            </summary>
            <param name="checkBoxList">The check box list.</param>
            <param name="values">The values.</param>
        </member>
        <member name="M:Rock.ExtensionMethods.SetValue(System.Web.UI.WebControls.ListControl,System.String)">
            <summary>
            Try's to set the selected value, if the value does not exist, will set the first item in the list
            </summary>
            <param name="listControl">The list control.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Rock.ExtensionMethods.SetReadOnlyValue(System.Web.UI.WebControls.ListControl,System.String)">
            <summary>
            Sets the read only value.
            </summary>
            <param name="listControl">The list control.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Rock.ExtensionMethods.SetValue(System.Web.UI.WebControls.ListControl,System.Nullable{System.Int32})">
            <summary>
            Try's to set the selected value, if the value does not exist, will set the first item in the list
            </summary>
            <param name="listControl">The list control.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Rock.ExtensionMethods.BindToEnum(System.Web.UI.WebControls.ListControl,System.Type,System.Boolean)">
            <summary>
            Binds to enum.
            </summary>
            <param name="listControl">The list control.</param>
            <param name="enumType">Type of the enum.</param>
            <param name="insertBlankOption">if set to <c>true</c> [insert blank option].</param>
        </member>
        <member name="M:Rock.ExtensionMethods.BindToDefinedType(System.Web.UI.WebControls.ListControl,Rock.Web.Cache.DefinedTypeCache,System.Boolean,System.Boolean)">
            <summary>
            Binds to the values of a definedType
            </summary>
            <param name="listControl">The list control.</param>
            <param name="definedType">Type of the defined.</param>
            <param name="insertBlankOption">if set to <c>true</c> [insert blank option].</param>
            <param name="useDescriptionAsText">if set to <c>true</c> [use description as text].</param>
        </member>
        <member name="M:Rock.ExtensionMethods.SelectedValueAsInt(System.Web.UI.WebControls.ListControl,System.Boolean)">
            <summary>
            Returns the Value as Int or null if Value is <see cref="T:Rock.Constants.None"/>
            </summary>
            <param name="listControl">The list control.</param>
            <param name="NoneAsNull">if set to <c>true</c>, will return Null if SelectedValue = <see cref="T:Rock.Constants.None" /> </param>
            <returns></returns>
        </member>
        <member name="M:Rock.ExtensionMethods.SelectedValueAsId(System.Web.UI.WebControls.ListControl)">
            <summary>
            Returns the value of the currently selected item.
            It will return NULL if either <see cref="T:Rock.Constants.None"/> or <see cref="T:Rock.Constants.All"/> is selected.
            </summary>
            <param name="listControl">The list control.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.ExtensionMethods.SelectedValueAsEnum``1(System.Web.UI.WebControls.ListControl)">
            <summary>
            Selecteds the value as enum.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Rock.ExtensionMethods.ConvertToString(System.Enum,System.Boolean)">
            <summary>
            Converts to the enum value to it's string value
            </summary>
            <param name="eff">The eff.</param>
            <param name="SplitCase">if set to <c>true</c> [split case].</param>
            <returns></returns>
        </member>
        <member name="M:Rock.ExtensionMethods.GetDescription(System.Enum)">
            <summary>
            Gets the enum description.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.ExtensionMethods.ConvertToInt(System.Enum)">
            <summary>
            Converts to int.
            </summary>
            <param name="eff">The eff.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.ExtensionMethods.ConvertToEnum``1(System.String,System.Nullable{``0})">
            <summary>
            Converts a string value to an enum value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="enumValue">The enum value.</param>
            <param name="defaultValue">The default value to use if the value cannot be parsed. Leave null to throw an exception if the value cannot be parsed. </param>
            <returns></returns>
        </member>
        <member name="M:Rock.ExtensionMethods.AsDelimited``1(System.Collections.Generic.List{``0},System.String)">
            <summary>
            Concatonate the items
            </summary>
            <typeparam name="T"></typeparam>
            <param name="items">The items.</param>
            <param name="delimiter">The delimiter.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.ExtensionMethods.Join(System.Collections.Generic.Dictionary{System.String,System.String},System.String)">
            <summary>
            Joins a dictionary of items
            </summary>
            <param name="items">The items.</param>
            <param name="delimter">The delimter.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.ExtensionMethods.OrderBy``1(System.Linq.IQueryable{``0},System.String)">
            <summary>
            Orders the list by the name of a property.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The type of object.</param>
            <param name="property">The property to order by.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.ExtensionMethods.OrderByDescending``1(System.Linq.IQueryable{``0},System.String)">
            <summary>
            Orders the list by the name of a property in descending order
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The type of object.</param>
            <param name="property">The property to order by.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.ExtensionMethods.ThenBy``1(System.Linq.IOrderedQueryable{``0},System.String)">
            <summary>
            Then Orders the list by the name of a property.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The type of object.</param>
            <param name="property">The property to order by.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.ExtensionMethods.ThenByDescending``1(System.Linq.IOrderedQueryable{``0},System.String)">
            <summary>
            Then Orders the list by a a property in descending order
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The type of object.</param>
            <param name="property">The property to order by.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.ExtensionMethods.Sort``1(System.Linq.IQueryable{``0},Rock.Web.UI.Controls.SortProperty)">
            <summary>
            Sorts the object by the specified sort property.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <param name="sortProperty">The sort property.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.ExtensionMethods.WhereAttributeValue``1(System.Linq.IQueryable{``0},Rock.Data.RockContext,System.String,System.String)">
            <summary>
            Filters a Query to rows that have matching attribute value
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <param name="rockContext">The rock context.</param>
            <param name="attributeKey">The attribute key.</param>
            <param name="attributeValue">The attribute value.</param>
            <returns></returns>
            <example>
            var test = new PersonService( rockContext ).Queryable().Where( a =&gt; a.FirstName == "Bob" ).WhereAttributeValue( rockContext, "BaptizedHere", "True" ).ToList();
              </example>
        </member>
        <member name="M:Rock.ExtensionMethods.LoadAttributes(Rock.Attribute.IHasAttributes,Rock.Data.RockContext)">
            <summary>
            Loads the attributes.
            </summary>
            <param name="entity">The entity.</param>
            <param name="rockContext">The rock context.</param>
        </member>
        <member name="M:Rock.ExtensionMethods.SaveAttributeValues(Rock.Attribute.IHasAttributes,Rock.Data.RockContext)">
            <summary>
            Saves the attribute values.
            </summary>
            <param name="entity">The entity.</param>
            <param name="rockContext">The rock context.</param>
        </member>
        <member name="M:Rock.ExtensionMethods.CopyAttributesFrom(Rock.Attribute.IHasAttributes,Rock.Attribute.IHasAttributes)">
            <summary>
            Copies the attributes.
            </summary>
            <param name="entity">The entity.</param>
            <param name="source">The source.</param>
        </member>
        <member name="M:Rock.ExtensionMethods.PageId(System.Web.Routing.Route)">
            <summary>
            Pages the id.
            </summary>
            <param name="route">The route.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.ExtensionMethods.RouteId(System.Web.Routing.Route)">
            <summary>
            Routes the id.
            </summary>
            <param name="route">The route.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.ExtensionMethods.AddPageRoute(System.Collections.ObjectModel.Collection{System.Web.Routing.RouteBase},Rock.Model.PageRoute)">
            <summary>
            Adds the page route.
            </summary>
            <param name="routes">The routes.</param>
            <param name="pageRoute">The page route.</param>
        </member>
        <member name="M:Rock.ExtensionMethods.RemoveEntity``1(System.Collections.Generic.List{``0},System.Int32)">
            <summary>
            Removes the entity.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list">The list.</param>
            <param name="id">The id.</param>
        </member>
        <member name="M:Rock.ExtensionMethods.RemoveEntity``1(System.Collections.Generic.List{``0},System.Guid)">
            <summary>
            Removes the entity.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list">The list.</param>
            <param name="guid">The GUID.</param>
        </member>
        <member name="M:Rock.ExtensionMethods.ValueAsInt(System.Web.UI.WebControls.HiddenField)">
            <summary>
            Values as int.
            </summary>
            <param name="hiddenField">The hidden field.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.ExtensionMethods.SetValue(System.Web.UI.WebControls.HiddenField,System.Int32)">
            <summary>
            Sets the value.
            </summary>
            <param name="hiddenField">The hidden field.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Rock.ExtensionMethods.IsZero(System.Web.UI.WebControls.HiddenField)">
            <summary>
            Determines whether the specified hidden field is zero.
            </summary>
            <param name="hiddenField">The hidden field.</param>
            <returns>
              <c>true</c> if the specified hidden field is zero; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Rock.ExtensionMethods.Update(System.Collections.Generic.Dictionary{System.String,System.Object},System.String,System.Object)">
            <summary>
            Adds a new key/value to dictionary or if key already exists will update existing value.
            </summary>
            <param name="dictionary">The dictionary.</param>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Rock.ExtensionMethods.LiquidHelpText(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Returns a Json representation of the merge fields available to Liquid.
            </summary>
            <param name="mergeFields">The merge fields.</param>
            <returns></returns>
        </member>
        <member name="T:Rock.Field.Types.BooleanFieldType">
            <summary>
            Field Type used to display a list of options as checkboxes.  Value is saved as a | delimited list
            </summary>
        </member>
        <member name="M:Rock.Field.Types.BooleanFieldType.FormatValue(System.Web.UI.Control,System.String,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.Boolean)">
            <summary>
            Returns the field's current value(s)
            </summary>
            <param name="parentControl">The parent control.</param>
            <param name="value">Information about the value</param>
            <param name="configurationValues">The configuration values.</param>
            <param name="condensed">Flag indicating if the value should be condensed (i.e. for use in a grid column)</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.BooleanFieldType.ConfigurationKeys">
            <summary>
            Returns a list of the configuration keys
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.BooleanFieldType.ConfigurationControls">
            <summary>
            Creates the HTML controls required to configure this type of field
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.BooleanFieldType.ConfigurationValues(System.Collections.Generic.List{System.Web.UI.Control})">
            <summary>
            Gets the configuration value.
            </summary>
            <param name="controls">The controls.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.BooleanFieldType.SetConfigurationValues(System.Collections.Generic.List{System.Web.UI.Control},System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue})">
            <summary>
            Sets the configuration value.
            </summary>
            <param name="controls"></param>
            <param name="configurationValues"></param>
        </member>
        <member name="M:Rock.Field.Types.BooleanFieldType.IsValid(System.String,System.Boolean,System.String@)">
            <summary>
            Tests the value to ensure that it is a valid value.  If not, message will indicate why
            </summary>
            <param name="value">The value.</param>
            <param name="required">if set to <c>true</c> [required].</param>
            <param name="message">The message.</param>
            <returns>
              <c>true</c> if the specified value is valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Rock.Field.Types.BooleanFieldType.EditControl(System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.String)">
            <summary>
            Renders the controls neccessary for prompting user for a new value and adds them to the parentControl
            </summary>
            <param name="configurationValues">The configuration values.</param>
            <param name="id"></param>
            <returns>
            The control
            </returns>
        </member>
        <member name="M:Rock.Field.Types.BooleanFieldType.GetEditValue(System.Web.UI.Control,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue})">
            <summary>
            Reads new values entered by the user for the field
            </summary>
            <param name="control">Parent control that controls were added to in the CreateEditControl() method</param>
            <param name="configurationValues">The configuration values.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.BooleanFieldType.SetEditValue(System.Web.UI.Control,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.String)">
            <summary>
            Sets the value.
            </summary>
            <param name="control">The control.</param>
            <param name="configurationValues">The configuration values.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:Rock.Field.Types.PageReferenceFieldType">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Field.Types.PageReferenceFieldType.FormatValue(System.Web.UI.Control,System.String,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.Boolean)">
            <summary>
            Returns the field's current value(s)
            </summary>
            <param name="parentControl">The parent control.</param>
            <param name="value">Information about the value</param>
            <param name="configurationValues">The configuration values.</param>
            <param name="condensed">Flag indicating if the value should be condensed (i.e. for use in a grid column)</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.PageReferenceFieldType.EditControl(System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.String)">
            <summary>
            Creates the control(s) neccessary for prompting user for a new value
            </summary>
            <param name="configurationValues">The configuration values.</param>
            <param name="id"></param>
            <returns>
            The control
            </returns>
        </member>
        <member name="M:Rock.Field.Types.PageReferenceFieldType.GetEditValue(System.Web.UI.Control,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue})">
            <summary>
            Reads new values entered by the user for the field.  Returns with Page.Guid,PageRoute.Guid or just Page.Guid 
            </summary>
            <param name="control">Parent control that controls were added to in the CreateEditControl() method</param>
            <param name="configurationValues">The configuration values.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.PageReferenceFieldType.SetEditValue(System.Web.UI.Control,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.String)">
            <summary>
            Sets the value ( as either Page.Guid,PageRoute.Guid or just Page.Guid if not specific to a route )
            </summary>
            <param name="control">The control.</param>
            <param name="configurationValues">The configuration values.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:Rock.Field.Types.IntegerFieldType">
            <summary>
            Field used to save and display a numeric value
            </summary>
        </member>
        <member name="M:Rock.Field.Types.IntegerFieldType.IsValid(System.String,System.Boolean,System.String@)">
            <summary>
            Tests the value to ensure that it is a valid value.  If not, message will indicate why
            </summary>
            <param name="value"></param>
            <param name="required"></param>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.IntegerFieldType.EditControl(System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.String)">
            <summary>
            Creates the control(s) neccessary for prompting user for a new value
            </summary>
            <param name="configurationValues">The configuration values.</param>
            <param name="id"></param>
            <returns>
            The control
            </returns>
        </member>
        <member name="P:Rock.Field.Types.IntegerFieldType.AlignValue">
            <summary>
            Gets the align value that should be used when displaying value
            </summary>
        </member>
        <member name="T:Rock.Field.Types.SelectSingleFieldType">
            <summary>
            Field Type used to display a list of options as checkboxes.  Value is saved as a | delimited list
            </summary>
        </member>
        <member name="M:Rock.Field.Types.SelectSingleFieldType.ConfigurationKeys">
            <summary>
            Returns a list of the configuration keys
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.SelectSingleFieldType.ConfigurationControls">
            <summary>
            Creates the HTML controls required to configure this type of field
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.SelectSingleFieldType.ConfigurationValues(System.Collections.Generic.List{System.Web.UI.Control})">
            <summary>
            Gets the configuration value.
            </summary>
            <param name="controls">The controls.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.SelectSingleFieldType.SetConfigurationValues(System.Collections.Generic.List{System.Web.UI.Control},System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue})">
            <summary>
            Sets the configuration value.
            </summary>
            <param name="controls"></param>
            <param name="configurationValues"></param>
        </member>
        <member name="M:Rock.Field.Types.SelectSingleFieldType.EditControl(System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.String)">
            <summary>
            Creates the control(s) neccessary for prompting user for a new value
            </summary>
            <param name="configurationValues">The configuration values.</param>
            <param name="id"></param>
            <returns>
            The control
            </returns>
        </member>
        <member name="M:Rock.Field.Types.SelectSingleFieldType.GetEditValue(System.Web.UI.Control,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue})">
            <summary>
            Reads new values entered by the user for the field
            </summary>
            <param name="control">Parent control that controls were added to in the CreateEditControl() method</param>
            <param name="configurationValues"></param>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.SelectSingleFieldType.SetEditValue(System.Web.UI.Control,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.String)">
            <summary>
            Sets the value.
            </summary>
            <param name="control">The control.</param>
            <param name="configurationValues"></param>
            <param name="value">The value.</param>
        </member>
        <member name="T:Rock.Field.Types.ColorFieldType">
            <summary>
            Field Type used to display a dropdown list of System.Drawing.Color options
            </summary>
        </member>
        <member name="M:Rock.Field.Types.ColorFieldType.EditControl(System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.String)">
            <summary>
            Renders the controls neccessary for prompting user for a new value and adds them to the parentControl
            </summary>
            <param name="configurationValues">The configuration values.</param>
            <param name="id"></param>
            <returns>
            The control
            </returns>
        </member>
        <member name="M:Rock.Field.Types.ColorFieldType.GetEditValue(System.Web.UI.Control,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue})">
            <summary>
            Reads new values entered by the user for the field
            </summary>
            <param name="control">Parent control that controls were added to in the CreateEditControl() method</param>
            <param name="configurationValues"></param>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.ColorFieldType.SetEditValue(System.Web.UI.Control,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.String)">
            <summary>
            Sets the value.
            </summary>
            <param name="control">The control.</param>
            <param name="configurationValues"></param>
            <param name="value">The value.</param>
        </member>
        <member name="T:Rock.Field.Helper">
            <summary>
            Helper class for use with <see cref="T:Rock.Field.IFieldType"/> classes
            </summary>
        </member>
        <member name="M:Rock.Field.Helper.InstantiateFieldType(System.String,System.String)">
            <summary>
            Instantiates an instance of a specific field type based on the assembly and class name of the field type
            </summary>
            <param name="assembly">Assembly Name (i.e. Rock)</param>
            <param name="typeName">Class Name (i.e. Rock.Field.Types.Text)</param>
            <returns></returns>
        </member>
        <member name="T:Rock.Field.Types.TextFieldType">
            <summary>
            Field used to save and display a text value
            </summary>
        </member>
        <member name="M:Rock.Field.Types.TextFieldType.FormatValue(System.Web.UI.Control,System.String,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.Boolean)">
            <summary>
            Returns the field's current value(s)
            </summary>
            <param name="parentControl">The parent control.</param>
            <param name="value">Information about the value</param>
            <param name="configurationValues">The configuration values.</param>
            <param name="condensed">Flag indicating if the value should be condensed (i.e. for use in a grid column)</param>
            <returns></returns>
        </member>
        <member name="T:Rock.Attribute.Helper">
            <summary>
            Static Helper class for creating, saving, and reading attributes and attribute values of any <see cref="T:Rock.Attribute.IHasAttributes"/> class
            </summary>
        </member>
        <member name="M:Rock.Attribute.Helper.UpdateAttributes(System.Type,System.Nullable{System.Int32},Rock.Data.RockContext)">
            <summary>
            Updates the attributes.
            </summary>
            <param name="type">The type (should be a <see cref="T:Rock.Attribute.IHasAttributes"/> object.</param>
            <param name="entityTypeId">The entity type id.</param>
            <param name="rockContext">The rock context.</param>
            <returns></returns>
            <remarks>
            If a rockContext value is included, this method will save any previous changes made to the context
            </remarks>
        </member>
        <member name="M:Rock.Attribute.Helper.UpdateAttributes(System.Type,System.Nullable{System.Int32},System.String,System.String,Rock.Data.RockContext)">
            <summary>
            Uses reflection to find any <see cref="T:Rock.Attribute.FieldAttribute"/> attributes for the specified type and will create and/or update
            a <see cref="T:Rock.Model.Attribute"/> record for each attribute defined.
            </summary>
            <param name="type">The type (should be a <see cref="T:Rock.Attribute.IHasAttributes"/> object.</param>
            <param name="entityTypeId">The entity type id.</param>
            <param name="entityQualifierColumn">The entity qualifier column.</param>
            <param name="entityQualifierValue">The entity qualifier value.</param>
            <param name="rockContext">The rock context.</param>
            <returns></returns>
            <remarks>
            If a rockContext value is included, this method will save any previous changes made to the context
            </remarks>
        </member>
        <member name="M:Rock.Attribute.Helper.UpdateAttribute(Rock.Attribute.FieldAttribute,System.Nullable{System.Int32},System.String,System.String,Rock.Data.RockContext)">
            <summary>
            Adds or Updates a <see cref="T:Rock.Model.Attribute"/> item for the attribute.
            </summary>
            <param name="property">The property.</param>
            <param name="entityTypeId">The entity type id.</param>
            <param name="entityQualifierColumn">The entity qualifier column.</param>
            <param name="entityQualifierValue">The entity qualifier value.</param>
            <param name="rockContext">The rock context.</param>
            <returns></returns>
            <remarks>
            If a rockContext value is included, this method will save any previous changes made to the context
            </remarks>
        </member>
        <member name="M:Rock.Attribute.Helper.LoadAttributes(Rock.Attribute.IHasAttributes,Rock.Data.RockContext)">
            <summary>
            Loads the <see cref="P:IHasAttributes.Attributes"/> and <see cref="P:IHasAttributes.AttributeValues"/> of any <see cref="T:Rock.Attribute.IHasAttributes"/> object
            </summary>
            <param name="entity">The item.</param>
            <param name="rockContext">The rock context.</param>
            <remarks>
            If a rockContext value is included, this method will save any previous changes made to the context
            </remarks>
        </member>
        <member name="M:Rock.Attribute.Helper.GetAttributeCategories(Rock.Attribute.IHasAttributes,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Gets the attribute categories.
            </summary>
            <param name="entity">The entity.</param>
            <param name="onlyIncludeGridColumns">if set to <c>true</c> will only include those attributes with the option to display in grid set to true</param>
            <param name="allowMultiple">if set to <c>true</c> returns the attribute in each of it's categories, if false, only returns attribut in first category.</param>
            <param name="supressOrdering">if set to <c>true</c> supresses reording (LoadAttributes() may perform custom ordering as is the case for group member attributes).</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Attribute.Helper.GetAttributeCategories(System.Collections.Generic.List{Rock.Web.Cache.AttributeCache},System.Boolean,System.Boolean)">
            <summary>
            Gets attributes grouped by category
            </summary>
            <param name="attributes">The attributes.</param>
            <param name="onlyIncludeGridColumns">if set to <c>true</c> will only include those attributes with the option to display in grid set to true</param>
            <param name="allowMultiple">if set to <c>true</c> returns the attribute in each of it's categories, if false, only returns attribut in first category.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Attribute.Helper.SaveAttributeEdits(Rock.Web.UI.Controls.AttributeEditor,System.Nullable{System.Int32},System.String,System.String,Rock.Data.RockContext)">
            <summary>
            Saves any attribute edits made using an Attribute Editor control
            </summary>
            <param name="edtAttribute">The edt attribute.</param>
            <param name="entityTypeId">The entity type identifier.</param>
            <param name="entityTypeQualifierColumn">The entity type qualifier column.</param>
            <param name="entityTypeQualifierValue">The entity type qualifier value.</param>
            <param name="rockContext">The rock context.</param>
            <returns></returns>
            <remarks>
            If a rockContext value is included, this method will save any previous changes made to the context
            </remarks>
        </member>
        <member name="M:Rock.Attribute.Helper.SaveAttributeEdits(Rock.Model.Attribute,System.Nullable{System.Int32},System.String,System.String,Rock.Data.RockContext)">
            <summary>
            Saves any attribute edits made to an attribute
            </summary>
            <param name="newAttribute">The new attribute.</param>
            <param name="entityTypeId">The entity type identifier.</param>
            <param name="entityTypeQualifierColumn">The entity type qualifier column.</param>
            <param name="entityTypeQualifierValue">The entity type qualifier value.</param>
            <param name="rockContext">The rock context.</param>
            <returns></returns>
            <remarks>
            If a rockContext value is included, this method will save any previous changes made to the context
            </remarks>
        </member>
        <member name="M:Rock.Attribute.Helper.SaveAttributeValues(Rock.Attribute.IHasAttributes,Rock.Data.RockContext)">
            <summary>
            Saves the attribute values.
            </summary>
            <param name="model">The model.</param>
            <param name="rockContext">The rock context.</param>
            <remarks>
            If a rockContext value is included, this method will save any previous changes made to the context
            </remarks>
        </member>
        <member name="M:Rock.Attribute.Helper.SaveAttributeValue(Rock.Attribute.IHasAttributes,Rock.Web.Cache.AttributeCache,System.String,Rock.Data.RockContext)">
            <summary>
            Saves an attribute value.
            </summary>
            <param name="model">The model.</param>
            <param name="attribute">The attribute.</param>
            <param name="newValue">The new value.</param>
            <param name="rockContext">The rock context.</param>
            <remarks>
            If a rockContext value is included, this method will save any previous changes made to the context
            </remarks>
        </member>
        <member name="M:Rock.Attribute.Helper.SaveAttributeValue(System.Int32,Rock.Web.Cache.AttributeCache,System.String,Rock.Data.RockContext)">
            <summary>
            Saves the attribute value.
            </summary>
            <param name="entityId">The entity identifier.</param>
            <param name="attribute">The attribute.</param>
            <param name="newValue">The new value.</param>
            <param name="rockContext">The rock context.</param>
            <remarks>
            If a rockContext value is included, this method will save any previous changes made to the context
            </remarks>
        </member>
        <member name="M:Rock.Attribute.Helper.SaveAttributeValues(Rock.Attribute.IHasAttributes,Rock.Web.Cache.AttributeCache,System.Collections.Generic.List{Rock.Model.AttributeValue},Rock.Data.RockContext)">
            <summary>
            Saves an attribute value.
            </summary>
            <param name="model">The model.</param>
            <param name="attribute">The attribute.</param>
            <param name="newValues">The new values.</param>
            <param name="rockContext">The rock context.</param>
            <remarks>
            If a rockContext value is included, this method will save any previous changes made to the context
            </remarks>
        </member>
        <member name="M:Rock.Attribute.Helper.CopyAttributes(Rock.Attribute.IHasAttributes,Rock.Attribute.IHasAttributes)">
            <summary>
            Copies the attributes from one entity to another
            </summary>
            <param name="source">The source.</param>
            <param name="target">The target.</param>
        </member>
        <member name="M:Rock.Attribute.Helper.AddEditControls(Rock.Attribute.IHasAttributes,System.Web.UI.Control,System.Boolean,System.String,System.Boolean)">
            <summary>
            Adds edit controls for each of the item's attributes
            </summary>
            <param name="item">The item.</param>
            <param name="parentControl">The parent control.</param>
            <param name="setValue">if set to <c>true</c> [set value].</param>
            <param name="validationGroup">The validation group.</param>
            <param name="supressOrdering">if set to <c>true</c> supresses reording (LoadAttributes() may perform custom ordering as is the case for group member attributes).</param>
        </member>
        <member name="M:Rock.Attribute.Helper.AddEditControls(Rock.Attribute.IHasAttributes,System.Web.UI.Control,System.Boolean,System.String,System.Collections.Generic.List{System.String},System.Boolean)">
            <summary>
            Adds edit controls for each of the item's attributes
            </summary>
            <param name="item">The item.</param>
            <param name="parentControl">The parent control.</param>
            <param name="setValue">if set to <c>true</c> [set value].</param>
            <param name="validationGroup">The validation group.</param>
            <param name="exclude">List of attribute names not to render</param>
            <param name="supressOrdering">if set to <c>true</c> supresses reording (LoadAttributes() may perform custom ordering as is the case for group member attributes).</param>
        </member>
        <member name="M:Rock.Attribute.Helper.AddEditControls(System.String,System.Collections.Generic.List{System.String},Rock.Attribute.IHasAttributes,System.Web.UI.Control,System.String,System.Boolean,System.Collections.Generic.List{System.String})">
            <summary>
            Adds the edit controls.
            </summary>
            <param name="category">The category.</param>
            <param name="attributeKeys">The attribute keys.</param>
            <param name="item">The item.</param>
            <param name="parentControl">The parent control.</param>
            <param name="validationGroup">The validation group.</param>
            <param name="setValue">if set to <c>true</c> [set value].</param>
            <param name="exclude">The exclude.</param>
        </member>
        <member name="M:Rock.Attribute.Helper.AddDisplayControls(Rock.Attribute.IHasAttributes,System.Web.UI.Control,System.Collections.Generic.List{System.String},System.Boolean)">
            <summary>
            Gets the display HTML.
            </summary>
            <param name="item">The item.</param>
            <param name="parentControl">The parent control.</param>
            <param name="exclude">The exclude.</param>
            <param name="supressOrdering">if set to <c>true</c> supresses reording (LoadAttributes() may perform custom ordering as is the case for group member attributes).</param>
        </member>
        <member name="M:Rock.Attribute.Helper.AddDisplayControls(Rock.Attribute.IHasAttributes,System.Collections.Generic.List{Rock.Attribute.AttributeCategory},System.Web.UI.Control,System.Collections.Generic.List{System.String})">
            <summary>
            Adds the display controls.
            </summary>
            <param name="item">The item.</param>
            <param name="attributeCategories">The attribute categories.</param>
            <param name="parentControl">The parent control.</param>
            <param name="exclude">The exclude.</param>
        </member>
        <member name="M:Rock.Attribute.Helper.GetEditValues(System.Web.UI.Control,Rock.Attribute.IHasAttributes)">
            <summary>
            Gets the edit values.
            </summary>
            <param name="parentControl">The parent control.</param>
            <param name="item">The item.</param>
        </member>
        <member name="T:Rock.Attribute.AttributeCategory">
            <summary>
            Attributes group by category
            </summary>
        </member>
        <member name="P:Rock.Attribute.AttributeCategory.Category">
            <summary>
            Gets or sets the category.
            </summary>
            <value>
            The category.
            </value>
        </member>
        <member name="P:Rock.Attribute.AttributeCategory.Attributes">
            <summary>
            Gets or sets the attributes.
            </summary>
            <value>
            The attributes.
            </value>
        </member>
        <member name="P:Rock.Attribute.AttributeCategory.CategoryName">
            <summary>
            Gets the name of the category.
            </summary>
            <value>
            The name of the category.
            </value>
        </member>
        <member name="T:Rock.Web.HttpModule">
            <summary>
            Provides application start, and module initialization and disposal events to the implementing class.
            </summary>
        </member>
        <member name="M:Rock.Web.HttpModule.Dispose">
            <summary>
            Disposes of the resources (other than memory) used by the module that implements <see cref="T:System.Web.IHttpModule"/>.
            </summary>
        </member>
        <member name="M:Rock.Web.HttpModule.Init(System.Web.HttpApplication)">
            <summary>
            Initializes a module and prepares it to handle requests.
            </summary>
            <param name="context">An <see cref="T:System.Web.HttpApplication"/> that provides access to the methods, properties, and events common to all application objects within an ASP.NET application</param>
        </member>
        <member name="M:Rock.Web.HttpModule.Application_Start(System.Web.HttpApplication)">
            <summary>
            Method that will be called once on application start.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="T:Rock.Web.PageReference">
            <summary>
            Helper class to work with the PageReference field type
            </summary>
        </member>
        <member name="M:Rock.Web.PageReference.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Web.PageReference"/> class.
            </summary>
        </member>
        <member name="M:Rock.Web.PageReference.#ctor(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Specialized.NameValueCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Web.PageReference"/> class.
            </summary>
            <param name="linkedPageValue">The linked page value.</param>
            <param name="parameters">The parameters.</param>
            <param name="queryString">The query string.</param>
        </member>
        <member name="M:Rock.Web.PageReference.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Web.PageReference"/> class.
            </summary>
            <param name="pageId">The page id.</param>
        </member>
        <member name="M:Rock.Web.PageReference.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Web.PageReference"/> class.
            </summary>
            <param name="pageId">The page id.</param>
            <param name="routeId">The route id.</param>
        </member>
        <member name="M:Rock.Web.PageReference.#ctor(System.Int32,System.Int32,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Web.PageReference"/> class.
            </summary>
            <param name="pageId">The page id.</param>
            <param name="routeId">The route id.</param>
            <param name="parameters">The route parameters.</param>
        </member>
        <member name="M:Rock.Web.PageReference.#ctor(System.Int32,System.Int32,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Specialized.NameValueCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Web.PageReference"/> class.
            </summary>
            <param name="pageId">The page id.</param>
            <param name="routeId">The route id.</param>
            <param name="parameters">The route parameters.</param>
            <param name="queryString">The query string.</param>
        </member>
        <member name="M:Rock.Web.PageReference.#ctor(Rock.Web.PageReference)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Web.PageReference"/> class.
            </summary>
            <param name="pageReference">The page reference.</param>
        </member>
        <member name="M:Rock.Web.PageReference.BuildUrl">
            <summary>
            Builds the URL.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.PageReference.GetRouteIdFromPageAndParms">
            <summary>
            Gets the route id from page and parms.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.PageReference.BuildRouteURL(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Builds the route URL.
            </summary>
            <param name="parms">The parms.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.PageReference.GetParentPageReferences(Rock.Web.UI.RockPage,Rock.Web.Cache.PageCache,Rock.Web.PageReference)">
            <summary>
            Gets the parent page references.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.PageReference.SavePageReferences(System.Collections.Generic.List{Rock.Web.PageReference})">
            <summary>
            Saves the history.
            </summary>
            <param name="pageReferences">The page references.</param>
        </member>
        <member name="P:Rock.Web.PageReference.PageId">
            <summary>
            Gets or sets the page id.
            </summary>
        </member>
        <member name="P:Rock.Web.PageReference.RouteId">
            <summary>
            Gets the route id.
            </summary>
        </member>
        <member name="P:Rock.Web.PageReference.Parameters">
            <summary>
            Gets the route parameters.
            </summary>
            <value>
            The route parameters.
            </value>
        </member>
        <member name="P:Rock.Web.PageReference.QueryString">
            <summary>
            Gets the query string.
            </summary>
            <value>
            The query string.
            </value>
        </member>
        <member name="P:Rock.Web.PageReference.BreadCrumbs">
            <summary>
            Gets or sets the bread crumbs.
            </summary>
            <value>
            The bread crumbs.
            </value>
        </member>
        <member name="P:Rock.Web.PageReference.IsValid">
            <summary>
            Gets a value indicating whether this instance is valid.
            </summary>
            <value>
              <c>true</c> if this instance is valid; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Rock.Reflection">
            <summary>
            Static helper methods for using Reflection
            </summary>
        </member>
        <member name="M:Rock.Reflection.FindTypes(System.Type)">
            <summary>
            Finds the all the types that implement or inherit from the baseType.  The baseType
            will not be included in the result
            </summary>
            <param name="baseType">base type.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Reflection.SearchAssembly(System.Reflection.Assembly,System.Type)">
            <summary>
            Searches the assembly.
            </summary>
            <param name="assembly">The assembly.</param>
            <param name="baseType">Type of the base.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Reflection.GetDisplayName(System.Type)">
            <summary>
            Returns the DisplayName Attribute value for a given type
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Rock.Reflection.GetCategory(System.Type)">
            <summary>
            Returns the Category Attribute value for a given type
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Rock.Reflection.GetDescription(System.Type)">
            <summary>
            Returns the Description Attribute value for a given type
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:Rock.Jobs.JobPulse">
            <summary>
            Job to keep a heartbeat of the job process so we know when the jobs stop working
            </summary>
        </member>
        <member name="M:Rock.Jobs.JobPulse.#ctor">
            <summary> 
            Empty constructor for job initilization
            <para>
            Jobs require a public empty constructor so that the
            scheduler can instantiate the class whenever it needs.
            </para>
            </summary>
        </member>
        <member name="M:Rock.Jobs.JobPulse.Execute(Quartz.IJobExecutionContext)">
            <summary> 
            Job that updates the JobPulse setting with the current date/time.
            This will allow us to notify an admin if the jobs stop running.
            
            Called by the <see cref="T:Quartz.IScheduler"/> when a
            <see cref="T:Quartz.ITrigger"/> fires that is associated with
            the <see cref="T:Quartz.IJob"/>.
            </summary>
        </member>
        <member name="M:Rock.Jobs.JobPulse.UpdateScheduledJobs(Quartz.IJobExecutionContext)">
            <summary>
            Updates the scheduled jobs.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="T:Rock.Jobs.RockJobListener">
            <summary>
            Summary description for JobListener
            </summary>
        </member>
        <member name="M:Rock.Jobs.RockJobListener.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Jobs.RockJobListener"/> class.
            </summary>
        </member>
        <member name="M:Rock.Jobs.RockJobListener.JobToBeExecuted(Quartz.IJobExecutionContext)">
            <summary>
            Called by the <see cref="T:Quartz.IScheduler"/> when a <see cref="T:Quartz.IJobDetail"/>
            is about to be executed (an associated <see cref="T:Quartz.ITrigger"/>
            has occurred).
            <para>
            This method will not be invoked if the execution of the Job was vetoed
            by a <see cref="T:Quartz.ITriggerListener"/>.
            </para>
            </summary>
            <param name="context"></param>
            <seealso cref="M:Rock.Jobs.RockJobListener.JobExecutionVetoed(Quartz.IJobExecutionContext)"/>
        </member>
        <member name="M:Rock.Jobs.RockJobListener.JobExecutionVetoed(Quartz.IJobExecutionContext)">
            <summary>
            Called by the <see cref="T:Quartz.IScheduler"/> when a <see cref="T:Quartz.IJobDetail"/>
            was about to be executed (an associated <see cref="T:Quartz.ITrigger"/>
            has occurred), but a <see cref="T:Quartz.ITriggerListener"/> vetoed it's
            execution.
            </summary>
            <param name="context"></param>
            <seealso cref="M:Rock.Jobs.RockJobListener.JobToBeExecuted(Quartz.IJobExecutionContext)"/>
        </member>
        <member name="M:Rock.Jobs.RockJobListener.JobWasExecuted(Quartz.IJobExecutionContext,Quartz.JobExecutionException)">
            <summary>
            Called by the <see cref="T:Quartz.IScheduler"/> after a <see cref="T:Quartz.IJobDetail"/>
            has been executed, and before the associated <see cref="T:Quartz.Spi.IOperableTrigger"/>'s
            <see cref="M:Quartz.Spi.IOperableTrigger.Triggered(Quartz.ICalendar)"/> method has been called.
            </summary>
            <param name="context"></param>
            <param name="jobException"></param>
        </member>
        <member name="P:Rock.Jobs.RockJobListener.Name">
            <summary>
            Get the name of the <see cref="T:Quartz.IJobListener"/>.
            </summary>
        </member>
        <member name="T:Rock.Data.KeyEntity">
            <summary>
            Object used for current model (context) implementation 
            </summary>
        </member>
        <member name="T:Rock.Data.RockContext">
            <summary>
            Entity Framework Context
            </summary>
        </member>
        <member name="M:Rock.Data.RockContext.OnModelCreating(System.Data.Entity.DbModelBuilder)">
            <summary>
            This method is called when the context has been initialized, but
            before the model has been locked down and used to initialize the context. 
            </summary>
            <param name="modelBuilder">The builder that defines the model for the context being created.</param>
        </member>
        <member name="P:Rock.Data.RockContext.Attendances">
            <summary>
            Gets or sets the attendances.
            </summary>
            <value>
            The attendances.
            </value>
        </member>
        <member name="P:Rock.Data.RockContext.AttendanceCodes">
            <summary>
            Gets or sets the attendance codes.
            </summary>
            <value>
            The attendance codes.
            </value>
        </member>
        <member name="P:Rock.Data.RockContext.Attributes">
            <summary>
            Gets or sets the Attributes.
            </summary>
            <value>
            the Attributes.
            </value>
        </member>
        <member name="P:Rock.Data.RockContext.AttributeQualifiers">
            <summary>
            Gets or sets the Attribute Qualifiers.
            </summary>
            <value>
            the Attribute Qualifiers.
            </value>
        </member>
        <member name="P:Rock.Data.RockContext.AttributeValues">
            <summary>
            Gets or sets the Attribute Values.
            </summary>
            <value>
            the Attribute Values.
            </value>
        </member>
        <member name="P:Rock.Data.RockContext.Audits">
            <summary>
            Gets or sets the Attribute Values.
            </summary>
            <value>
            the Attribute Values.
            </value>
        </member>
        <member name="P:Rock.Data.RockContext.Auths">
            <summary>
            Gets or sets the Auths.
            </summary>
            <value>
            the Auths.
            </value>
        </member>
        <member name="P:Rock.Data.RockContext.BinaryFiles">
            <summary>
            Gets or sets the Files.
            </summary>
            <value>
            the Files.
            </value>
        </member>
        <member name="P:Rock.Data.RockContext.BinaryFilesData">
            <summary>
            Gets or sets the Files data.
            </summary>
            <value>
            the Files data
            </value>
        </member>
        <member name="P:Rock.Data.RockContext.BinaryFileTypes">
            <summary>
            Gets or sets the Binary File Types.
            </summary>
            <value>
            the Binary File Types.
            </value>
        </member>
        <member name="P:Rock.Data.RockContext.Blocks">
            <summary>
            Gets or sets the Blocks.
            </summary>
            <value>
            the Blocks.
            </value>
        </member>
        <member name="P:Rock.Data.RockContext.BlockTypes">
            <summary>
            Gets or sets the Block Types.
            </summary>
            <value>
            the Block Types.
            </value>
        </member>
        <member name="P:Rock.Data.RockContext.Campuses">
            <summary>
            Gets or sets the Campuses.
            </summary>
            <value>
            the Campuses.
            </value>
        </member>
        <member name="P:Rock.Data.RockContext.Categories">
            <summary>
            Gets or sets the categories.
            </summary>
            <value>
            The categories.
            </value>
        </member>
        <member name="P:Rock.Data.RockContext.Communications">
            <summary>
            Gets or sets the communications.
            </summary>
            <value>
            The communications.
            </value>
        </member>
        <member name="P:Rock.Data.RockContext.CommunicationRecipients">
            <summary>
            Gets or sets the communication recipients.
            </summary>
            <value>
            The communication recipients.
            </value>
        </member>
        <member name="P:Rock.Data.RockContext.CommunicationTemplates">
            <summary>
            Gets or sets the communication templates.
            </summary>
            <value>
            The communication templates.
            </value>
        </member>
        <member name="P:Rock.Data.RockContext.DataViews">
            <summary>
            Gets or sets the data views.
            </summary>
            <value>
            The data views.
            </value>
        </member>
        <member name="P:Rock.Data.RockContext.DataViewFilters">
            <summary>
            Gets or sets the data view filters.
            </summary>
            <value>
            The data view filters.
            </value>
        </member>
        <member name="P:Rock.Data.RockContext.DefinedTypes">
            <summary>
            Gets or sets the Defined Types.
            </summary>
            <value>
            the Defined Types.
            </value>
        </member>
        <member name="P:Rock.Data.RockContext.DefinedValues">
            <summary>
            Gets or sets the Defined Values.
            </summary>
            <value>
            the Defined Values.
            </value>
        </member>
        <member name="P:Rock.Data.RockContext.Devices">
            <summary>
            Gets or sets the devices.
            </summary>
            <value>
            The devices.
            </value>
        </member>
        <member name="P:Rock.Data.RockContext.EmailTemplates">
            <summary>
            Gets or sets the Email Templates.
            </summary>
            <value>
            the Email Templates.
            </value>
        </member>
        <member name="P:Rock.Data.RockContext.EntityTypes">
            <summary>
            Gets or sets the entity types.
            </summary>
            <value>
            The entity types.
            </value>
        </member>
        <member name="P:Rock.Data.RockContext.ExceptionLogs">
            <summary>
            Gets or sets the Exception Logs.
            </summary>
            <value>
            the Exception Logs.
            </value>
        </member>
        <member name="P:Rock.Data.RockContext.FieldTypes">
            <summary>
            Gets or sets the Field Types.
            </summary>
            <value>
            the Field Types.
            </value>
        </member>
        <member name="P:Rock.Data.RockContext.FinancialAccounts">
            <summary>
            Gets or sets the accounts.
            </summary>
            <value>
            The fund.
            </value>
        </member>
        <member name="P:Rock.Data.RockContext.FinancialBatches">
            <summary>
            Gets or sets the batches.
            </summary>
            <value>
            The batches.
            </value>
        </member>
        <member name="P:Rock.Data.RockContext.FinancialPledges">
            <summary>
            Gets or sets the pledges.
            </summary>
            <value>
            The pledges.
            </value>
        </member>
        <member name="P:Rock.Data.RockContext.FinancialPersonBankAccounts">
            <summary>
            Gets or sets the financial person bank account.
            </summary>
            <value>
            The financial person bank account.
            </value>
        </member>
        <member name="P:Rock.Data.RockContext.FinancialPersonSavedAccounts">
            <summary>
            Gets or sets the financial person saved account.
            </summary>
            <value>
            The financial person saved account.
            </value>
        </member>
        <member name="P:Rock.Data.RockContext.FinancialScheduledTransactions">
            <summary>
            Gets or sets the financial scheduled transactions.
            </summary>
            <value>
            The financial scheduled transactions.
            </value>
        </member>
        <member name="P:Rock.Data.RockContext.FinancialScheduledTransactionDetails">
            <summary>
            Gets or sets the financial scheduled transaction details.
            </summary>
            <value>
            The financial scheduled transaction details.
            </value>
        </member>
        <member name="P:Rock.Data.RockContext.FinancialTransactions">
            <summary>
            Gets or sets the transactions.
            </summary>
            <value>
            The transactions.
            </value>
        </member>
        <member name="P:Rock.Data.RockContext.FinancialTransactionDetails">
            <summary>
            Gets or sets the transaction details.
            </summary>
            <value>
            The transaction details.
            </value>
        </member>
        <member name="P:Rock.Data.RockContext.FinancialTransactionImages">
            <summary>
            Gets or sets the transaction details.
            </summary>
            <value>
            The transaction details.
            </value>
        </member>
        <member name="P:Rock.Data.RockContext.FinancialTransactionRefunds">
            <summary>
            Gets or sets the financial transaction refunds.
            </summary>
            <value>
            The financial transaction refunds.
            </value>
        </member>
        <member name="P:Rock.Data.RockContext.Followings">
            <summary>
            Gets or sets the followings.
            </summary>
            <value>
            The followings.
            </value>
        </member>
        <member name="P:Rock.Data.RockContext.Groups">
            <summary>
            Gets or sets the Groups.
            </summary>
            <value>
            the Groups.
            </value>
        </member>
        <member name="P:Rock.Data.RockContext.GroupLocations">
            <summary>
            Gets or sets the Group Locations.
            </summary>
            <value>
            the Group Locations.
            </value>
        </member>
        <member name="P:Rock.Data.RockContext.GroupMembers">
            <summary>
            Gets or sets the Members.
            </summary>
            <value>
            the Members.
            </value>
        </member>
        <member name="P:Rock.Data.RockContext.GroupRoles">
            <summary>
            Gets or sets the Group Roles.
            </summary>
            <value>
            the Group Roles.
            </value>
        </member>
        <member name="P:Rock.Data.RockContext.GroupTypes">
            <summary>
            Gets or sets the Group Types.
            </summary>
            <value>
            the Group Types.
            </value>
        </member>
        <member name="P:Rock.Data.RockContext.Histories">
            <summary>
            Gets or sets the histories.
            </summary>
            <value>
            The histories.
            </value>
        </member>
        <member name="P:Rock.Data.RockContext.HtmlContents">
            <summary>
            Gets or sets the Html Contents.
            </summary>
            <value>
            the Html Contents.
            </value>
        </member>
        <member name="P:Rock.Data.RockContext.Locations">
            <summary>
            Gets or sets the Location.
            </summary>
            <value>
            the Location.
            </value>
        </member>
        <member name="P:Rock.Data.RockContext.MarketingCampaigns">
            <summary>
            Gets or sets the marketing campaigns.
            </summary>
            <value>
            The marketing campaigns.
            </value>
        </member>
        <member name="P:Rock.Data.RockContext.MarketingCampaignAds">
            <summary>
            Gets or sets the marketing campaign ads.
            </summary>
            <value>
            The marketing campaign ads.
            </value>
        </member>
        <member name="P:Rock.Data.RockContext.MarketingCampaignAdTypes">
            <summary>
            Gets or sets the marketing campaign ad types.
            </summary>
            <value>
            The marketing campaign ad types.
            </value>
        </member>
        <member name="P:Rock.Data.RockContext.MarketingCampaignAudiences">
            <summary>
            Gets or sets the marketing campaign audiences.
            </summary>
            <value>
            The marketing campaign audiences.
            </value>
        </member>
        <member name="P:Rock.Data.RockContext.MarketingCampaignCampuses">
            <summary>
            Gets or sets the marketing campaign campuses.
            </summary>
            <value>
            The marketing campaign campuses.
            </value>
        </member>
        <member name="P:Rock.Data.RockContext.Metaphones">
            <summary>
            Gets or sets the metaphones.
            </summary>
            <value>
            The metaphones.
            </value>
        </member>
        <member name="P:Rock.Data.RockContext.Metrics">
            <summary>
            Gets or sets the Defined Types.
            </summary>
            <value>
            the Defined Types.
            </value>
        </member>
        <member name="P:Rock.Data.RockContext.MetricValues">
            <summary>
            Gets or sets the Defined Values.
            </summary>
            <value>
            the Defined Values.
            </value>
        </member>
        <member name="P:Rock.Data.RockContext.Notes">
            <summary>
            Gets or sets the notes.
            </summary>
            <value>
            The notes.
            </value>
        </member>
        <member name="P:Rock.Data.RockContext.NoteTypes">
            <summary>
            Gets or sets the note types.
            </summary>
            <value>
            The note types.
            </value>
        </member>
        <member name="P:Rock.Data.RockContext.Pages">
            <summary>
            Gets or sets the Pages.
            </summary>
            <value>
            the Pages.
            </value>
        </member>
        <member name="P:Rock.Data.RockContext.PageContexts">
            <summary>
            Gets or sets the page contexts.
            </summary>
            <value>
            The page contexts.
            </value>
        </member>
        <member name="P:Rock.Data.RockContext.PageRoutes">
            <summary>
            Gets or sets the Page Routes.
            </summary>
            <value>
            the Page Routes.
            </value>
        </member>
        <member name="P:Rock.Data.RockContext.PageViews">
            <summary>
            Gets or sets the page views.
            </summary>
            <value>
            The page views.
            </value>
        </member>
        <member name="P:Rock.Data.RockContext.People">
            <summary>
            Gets or sets the People.
            </summary>
            <value>
            the People.
            </value>
        </member>
        <member name="P:Rock.Data.RockContext.PersonAliases">
            <summary>
            Gets or sets the Person Aliases.
            </summary>
            <value>
            the Person aliases.
            </value>
        </member>
        <member name="P:Rock.Data.RockContext.PersonBadges">
            <summary>
            Gets or sets the person badge types.
            </summary>
            <value>
            The person badge types.
            </value>
        </member>
        <member name="P:Rock.Data.RockContext.PersonVieweds">
            <summary>
            Gets or sets the Person Vieweds.
            </summary>
            <value>
            the Person Vieweds.
            </value>
        </member>
        <member name="P:Rock.Data.RockContext.PhoneNumbers">
            <summary>
            Gets or sets the Phone Numbers.
            </summary>
            <value>
            the Phone Numbers.
            </value>
        </member>
        <member name="P:Rock.Data.RockContext.PluginMigrations">
            <summary>
            Gets or sets the plugin migrations.
            </summary>
            <value>
            The plugin migrations.
            </value>
        </member>
        <member name="P:Rock.Data.RockContext.PrayerRequests">
            <summary>
            Gets or sets the prayer requests.
            </summary>
            <value>
            The prayer requests.
            </value>
        </member>
        <member name="P:Rock.Data.RockContext.Reports">
            <summary>
            Gets or sets the reports.
            </summary>
            <value>
            The reports.
            </value>
        </member>
        <member name="P:Rock.Data.RockContext.ReportFields">
            <summary>
            Gets or sets the report fields.
            </summary>
            <value>
            The report fields.
            </value>
        </member>
        <member name="P:Rock.Data.RockContext.RestActions">
            <summary>
            Gets or sets the REST Actions.
            </summary>
            <value>
            The reports.
            </value>
        </member>
        <member name="P:Rock.Data.RockContext.RestControllers">
            <summary>
            Gets or sets the REST Controllers.
            </summary>
            <value>
            The reports.
            </value>
        </member>
        <member name="P:Rock.Data.RockContext.Schedules">
            <summary>
            Gets or sets the schedules.
            </summary>
            <value>
            The schedules.
            </value>
        </member>
        <member name="P:Rock.Data.RockContext.ServiceJobs">
            <summary>
            Gets or sets the Jobs.
            </summary>
            <value>
            the Jobs.
            </value>
        </member>
        <member name="P:Rock.Data.RockContext.ServiceLogs">
            <summary>
            Gets or sets the Service Logs.
            </summary>
            <value>
            the Service Logs.
            </value>
        </member>
        <member name="P:Rock.Data.RockContext.Sites">
            <summary>
            Gets or sets the Sites.
            </summary>
            <value>
            the Sites.
            </value>
        </member>
        <member name="P:Rock.Data.RockContext.SiteDomains">
            <summary>
            Gets or sets the Site Domains.
            </summary>
            <value>
            the Site Domains.
            </value>
        </member>
        <member name="P:Rock.Data.RockContext.Tags">
            <summary>
            Gets or sets the Tags.
            </summary>
            <value>
            the Tags.
            </value>
        </member>
        <member name="P:Rock.Data.RockContext.TaggedItems">
            <summary>
            Gets or sets the Tagged Items.
            </summary>
            <value>
            the Tagged Items.
            </value>
        </member>
        <member name="P:Rock.Data.RockContext.UserLogins">
            <summary>
            Gets or sets the Users.
            </summary>
            <value>
            the Users.
            </value>
        </member>
        <member name="P:Rock.Data.RockContext.Workflows">
            <summary>
            Gets or sets the workflows.
            </summary>
            <value>
            The workflows.
            </value>
        </member>
        <member name="P:Rock.Data.RockContext.WorkflowActions">
            <summary>
            Gets or sets the workflow actions.
            </summary>
            <value>
            The workflow actions.
            </value>
        </member>
        <member name="P:Rock.Data.RockContext.WorkflowActionTypes">
            <summary>
            Gets or sets the workflow action types.
            </summary>
            <value>
            The workflow action types.
            </value>
        </member>
        <member name="P:Rock.Data.RockContext.WorkflowActivities">
            <summary>
            Gets or sets the workflow activities.
            </summary>
            <value>
            The workflow activities.
            </value>
        </member>
        <member name="P:Rock.Data.RockContext.WorkflowActivityTypes">
            <summary>
            Gets or sets the workflow activity types.
            </summary>
            <value>
            The workflow activity types.
            </value>
        </member>
        <member name="P:Rock.Data.RockContext.WorkflowActionForms">
            <summary>
            Gets or sets the workflow action form.
            </summary>
            <value>
            The workflow action form.
            </value>
        </member>
        <member name="P:Rock.Data.RockContext.WorkflowActionFormAttributes">
            <summary>
            Gets or sets the workflow form attributes.
            </summary>
            <value>
            The workflow form attributes.
            </value>
        </member>
        <member name="P:Rock.Data.RockContext.WorkflowLogs">
            <summary>
            Gets or sets the workflow logs.
            </summary>
            <value>
            The workflow logs.
            </value>
        </member>
        <member name="P:Rock.Data.RockContext.WorkflowTriggers">
            <summary>
            Gets or sets the workflow triggers.
            </summary>
            <value>
            The entity type workflow triggers.
            </value>
        </member>
        <member name="P:Rock.Data.RockContext.WorkflowTypes">
            <summary>
            Gets or sets the workflow types.
            </summary>
            <value>
            The workflow types.
            </value>
        </member>
        <member name="T:Rock.Data.ContextHelper">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Data.ContextHelper.AddConfigurations(System.Data.Entity.DbModelBuilder)">
            <summary>
            Adds the configurations.
            </summary>
            <param name="modelBuilder">The model builder.</param>
        </member>
        <member name="T:Rock.MelissaData.AddressCheck.RequestArray">
            <remarks/>
        </member>
        <member name="P:Rock.MelissaData.AddressCheck.RequestArray.TransmissionReference">
            <remarks/>
        </member>
        <member name="P:Rock.MelissaData.AddressCheck.RequestArray.CustomerID">
            <remarks/>
        </member>
        <member name="P:Rock.MelissaData.AddressCheck.RequestArray.OptAddressParsed">
            <remarks/>
        </member>
        <member name="P:Rock.MelissaData.AddressCheck.RequestArray.Record">
            <remarks/>
        </member>
        <member name="T:Rock.MelissaData.AddressCheck.RequestArrayRecord">
            <remarks/>
        </member>
        <member name="P:Rock.MelissaData.AddressCheck.RequestArrayRecord.RecordID">
            <remarks/>
        </member>
        <member name="P:Rock.MelissaData.AddressCheck.RequestArrayRecord.Company">
            <remarks/>
        </member>
        <member name="P:Rock.MelissaData.AddressCheck.RequestArrayRecord.LastName">
            <remarks/>
        </member>
        <member name="P:Rock.MelissaData.AddressCheck.RequestArrayRecord.Urbanization">
            <remarks/>
        </member>
        <member name="P:Rock.MelissaData.AddressCheck.RequestArrayRecord.AddressLine1">
            <remarks/>
        </member>
        <member name="P:Rock.MelissaData.AddressCheck.RequestArrayRecord.AddressLine2">
            <remarks/>
        </member>
        <member name="P:Rock.MelissaData.AddressCheck.RequestArrayRecord.Suite">
            <remarks/>
        </member>
        <member name="P:Rock.MelissaData.AddressCheck.RequestArrayRecord.City">
            <remarks/>
        </member>
        <member name="P:Rock.MelissaData.AddressCheck.RequestArrayRecord.State">
            <remarks/>
        </member>
        <member name="P:Rock.MelissaData.AddressCheck.RequestArrayRecord.Zip">
            <remarks/>
        </member>
        <member name="P:Rock.MelissaData.AddressCheck.RequestArrayRecord.Plus4">
            <remarks/>
        </member>
        <member name="P:Rock.MelissaData.AddressCheck.RequestArrayRecord.Country">
            <remarks/>
        </member>
        <member name="T:Rock.MelissaData.AddressCheck.ResponseArray">
            <remarks/>
        </member>
        <member name="P:Rock.MelissaData.AddressCheck.ResponseArray.Version">
            <remarks/>
        </member>
        <member name="P:Rock.MelissaData.AddressCheck.ResponseArray.TransmissionReference">
            <remarks/>
        </member>
        <member name="P:Rock.MelissaData.AddressCheck.ResponseArray.Results">
            <remarks/>
        </member>
        <member name="P:Rock.MelissaData.AddressCheck.ResponseArray.TotalRecords">
            <remarks/>
        </member>
        <member name="P:Rock.MelissaData.AddressCheck.ResponseArray.Record">
            <remarks/>
        </member>
        <member name="T:Rock.MelissaData.AddressCheck.ResponseArrayRecord">
            <remarks/>
        </member>
        <member name="P:Rock.MelissaData.AddressCheck.ResponseArrayRecord.RecordID">
            <remarks/>
        </member>
        <member name="P:Rock.MelissaData.AddressCheck.ResponseArrayRecord.Results">
            <remarks/>
        </member>
        <member name="P:Rock.MelissaData.AddressCheck.ResponseArrayRecord.Address">
            <remarks/>
        </member>
        <member name="T:Rock.MelissaData.AddressCheck.ResponseArrayRecordAddress">
            <remarks/>
        </member>
        <member name="P:Rock.MelissaData.AddressCheck.ResponseArrayRecordAddress.Company">
            <remarks/>
        </member>
        <member name="P:Rock.MelissaData.AddressCheck.ResponseArrayRecordAddress.Urbanization">
            <remarks/>
        </member>
        <member name="P:Rock.MelissaData.AddressCheck.ResponseArrayRecordAddress.Address1">
            <remarks/>
        </member>
        <member name="P:Rock.MelissaData.AddressCheck.ResponseArrayRecordAddress.Address2">
            <remarks/>
        </member>
        <member name="P:Rock.MelissaData.AddressCheck.ResponseArrayRecordAddress.Suite">
            <remarks/>
        </member>
        <member name="P:Rock.MelissaData.AddressCheck.ResponseArrayRecordAddress.PrivateMailBox">
            <remarks/>
        </member>
        <member name="P:Rock.MelissaData.AddressCheck.ResponseArrayRecordAddress.City">
            <remarks/>
        </member>
        <member name="P:Rock.MelissaData.AddressCheck.ResponseArrayRecordAddress.State">
            <remarks/>
        </member>
        <member name="P:Rock.MelissaData.AddressCheck.ResponseArrayRecordAddress.Zip">
            <remarks/>
        </member>
        <member name="P:Rock.MelissaData.AddressCheck.ResponseArrayRecordAddress.Plus4">
            <remarks/>
        </member>
        <member name="P:Rock.MelissaData.AddressCheck.ResponseArrayRecordAddress.CarrierRoute">
            <remarks/>
        </member>
        <member name="P:Rock.MelissaData.AddressCheck.ResponseArrayRecordAddress.DeliveryPointCode">
            <remarks/>
        </member>
        <member name="P:Rock.MelissaData.AddressCheck.ResponseArrayRecordAddress.DeliveryPointCheckDigit">
            <remarks/>
        </member>
        <member name="P:Rock.MelissaData.AddressCheck.ResponseArrayRecordAddress.CongressionalDistrict">
            <remarks/>
        </member>
        <member name="P:Rock.MelissaData.AddressCheck.ResponseArrayRecordAddress.Type">
            <remarks/>
        </member>
        <member name="P:Rock.MelissaData.AddressCheck.ResponseArrayRecordAddress.Country">
            <remarks/>
        </member>
        <member name="P:Rock.MelissaData.AddressCheck.ResponseArrayRecordAddress.AddressKey">
            <remarks/>
        </member>
        <member name="P:Rock.MelissaData.AddressCheck.ResponseArrayRecordAddress.Parsed">
            <remarks/>
        </member>
        <member name="T:Rock.MelissaData.AddressCheck.ResponseArrayRecordAddressUrbanization">
            <remarks/>
        </member>
        <member name="P:Rock.MelissaData.AddressCheck.ResponseArrayRecordAddressUrbanization.Name">
            <remarks/>
        </member>
        <member name="T:Rock.MelissaData.AddressCheck.ResponseArrayRecordAddressCity">
            <remarks/>
        </member>
        <member name="P:Rock.MelissaData.AddressCheck.ResponseArrayRecordAddressCity.Name">
            <remarks/>
        </member>
        <member name="P:Rock.MelissaData.AddressCheck.ResponseArrayRecordAddressCity.Abbreviation">
            <remarks/>
        </member>
        <member name="T:Rock.MelissaData.AddressCheck.ResponseArrayRecordAddressState">
            <remarks/>
        </member>
        <member name="P:Rock.MelissaData.AddressCheck.ResponseArrayRecordAddressState.Name">
            <remarks/>
        </member>
        <member name="P:Rock.MelissaData.AddressCheck.ResponseArrayRecordAddressState.Abbreviation">
            <remarks/>
        </member>
        <member name="T:Rock.MelissaData.AddressCheck.ResponseArrayRecordAddressType">
            <remarks/>
        </member>
        <member name="P:Rock.MelissaData.AddressCheck.ResponseArrayRecordAddressType.Address">
            <remarks/>
        </member>
        <member name="P:Rock.MelissaData.AddressCheck.ResponseArrayRecordAddressType.Zip">
            <remarks/>
        </member>
        <member name="T:Rock.MelissaData.AddressCheck.ResponseArrayRecordAddressTypeAddress">
            <remarks/>
        </member>
        <member name="P:Rock.MelissaData.AddressCheck.ResponseArrayRecordAddressTypeAddress.Code">
            <remarks/>
        </member>
        <member name="P:Rock.MelissaData.AddressCheck.ResponseArrayRecordAddressTypeAddress.Description">
            <remarks/>
        </member>
        <member name="T:Rock.MelissaData.AddressCheck.ResponseArrayRecordAddressTypeZip">
            <remarks/>
        </member>
        <member name="P:Rock.MelissaData.AddressCheck.ResponseArrayRecordAddressTypeZip.Code">
            <remarks/>
        </member>
        <member name="P:Rock.MelissaData.AddressCheck.ResponseArrayRecordAddressTypeZip.Description">
            <remarks/>
        </member>
        <member name="T:Rock.MelissaData.AddressCheck.ResponseArrayRecordAddressCountry">
            <remarks/>
        </member>
        <member name="P:Rock.MelissaData.AddressCheck.ResponseArrayRecordAddressCountry.Abbreviation">
            <remarks/>
        </member>
        <member name="P:Rock.MelissaData.AddressCheck.ResponseArrayRecordAddressCountry.Name">
            <remarks/>
        </member>
        <member name="T:Rock.MelissaData.AddressCheck.ResponseArrayRecordAddressParsed">
            <remarks/>
        </member>
        <member name="P:Rock.MelissaData.AddressCheck.ResponseArrayRecordAddressParsed.StreetName">
            <remarks/>
        </member>
        <member name="P:Rock.MelissaData.AddressCheck.ResponseArrayRecordAddressParsed.AddressRange">
            <remarks/>
        </member>
        <member name="P:Rock.MelissaData.AddressCheck.ResponseArrayRecordAddressParsed.Suffix">
            <remarks/>
        </member>
        <member name="P:Rock.MelissaData.AddressCheck.ResponseArrayRecordAddressParsed.Direction">
            <remarks/>
        </member>
        <member name="P:Rock.MelissaData.AddressCheck.ResponseArrayRecordAddressParsed.Suite">
            <remarks/>
        </member>
        <member name="P:Rock.MelissaData.AddressCheck.ResponseArrayRecordAddressParsed.PrivateMailbox">
            <remarks/>
        </member>
        <member name="P:Rock.MelissaData.AddressCheck.ResponseArrayRecordAddressParsed.Garbage">
            <remarks/>
        </member>
        <member name="P:Rock.MelissaData.AddressCheck.ResponseArrayRecordAddressParsed.RouteService">
            <remarks/>
        </member>
        <member name="P:Rock.MelissaData.AddressCheck.ResponseArrayRecordAddressParsed.LockBox">
            <remarks/>
        </member>
        <member name="P:Rock.MelissaData.AddressCheck.ResponseArrayRecordAddressParsed.DeliveryInstallation">
            <remarks/>
        </member>
        <member name="T:Rock.MelissaData.AddressCheck.ResponseArrayRecordAddressParsedDirection">
            <remarks/>
        </member>
        <member name="P:Rock.MelissaData.AddressCheck.ResponseArrayRecordAddressParsedDirection.Post">
            <remarks/>
        </member>
        <member name="P:Rock.MelissaData.AddressCheck.ResponseArrayRecordAddressParsedDirection.Pre">
            <remarks/>
        </member>
        <member name="T:Rock.MelissaData.AddressCheck.ResponseArrayRecordAddressParsedSuite">
            <remarks/>
        </member>
        <member name="P:Rock.MelissaData.AddressCheck.ResponseArrayRecordAddressParsedSuite.Range">
            <remarks/>
        </member>
        <member name="P:Rock.MelissaData.AddressCheck.ResponseArrayRecordAddressParsedSuite.Name">
            <remarks/>
        </member>
        <member name="T:Rock.MelissaData.AddressCheck.ResponseArrayRecordAddressParsedPrivateMailbox">
            <remarks/>
        </member>
        <member name="P:Rock.MelissaData.AddressCheck.ResponseArrayRecordAddressParsedPrivateMailbox.Name">
            <remarks/>
        </member>
        <member name="P:Rock.MelissaData.AddressCheck.ResponseArrayRecordAddressParsedPrivateMailbox.Range">
            <remarks/>
        </member>
        <member name="T:Rock.ServiceObjects.GeoCoder.Location">
            <remarks/>
        </member>
        <member name="P:Rock.ServiceObjects.GeoCoder.Location.Error">
            <remarks/>
        </member>
        <member name="P:Rock.ServiceObjects.GeoCoder.Location.Latitude">
            <remarks/>
        </member>
        <member name="P:Rock.ServiceObjects.GeoCoder.Location.Longitude">
            <remarks/>
        </member>
        <member name="P:Rock.ServiceObjects.GeoCoder.Location.Zip">
            <remarks/>
        </member>
        <member name="P:Rock.ServiceObjects.GeoCoder.Location.Tract">
            <remarks/>
        </member>
        <member name="P:Rock.ServiceObjects.GeoCoder.Location.Block">
            <remarks/>
        </member>
        <member name="P:Rock.ServiceObjects.GeoCoder.Location.Level">
            <remarks/>
        </member>
        <member name="P:Rock.ServiceObjects.GeoCoder.Location.LevelDescription">
            <remarks/>
        </member>
        <member name="T:Rock.ServiceObjects.GeoCoder.Err">
            <remarks/>
        </member>
        <member name="P:Rock.ServiceObjects.GeoCoder.Err.Desc">
            <remarks/>
        </member>
        <member name="P:Rock.ServiceObjects.GeoCoder.Err.Number">
            <remarks/>
        </member>
        <member name="P:Rock.ServiceObjects.GeoCoder.Err.Location">
            <remarks/>
        </member>
        <member name="T:Rock.ServiceObjects.GeoCoder.DistanceBetweenInfo">
            <remarks/>
        </member>
        <member name="P:Rock.ServiceObjects.GeoCoder.DistanceBetweenInfo.Error">
            <remarks/>
        </member>
        <member name="P:Rock.ServiceObjects.GeoCoder.DistanceBetweenInfo.MilesBetween">
            <remarks/>
        </member>
        <member name="P:Rock.ServiceObjects.GeoCoder.DistanceBetweenInfo.KilometersBetween">
            <remarks/>
        </member>
        <member name="P:Rock.ServiceObjects.GeoCoder.DistanceBetweenInfo.FeetBetween">
            <remarks/>
        </member>
        <member name="T:Rock.ServiceObjects.GeoCoder.DistanceToWaterInfo">
            <remarks/>
        </member>
        <member name="P:Rock.ServiceObjects.GeoCoder.DistanceToWaterInfo.Error">
            <remarks/>
        </member>
        <member name="P:Rock.ServiceObjects.GeoCoder.DistanceToWaterInfo.MilesToWater">
            <remarks/>
        </member>
        <member name="P:Rock.ServiceObjects.GeoCoder.DistanceToWaterInfo.Latitude">
            <remarks/>
        </member>
        <member name="P:Rock.ServiceObjects.GeoCoder.DistanceToWaterInfo.Longitude">
            <remarks/>
        </member>
        <member name="P:Rock.ServiceObjects.GeoCoder.DistanceToWaterInfo.ClosestWaterLatitude">
            <remarks/>
        </member>
        <member name="P:Rock.ServiceObjects.GeoCoder.DistanceToWaterInfo.ClosestWaterLongitude">
            <remarks/>
        </member>
        <member name="T:Rock.ServiceObjects.GeoCoder.ReverseAddress">
            <remarks/>
        </member>
        <member name="P:Rock.ServiceObjects.GeoCoder.ReverseAddress.Error">
            <remarks/>
        </member>
        <member name="P:Rock.ServiceObjects.GeoCoder.ReverseAddress.Address">
            <remarks/>
        </member>
        <member name="P:Rock.ServiceObjects.GeoCoder.ReverseAddress.City">
            <remarks/>
        </member>
        <member name="P:Rock.ServiceObjects.GeoCoder.ReverseAddress.State">
            <remarks/>
        </member>
        <member name="P:Rock.ServiceObjects.GeoCoder.ReverseAddress.Zip">
            <remarks/>
        </member>
        <member name="P:Rock.ServiceObjects.GeoCoder.ReverseAddress.County">
            <remarks/>
        </member>
        <member name="T:Rock.ServiceObjects.GeoCoder.GeocodeCityWorldwideInfo">
            <remarks/>
        </member>
        <member name="P:Rock.ServiceObjects.GeoCoder.GeocodeCityWorldwideInfo.City">
            <remarks/>
        </member>
        <member name="P:Rock.ServiceObjects.GeoCoder.GeocodeCityWorldwideInfo.Region">
            <remarks/>
        </member>
        <member name="P:Rock.ServiceObjects.GeoCoder.GeocodeCityWorldwideInfo.Country">
            <remarks/>
        </member>
        <member name="P:Rock.ServiceObjects.GeoCoder.GeocodeCityWorldwideInfo.Latitude">
            <remarks/>
        </member>
        <member name="P:Rock.ServiceObjects.GeoCoder.GeocodeCityWorldwideInfo.Longitude">
            <remarks/>
        </member>
        <member name="P:Rock.ServiceObjects.GeoCoder.GeocodeCityWorldwideInfo.Error">
            <remarks/>
        </member>
        <member name="T:Rock.ServiceObjects.GeoCoder.ZipCodeInfo">
            <remarks/>
        </member>
        <member name="P:Rock.ServiceObjects.GeoCoder.ZipCodeInfo.Error">
            <remarks/>
        </member>
        <member name="P:Rock.ServiceObjects.GeoCoder.ZipCodeInfo.City">
            <remarks/>
        </member>
        <member name="P:Rock.ServiceObjects.GeoCoder.ZipCodeInfo.State">
            <remarks/>
        </member>
        <member name="P:Rock.ServiceObjects.GeoCoder.ZipCodeInfo.County">
            <remarks/>
        </member>
        <member name="P:Rock.ServiceObjects.GeoCoder.ZipCodeInfo.AreaCode">
            <remarks/>
        </member>
        <member name="P:Rock.ServiceObjects.GeoCoder.ZipCodeInfo.CityAbbreviation">
            <remarks/>
        </member>
        <member name="P:Rock.ServiceObjects.GeoCoder.ZipCodeInfo.CityType">
            <remarks/>
        </member>
        <member name="P:Rock.ServiceObjects.GeoCoder.ZipCodeInfo.CountyFIPS">
            <remarks/>
        </member>
        <member name="P:Rock.ServiceObjects.GeoCoder.ZipCodeInfo.StateFIPS">
            <remarks/>
        </member>
        <member name="P:Rock.ServiceObjects.GeoCoder.ZipCodeInfo.TimeZone">
            <remarks/>
        </member>
        <member name="P:Rock.ServiceObjects.GeoCoder.ZipCodeInfo.DayLightSavings">
            <remarks/>
        </member>
        <member name="P:Rock.ServiceObjects.GeoCoder.ZipCodeInfo.MSA">
            <remarks/>
        </member>
        <member name="P:Rock.ServiceObjects.GeoCoder.ZipCodeInfo.MD">
            <remarks/>
        </member>
        <member name="P:Rock.ServiceObjects.GeoCoder.ZipCodeInfo.CBSA">
            <remarks/>
        </member>
        <member name="P:Rock.ServiceObjects.GeoCoder.ZipCodeInfo.PMSA">
            <remarks/>
        </member>
        <member name="P:Rock.ServiceObjects.GeoCoder.ZipCodeInfo.DMA">
            <remarks/>
        </member>
        <member name="P:Rock.ServiceObjects.GeoCoder.ZipCodeInfo.Latitude">
            <remarks/>
        </member>
        <member name="P:Rock.ServiceObjects.GeoCoder.ZipCodeInfo.Longitude">
            <remarks/>
        </member>
        <member name="P:Rock.ServiceObjects.GeoCoder.ZipCodeInfo.Zip">
            <remarks/>
        </member>
        <member name="P:Rock.ServiceObjects.GeoCoder.ZipCodeInfo.CityAlternativeName">
            <remarks/>
        </member>
        <member name="T:Rock.ServiceObjects.GeoCoder.Location_V3">
            <remarks/>
        </member>
        <member name="P:Rock.ServiceObjects.GeoCoder.Location_V3.Error">
            <remarks/>
        </member>
        <member name="P:Rock.ServiceObjects.GeoCoder.Location_V3.Latitude">
            <remarks/>
        </member>
        <member name="P:Rock.ServiceObjects.GeoCoder.Location_V3.Longitude">
            <remarks/>
        </member>
        <member name="P:Rock.ServiceObjects.GeoCoder.Location_V3.Zip">
            <remarks/>
        </member>
        <member name="P:Rock.ServiceObjects.GeoCoder.Location_V3.Tract">
            <remarks/>
        </member>
        <member name="P:Rock.ServiceObjects.GeoCoder.Location_V3.Block">
            <remarks/>
        </member>
        <member name="P:Rock.ServiceObjects.GeoCoder.Location_V3.Level">
            <remarks/>
        </member>
        <member name="P:Rock.ServiceObjects.GeoCoder.Location_V3.LevelDescription">
            <remarks/>
        </member>
        <member name="P:Rock.ServiceObjects.GeoCoder.Location_V3.StateFIPS">
            <remarks/>
        </member>
        <member name="P:Rock.ServiceObjects.GeoCoder.Location_V3.CountyFIPS">
            <remarks/>
        </member>
        <member name="P:Rock.ServiceObjects.GeoCoder.Location_V3.Debug">
            <remarks/>
        </member>
        <member name="T:Rock.Data.IFeed">
            <summary>
            Represents a model that supports generating a feed
            </summary>
        </member>
        <member name="M:Rock.Data.IFeed.ReturnFeed(System.Int32,System.Int32,System.String,System.String@,System.String@)">
            <summary>
            Returns the feed.
            </summary>
            <param name="key">The key.</param>
            <param name="count">The count.</param>
            <param name="format">The format.</param>
            <param name="errorMessage">The error message.</param>
            <param name="contentType">Type of the content.</param>
            <returns></returns>
        </member>
        <member name="T:Rock.Jobs.JobLoadFailedException">
            <summary>
            Job failed to load exception
            </summary>
        </member>
        <member name="M:Rock.Jobs.JobLoadFailedException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Jobs.JobLoadFailedException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="T:Rock.Web.UI.PersonBlock">
            <summary>
            A Block used on the person detail page
            </summary>
        </member>
        <member name="M:Rock.Web.UI.PersonBlock.OnInit(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.Init" /> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs" /> object that contains the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.PersonBlock.OnLoad(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.Load" /> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs" /> object that contains the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.PersonBlock.PersonGroups(System.String)">
            <summary>
            The groups of a particular type that current person belongs to
            </summary>
            <param name="groupTypeGuid">The group type GUID.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.UI.PersonBlock.PersonGroups(System.Guid)">
            <summary>
            The groups of a particular type that current person belongs to
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.UI.PersonBlock.PersonGroups(System.Int32)">
            <summary>
            The groups of a particular type that current person belongs to
            </summary>
            <returns></returns>
        </member>
        <member name="P:Rock.Web.UI.PersonBlock.Person">
            <summary>
            The current person being viewed
            </summary>
        </member>
        <member name="T:Rock.Web.UI.Validation.DataAnnotationValidator">
            <summary>
            Data Annotation Validator for validating based on data attributes
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Validation.DataAnnotationValidator.EvaluateIsValid">
            <summary>
            When overridden in a derived class, this method contains the code to determine whether the value in the input control is valid.
            </summary>
            <returns>
            true if the value in the input control is valid; otherwise, false.
            </returns>
        </member>
        <member name="M:Rock.Web.UI.Validation.DataAnnotationValidator.GetValidatedType">
            <summary>
            Gets the type of the validated.
            </summary>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException">Null SourceTypeName can't be validated</exception>
        </member>
        <member name="M:Rock.Web.UI.Validation.DataAnnotationValidator.GetValidatedProperty">
            <summary>
            Gets the validated property.
            </summary>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="P:Rock.Web.UI.Validation.DataAnnotationValidator.SourceTypeName">
            <summary>
            The type of the source to check
            </summary>
        </member>
        <member name="P:Rock.Web.UI.Validation.DataAnnotationValidator.PropertyName">
            <summary>
            The property that is annotated
            </summary>
        </member>
        <member name="P:Rock.Web.UI.Validation.DataAnnotationValidator.IsRequired">
            <summary>
            Gets a value indicating whether this <see cref="T:Rock.Web.UI.Validation.DataAnnotationValidator"/> is required.
            </summary>
            <value>
              <c>true</c> if required; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Validation.DataAnnotationValidator.ValueMustBeInteger">
            <summary>
            Gets a value indicating whether [value must be integer].
            </summary>
            <value>
              <c>true</c> if [value must be integer]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Validation.DataAnnotationValidator.ValueMaxLength">
            <summary>
            Gets the maxlength of the value.
            </summary>
            <value>
            The length of the value.
            </value>
        </member>
    </members>
</doc>
